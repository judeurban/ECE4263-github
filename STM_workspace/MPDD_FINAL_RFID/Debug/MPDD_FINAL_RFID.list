
MPDD_FINAL_RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002060  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002228  08002228  00012228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002238  08002238  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002238  08002238  00012238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002240  08002240  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002240  08002240  00012240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002244  08002244  00012244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08002254  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08002254  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007215  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013eb  00000000  00000000  00027251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a8  00000000  00000000  00028640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000500  00000000  00000000  00028be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024539  00000000  00000000  000290e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006c7e  00000000  00000000  0004d621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5731  00000000  00000000  0005429f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001399d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001538  00000000  00000000  00139a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002210 	.word	0x08002210

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08002210 	.word	0x08002210

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fa39 	bl	800097a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f806 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f8b2 	bl	8000674 <MX_GPIO_Init>
  MX_ETH_Init();
 8000510:	f000 f86e 	bl	80005f0 <MX_ETH_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000514:	e7fe      	b.n	8000514 <main+0x14>
	...

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	; 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f001 fe6a 	bl	8002200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	4b2a      	ldr	r3, [pc, #168]	; (80005e8 <SystemClock_Config+0xd0>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	4a29      	ldr	r2, [pc, #164]	; (80005e8 <SystemClock_Config+0xd0>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	; 0x40
 8000548:	4b27      	ldr	r3, [pc, #156]	; (80005e8 <SystemClock_Config+0xd0>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <SystemClock_Config+0xd4>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a24      	ldr	r2, [pc, #144]	; (80005ec <SystemClock_Config+0xd4>)
 800055a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd4>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	2310      	movs	r3, #16
 8000576:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057c:	2300      	movs	r3, #0
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000580:	2308      	movs	r3, #8
 8000582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000584:	23d8      	movs	r3, #216	; 0xd8
 8000586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800058c:	2302      	movs	r3, #2
 800058e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0320 	add.w	r3, r7, #32
 8000594:	4618      	mov	r0, r3
 8000596:	f001 f9bd 	bl	8001914 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005a0:	f000 f8a4 	bl	80006ec <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005a4:	f001 f966 	bl	8001874 <HAL_PWREx_EnableOverDrive>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ae:	f000 f89d 	bl	80006ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2302      	movs	r3, #2
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2107      	movs	r1, #7
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 fc43 	bl	8001e5c <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80005dc:	f000 f886 	bl	80006ec <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_ETH_Init+0x78>)
 80005f6:	4a1d      	ldr	r2, [pc, #116]	; (800066c <MX_ETH_Init+0x7c>)
 80005f8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80005fa:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <MX_ETH_Init+0x78>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8000600:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_ETH_Init+0x78>)
 8000602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000606:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_ETH_Init+0x78>)
 800060a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800060e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_ETH_Init+0x78>)
 8000612:	2201      	movs	r2, #1
 8000614:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_ETH_Init+0x80>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_ETH_Init+0x80>)
 800061e:	2280      	movs	r2, #128	; 0x80
 8000620:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_ETH_Init+0x80>)
 8000624:	22e1      	movs	r2, #225	; 0xe1
 8000626:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_ETH_Init+0x80>)
 800062a:	2200      	movs	r2, #0
 800062c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_ETH_Init+0x80>)
 8000630:	2200      	movs	r2, #0
 8000632:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_ETH_Init+0x80>)
 8000636:	2200      	movs	r2, #0
 8000638:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_ETH_Init+0x78>)
 800063c:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <MX_ETH_Init+0x80>)
 800063e:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_ETH_Init+0x78>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_ETH_Init+0x78>)
 8000648:	2200      	movs	r2, #0
 800064a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_MII;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_ETH_Init+0x78>)
 800064e:	2200      	movs	r2, #0
 8000650:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_ETH_Init+0x78>)
 8000654:	f000 faf8 	bl	8000c48 <HAL_ETH_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ETH_Init+0x72>
  {
    Error_Handler();
 800065e:	f000 f845 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000030 	.word	0x20000030
 800066c:	40028000 	.word	0x40028000
 8000670:	20000028 	.word	0x20000028

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_GPIO_Init+0x74>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a1a      	ldr	r2, [pc, #104]	; (80006e8 <MX_GPIO_Init+0x74>)
 8000680:	f043 0310 	orr.w	r3, r3, #16
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_GPIO_Init+0x74>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0310 	and.w	r3, r3, #16
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_GPIO_Init+0x74>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <MX_GPIO_Init+0x74>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_GPIO_Init+0x74>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_GPIO_Init+0x74>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <MX_GPIO_Init+0x74>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_GPIO_Init+0x74>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_GPIO_Init+0x74>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <MX_GPIO_Init+0x74>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_GPIO_Init+0x74>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>
	...

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <HAL_MspInit+0x44>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <HAL_MspInit+0x44>)
 8000704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000708:	6413      	str	r3, [r2, #64]	; 0x40
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <HAL_MspInit+0x44>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <HAL_MspInit+0x44>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071a:	4a08      	ldr	r2, [pc, #32]	; (800073c <HAL_MspInit+0x44>)
 800071c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000720:	6453      	str	r3, [r2, #68]	; 0x44
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_MspInit+0x44>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08e      	sub	sp, #56	; 0x38
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a4e      	ldr	r2, [pc, #312]	; (8000898 <HAL_ETH_MspInit+0x158>)
 800075e:	4293      	cmp	r3, r2
 8000760:	f040 8095 	bne.w	800088e <HAL_ETH_MspInit+0x14e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000764:	4b4d      	ldr	r3, [pc, #308]	; (800089c <HAL_ETH_MspInit+0x15c>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000768:	4a4c      	ldr	r2, [pc, #304]	; (800089c <HAL_ETH_MspInit+0x15c>)
 800076a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800076e:	6313      	str	r3, [r2, #48]	; 0x30
 8000770:	4b4a      	ldr	r3, [pc, #296]	; (800089c <HAL_ETH_MspInit+0x15c>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000778:	623b      	str	r3, [r7, #32]
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	4b47      	ldr	r3, [pc, #284]	; (800089c <HAL_ETH_MspInit+0x15c>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000780:	4a46      	ldr	r2, [pc, #280]	; (800089c <HAL_ETH_MspInit+0x15c>)
 8000782:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000786:	6313      	str	r3, [r2, #48]	; 0x30
 8000788:	4b44      	ldr	r3, [pc, #272]	; (800089c <HAL_ETH_MspInit+0x15c>)
 800078a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000790:	61fb      	str	r3, [r7, #28]
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	4b41      	ldr	r3, [pc, #260]	; (800089c <HAL_ETH_MspInit+0x15c>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000798:	4a40      	ldr	r2, [pc, #256]	; (800089c <HAL_ETH_MspInit+0x15c>)
 800079a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800079e:	6313      	str	r3, [r2, #48]	; 0x30
 80007a0:	4b3e      	ldr	r3, [pc, #248]	; (800089c <HAL_ETH_MspInit+0x15c>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ac:	4b3b      	ldr	r3, [pc, #236]	; (800089c <HAL_ETH_MspInit+0x15c>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	4a3a      	ldr	r2, [pc, #232]	; (800089c <HAL_ETH_MspInit+0x15c>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6313      	str	r3, [r2, #48]	; 0x30
 80007b8:	4b38      	ldr	r3, [pc, #224]	; (800089c <HAL_ETH_MspInit+0x15c>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007bc:	f003 0310 	and.w	r3, r3, #16
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c4:	4b35      	ldr	r3, [pc, #212]	; (800089c <HAL_ETH_MspInit+0x15c>)
 80007c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c8:	4a34      	ldr	r2, [pc, #208]	; (800089c <HAL_ETH_MspInit+0x15c>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	6313      	str	r3, [r2, #48]	; 0x30
 80007d0:	4b32      	ldr	r3, [pc, #200]	; (800089c <HAL_ETH_MspInit+0x15c>)
 80007d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b2f      	ldr	r3, [pc, #188]	; (800089c <HAL_ETH_MspInit+0x15c>)
 80007de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e0:	4a2e      	ldr	r2, [pc, #184]	; (800089c <HAL_ETH_MspInit+0x15c>)
 80007e2:	f043 0301 	orr.w	r3, r3, #1
 80007e6:	6313      	str	r3, [r2, #48]	; 0x30
 80007e8:	4b2c      	ldr	r3, [pc, #176]	; (800089c <HAL_ETH_MspInit+0x15c>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f4:	4b29      	ldr	r3, [pc, #164]	; (800089c <HAL_ETH_MspInit+0x15c>)
 80007f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f8:	4a28      	ldr	r2, [pc, #160]	; (800089c <HAL_ETH_MspInit+0x15c>)
 80007fa:	f043 0302 	orr.w	r3, r3, #2
 80007fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000800:	4b26      	ldr	r3, [pc, #152]	; (800089c <HAL_ETH_MspInit+0x15c>)
 8000802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000804:	f003 0302 	and.w	r3, r3, #2
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> ETH_RXD3
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800080c:	2304      	movs	r3, #4
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800081c:	230b      	movs	r3, #11
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000824:	4619      	mov	r1, r3
 8000826:	481e      	ldr	r0, [pc, #120]	; (80008a0 <HAL_ETH_MspInit+0x160>)
 8000828:	f000 fe78 	bl	800151c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800082c:	233e      	movs	r3, #62	; 0x3e
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000838:	2303      	movs	r3, #3
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800083c:	230b      	movs	r3, #11
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000844:	4619      	mov	r1, r3
 8000846:	4817      	ldr	r0, [pc, #92]	; (80008a4 <HAL_ETH_MspInit+0x164>)
 8000848:	f000 fe68 	bl	800151c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800084c:	238f      	movs	r3, #143	; 0x8f
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800085c:	230b      	movs	r3, #11
 800085e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000864:	4619      	mov	r1, r3
 8000866:	4810      	ldr	r0, [pc, #64]	; (80008a8 <HAL_ETH_MspInit+0x168>)
 8000868:	f000 fe58 	bl	800151c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 800086c:	f643 0303 	movw	r3, #14339	; 0x3803
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800087e:	230b      	movs	r3, #11
 8000880:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000886:	4619      	mov	r1, r3
 8000888:	4808      	ldr	r0, [pc, #32]	; (80008ac <HAL_ETH_MspInit+0x16c>)
 800088a:	f000 fe47 	bl	800151c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800088e:	bf00      	nop
 8000890:	3738      	adds	r7, #56	; 0x38
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40028000 	.word	0x40028000
 800089c:	40023800 	.word	0x40023800
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40020400 	.word	0x40020400

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <NMI_Handler+0x4>

080008b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <MemManage_Handler+0x4>

080008c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <UsageFault_Handler+0x4>

080008ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fc:	f000 f87a 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <SystemInit+0x20>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <SystemInit+0x20>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000960 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800092e:	490e      	ldr	r1, [pc, #56]	; (8000968 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000930:	4a0e      	ldr	r2, [pc, #56]	; (800096c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000944:	4c0b      	ldr	r4, [pc, #44]	; (8000974 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000952:	f7ff ffd7 	bl	8000904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000956:	f001 fc2f 	bl	80021b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095a:	f7ff fdd1 	bl	8000500 <main>
  bx  lr    
 800095e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000960:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800096c:	08002248 	.word	0x08002248
  ldr r2, =_sbss
 8000970:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000974:	2000007c 	.word	0x2000007c

08000978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC_IRQHandler>

0800097a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800097e:	2003      	movs	r0, #3
 8000980:	f000 f92e 	bl	8000be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000984:	200f      	movs	r0, #15
 8000986:	f000 f805 	bl	8000994 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800098a:	f7ff feb5 	bl	80006f8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800098e:	2300      	movs	r3, #0
}
 8000990:	4618      	mov	r0, r3
 8000992:	bd80      	pop	{r7, pc}

08000994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_InitTick+0x54>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_InitTick+0x58>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f93b 	bl	8000c2e <HAL_SYSTICK_Config>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e00e      	b.n	80009e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d80a      	bhi.n	80009de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f000 f911 	bl	8000bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <HAL_InitTick+0x5c>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000004 	.word	0x20000004

080009f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_IncTick+0x20>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_IncTick+0x24>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <HAL_IncTick+0x24>)
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000078 	.word	0x20000078

08000a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_GetTick+0x14>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000078 	.word	0x20000078

08000a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a3c:	f7ff ffee 	bl	8000a1c <HAL_GetTick>
 8000a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4c:	d005      	beq.n	8000a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_Delay+0x44>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5a:	bf00      	nop
 8000a5c:	f7ff ffde 	bl	8000a1c <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d8f7      	bhi.n	8000a5c <HAL_Delay+0x28>
  {
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <__NVIC_SetPriorityGrouping+0x40>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <__NVIC_SetPriorityGrouping+0x40>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00
 8000ac0:	05fa0000 	.word	0x05fa0000

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	; (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	; (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	; 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bac:	d301      	bcc.n	8000bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00f      	b.n	8000bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <SysTick_Config+0x40>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bba:	210f      	movs	r1, #15
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f7ff ff8e 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <SysTick_Config+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <SysTick_Config+0x40>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	e000e010 	.word	0xe000e010

08000be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff47 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c08:	f7ff ff5c 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f7ff ff8e 	bl	8000b34 <NVIC_EncodePriority>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff5d 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ffb0 	bl	8000b9c <SysTick_Config>
 8000c3c:	4603      	mov	r3, r0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000c58:	4ba9      	ldr	r3, [pc, #676]	; (8000f00 <HAL_ETH_Init+0x2b8>)
 8000c5a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000c60:	2300      	movs	r3, #0
 8000c62:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e181      	b.n	8000f72 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d106      	bne.n	8000c88 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff fd5c 	bl	8000740 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c88:	4b9e      	ldr	r3, [pc, #632]	; (8000f04 <HAL_ETH_Init+0x2bc>)
 8000c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8c:	4a9d      	ldr	r2, [pc, #628]	; (8000f04 <HAL_ETH_Init+0x2bc>)
 8000c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c92:	6453      	str	r3, [r2, #68]	; 0x44
 8000c94:	4b9b      	ldr	r3, [pc, #620]	; (8000f04 <HAL_ETH_Init+0x2bc>)
 8000c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000ca0:	4b99      	ldr	r3, [pc, #612]	; (8000f08 <HAL_ETH_Init+0x2c0>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	4a98      	ldr	r2, [pc, #608]	; (8000f08 <HAL_ETH_Init+0x2c0>)
 8000ca6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000caa:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000cac:	4b96      	ldr	r3, [pc, #600]	; (8000f08 <HAL_ETH_Init+0x2c0>)
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6a1b      	ldr	r3, [r3, #32]
 8000cb4:	4994      	ldr	r1, [pc, #592]	; (8000f08 <HAL_ETH_Init+0x2c0>)
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f042 0201 	orr.w	r2, r2, #1
 8000ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cd0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000cd2:	f7ff fea3 	bl	8000a1c <HAL_GetTick>
 8000cd6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000cd8:	e011      	b.n	8000cfe <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000cda:	f7ff fe9f 	bl	8000a1c <HAL_GetTick>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ce8:	d909      	bls.n	8000cfe <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2203      	movs	r2, #3
 8000cee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e139      	b.n	8000f72 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1e4      	bne.n	8000cda <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f023 031c 	bic.w	r3, r3, #28
 8000d1e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000d20:	f001 fa3e 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 8000d24:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	4a78      	ldr	r2, [pc, #480]	; (8000f0c <HAL_ETH_Init+0x2c4>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d908      	bls.n	8000d40 <HAL_ETH_Init+0xf8>
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	4a77      	ldr	r2, [pc, #476]	; (8000f10 <HAL_ETH_Init+0x2c8>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d804      	bhi.n	8000d40 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	61fb      	str	r3, [r7, #28]
 8000d3e:	e027      	b.n	8000d90 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	4a73      	ldr	r2, [pc, #460]	; (8000f10 <HAL_ETH_Init+0x2c8>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d908      	bls.n	8000d5a <HAL_ETH_Init+0x112>
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	4a6d      	ldr	r2, [pc, #436]	; (8000f00 <HAL_ETH_Init+0x2b8>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d204      	bcs.n	8000d5a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f043 030c 	orr.w	r3, r3, #12
 8000d56:	61fb      	str	r3, [r7, #28]
 8000d58:	e01a      	b.n	8000d90 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	4a68      	ldr	r2, [pc, #416]	; (8000f00 <HAL_ETH_Init+0x2b8>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d303      	bcc.n	8000d6a <HAL_ETH_Init+0x122>
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	4a6b      	ldr	r2, [pc, #428]	; (8000f14 <HAL_ETH_Init+0x2cc>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d911      	bls.n	8000d8e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	4a69      	ldr	r2, [pc, #420]	; (8000f14 <HAL_ETH_Init+0x2cc>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d908      	bls.n	8000d84 <HAL_ETH_Init+0x13c>
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	4a68      	ldr	r2, [pc, #416]	; (8000f18 <HAL_ETH_Init+0x2d0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d804      	bhi.n	8000d84 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	61fb      	str	r3, [r7, #28]
 8000d82:	e005      	b.n	8000d90 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f043 0310 	orr.w	r3, r3, #16
 8000d8a:	61fb      	str	r3, [r7, #28]
 8000d8c:	e000      	b.n	8000d90 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000d8e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	69fa      	ldr	r2, [r7, #28]
 8000d96:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000d98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f000 f954 	bl	800104c <HAL_ETH_WritePHYRegister>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d00b      	beq.n	8000dc2 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000dae:	6939      	ldr	r1, [r7, #16]
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f000 f9b1 	bl	8001118 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2201      	movs	r2, #1
 8000dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e0d7      	b.n	8000f72 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000dc2:	20ff      	movs	r0, #255	; 0xff
 8000dc4:	f7ff fe36 	bl	8000a34 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f000 80a5 	beq.w	8000f1c <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000dd2:	f7ff fe23 	bl	8000a1c <HAL_GetTick>
 8000dd6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	461a      	mov	r2, r3
 8000dde:	2101      	movs	r1, #1
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f8cb 	bl	8000f7c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000de6:	f7ff fe19 	bl	8000a1c <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d90f      	bls.n	8000e18 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000dfc:	6939      	ldr	r1, [r7, #16]
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 f98a 	bl	8001118 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2201      	movs	r2, #1
 8000e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e0ac      	b.n	8000f72 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0da      	beq.n	8000dd8 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000e22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e26:	2100      	movs	r1, #0
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f000 f90f 	bl	800104c <HAL_ETH_WritePHYRegister>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d00b      	beq.n	8000e4c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000e38:	6939      	ldr	r1, [r7, #16]
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f000 f96c 	bl	8001118 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2201      	movs	r2, #1
 8000e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e092      	b.n	8000f72 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000e4c:	f7ff fde6 	bl	8000a1c <HAL_GetTick>
 8000e50:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	461a      	mov	r2, r3
 8000e58:	2101      	movs	r1, #1
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 f88e 	bl	8000f7c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000e60:	f7ff fddc 	bl	8000a1c <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d90f      	bls.n	8000e92 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000e76:	6939      	ldr	r1, [r7, #16]
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f000 f94d 	bl	8001118 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2201      	movs	r2, #1
 8000e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e06f      	b.n	8000f72 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f003 0320 	and.w	r3, r3, #32
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d0da      	beq.n	8000e52 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 f869 	bl	8000f7c <HAL_ETH_ReadPHYRegister>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00b      	beq.n	8000ec8 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000eb4:	6939      	ldr	r1, [r7, #16]
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f000 f92e 	bl	8001118 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e054      	b.n	8000f72 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d004      	beq.n	8000edc <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	e002      	b.n	8000ee2 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	e035      	b.n	8000f60 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	e030      	b.n	8000f60 <HAL_ETH_Init+0x318>
 8000efe:	bf00      	nop
 8000f00:	03938700 	.word	0x03938700
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40013800 	.word	0x40013800
 8000f0c:	01312cff 	.word	0x01312cff
 8000f10:	02160ebf 	.word	0x02160ebf
 8000f14:	05f5e0ff 	.word	0x05f5e0ff
 8000f18:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	08db      	lsrs	r3, r3, #3
 8000f22:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	085b      	lsrs	r3, r3, #1
 8000f2a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	461a      	mov	r2, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 f889 	bl	800104c <HAL_ETH_WritePHYRegister>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00b      	beq.n	8000f58 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000f44:	6939      	ldr	r1, [r7, #16]
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f8e6 	bl	8001118 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e00c      	b.n	8000f72 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000f58:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000f5c:	f7ff fd6a 	bl	8000a34 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000f60:	6939      	ldr	r1, [r7, #16]
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 f8d8 	bl	8001118 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3720      	adds	r7, #32
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop

08000f7c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	460b      	mov	r3, r1
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b82      	cmp	r3, #130	; 0x82
 8000f9c:	d101      	bne.n	8000fa2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e050      	b.n	8001044 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2282      	movs	r2, #130	; 0x82
 8000fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	f003 031c 	and.w	r3, r3, #28
 8000fb8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	8a1b      	ldrh	r3, [r3, #16]
 8000fbe:	02db      	lsls	r3, r3, #11
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000fc8:	897b      	ldrh	r3, [r7, #10]
 8000fca:	019b      	lsls	r3, r3, #6
 8000fcc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f023 0302 	bic.w	r3, r3, #2
 8000fdc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000fee:	f7ff fd15 	bl	8000a1c <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000ff4:	e015      	b.n	8001022 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000ff6:	f7ff fd11 	bl	8000a1c <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001004:	d309      	bcc.n	800101a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e014      	b.n	8001044 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1e4      	bne.n	8000ff6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	b29b      	uxth	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2201      	movs	r2, #1
 800103e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	460b      	mov	r3, r1
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b42      	cmp	r3, #66	; 0x42
 800106c:	d101      	bne.n	8001072 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800106e:	2302      	movs	r3, #2
 8001070:	e04e      	b.n	8001110 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2242      	movs	r2, #66	; 0x42
 8001076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f003 031c 	and.w	r3, r3, #28
 8001088:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	8a1b      	ldrh	r3, [r3, #16]
 800108e:	02db      	lsls	r3, r3, #11
 8001090:	b29b      	uxth	r3, r3
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	4313      	orrs	r3, r2
 8001096:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001098:	897b      	ldrh	r3, [r7, #10]
 800109a:	019b      	lsls	r3, r3, #6
 800109c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80010c8:	f7ff fca8 	bl	8000a1c <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80010ce:	e015      	b.n	80010fc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80010d0:	f7ff fca4 	bl	8000a1c <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010de:	d309      	bcc.n	80010f4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e00d      	b.n	8001110 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1e4      	bne.n	80010d0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2201      	movs	r2, #1
 800110a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b0b0      	sub	sp, #192	; 0xc0
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d007      	beq.n	800113e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001134:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800113c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001146:	2300      	movs	r3, #0
 8001148:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d103      	bne.n	8001166 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800115e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001162:	663b      	str	r3, [r7, #96]	; 0x60
 8001164:	e001      	b.n	800116a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800116a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800116e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001174:	2300      	movs	r3, #0
 8001176:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001184:	2340      	movs	r3, #64	; 0x40
 8001186:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80011dc:	2300      	movs	r3, #0
 80011de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80011ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80011f0:	4bab      	ldr	r3, [pc, #684]	; (80014a0 <ETH_MACDMAConfig+0x388>)
 80011f2:	4013      	ands	r3, r2
 80011f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80011f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80011fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80011fc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80011fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001200:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001204:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800120a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800120c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800120e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001212:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001218:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800121a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800121c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800121e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001220:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001222:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001224:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001228:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800122a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800122c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800122e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001232:	4313      	orrs	r3, r2
 8001234:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001240:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800124c:	2001      	movs	r0, #1
 800124e:	f7ff fbf1 	bl	8000a34 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800125a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800125c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800125e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001260:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001262:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001264:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001266:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800126a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800126c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001270:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001272:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001276:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001278:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800127c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001280:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001288:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800128a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001296:	2001      	movs	r0, #1
 8001298:	f7ff fbcc 	bl	8000a34 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80012a4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80012ae:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80012b8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80012c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80012c8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80012cc:	4013      	ands	r3, r2
 80012ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80012d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80012d6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80012d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80012dc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80012de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80012e2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80012e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80012e8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80012ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80012ee:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80012f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80012f4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80012f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80012fa:	4313      	orrs	r3, r2
 80012fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001308:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001314:	2001      	movs	r0, #1
 8001316:	f7ff fb8d 	bl	8000a34 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001322:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001324:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001328:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800133e:	2001      	movs	r0, #1
 8001340:	f7ff fb78 	bl	8000a34 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800134c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001356:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800135c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001360:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001372:	2304      	movs	r3, #4
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800137c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001380:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001382:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001392:	2300      	movs	r3, #0
 8001394:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001396:	2300      	movs	r3, #0
 8001398:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	f241 0318 	movw	r3, #4120	; 0x1018
 80013a2:	4413      	add	r3, r2
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80013aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013ae:	4b3d      	ldr	r3, [pc, #244]	; (80014a4 <ETH_MACDMAConfig+0x38c>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80013b6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80013b8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80013ba:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80013bc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80013be:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80013c0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80013c2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80013c4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80013c6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80013c8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80013ca:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80013cc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80013ce:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80013d2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80013d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80013d6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80013d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013dc:	4313      	orrs	r3, r2
 80013de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	f241 0318 	movw	r3, #4120	; 0x1018
 80013ea:	4413      	add	r3, r2
 80013ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013f0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	f241 0318 	movw	r3, #4120	; 0x1018
 80013fa:	4413      	add	r3, r2
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001402:	2001      	movs	r0, #1
 8001404:	f7ff fb16 	bl	8000a34 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001410:	4413      	add	r3, r2
 8001412:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001416:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800141a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800141c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800141e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001420:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001424:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001428:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800142a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800142c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800142e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001432:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800143c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001440:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001450:	2001      	movs	r0, #1
 8001452:	f7ff faef 	bl	8000a34 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800145e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001462:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d10d      	bne.n	8001488 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	f241 031c 	movw	r3, #4124	; 0x101c
 8001474:	4413      	add	r3, r2
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6811      	ldr	r1, [r2, #0]
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <ETH_MACDMAConfig+0x390>)
 800147e:	431a      	orrs	r2, r3
 8001480:	f241 031c 	movw	r3, #4124	; 0x101c
 8001484:	440b      	add	r3, r1
 8001486:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	461a      	mov	r2, r3
 800148e:	2100      	movs	r1, #0
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 f80b 	bl	80014ac <ETH_MACAddressConfig>
}
 8001496:	bf00      	nop
 8001498:	37c0      	adds	r7, #192	; 0xc0
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	ff20810f 	.word	0xff20810f
 80014a4:	f8de3f23 	.word	0xf8de3f23
 80014a8:	00010040 	.word	0x00010040

080014ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3305      	adds	r3, #5
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	3204      	adds	r2, #4
 80014c4:	7812      	ldrb	r2, [r2, #0]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <ETH_MACAddressConfig+0x68>)
 80014ce:	4413      	add	r3, r2
 80014d0:	461a      	mov	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3303      	adds	r3, #3
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	061a      	lsls	r2, r3, #24
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3302      	adds	r3, #2
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3301      	adds	r3, #1
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	7812      	ldrb	r2, [r2, #0]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <ETH_MACAddressConfig+0x6c>)
 80014fe:	4413      	add	r3, r2
 8001500:	461a      	mov	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	6013      	str	r3, [r2, #0]
}
 8001506:	bf00      	nop
 8001508:	371c      	adds	r7, #28
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40028040 	.word	0x40028040
 8001518:	40028044 	.word	0x40028044

0800151c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	; 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	e175      	b.n	8001828 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800153c:	2201      	movs	r2, #1
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	429a      	cmp	r2, r3
 8001556:	f040 8164 	bne.w	8001822 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d00b      	beq.n	800157a <HAL_GPIO_Init+0x5e>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d007      	beq.n	800157a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800156e:	2b11      	cmp	r3, #17
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b12      	cmp	r3, #18
 8001578:	d130      	bne.n	80015dc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	2203      	movs	r2, #3
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b0:	2201      	movs	r2, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 0201 	and.w	r2, r3, #1
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x100>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b12      	cmp	r3, #18
 800161a:	d123      	bne.n	8001664 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	08da      	lsrs	r2, r3, #3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3208      	adds	r2, #8
 8001624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	220f      	movs	r2, #15
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	08da      	lsrs	r2, r3, #3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3208      	adds	r2, #8
 800165e:	69b9      	ldr	r1, [r7, #24]
 8001660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	2203      	movs	r2, #3
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0203 	and.w	r2, r3, #3
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80be 	beq.w	8001822 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	4b66      	ldr	r3, [pc, #408]	; (8001840 <HAL_GPIO_Init+0x324>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	4a65      	ldr	r2, [pc, #404]	; (8001840 <HAL_GPIO_Init+0x324>)
 80016ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b0:	6453      	str	r3, [r2, #68]	; 0x44
 80016b2:	4b63      	ldr	r3, [pc, #396]	; (8001840 <HAL_GPIO_Init+0x324>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80016be:	4a61      	ldr	r2, [pc, #388]	; (8001844 <HAL_GPIO_Init+0x328>)
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	089b      	lsrs	r3, r3, #2
 80016c4:	3302      	adds	r3, #2
 80016c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	220f      	movs	r2, #15
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a58      	ldr	r2, [pc, #352]	; (8001848 <HAL_GPIO_Init+0x32c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d037      	beq.n	800175a <HAL_GPIO_Init+0x23e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a57      	ldr	r2, [pc, #348]	; (800184c <HAL_GPIO_Init+0x330>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d031      	beq.n	8001756 <HAL_GPIO_Init+0x23a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a56      	ldr	r2, [pc, #344]	; (8001850 <HAL_GPIO_Init+0x334>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d02b      	beq.n	8001752 <HAL_GPIO_Init+0x236>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a55      	ldr	r2, [pc, #340]	; (8001854 <HAL_GPIO_Init+0x338>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d025      	beq.n	800174e <HAL_GPIO_Init+0x232>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a54      	ldr	r2, [pc, #336]	; (8001858 <HAL_GPIO_Init+0x33c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d01f      	beq.n	800174a <HAL_GPIO_Init+0x22e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a53      	ldr	r2, [pc, #332]	; (800185c <HAL_GPIO_Init+0x340>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d019      	beq.n	8001746 <HAL_GPIO_Init+0x22a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a52      	ldr	r2, [pc, #328]	; (8001860 <HAL_GPIO_Init+0x344>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_GPIO_Init+0x226>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a51      	ldr	r2, [pc, #324]	; (8001864 <HAL_GPIO_Init+0x348>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00d      	beq.n	800173e <HAL_GPIO_Init+0x222>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a50      	ldr	r2, [pc, #320]	; (8001868 <HAL_GPIO_Init+0x34c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d007      	beq.n	800173a <HAL_GPIO_Init+0x21e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4f      	ldr	r2, [pc, #316]	; (800186c <HAL_GPIO_Init+0x350>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d101      	bne.n	8001736 <HAL_GPIO_Init+0x21a>
 8001732:	2309      	movs	r3, #9
 8001734:	e012      	b.n	800175c <HAL_GPIO_Init+0x240>
 8001736:	230a      	movs	r3, #10
 8001738:	e010      	b.n	800175c <HAL_GPIO_Init+0x240>
 800173a:	2308      	movs	r3, #8
 800173c:	e00e      	b.n	800175c <HAL_GPIO_Init+0x240>
 800173e:	2307      	movs	r3, #7
 8001740:	e00c      	b.n	800175c <HAL_GPIO_Init+0x240>
 8001742:	2306      	movs	r3, #6
 8001744:	e00a      	b.n	800175c <HAL_GPIO_Init+0x240>
 8001746:	2305      	movs	r3, #5
 8001748:	e008      	b.n	800175c <HAL_GPIO_Init+0x240>
 800174a:	2304      	movs	r3, #4
 800174c:	e006      	b.n	800175c <HAL_GPIO_Init+0x240>
 800174e:	2303      	movs	r3, #3
 8001750:	e004      	b.n	800175c <HAL_GPIO_Init+0x240>
 8001752:	2302      	movs	r3, #2
 8001754:	e002      	b.n	800175c <HAL_GPIO_Init+0x240>
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <HAL_GPIO_Init+0x240>
 800175a:	2300      	movs	r3, #0
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	f002 0203 	and.w	r2, r2, #3
 8001762:	0092      	lsls	r2, r2, #2
 8001764:	4093      	lsls	r3, r2
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800176c:	4935      	ldr	r1, [pc, #212]	; (8001844 <HAL_GPIO_Init+0x328>)
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	089b      	lsrs	r3, r3, #2
 8001772:	3302      	adds	r3, #2
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800177a:	4b3d      	ldr	r3, [pc, #244]	; (8001870 <HAL_GPIO_Init+0x354>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800179e:	4a34      	ldr	r2, [pc, #208]	; (8001870 <HAL_GPIO_Init+0x354>)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017a4:	4b32      	ldr	r3, [pc, #200]	; (8001870 <HAL_GPIO_Init+0x354>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017c8:	4a29      	ldr	r2, [pc, #164]	; (8001870 <HAL_GPIO_Init+0x354>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ce:	4b28      	ldr	r3, [pc, #160]	; (8001870 <HAL_GPIO_Init+0x354>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017f2:	4a1f      	ldr	r2, [pc, #124]	; (8001870 <HAL_GPIO_Init+0x354>)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <HAL_GPIO_Init+0x354>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800181c:	4a14      	ldr	r2, [pc, #80]	; (8001870 <HAL_GPIO_Init+0x354>)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3301      	adds	r3, #1
 8001826:	61fb      	str	r3, [r7, #28]
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	2b0f      	cmp	r3, #15
 800182c:	f67f ae86 	bls.w	800153c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40013800 	.word	0x40013800
 8001848:	40020000 	.word	0x40020000
 800184c:	40020400 	.word	0x40020400
 8001850:	40020800 	.word	0x40020800
 8001854:	40020c00 	.word	0x40020c00
 8001858:	40021000 	.word	0x40021000
 800185c:	40021400 	.word	0x40021400
 8001860:	40021800 	.word	0x40021800
 8001864:	40021c00 	.word	0x40021c00
 8001868:	40022000 	.word	0x40022000
 800186c:	40022400 	.word	0x40022400
 8001870:	40013c00 	.word	0x40013c00

08001874 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4b23      	ldr	r3, [pc, #140]	; (800190c <HAL_PWREx_EnableOverDrive+0x98>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	4a22      	ldr	r2, [pc, #136]	; (800190c <HAL_PWREx_EnableOverDrive+0x98>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001888:	6413      	str	r3, [r2, #64]	; 0x40
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_PWREx_EnableOverDrive+0x98>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001896:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a1d      	ldr	r2, [pc, #116]	; (8001910 <HAL_PWREx_EnableOverDrive+0x9c>)
 800189c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018a2:	f7ff f8bb 	bl	8000a1c <HAL_GetTick>
 80018a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018a8:	e009      	b.n	80018be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018aa:	f7ff f8b7 	bl	8000a1c <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018b8:	d901      	bls.n	80018be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e022      	b.n	8001904 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ca:	d1ee      	bne.n	80018aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d8:	f7ff f8a0 	bl	8000a1c <HAL_GetTick>
 80018dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80018de:	e009      	b.n	80018f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018e0:	f7ff f89c 	bl	8000a1c <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018ee:	d901      	bls.n	80018f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e007      	b.n	8001904 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001900:	d1ee      	bne.n	80018e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800
 8001910:	40007000 	.word	0x40007000

08001914 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e291      	b.n	8001e4e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8087 	beq.w	8001a46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001938:	4b96      	ldr	r3, [pc, #600]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b04      	cmp	r3, #4
 8001942:	d00c      	beq.n	800195e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001944:	4b93      	ldr	r3, [pc, #588]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	2b08      	cmp	r3, #8
 800194e:	d112      	bne.n	8001976 <HAL_RCC_OscConfig+0x62>
 8001950:	4b90      	ldr	r3, [pc, #576]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800195c:	d10b      	bne.n	8001976 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195e:	4b8d      	ldr	r3, [pc, #564]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d06c      	beq.n	8001a44 <HAL_RCC_OscConfig+0x130>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d168      	bne.n	8001a44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e26b      	b.n	8001e4e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x7a>
 8001980:	4b84      	ldr	r3, [pc, #528]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a83      	ldr	r2, [pc, #524]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	e02e      	b.n	80019ec <HAL_RCC_OscConfig+0xd8>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x9c>
 8001996:	4b7f      	ldr	r3, [pc, #508]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a7e      	ldr	r2, [pc, #504]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 800199c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	4b7c      	ldr	r3, [pc, #496]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a7b      	ldr	r2, [pc, #492]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 80019a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	e01d      	b.n	80019ec <HAL_RCC_OscConfig+0xd8>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b8:	d10c      	bne.n	80019d4 <HAL_RCC_OscConfig+0xc0>
 80019ba:	4b76      	ldr	r3, [pc, #472]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a75      	ldr	r2, [pc, #468]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 80019c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	4b73      	ldr	r3, [pc, #460]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a72      	ldr	r2, [pc, #456]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 80019cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e00b      	b.n	80019ec <HAL_RCC_OscConfig+0xd8>
 80019d4:	4b6f      	ldr	r3, [pc, #444]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a6e      	ldr	r2, [pc, #440]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 80019da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b6c      	ldr	r3, [pc, #432]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a6b      	ldr	r2, [pc, #428]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 80019e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d013      	beq.n	8001a1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff f812 	bl	8000a1c <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff f80e 	bl	8000a1c <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	; 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e21f      	b.n	8001e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	4b61      	ldr	r3, [pc, #388]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0xe8>
 8001a1a:	e014      	b.n	8001a46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7fe fffe 	bl	8000a1c <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a24:	f7fe fffa 	bl	8000a1c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	; 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e20b      	b.n	8001e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a36:	4b57      	ldr	r3, [pc, #348]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x110>
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d069      	beq.n	8001b26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a52:	4b50      	ldr	r3, [pc, #320]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00b      	beq.n	8001a76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a5e:	4b4d      	ldr	r3, [pc, #308]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d11c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x190>
 8001a6a:	4b4a      	ldr	r3, [pc, #296]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d116      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a76:	4b47      	ldr	r3, [pc, #284]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d005      	beq.n	8001a8e <HAL_RCC_OscConfig+0x17a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d001      	beq.n	8001a8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e1df      	b.n	8001e4e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8e:	4b41      	ldr	r3, [pc, #260]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	493d      	ldr	r1, [pc, #244]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	e040      	b.n	8001b26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d023      	beq.n	8001af4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aac:	4b39      	ldr	r3, [pc, #228]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a38      	ldr	r2, [pc, #224]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7fe ffb0 	bl	8000a1c <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac0:	f7fe ffac 	bl	8000a1c <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e1bd      	b.n	8001e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad2:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ade:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4929      	ldr	r1, [pc, #164]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
 8001af2:	e018      	b.n	8001b26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001af4:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a26      	ldr	r2, [pc, #152]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7fe ff8c 	bl	8000a1c <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b08:	f7fe ff88 	bl	8000a1c <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e199      	b.n	8001e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d038      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d019      	beq.n	8001b6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b3a:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b3e:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b46:	f7fe ff69 	bl	8000a1c <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4e:	f7fe ff65 	bl	8000a1c <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e176      	b.n	8001e4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x23a>
 8001b6c:	e01a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b72:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <HAL_RCC_OscConfig+0x280>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7a:	f7fe ff4f 	bl	8000a1c <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b82:	f7fe ff4b 	bl	8000a1c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d903      	bls.n	8001b98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e15c      	b.n	8001e4e <HAL_RCC_OscConfig+0x53a>
 8001b94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b98:	4b91      	ldr	r3, [pc, #580]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1ee      	bne.n	8001b82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80a4 	beq.w	8001cfa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb2:	4b8b      	ldr	r3, [pc, #556]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10d      	bne.n	8001bda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	4b88      	ldr	r3, [pc, #544]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a87      	ldr	r2, [pc, #540]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b85      	ldr	r3, [pc, #532]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bda:	4b82      	ldr	r3, [pc, #520]	; (8001de4 <HAL_RCC_OscConfig+0x4d0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d118      	bne.n	8001c18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001be6:	4b7f      	ldr	r3, [pc, #508]	; (8001de4 <HAL_RCC_OscConfig+0x4d0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a7e      	ldr	r2, [pc, #504]	; (8001de4 <HAL_RCC_OscConfig+0x4d0>)
 8001bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf2:	f7fe ff13 	bl	8000a1c <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfa:	f7fe ff0f 	bl	8000a1c <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b64      	cmp	r3, #100	; 0x64
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e120      	b.n	8001e4e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c0c:	4b75      	ldr	r3, [pc, #468]	; (8001de4 <HAL_RCC_OscConfig+0x4d0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d106      	bne.n	8001c2e <HAL_RCC_OscConfig+0x31a>
 8001c20:	4b6f      	ldr	r3, [pc, #444]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c24:	4a6e      	ldr	r2, [pc, #440]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c2c:	e02d      	b.n	8001c8a <HAL_RCC_OscConfig+0x376>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x33c>
 8001c36:	4b6a      	ldr	r3, [pc, #424]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3a:	4a69      	ldr	r2, [pc, #420]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001c3c:	f023 0301 	bic.w	r3, r3, #1
 8001c40:	6713      	str	r3, [r2, #112]	; 0x70
 8001c42:	4b67      	ldr	r3, [pc, #412]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c46:	4a66      	ldr	r2, [pc, #408]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001c48:	f023 0304 	bic.w	r3, r3, #4
 8001c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4e:	e01c      	b.n	8001c8a <HAL_RCC_OscConfig+0x376>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b05      	cmp	r3, #5
 8001c56:	d10c      	bne.n	8001c72 <HAL_RCC_OscConfig+0x35e>
 8001c58:	4b61      	ldr	r3, [pc, #388]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5c:	4a60      	ldr	r2, [pc, #384]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001c5e:	f043 0304 	orr.w	r3, r3, #4
 8001c62:	6713      	str	r3, [r2, #112]	; 0x70
 8001c64:	4b5e      	ldr	r3, [pc, #376]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c68:	4a5d      	ldr	r2, [pc, #372]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c70:	e00b      	b.n	8001c8a <HAL_RCC_OscConfig+0x376>
 8001c72:	4b5b      	ldr	r3, [pc, #364]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c76:	4a5a      	ldr	r2, [pc, #360]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001c78:	f023 0301 	bic.w	r3, r3, #1
 8001c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7e:	4b58      	ldr	r3, [pc, #352]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	4a57      	ldr	r2, [pc, #348]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001c84:	f023 0304 	bic.w	r3, r3, #4
 8001c88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d015      	beq.n	8001cbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c92:	f7fe fec3 	bl	8000a1c <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c98:	e00a      	b.n	8001cb0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9a:	f7fe febf 	bl	8000a1c <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e0ce      	b.n	8001e4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb0:	4b4b      	ldr	r3, [pc, #300]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0ee      	beq.n	8001c9a <HAL_RCC_OscConfig+0x386>
 8001cbc:	e014      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbe:	f7fe fead 	bl	8000a1c <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc4:	e00a      	b.n	8001cdc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f7fe fea9 	bl	8000a1c <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e0b8      	b.n	8001e4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cdc:	4b40      	ldr	r3, [pc, #256]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1ee      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d105      	bne.n	8001cfa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cee:	4b3c      	ldr	r3, [pc, #240]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a3b      	ldr	r2, [pc, #236]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80a4 	beq.w	8001e4c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d04:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 030c 	and.w	r3, r3, #12
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d06b      	beq.n	8001de8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d149      	bne.n	8001dac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d18:	4b31      	ldr	r3, [pc, #196]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a30      	ldr	r2, [pc, #192]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7fe fe7a 	bl	8000a1c <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2c:	f7fe fe76 	bl	8000a1c <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e087      	b.n	8001e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3e:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69da      	ldr	r2, [r3, #28]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	019b      	lsls	r3, r3, #6
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	085b      	lsrs	r3, r3, #1
 8001d62:	3b01      	subs	r3, #1
 8001d64:	041b      	lsls	r3, r3, #16
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	4a1b      	ldr	r2, [pc, #108]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001d72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d76:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a18      	ldr	r2, [pc, #96]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7fe fe4a 	bl	8000a1c <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7fe fe46 	bl	8000a1c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e057      	b.n	8001e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x478>
 8001daa:	e04f      	b.n	8001e4c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7fe fe30 	bl	8000a1c <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7fe fe2c 	bl	8000a1c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e03d      	b.n	8001e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd2:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4ac>
 8001dde:	e035      	b.n	8001e4c <HAL_RCC_OscConfig+0x538>
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <HAL_RCC_OscConfig+0x544>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d028      	beq.n	8001e48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d121      	bne.n	8001e48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d11a      	bne.n	8001e48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e18:	4013      	ands	r3, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d111      	bne.n	8001e48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	085b      	lsrs	r3, r3, #1
 8001e30:	3b01      	subs	r3, #1
 8001e32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d107      	bne.n	8001e48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800

08001e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0d0      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e74:	4b6a      	ldr	r3, [pc, #424]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 030f 	and.w	r3, r3, #15
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d910      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b67      	ldr	r3, [pc, #412]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 020f 	bic.w	r2, r3, #15
 8001e8a:	4965      	ldr	r1, [pc, #404]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b63      	ldr	r3, [pc, #396]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0b8      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d020      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ebc:	4b59      	ldr	r3, [pc, #356]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4a58      	ldr	r2, [pc, #352]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ec6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed4:	4b53      	ldr	r3, [pc, #332]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4a52      	ldr	r2, [pc, #328]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ede:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee0:	4b50      	ldr	r3, [pc, #320]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	494d      	ldr	r1, [pc, #308]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d040      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d107      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	4b47      	ldr	r3, [pc, #284]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d115      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e07f      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d107      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1e:	4b41      	ldr	r3, [pc, #260]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d109      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e073      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2e:	4b3d      	ldr	r3, [pc, #244]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e06b      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f3e:	4b39      	ldr	r3, [pc, #228]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f023 0203 	bic.w	r2, r3, #3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4936      	ldr	r1, [pc, #216]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f50:	f7fe fd64 	bl	8000a1c <HAL_GetTick>
 8001f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f58:	f7fe fd60 	bl	8000a1c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e053      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 020c 	and.w	r2, r3, #12
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d1eb      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d210      	bcs.n	8001fb0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b24      	ldr	r3, [pc, #144]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 020f 	bic.w	r2, r3, #15
 8001f96:	4922      	ldr	r1, [pc, #136]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e032      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	4916      	ldr	r1, [pc, #88]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d009      	beq.n	8001fee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	490e      	ldr	r1, [pc, #56]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fee:	f000 f821 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	490a      	ldr	r1, [pc, #40]	; (8002028 <HAL_RCC_ClockConfig+0x1cc>)
 8002000:	5ccb      	ldrb	r3, [r1, r3]
 8002002:	fa22 f303 	lsr.w	r3, r2, r3
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <HAL_RCC_ClockConfig+0x1d0>)
 8002008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_RCC_ClockConfig+0x1d4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fcc0 	bl	8000994 <HAL_InitTick>

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023c00 	.word	0x40023c00
 8002024:	40023800 	.word	0x40023800
 8002028:	08002228 	.word	0x08002228
 800202c:	20000000 	.word	0x20000000
 8002030:	20000004 	.word	0x20000004

08002034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800203a:	2100      	movs	r1, #0
 800203c:	6079      	str	r1, [r7, #4]
 800203e:	2100      	movs	r1, #0
 8002040:	60f9      	str	r1, [r7, #12]
 8002042:	2100      	movs	r1, #0
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002046:	2100      	movs	r1, #0
 8002048:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800204a:	4952      	ldr	r1, [pc, #328]	; (8002194 <HAL_RCC_GetSysClockFreq+0x160>)
 800204c:	6889      	ldr	r1, [r1, #8]
 800204e:	f001 010c 	and.w	r1, r1, #12
 8002052:	2908      	cmp	r1, #8
 8002054:	d00d      	beq.n	8002072 <HAL_RCC_GetSysClockFreq+0x3e>
 8002056:	2908      	cmp	r1, #8
 8002058:	f200 8094 	bhi.w	8002184 <HAL_RCC_GetSysClockFreq+0x150>
 800205c:	2900      	cmp	r1, #0
 800205e:	d002      	beq.n	8002066 <HAL_RCC_GetSysClockFreq+0x32>
 8002060:	2904      	cmp	r1, #4
 8002062:	d003      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x38>
 8002064:	e08e      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002066:	4b4c      	ldr	r3, [pc, #304]	; (8002198 <HAL_RCC_GetSysClockFreq+0x164>)
 8002068:	60bb      	str	r3, [r7, #8]
      break;
 800206a:	e08e      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800206c:	4b4b      	ldr	r3, [pc, #300]	; (800219c <HAL_RCC_GetSysClockFreq+0x168>)
 800206e:	60bb      	str	r3, [r7, #8]
      break;
 8002070:	e08b      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002072:	4948      	ldr	r1, [pc, #288]	; (8002194 <HAL_RCC_GetSysClockFreq+0x160>)
 8002074:	6849      	ldr	r1, [r1, #4]
 8002076:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800207a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800207c:	4945      	ldr	r1, [pc, #276]	; (8002194 <HAL_RCC_GetSysClockFreq+0x160>)
 800207e:	6849      	ldr	r1, [r1, #4]
 8002080:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002084:	2900      	cmp	r1, #0
 8002086:	d024      	beq.n	80020d2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002088:	4942      	ldr	r1, [pc, #264]	; (8002194 <HAL_RCC_GetSysClockFreq+0x160>)
 800208a:	6849      	ldr	r1, [r1, #4]
 800208c:	0989      	lsrs	r1, r1, #6
 800208e:	4608      	mov	r0, r1
 8002090:	f04f 0100 	mov.w	r1, #0
 8002094:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002098:	f04f 0500 	mov.w	r5, #0
 800209c:	ea00 0204 	and.w	r2, r0, r4
 80020a0:	ea01 0305 	and.w	r3, r1, r5
 80020a4:	493d      	ldr	r1, [pc, #244]	; (800219c <HAL_RCC_GetSysClockFreq+0x168>)
 80020a6:	fb01 f003 	mul.w	r0, r1, r3
 80020aa:	2100      	movs	r1, #0
 80020ac:	fb01 f102 	mul.w	r1, r1, r2
 80020b0:	1844      	adds	r4, r0, r1
 80020b2:	493a      	ldr	r1, [pc, #232]	; (800219c <HAL_RCC_GetSysClockFreq+0x168>)
 80020b4:	fba2 0101 	umull	r0, r1, r2, r1
 80020b8:	1863      	adds	r3, r4, r1
 80020ba:	4619      	mov	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	461a      	mov	r2, r3
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	f7fe f8a0 	bl	8000208 <__aeabi_uldivmod>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4613      	mov	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	e04a      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d2:	4b30      	ldr	r3, [pc, #192]	; (8002194 <HAL_RCC_GetSysClockFreq+0x160>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	099b      	lsrs	r3, r3, #6
 80020d8:	461a      	mov	r2, r3
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020e2:	f04f 0100 	mov.w	r1, #0
 80020e6:	ea02 0400 	and.w	r4, r2, r0
 80020ea:	ea03 0501 	and.w	r5, r3, r1
 80020ee:	4620      	mov	r0, r4
 80020f0:	4629      	mov	r1, r5
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	014b      	lsls	r3, r1, #5
 80020fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002100:	0142      	lsls	r2, r0, #5
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	1b00      	subs	r0, r0, r4
 8002108:	eb61 0105 	sbc.w	r1, r1, r5
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	018b      	lsls	r3, r1, #6
 8002116:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800211a:	0182      	lsls	r2, r0, #6
 800211c:	1a12      	subs	r2, r2, r0
 800211e:	eb63 0301 	sbc.w	r3, r3, r1
 8002122:	f04f 0000 	mov.w	r0, #0
 8002126:	f04f 0100 	mov.w	r1, #0
 800212a:	00d9      	lsls	r1, r3, #3
 800212c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002130:	00d0      	lsls	r0, r2, #3
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	1912      	adds	r2, r2, r4
 8002138:	eb45 0303 	adc.w	r3, r5, r3
 800213c:	f04f 0000 	mov.w	r0, #0
 8002140:	f04f 0100 	mov.w	r1, #0
 8002144:	0299      	lsls	r1, r3, #10
 8002146:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800214a:	0290      	lsls	r0, r2, #10
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	461a      	mov	r2, r3
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	f7fe f854 	bl	8000208 <__aeabi_uldivmod>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4613      	mov	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002168:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <HAL_RCC_GetSysClockFreq+0x160>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	0c1b      	lsrs	r3, r3, #16
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	3301      	adds	r3, #1
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	60bb      	str	r3, [r7, #8]
      break;
 8002182:	e002      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <HAL_RCC_GetSysClockFreq+0x164>)
 8002186:	60bb      	str	r3, [r7, #8]
      break;
 8002188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800218a:	68bb      	ldr	r3, [r7, #8]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bdb0      	pop	{r4, r5, r7, pc}
 8002194:	40023800 	.word	0x40023800
 8002198:	00f42400 	.word	0x00f42400
 800219c:	017d7840 	.word	0x017d7840

080021a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000000 	.word	0x20000000

080021b8 <__libc_init_array>:
 80021b8:	b570      	push	{r4, r5, r6, lr}
 80021ba:	4d0d      	ldr	r5, [pc, #52]	; (80021f0 <__libc_init_array+0x38>)
 80021bc:	4c0d      	ldr	r4, [pc, #52]	; (80021f4 <__libc_init_array+0x3c>)
 80021be:	1b64      	subs	r4, r4, r5
 80021c0:	10a4      	asrs	r4, r4, #2
 80021c2:	2600      	movs	r6, #0
 80021c4:	42a6      	cmp	r6, r4
 80021c6:	d109      	bne.n	80021dc <__libc_init_array+0x24>
 80021c8:	4d0b      	ldr	r5, [pc, #44]	; (80021f8 <__libc_init_array+0x40>)
 80021ca:	4c0c      	ldr	r4, [pc, #48]	; (80021fc <__libc_init_array+0x44>)
 80021cc:	f000 f820 	bl	8002210 <_init>
 80021d0:	1b64      	subs	r4, r4, r5
 80021d2:	10a4      	asrs	r4, r4, #2
 80021d4:	2600      	movs	r6, #0
 80021d6:	42a6      	cmp	r6, r4
 80021d8:	d105      	bne.n	80021e6 <__libc_init_array+0x2e>
 80021da:	bd70      	pop	{r4, r5, r6, pc}
 80021dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80021e0:	4798      	blx	r3
 80021e2:	3601      	adds	r6, #1
 80021e4:	e7ee      	b.n	80021c4 <__libc_init_array+0xc>
 80021e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80021ea:	4798      	blx	r3
 80021ec:	3601      	adds	r6, #1
 80021ee:	e7f2      	b.n	80021d6 <__libc_init_array+0x1e>
 80021f0:	08002240 	.word	0x08002240
 80021f4:	08002240 	.word	0x08002240
 80021f8:	08002240 	.word	0x08002240
 80021fc:	08002244 	.word	0x08002244

08002200 <memset>:
 8002200:	4402      	add	r2, r0
 8002202:	4603      	mov	r3, r0
 8002204:	4293      	cmp	r3, r2
 8002206:	d100      	bne.n	800220a <memset+0xa>
 8002208:	4770      	bx	lr
 800220a:	f803 1b01 	strb.w	r1, [r3], #1
 800220e:	e7f9      	b.n	8002204 <memset+0x4>

08002210 <_init>:
 8002210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002212:	bf00      	nop
 8002214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002216:	bc08      	pop	{r3}
 8002218:	469e      	mov	lr, r3
 800221a:	4770      	bx	lr

0800221c <_fini>:
 800221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221e:	bf00      	nop
 8002220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002222:	bc08      	pop	{r3}
 8002224:	469e      	mov	lr, r3
 8002226:	4770      	bx	lr
