
ETHERNET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f214  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cb0  0800f3e4  0800f3e4  0001f3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012094  08012094  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08012094  08012094  00022094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801209c  0801209c  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801209c  0801209c  0002209c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080120a0  080120a0  000220a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080120a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008abc  20000078  0801211c  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008b34  0801211c  00038b34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003768b  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005cd9  00000000  00000000  00067733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0006d410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d0  00000000  00000000  0006e890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031aa8  00000000  00000000  0006fc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002402e  00000000  00000000  000a1708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103bd3  00000000  00000000  000c5736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c9309  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005df4  00000000  00000000  001c935c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f3cc 	.word	0x0800f3cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800f3cc 	.word	0x0800f3cc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
}
 80005e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e2:	f3bf 8f6f 	isb	sy
}
 80005e6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <SCB_EnableICache+0x48>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005f0:	f3bf 8f4f 	dsb	sy
}
 80005f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005f6:	f3bf 8f6f 	isb	sy
}
 80005fa:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <SCB_EnableICache+0x48>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <SCB_EnableICache+0x48>)
 8000602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000606:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000608:	f3bf 8f4f 	dsb	sy
}
 800060c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800060e:	f3bf 8f6f 	isb	sy
}
 8000612:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800062a:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <SCB_EnableDCache+0x84>)
 800062c:	2200      	movs	r2, #0
 800062e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000632:	f3bf 8f4f 	dsb	sy
}
 8000636:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <SCB_EnableDCache+0x84>)
 800063a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800063e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	0b5b      	lsrs	r3, r3, #13
 8000644:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000648:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	08db      	lsrs	r3, r3, #3
 800064e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000652:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	015a      	lsls	r2, r3, #5
 8000658:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800065c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000662:	4911      	ldr	r1, [pc, #68]	; (80006a8 <SCB_EnableDCache+0x84>)
 8000664:	4313      	orrs	r3, r2
 8000666:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	1e5a      	subs	r2, r3, #1
 800066e:	60ba      	str	r2, [r7, #8]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1ef      	bne.n	8000654 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	1e5a      	subs	r2, r3, #1
 8000678:	60fa      	str	r2, [r7, #12]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1e5      	bne.n	800064a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800067e:	f3bf 8f4f 	dsb	sy
}
 8000682:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <SCB_EnableDCache+0x84>)
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <SCB_EnableDCache+0x84>)
 800068a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800068e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000690:	f3bf 8f4f 	dsb	sy
}
 8000694:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000696:	f3bf 8f6f 	isb	sy
}
 800069a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006b0:	f000 f930 	bl	8000914 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006b4:	f7ff ff90 	bl	80005d8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006b8:	f7ff ffb4 	bl	8000624 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f000 fba8 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f81a 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f000 f8aa 	bl	800081c <MX_GPIO_Init>
  MX_LWIP_Init();
 80006c8:	f002 fed4 	bl	8003474 <MX_LWIP_Init>
  MX_TIM14_Init();
 80006cc:	f000 f882 	bl	80007d4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  // Connect the client to the server
  server_connected = false;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <main+0x40>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
  udpClient_connect();
 80006d6:	f000 fab5 	bl	8000c44 <udpClient_connect>

  // Start interrupt timer 
  HAL_TIM_Base_Start_IT(&htim14);
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <main+0x44>)
 80006dc:	f002 fdb2 	bl	8003244 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ethernetif_input(&gnetif);
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <main+0x48>)
 80006e2:	f003 fab1 	bl	8003c48 <ethernetif_input>

	  sys_check_timeouts();
 80006e6:	f00a fbcf 	bl	800ae88 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80006ea:	e7f9      	b.n	80006e0 <main+0x34>
 80006ec:	20000210 	.word	0x20000210
 80006f0:	20000214 	.word	0x20000214
 80006f4:	200002d4 	.word	0x200002d4

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	2230      	movs	r2, #48	; 0x30
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f00d fc24 	bl	800df54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <SystemClock_Config+0xd4>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <SystemClock_Config+0xd4>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <SystemClock_Config+0xd4>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <SystemClock_Config+0xd8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a25      	ldr	r2, [pc, #148]	; (80007d0 <SystemClock_Config+0xd8>)
 800073a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <SystemClock_Config+0xd8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074c:	2301      	movs	r3, #1
 800074e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000760:	2319      	movs	r3, #25
 8000762:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000764:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000768:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800076e:	2302      	movs	r3, #2
 8000770:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	4618      	mov	r0, r3
 8000778:	f002 f8ba 	bl	80028f0 <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000782:	f000 f8f5 	bl	8000970 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000786:	f002 f863 	bl	8002850 <HAL_PWREx_EnableOverDrive>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000790:	f000 f8ee 	bl	8000970 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000798:	2302      	movs	r3, #2
 800079a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2107      	movs	r1, #7
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 fb40 	bl	8002e38 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007be:	f000 f8d7 	bl	8000970 <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	; 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_TIM14_Init+0x40>)
 80007da:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <MX_TIM14_Init+0x44>)
 80007dc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 21600-1;
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <MX_TIM14_Init+0x40>)
 80007e0:	f245 425f 	movw	r2, #21599	; 0x545f
 80007e4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_TIM14_Init+0x40>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000 - 1;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_TIM14_Init+0x40>)
 80007ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007f2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <MX_TIM14_Init+0x40>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_TIM14_Init+0x40>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_TIM14_Init+0x40>)
 8000802:	f002 fcc7 	bl	8003194 <HAL_TIM_Base_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 800080c:	f000 f8b0 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000214 	.word	0x20000214
 8000818:	40002000 	.word	0x40002000

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b34      	ldr	r3, [pc, #208]	; (8000904 <MX_GPIO_Init+0xe8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a33      	ldr	r2, [pc, #204]	; (8000904 <MX_GPIO_Init+0xe8>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b31      	ldr	r3, [pc, #196]	; (8000904 <MX_GPIO_Init+0xe8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <MX_GPIO_Init+0xe8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a2d      	ldr	r2, [pc, #180]	; (8000904 <MX_GPIO_Init+0xe8>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <MX_GPIO_Init+0xe8>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b28      	ldr	r3, [pc, #160]	; (8000904 <MX_GPIO_Init+0xe8>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a27      	ldr	r2, [pc, #156]	; (8000904 <MX_GPIO_Init+0xe8>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <MX_GPIO_Init+0xe8>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	4b22      	ldr	r3, [pc, #136]	; (8000904 <MX_GPIO_Init+0xe8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a21      	ldr	r2, [pc, #132]	; (8000904 <MX_GPIO_Init+0xe8>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <MX_GPIO_Init+0xe8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <MX_GPIO_Init+0xe8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a1b      	ldr	r2, [pc, #108]	; (8000904 <MX_GPIO_Init+0xe8>)
 8000898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_GPIO_Init+0xe8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2101      	movs	r1, #1
 80008ae:	4816      	ldr	r0, [pc, #88]	; (8000908 <MX_GPIO_Init+0xec>)
 80008b0:	f001 ff76 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_GPIO_Init+0xf0>)
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	4811      	ldr	r0, [pc, #68]	; (8000910 <MX_GPIO_Init+0xf4>)
 80008ca:	f001 fdbd 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ce:	2301      	movs	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	4808      	ldr	r0, [pc, #32]	; (8000908 <MX_GPIO_Init+0xec>)
 80008e6:	f001 fdaf 	bl	8002448 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	2028      	movs	r0, #40	; 0x28
 80008f0:	f000 fbf3 	bl	80010da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008f4:	2028      	movs	r0, #40	; 0x28
 80008f6:	f000 fc0c 	bl	8001112 <HAL_NVIC_EnableIRQ>

}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	; 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	40020400 	.word	0x40020400
 800090c:	10210000 	.word	0x10210000
 8000910:	40020800 	.word	0x40020800

08000914 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800091a:	463b      	mov	r3, r7
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000926:	f000 fc0f 	bl	8001148 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800092a:	2301      	movs	r3, #1
 800092c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800092e:	2300      	movs	r3, #0
 8000930:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20010000;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MPU_Config+0x58>)
 8000934:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000936:	230d      	movs	r3, #13
 8000938:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800093a:	2300      	movs	r3, #0
 800093c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800093e:	2301      	movs	r3, #1
 8000940:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000942:	2303      	movs	r3, #3
 8000944:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000946:	2301      	movs	r3, #1
 8000948:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800094a:	2301      	movs	r3, #1
 800094c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000956:	463b      	mov	r3, r7
 8000958:	4618      	mov	r0, r3
 800095a:	f000 fc2d 	bl	80011b8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800095e:	2004      	movs	r0, #4
 8000960:	f000 fc0a 	bl	8001178 <HAL_MPU_Enable>

}
 8000964:	bf00      	nop
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20010000 	.word	0x20010000

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	e7fe      	b.n	8000978 <Error_Handler+0x8>
	...

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <HAL_MspInit+0x44>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <HAL_MspInit+0x44>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_MspInit+0x44>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_MspInit+0x44>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_MspInit+0x44>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_MspInit+0x44>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <HAL_TIM_Base_MspInit+0x38>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d10b      	bne.n	80009ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <HAL_TIM_Base_MspInit+0x3c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a09      	ldr	r2, [pc, #36]	; (8000a00 <HAL_TIM_Base_MspInit+0x3c>)
 80009dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <HAL_TIM_Base_MspInit+0x3c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40002000 	.word	0x40002000
 8000a00:	40023800 	.word	0x40023800

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <NMI_Handler+0x4>

08000a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <MemManage_Handler+0x4>

08000a16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a50:	f000 fa24 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a60:	f001 fed2 	bl	8002808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  if(server_connected == false)
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <EXTI15_10_IRQHandler+0x28>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d007      	beq.n	8000a7c <EXTI15_10_IRQHandler+0x24>
  {
    return;
  }

    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <EXTI15_10_IRQHandler+0x2c>)
 8000a70:	f001 feaf 	bl	80027d2 <HAL_GPIO_TogglePin>
    // udpClient_send("Button\n");
    udpClient_send("ID246");
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <EXTI15_10_IRQHandler+0x30>)
 8000a76:	f000 f91f 	bl	8000cb8 <udpClient_send>
 8000a7a:	e000      	b.n	8000a7e <EXTI15_10_IRQHandler+0x26>
    return;
 8000a7c:	bf00      	nop

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000210 	.word	0x20000210
 8000a84:	40020400 	.word	0x40020400
 8000a88:	0800f3e4 	.word	0x0800f3e4

08000a8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
	return 1;
 8000a90:	2301      	movs	r3, #1
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <_kill>:

int _kill(int pid, int sig)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <_kill+0x20>)
 8000aa8:	2216      	movs	r2, #22
 8000aaa:	601a      	str	r2, [r3, #0]
	return -1;
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	20008b24 	.word	0x20008b24

08000ac0 <_exit>:

void _exit (int status)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ffe5 	bl	8000a9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ad2:	e7fe      	b.n	8000ad2 <_exit+0x12>

08000ad4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	e00a      	b.n	8000afc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ae6:	f3af 8000 	nop.w
 8000aea:	4601      	mov	r1, r0
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	60ba      	str	r2, [r7, #8]
 8000af2:	b2ca      	uxtb	r2, r1
 8000af4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3301      	adds	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dbf0      	blt.n	8000ae6 <_read+0x12>
	}

return len;
 8000b04:	687b      	ldr	r3, [r7, #4]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	e009      	b.n	8000b34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	60ba      	str	r2, [r7, #8]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3301      	adds	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697a      	ldr	r2, [r7, #20]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	dbf1      	blt.n	8000b20 <_write+0x12>
	}
	return len;
 8000b3c:	687b      	ldr	r3, [r7, #4]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <_close>:

int _close(int file)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b6e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <_isatty>:

int _isatty(int file)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
	return 1;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
	return 0;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b087      	sub	sp, #28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <_sbrk+0x5c>)
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <_sbrk+0x60>)
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d102      	bne.n	8000bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <_sbrk+0x64>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <_sbrk+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d205      	bcs.n	8000bec <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <_sbrk+0x6c>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <_sbrk+0x64>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	371c      	adds	r7, #28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	20050000 	.word	0x20050000
 8000c10:	00000400 	.word	0x00000400
 8000c14:	20000094 	.word	0x20000094
 8000c18:	20008b38 	.word	0x20008b38
 8000c1c:	20008b24 	.word	0x20008b24

08000c20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <udpClient_connect>:
5. Close socket descriptor and exit.
*/


void udpClient_connect(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
	err_t err;

	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 8000c4a:	f00a fe21 	bl	800b890 <udp_new>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <udpClient_connect+0x60>)
 8000c52:	6013      	str	r3, [r2, #0]

	/* Bind the block to module's IP and port */
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 192,168,2,90);
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <udpClient_connect+0x64>)
 8000c56:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 7);
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <udpClient_connect+0x60>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f107 0108 	add.w	r1, r7, #8
 8000c60:	2207      	movs	r2, #7
 8000c62:	4618      	mov	r0, r3
 8000c64:	f00a fcfe 	bl	800b664 <udp_bind>

	/* configure host IP address and port */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192,168,2,95);
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <udpClient_connect+0x68>)
 8000c6a:	607b      	str	r3, [r7, #4]
	err = udp_connect(upcb, &DestIPaddr, 20001);
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <udpClient_connect+0x60>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	1d39      	adds	r1, r7, #4
 8000c72:	f644 6221 	movw	r2, #20001	; 0x4e21
 8000c76:	4618      	mov	r0, r3
 8000c78:	f00a fd7c 	bl	800b774 <udp_connect>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 8000c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d109      	bne.n	8000c9c <udpClient_connect+0x58>
	{
//		 server_connected = true;

		/* 2. Send message to server */
		udpClient_send("stmF746ZG_ready");
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <udpClient_connect+0x6c>)
 8000c8a:	f000 f815 	bl	8000cb8 <udpClient_send>

    /* 3. Set a receive callback for the upcb */
    // subscribe to a server callback
		udp_recv(upcb, udpClient_receive_callback, NULL);
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <udpClient_connect+0x60>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2200      	movs	r2, #0
 8000c94:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <udpClient_connect+0x70>)
 8000c96:	4618      	mov	r0, r3
 8000c98:	f00a fdda 	bl	800b850 <udp_recv>
	}
}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200002c4 	.word	0x200002c4
 8000ca8:	5a02a8c0 	.word	0x5a02a8c0
 8000cac:	5f02a8c0 	.word	0x5f02a8c0
 8000cb0:	0800f3ec 	.word	0x0800f3ec
 8000cb4:	08000d15 	.word	0x08000d15

08000cb8 <udpClient_send>:

void udpClient_send(char* send_msg[])
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b09e      	sub	sp, #120	; 0x78
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  // int len = sprintf(data, "\n");
  struct pbuf *txBuf;
  char data[100];

  int len = sprintf(data, send_msg);
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f00d f9a4 	bl	800e014 <siprintf>
 8000ccc:	6778      	str	r0, [r7, #116]	; 0x74

  /* allocate pbuf from pool*/
  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8000cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	2036      	movs	r0, #54	; 0x36
 8000cda:	f004 f861 	bl	8004da0 <pbuf_alloc>
 8000cde:	6738      	str	r0, [r7, #112]	; 0x70

  if (txBuf != NULL)
 8000ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d010      	beq.n	8000d08 <udpClient_send+0x50>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, data, len);
 8000ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	4619      	mov	r1, r3
 8000cf0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000cf2:	f004 fda5 	bl	8005840 <pbuf_take>

    /* send udp data */
    udp_send(upcb, txBuf);
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <udpClient_send+0x58>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f00a fac7 	bl	800b290 <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 8000d02:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000d04:	f004 fb30 	bl	8005368 <pbuf_free>
  }
}
 8000d08:	bf00      	nop
 8000d0a:	3778      	adds	r7, #120	; 0x78
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200002c4 	.word	0x200002c4

08000d14 <udpClient_receive_callback>:

// this function is run on callback event from the python server
void udpClient_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	603b      	str	r3, [r7, #0]
    if Return value > 0 then it indicates str2 is less than str1.
    if Return value = 0 then it indicates str1 is equal to str2.
  */

	/* Copy the data from the pbuf */
	strncpy(received_buffer, (char *)p->payload, p->len);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6859      	ldr	r1, [r3, #4]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	895b      	ldrh	r3, [r3, #10]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	481c      	ldr	r0, [pc, #112]	; (8000da0 <udpClient_receive_callback+0x8c>)
 8000d2e:	f00d f991 	bl	800e054 <strncpy>

	if(!server_connected)
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <udpClient_receive_callback+0x90>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10e      	bne.n	8000d58 <udpClient_receive_callback+0x44>
	{
    if (strcmp(received_buffer, "server_ready") == 0)
 8000d3a:	491b      	ldr	r1, [pc, #108]	; (8000da8 <udpClient_receive_callback+0x94>)
 8000d3c:	4818      	ldr	r0, [pc, #96]	; (8000da0 <udpClient_receive_callback+0x8c>)
 8000d3e:	f7ff fa67 	bl	8000210 <strcmp>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d103      	bne.n	8000d50 <udpClient_receive_callback+0x3c>
      server_connected = true;
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <udpClient_receive_callback+0x90>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
 8000d4e:	e017      	b.n	8000d80 <udpClient_receive_callback+0x6c>

    else
      udpClient_send("stmF746ZG_ready");
 8000d50:	4816      	ldr	r0, [pc, #88]	; (8000dac <udpClient_receive_callback+0x98>)
 8000d52:	f7ff ffb1 	bl	8000cb8 <udpClient_send>
 8000d56:	e013      	b.n	8000d80 <udpClient_receive_callback+0x6c>
  }
  else
  {
    token = strtok(received_buffer, ",");
 8000d58:	4915      	ldr	r1, [pc, #84]	; (8000db0 <udpClient_receive_callback+0x9c>)
 8000d5a:	4811      	ldr	r0, [pc, #68]	; (8000da0 <udpClient_receive_callback+0x8c>)
 8000d5c:	f00d f98e 	bl	800e07c <strtok>
 8000d60:	4603      	mov	r3, r0
 8000d62:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <udpClient_receive_callback+0xa0>)
 8000d64:	6013      	str	r3, [r2, #0]
    token = strtok(NULL, ",");
 8000d66:	4912      	ldr	r1, [pc, #72]	; (8000db0 <udpClient_receive_callback+0x9c>)
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f00d f987 	bl	800e07c <strtok>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <udpClient_receive_callback+0xa0>)
 8000d72:	6013      	str	r3, [r2, #0]
    if(strcmp(token, "T"))
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <udpClient_receive_callback+0xa0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	490f      	ldr	r1, [pc, #60]	; (8000db8 <udpClient_receive_callback+0xa4>)
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fa48 	bl	8000210 <strcmp>
      // keep lockbox close
    }
  }

	// Free receive pbuf
	pbuf_free(p);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f004 faf1 	bl	8005368 <pbuf_free>

  //	reset buffer
  memset(received_buffer, 0, strlen(received_buffer));
 8000d86:	4806      	ldr	r0, [pc, #24]	; (8000da0 <udpClient_receive_callback+0x8c>)
 8000d88:	f7ff fa4c 	bl	8000224 <strlen>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	4803      	ldr	r0, [pc, #12]	; (8000da0 <udpClient_receive_callback+0x8c>)
 8000d94:	f00d f8de 	bl	800df54 <memset>

}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000260 	.word	0x20000260
 8000da4:	20000210 	.word	0x20000210
 8000da8:	0800f3fc 	.word	0x0800f3fc
 8000dac:	0800f3ec 	.word	0x0800f3ec
 8000db0:	0800f40c 	.word	0x0800f40c
 8000db4:	200002c8 	.word	0x200002c8
 8000db8:	0800f410 	.word	0x0800f410

08000dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dc2:	490e      	ldr	r1, [pc, #56]	; (8000dfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc4:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd8:	4c0b      	ldr	r4, [pc, #44]	; (8000e08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000de6:	f7ff ff1b 	bl	8000c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dea:	f00d f859 	bl	800dea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dee:	f7ff fc5d 	bl	80006ac <main>
  bx  lr    
 8000df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e00:	080120a4 	.word	0x080120a4
  ldr r2, =_sbss
 8000e04:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e08:	20008b34 	.word	0x20008b34

08000e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <HAL_Init+0x28>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <HAL_Init+0x28>)
 8000e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 f94f 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e26:	200f      	movs	r0, #15
 8000e28:	f000 f808 	bl	8000e3c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e2c:	f7ff fda6 	bl	800097c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023c00 	.word	0x40023c00

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x54>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x58>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f967 	bl	800112e <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f000 f92f 	bl	80010da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <HAL_InitTick+0x5c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	200002cc 	.word	0x200002cc

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200002cc 	.word	0x200002cc

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff ffee 	bl	8000ec4 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffde 	bl	8000ec4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008

08000f24 <__NVIC_SetPriorityGrouping>:
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <__NVIC_SetPriorityGrouping+0x40>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <__NVIC_SetPriorityGrouping+0x40>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00
 8000f68:	05fa0000 	.word	0x05fa0000

08000f6c <__NVIC_GetPriorityGrouping>:
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <__NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_EnableIRQ>:
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db0b      	blt.n	8000fb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 021f 	and.w	r2, r3, #31
 8000fa0:	4907      	ldr	r1, [pc, #28]	; (8000fc0 <__NVIC_EnableIRQ+0x38>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	2001      	movs	r0, #1
 8000faa:	fa00 f202 	lsl.w	r2, r0, r2
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100

08000fc4 <__NVIC_SetPriority>:
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	; (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	; (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	; 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	; 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f7ff ff8e 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff29 	bl	8000f24 <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff3e 	bl	8000f6c <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff8e 	bl	8001018 <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5d 	bl	8000fc4 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff31 	bl	8000f88 <__NVIC_EnableIRQ>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffa2 	bl	8001080 <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800114c:	f3bf 8f5f 	dmb	sy
}
 8001150:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <HAL_MPU_Disable+0x28>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	4a06      	ldr	r2, [pc, #24]	; (8001170 <HAL_MPU_Disable+0x28>)
 8001158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800115c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <HAL_MPU_Disable+0x2c>)
 8001160:	2200      	movs	r2, #0
 8001162:	605a      	str	r2, [r3, #4]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00
 8001174:	e000ed90 	.word	0xe000ed90

08001178 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001180:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <HAL_MPU_Enable+0x38>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_MPU_Enable+0x3c>)
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <HAL_MPU_Enable+0x3c>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001194:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001196:	f3bf 8f4f 	dsb	sy
}
 800119a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800119c:	f3bf 8f6f 	isb	sy
}
 80011a0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed90 	.word	0xe000ed90
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	785a      	ldrb	r2, [r3, #1]
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <HAL_MPU_ConfigRegion+0x84>)
 80011c6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d029      	beq.n	8001224 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80011d0:	4a1a      	ldr	r2, [pc, #104]	; (800123c <HAL_MPU_ConfigRegion+0x84>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7b1b      	ldrb	r3, [r3, #12]
 80011dc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7adb      	ldrb	r3, [r3, #11]
 80011e2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7a9b      	ldrb	r3, [r3, #10]
 80011ea:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7b5b      	ldrb	r3, [r3, #13]
 80011f2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	7b9b      	ldrb	r3, [r3, #14]
 80011fa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7bdb      	ldrb	r3, [r3, #15]
 8001202:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001204:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7a5b      	ldrb	r3, [r3, #9]
 800120a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800120c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7a1b      	ldrb	r3, [r3, #8]
 8001212:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001214:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	7812      	ldrb	r2, [r2, #0]
 800121a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800121e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001220:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001222:	e005      	b.n	8001230 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_MPU_ConfigRegion+0x84>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <HAL_MPU_ConfigRegion+0x84>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed90 	.word	0xe000ed90

08001240 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001250:	4ba9      	ldr	r3, [pc, #676]	; (80014f8 <HAL_ETH_Init+0x2b8>)
 8001252:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e181      	b.n	800156a <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d106      	bne.n	8001280 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f002 fa2c 	bl	80036d8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001280:	4b9e      	ldr	r3, [pc, #632]	; (80014fc <HAL_ETH_Init+0x2bc>)
 8001282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001284:	4a9d      	ldr	r2, [pc, #628]	; (80014fc <HAL_ETH_Init+0x2bc>)
 8001286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128a:	6453      	str	r3, [r2, #68]	; 0x44
 800128c:	4b9b      	ldr	r3, [pc, #620]	; (80014fc <HAL_ETH_Init+0x2bc>)
 800128e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001298:	4b99      	ldr	r3, [pc, #612]	; (8001500 <HAL_ETH_Init+0x2c0>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	4a98      	ldr	r2, [pc, #608]	; (8001500 <HAL_ETH_Init+0x2c0>)
 800129e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012a2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012a4:	4b96      	ldr	r3, [pc, #600]	; (8001500 <HAL_ETH_Init+0x2c0>)
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	4994      	ldr	r1, [pc, #592]	; (8001500 <HAL_ETH_Init+0x2c0>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f042 0201 	orr.w	r2, r2, #1
 80012c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80012ca:	f7ff fdfb 	bl	8000ec4 <HAL_GetTick>
 80012ce:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80012d0:	e011      	b.n	80012f6 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80012d2:	f7ff fdf7 	bl	8000ec4 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012e0:	d909      	bls.n	80012f6 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2203      	movs	r2, #3
 80012e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e139      	b.n	800156a <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1e4      	bne.n	80012d2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f023 031c 	bic.w	r3, r3, #28
 8001316:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001318:	f001 ff30 	bl	800317c <HAL_RCC_GetHCLKFreq>
 800131c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4a78      	ldr	r2, [pc, #480]	; (8001504 <HAL_ETH_Init+0x2c4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d908      	bls.n	8001338 <HAL_ETH_Init+0xf8>
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	4a77      	ldr	r2, [pc, #476]	; (8001508 <HAL_ETH_Init+0x2c8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d804      	bhi.n	8001338 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	e027      	b.n	8001388 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	4a73      	ldr	r2, [pc, #460]	; (8001508 <HAL_ETH_Init+0x2c8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d908      	bls.n	8001352 <HAL_ETH_Init+0x112>
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	4a6d      	ldr	r2, [pc, #436]	; (80014f8 <HAL_ETH_Init+0x2b8>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d204      	bcs.n	8001352 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f043 030c 	orr.w	r3, r3, #12
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	e01a      	b.n	8001388 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4a68      	ldr	r2, [pc, #416]	; (80014f8 <HAL_ETH_Init+0x2b8>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d303      	bcc.n	8001362 <HAL_ETH_Init+0x122>
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	4a6b      	ldr	r2, [pc, #428]	; (800150c <HAL_ETH_Init+0x2cc>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d911      	bls.n	8001386 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	4a69      	ldr	r2, [pc, #420]	; (800150c <HAL_ETH_Init+0x2cc>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d908      	bls.n	800137c <HAL_ETH_Init+0x13c>
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	4a68      	ldr	r2, [pc, #416]	; (8001510 <HAL_ETH_Init+0x2d0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d804      	bhi.n	800137c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	e005      	b.n	8001388 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f043 0310 	orr.w	r3, r3, #16
 8001382:	61fb      	str	r3, [r7, #28]
 8001384:	e000      	b.n	8001388 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001386:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001390:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001394:	2100      	movs	r1, #0
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fb98 	bl	8001acc <HAL_ETH_WritePHYRegister>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00b      	beq.n	80013ba <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80013a6:	6939      	ldr	r1, [r7, #16]
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 fd4d 	bl	8001e48 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2201      	movs	r2, #1
 80013b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e0d7      	b.n	800156a <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80013ba:	20ff      	movs	r0, #255	; 0xff
 80013bc:	f7ff fd8e 	bl	8000edc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 80a5 	beq.w	8001514 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80013ca:	f7ff fd7b 	bl	8000ec4 <HAL_GetTick>
 80013ce:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	461a      	mov	r2, r3
 80013d6:	2101      	movs	r1, #1
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 fb0f 	bl	80019fc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80013de:	f7ff fd71 	bl	8000ec4 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d90f      	bls.n	8001410 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80013f4:	6939      	ldr	r1, [r7, #16]
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 fd26 	bl	8001e48 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e0ac      	b.n	800156a <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0da      	beq.n	80013d0 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800141a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800141e:	2100      	movs	r1, #0
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fb53 	bl	8001acc <HAL_ETH_WritePHYRegister>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00b      	beq.n	8001444 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001430:	6939      	ldr	r1, [r7, #16]
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 fd08 	bl	8001e48 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001440:	2301      	movs	r3, #1
 8001442:	e092      	b.n	800156a <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001444:	f7ff fd3e 	bl	8000ec4 <HAL_GetTick>
 8001448:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	461a      	mov	r2, r3
 8001450:	2101      	movs	r1, #1
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 fad2 	bl	80019fc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001458:	f7ff fd34 	bl	8000ec4 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f241 3288 	movw	r2, #5000	; 0x1388
 8001466:	4293      	cmp	r3, r2
 8001468:	d90f      	bls.n	800148a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800146e:	6939      	ldr	r1, [r7, #16]
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 fce9 	bl	8001e48 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2201      	movs	r2, #1
 800147a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e06f      	b.n	800156a <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f003 0320 	and.w	r3, r3, #32
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0da      	beq.n	800144a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	461a      	mov	r2, r3
 800149a:	2110      	movs	r1, #16
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 faad 	bl	80019fc <HAL_ETH_ReadPHYRegister>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00b      	beq.n	80014c0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014ac:	6939      	ldr	r1, [r7, #16]
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 fcca 	bl	8001e48 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80014bc:	2301      	movs	r3, #1
 80014be:	e054      	b.n	800156a <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d004      	beq.n	80014d4 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	e002      	b.n	80014da <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	e035      	b.n	8001558 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	e030      	b.n	8001558 <HAL_ETH_Init+0x318>
 80014f6:	bf00      	nop
 80014f8:	03938700 	.word	0x03938700
 80014fc:	40023800 	.word	0x40023800
 8001500:	40013800 	.word	0x40013800
 8001504:	01312cff 	.word	0x01312cff
 8001508:	02160ebf 	.word	0x02160ebf
 800150c:	05f5e0ff 	.word	0x05f5e0ff
 8001510:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	08db      	lsrs	r3, r3, #3
 800151a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	085b      	lsrs	r3, r3, #1
 8001522:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001524:	4313      	orrs	r3, r2
 8001526:	b29b      	uxth	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	2100      	movs	r1, #0
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 facd 	bl	8001acc <HAL_ETH_WritePHYRegister>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00b      	beq.n	8001550 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800153c:	6939      	ldr	r1, [r7, #16]
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 fc82 	bl	8001e48 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e00c      	b.n	800156a <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001550:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001554:	f7ff fcc2 	bl	8000edc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001558:	6939      	ldr	r1, [r7, #16]
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 fc74 	bl	8001e48 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3720      	adds	r7, #32
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop

08001574 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
 8001580:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <HAL_ETH_DMATxDescListInit+0x20>
 8001590:	2302      	movs	r3, #2
 8001592:	e052      	b.n	800163a <HAL_ETH_DMATxDescListInit+0xc6>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2202      	movs	r2, #2
 80015a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	e030      	b.n	8001612 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	015b      	lsls	r3, r3, #5
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	4413      	add	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015c0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	4413      	add	r3, r2
 80015d0:	461a      	mov	r2, r3
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d105      	bne.n	80015ea <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d208      	bcs.n	8001606 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3301      	adds	r3, #1
 80015f8:	015b      	lsls	r3, r3, #5
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	4413      	add	r3, r2
 80015fe:	461a      	mov	r2, r3
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	e002      	b.n	800160c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	3301      	adds	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d3ca      	bcc.n	80015b0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6819      	ldr	r1, [r3, #0]
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	f241 0310 	movw	r3, #4112	; 0x1010
 8001624:	440b      	add	r3, r1
 8001626:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	371c      	adds	r7, #28
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001646:	b480      	push	{r7}
 8001648:	b087      	sub	sp, #28
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_ETH_DMARxDescListInit+0x20>
 8001662:	2302      	movs	r3, #2
 8001664:	e056      	b.n	8001714 <HAL_ETH_DMARxDescListInit+0xce>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2202      	movs	r2, #2
 8001672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	e034      	b.n	80016ec <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	015b      	lsls	r3, r3, #5
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	4413      	add	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001692:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800169a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016a2:	fb02 f303 	mul.w	r3, r2, r3
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	461a      	mov	r2, r3
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d105      	bne.n	80016c4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d208      	bcs.n	80016e0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3301      	adds	r3, #1
 80016d2:	015b      	lsls	r3, r3, #5
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	4413      	add	r3, r2
 80016d8:	461a      	mov	r2, r3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	e002      	b.n	80016e6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3301      	adds	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d3c6      	bcc.n	8001682 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6819      	ldr	r1, [r3, #0]
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	f241 030c 	movw	r3, #4108	; 0x100c
 80016fe:	440b      	add	r3, r1
 8001700:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	371c      	adds	r7, #28
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_ETH_TransmitFrame+0x24>
 8001740:	2302      	movs	r3, #2
 8001742:	e0cd      	b.n	80018e0 <HAL_ETH_TransmitFrame+0x1c0>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2202      	movs	r2, #2
 8001750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800176a:	2301      	movs	r3, #1
 800176c:	e0b8      	b.n	80018e0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	da09      	bge.n	800178c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2212      	movs	r2, #18
 800177c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0a9      	b.n	80018e0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001792:	4293      	cmp	r3, r2
 8001794:	d915      	bls.n	80017c2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	4a54      	ldr	r2, [pc, #336]	; (80018ec <HAL_ETH_TransmitFrame+0x1cc>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	0a9b      	lsrs	r3, r3, #10
 80017a0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	4b51      	ldr	r3, [pc, #324]	; (80018ec <HAL_ETH_TransmitFrame+0x1cc>)
 80017a6:	fba3 1302 	umull	r1, r3, r3, r2
 80017aa:	0a9b      	lsrs	r3, r3, #10
 80017ac:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d005      	beq.n	80017c6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	e001      	b.n	80017c6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80017c2:	2301      	movs	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d11c      	bne.n	8001806 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80017da:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80017e6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017f6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	461a      	mov	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c
 8001804:	e04b      	b.n	800189e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	e044      	b.n	8001896 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800181a:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d107      	bne.n	8001832 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001830:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800183a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3b01      	subs	r3, #1
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	429a      	cmp	r2, r3
 8001844:	d116      	bne.n	8001874 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001854:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	4a25      	ldr	r2, [pc, #148]	; (80018f0 <HAL_ETH_TransmitFrame+0x1d0>)
 800185a:	fb02 f203 	mul.w	r2, r2, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	4413      	add	r3, r2
 8001862:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001866:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001872:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001882:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	461a      	mov	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	3301      	adds	r3, #1
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	429a      	cmp	r2, r3
 800189c:	d3b6      	bcc.n	800180c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	f241 0314 	movw	r3, #4116	; 0x1014
 80018a6:	4413      	add	r3, r2
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00d      	beq.n	80018ce <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	f241 0314 	movw	r3, #4116	; 0x1014
 80018ba:	4413      	add	r3, r2
 80018bc:	2204      	movs	r2, #4
 80018be:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	f241 0304 	movw	r3, #4100	; 0x1004
 80018c8:	4413      	add	r3, r2
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	ac02b00b 	.word	0xac02b00b
 80018f0:	fffffa0c 	.word	0xfffffa0c

080018f4 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_ETH_GetReceivedFrame+0x1a>
 800190a:	2302      	movs	r3, #2
 800190c:	e070      	b.n	80019f0 <HAL_ETH_GetReceivedFrame+0xfc>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2202      	movs	r2, #2
 800191a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db5a      	blt.n	80019de <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d030      	beq.n	8001998 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001944:	2b01      	cmp	r3, #1
 8001946:	d103      	bne.n	8001950 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	0c1b      	lsrs	r3, r3, #16
 8001960:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001964:	3b04      	subs	r3, #4
 8001966:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	461a      	mov	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	e02b      	b.n	80019f0 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d010      	beq.n	80019c8 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	461a      	mov	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28
 80019c6:	e00a      	b.n	80019de <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	461a      	mov	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	460b      	mov	r3, r1
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b82      	cmp	r3, #130	; 0x82
 8001a1c:	d101      	bne.n	8001a22 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e050      	b.n	8001ac4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2282      	movs	r2, #130	; 0x82
 8001a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f003 031c 	and.w	r3, r3, #28
 8001a38:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8a1b      	ldrh	r3, [r3, #16]
 8001a3e:	02db      	lsls	r3, r3, #11
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001a48:	897b      	ldrh	r3, [r7, #10]
 8001a4a:	019b      	lsls	r3, r3, #6
 8001a4c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f023 0302 	bic.w	r3, r3, #2
 8001a5c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a6e:	f7ff fa29 	bl	8000ec4 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a74:	e015      	b.n	8001aa2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001a76:	f7ff fa25 	bl	8000ec4 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a84:	d309      	bcc.n	8001a9a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e014      	b.n	8001ac4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1e4      	bne.n	8001a76 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b42      	cmp	r3, #66	; 0x42
 8001aec:	d101      	bne.n	8001af2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001aee:	2302      	movs	r3, #2
 8001af0:	e04e      	b.n	8001b90 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2242      	movs	r2, #66	; 0x42
 8001af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f003 031c 	and.w	r3, r3, #28
 8001b08:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8a1b      	ldrh	r3, [r3, #16]
 8001b0e:	02db      	lsls	r3, r3, #11
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001b18:	897b      	ldrh	r3, [r7, #10]
 8001b1a:	019b      	lsls	r3, r3, #6
 8001b1c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b48:	f7ff f9bc 	bl	8000ec4 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b4e:	e015      	b.n	8001b7c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001b50:	f7ff f9b8 	bl	8000ec4 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5e:	d309      	bcc.n	8001b74 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e00d      	b.n	8001b90 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1e4      	bne.n	8001b50 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d101      	bne.n	8001bae <HAL_ETH_Start+0x16>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e01f      	b.n	8001bee <HAL_ETH_Start+0x56>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 fb44 	bl	800224c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 fb7b 	bl	80022c0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 fc12 	bl	80023f4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 fbaf 	bl	8002334 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fbdc 	bl	8002394 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_ETH_Stop+0x16>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e01f      	b.n	8001c4c <HAL_ETH_Stop+0x56>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 fba1 	bl	8002364 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 fbce 	bl	80023c4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 fb66 	bl	80022fa <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 fbe0 	bl	80023f4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 fb26 	bl	8002286 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_ETH_ConfigMAC+0x1c>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e0e4      	b.n	8001e3a <HAL_ETH_ConfigMAC+0x1e6>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80b1 	beq.w	8001dea <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4b6c      	ldr	r3, [pc, #432]	; (8001e44 <HAL_ETH_ConfigMAC+0x1f0>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001ca0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001ca6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001cac:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001cb2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001cb8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001cbe:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001cc4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001cca:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001cd0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001cd6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001cdc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001ce2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f7ff f8ee 	bl	8000edc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d10:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001d16:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001d1c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001d22:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001d28:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001d2e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001d3a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d3c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d46:	2001      	movs	r0, #1
 8001d48:	f7ff f8c8 	bl	8000edc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d5c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d66:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d76:	4013      	ands	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001d84:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001d8a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001d90:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001d96:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001d9c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001db4:	2001      	movs	r0, #1
 8001db6:	f7ff f891 	bl	8000edc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff f87e 	bl	8000edc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	61da      	str	r2, [r3, #28]
 8001de8:	e01e      	b.n	8001e28 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001df8:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f7ff f85e 	bl	8000edc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	ff20810f 	.word	0xff20810f

08001e48 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b0b0      	sub	sp, #192	; 0xc0
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d007      	beq.n	8001e6e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e64:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001e76:	2300      	movs	r3, #0
 8001e78:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d103      	bne.n	8001e96 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e92:	663b      	str	r3, [r7, #96]	; 0x60
 8001e94:	e001      	b.n	8001e9a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e9e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001eb4:	2340      	movs	r3, #64	; 0x40
 8001eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001f1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f20:	4bab      	ldr	r3, [pc, #684]	; (80021d0 <ETH_MACDMAConfig+0x388>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f28:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f2c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001f30:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001f34:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001f3a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001f3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001f3e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001f42:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001f48:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001f4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001f4c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001f4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001f50:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001f52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001f54:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001f58:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001f5c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f62:	4313      	orrs	r3, r2
 8001f64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f70:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f7fe ffad 	bl	8000edc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f8a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f8c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f90:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001f92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001f94:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001f96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001f9a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001fa0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001fa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001fa6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001fac:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001fb0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001fb8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fba:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f7fe ff88 	bl	8000edc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fd4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001fde:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001fe8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001ff4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ff8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002002:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002006:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002008:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800200c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800200e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002012:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002014:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002018:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800201a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800201e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002020:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002024:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002026:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002038:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002044:	2001      	movs	r0, #1
 8002046:	f7fe ff49 	bl	8000edc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002052:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002054:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002058:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800206e:	2001      	movs	r0, #1
 8002070:	f7fe ff34 	bl	8000edc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800207c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002082:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002086:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800208c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002090:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80020a2:	2304      	movs	r3, #4
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80020a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80020ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020b0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020b6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020bc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80020c6:	2300      	movs	r3, #0
 80020c8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	f241 0318 	movw	r3, #4120	; 0x1018
 80020d2:	4413      	add	r3, r2
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80020da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020de:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <ETH_MACDMAConfig+0x38c>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020e6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80020e8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020ea:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80020ec:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80020ee:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80020f0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80020f2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80020f4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80020f6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80020f8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80020fa:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80020fc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80020fe:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002102:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002104:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002106:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002108:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	f241 0318 	movw	r3, #4120	; 0x1018
 800211a:	4413      	add	r3, r2
 800211c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002120:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	f241 0318 	movw	r3, #4120	; 0x1018
 800212a:	4413      	add	r3, r2
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002132:	2001      	movs	r0, #1
 8002134:	f7fe fed2 	bl	8000edc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002140:	4413      	add	r3, r2
 8002142:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002146:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800214a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800214c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800214e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002150:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002154:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002158:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800215a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800215c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800215e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002162:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800216c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002170:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002180:	2001      	movs	r0, #1
 8002182:	f7fe feab 	bl	8000edc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800218e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002192:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d10d      	bne.n	80021b8 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	f241 031c 	movw	r3, #4124	; 0x101c
 80021a4:	4413      	add	r3, r2
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6811      	ldr	r1, [r2, #0]
 80021ac:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <ETH_MACDMAConfig+0x390>)
 80021ae:	431a      	orrs	r2, r3
 80021b0:	f241 031c 	movw	r3, #4124	; 0x101c
 80021b4:	440b      	add	r3, r1
 80021b6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	461a      	mov	r2, r3
 80021be:	2100      	movs	r1, #0
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f80b 	bl	80021dc <ETH_MACAddressConfig>
}
 80021c6:	bf00      	nop
 80021c8:	37c0      	adds	r7, #192	; 0xc0
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	ff20810f 	.word	0xff20810f
 80021d4:	f8de3f23 	.word	0xf8de3f23
 80021d8:	00010040 	.word	0x00010040

080021dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3305      	adds	r3, #5
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	021b      	lsls	r3, r3, #8
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	3204      	adds	r2, #4
 80021f4:	7812      	ldrb	r2, [r2, #0]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <ETH_MACAddressConfig+0x68>)
 80021fe:	4413      	add	r3, r2
 8002200:	461a      	mov	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3303      	adds	r3, #3
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	061a      	lsls	r2, r3, #24
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3302      	adds	r3, #2
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	041b      	lsls	r3, r3, #16
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3301      	adds	r3, #1
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	4313      	orrs	r3, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	7812      	ldrb	r2, [r2, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <ETH_MACAddressConfig+0x6c>)
 800222e:	4413      	add	r3, r2
 8002230:	461a      	mov	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	6013      	str	r3, [r2, #0]
}
 8002236:	bf00      	nop
 8002238:	371c      	adds	r7, #28
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40028040 	.word	0x40028040
 8002248:	40028044 	.word	0x40028044

0800224c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0208 	orr.w	r2, r2, #8
 8002266:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002270:	2001      	movs	r0, #1
 8002272:	f7fe fe33 	bl	8000edc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	601a      	str	r2, [r3, #0]
}
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0208 	bic.w	r2, r2, #8
 80022a0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022aa:	2001      	movs	r0, #1
 80022ac:	f7fe fe16 	bl	8000edc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	601a      	str	r2, [r3, #0]
}
 80022b8:	bf00      	nop
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0204 	orr.w	r2, r2, #4
 80022da:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022e4:	2001      	movs	r0, #1
 80022e6:	f7fe fdf9 	bl	8000edc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	601a      	str	r2, [r3, #0]
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b084      	sub	sp, #16
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0204 	bic.w	r2, r2, #4
 8002314:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800231e:	2001      	movs	r0, #1
 8002320:	f7fe fddc 	bl	8000edc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	601a      	str	r2, [r3, #0]
}
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	f241 0318 	movw	r3, #4120	; 0x1018
 8002344:	4413      	add	r3, r2
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6811      	ldr	r1, [r2, #0]
 800234c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002350:	f241 0318 	movw	r3, #4120	; 0x1018
 8002354:	440b      	add	r3, r1
 8002356:	601a      	str	r2, [r3, #0]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	f241 0318 	movw	r3, #4120	; 0x1018
 8002374:	4413      	add	r3, r2
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6811      	ldr	r1, [r2, #0]
 800237c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002380:	f241 0318 	movw	r3, #4120	; 0x1018
 8002384:	440b      	add	r3, r1
 8002386:	601a      	str	r2, [r3, #0]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	f241 0318 	movw	r3, #4120	; 0x1018
 80023a4:	4413      	add	r3, r2
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6811      	ldr	r1, [r2, #0]
 80023ac:	f043 0202 	orr.w	r2, r3, #2
 80023b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80023b4:	440b      	add	r3, r1
 80023b6:	601a      	str	r2, [r3, #0]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	f241 0318 	movw	r3, #4120	; 0x1018
 80023d4:	4413      	add	r3, r2
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6811      	ldr	r1, [r2, #0]
 80023dc:	f023 0202 	bic.w	r2, r3, #2
 80023e0:	f241 0318 	movw	r3, #4120	; 0x1018
 80023e4:	440b      	add	r3, r1
 80023e6:	601a      	str	r2, [r3, #0]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	f241 0318 	movw	r3, #4120	; 0x1018
 8002408:	4413      	add	r3, r2
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6811      	ldr	r1, [r2, #0]
 8002410:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002414:	f241 0318 	movw	r3, #4120	; 0x1018
 8002418:	440b      	add	r3, r1
 800241a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	f241 0318 	movw	r3, #4120	; 0x1018
 8002424:	4413      	add	r3, r2
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800242a:	2001      	movs	r0, #1
 800242c:	f7fe fd56 	bl	8000edc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6819      	ldr	r1, [r3, #0]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	f241 0318 	movw	r3, #4120	; 0x1018
 800243a:	440b      	add	r3, r1
 800243c:	601a      	str	r2, [r3, #0]
}
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	e175      	b.n	8002754 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002468:	2201      	movs	r2, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	429a      	cmp	r2, r3
 8002482:	f040 8164 	bne.w	800274e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d00b      	beq.n	80024a6 <HAL_GPIO_Init+0x5e>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d007      	beq.n	80024a6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800249a:	2b11      	cmp	r3, #17
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b12      	cmp	r3, #18
 80024a4:	d130      	bne.n	8002508 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	2203      	movs	r2, #3
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024dc:	2201      	movs	r2, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 0201 	and.w	r2, r3, #1
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x100>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b12      	cmp	r3, #18
 8002546:	d123      	bne.n	8002590 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	08da      	lsrs	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3208      	adds	r2, #8
 8002550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	220f      	movs	r2, #15
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	08da      	lsrs	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3208      	adds	r2, #8
 800258a:	69b9      	ldr	r1, [r7, #24]
 800258c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0203 	and.w	r2, r3, #3
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80be 	beq.w	800274e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d2:	4b66      	ldr	r3, [pc, #408]	; (800276c <HAL_GPIO_Init+0x324>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	4a65      	ldr	r2, [pc, #404]	; (800276c <HAL_GPIO_Init+0x324>)
 80025d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025dc:	6453      	str	r3, [r2, #68]	; 0x44
 80025de:	4b63      	ldr	r3, [pc, #396]	; (800276c <HAL_GPIO_Init+0x324>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025ea:	4a61      	ldr	r2, [pc, #388]	; (8002770 <HAL_GPIO_Init+0x328>)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	3302      	adds	r3, #2
 80025f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	220f      	movs	r2, #15
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a58      	ldr	r2, [pc, #352]	; (8002774 <HAL_GPIO_Init+0x32c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d037      	beq.n	8002686 <HAL_GPIO_Init+0x23e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a57      	ldr	r2, [pc, #348]	; (8002778 <HAL_GPIO_Init+0x330>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d031      	beq.n	8002682 <HAL_GPIO_Init+0x23a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a56      	ldr	r2, [pc, #344]	; (800277c <HAL_GPIO_Init+0x334>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d02b      	beq.n	800267e <HAL_GPIO_Init+0x236>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a55      	ldr	r2, [pc, #340]	; (8002780 <HAL_GPIO_Init+0x338>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d025      	beq.n	800267a <HAL_GPIO_Init+0x232>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a54      	ldr	r2, [pc, #336]	; (8002784 <HAL_GPIO_Init+0x33c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01f      	beq.n	8002676 <HAL_GPIO_Init+0x22e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a53      	ldr	r2, [pc, #332]	; (8002788 <HAL_GPIO_Init+0x340>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d019      	beq.n	8002672 <HAL_GPIO_Init+0x22a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a52      	ldr	r2, [pc, #328]	; (800278c <HAL_GPIO_Init+0x344>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <HAL_GPIO_Init+0x226>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a51      	ldr	r2, [pc, #324]	; (8002790 <HAL_GPIO_Init+0x348>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00d      	beq.n	800266a <HAL_GPIO_Init+0x222>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a50      	ldr	r2, [pc, #320]	; (8002794 <HAL_GPIO_Init+0x34c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d007      	beq.n	8002666 <HAL_GPIO_Init+0x21e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a4f      	ldr	r2, [pc, #316]	; (8002798 <HAL_GPIO_Init+0x350>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d101      	bne.n	8002662 <HAL_GPIO_Init+0x21a>
 800265e:	2309      	movs	r3, #9
 8002660:	e012      	b.n	8002688 <HAL_GPIO_Init+0x240>
 8002662:	230a      	movs	r3, #10
 8002664:	e010      	b.n	8002688 <HAL_GPIO_Init+0x240>
 8002666:	2308      	movs	r3, #8
 8002668:	e00e      	b.n	8002688 <HAL_GPIO_Init+0x240>
 800266a:	2307      	movs	r3, #7
 800266c:	e00c      	b.n	8002688 <HAL_GPIO_Init+0x240>
 800266e:	2306      	movs	r3, #6
 8002670:	e00a      	b.n	8002688 <HAL_GPIO_Init+0x240>
 8002672:	2305      	movs	r3, #5
 8002674:	e008      	b.n	8002688 <HAL_GPIO_Init+0x240>
 8002676:	2304      	movs	r3, #4
 8002678:	e006      	b.n	8002688 <HAL_GPIO_Init+0x240>
 800267a:	2303      	movs	r3, #3
 800267c:	e004      	b.n	8002688 <HAL_GPIO_Init+0x240>
 800267e:	2302      	movs	r3, #2
 8002680:	e002      	b.n	8002688 <HAL_GPIO_Init+0x240>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_GPIO_Init+0x240>
 8002686:	2300      	movs	r3, #0
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	f002 0203 	and.w	r2, r2, #3
 800268e:	0092      	lsls	r2, r2, #2
 8002690:	4093      	lsls	r3, r2
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002698:	4935      	ldr	r1, [pc, #212]	; (8002770 <HAL_GPIO_Init+0x328>)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	089b      	lsrs	r3, r3, #2
 800269e:	3302      	adds	r3, #2
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a6:	4b3d      	ldr	r3, [pc, #244]	; (800279c <HAL_GPIO_Init+0x354>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ca:	4a34      	ldr	r2, [pc, #208]	; (800279c <HAL_GPIO_Init+0x354>)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026d0:	4b32      	ldr	r3, [pc, #200]	; (800279c <HAL_GPIO_Init+0x354>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f4:	4a29      	ldr	r2, [pc, #164]	; (800279c <HAL_GPIO_Init+0x354>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fa:	4b28      	ldr	r3, [pc, #160]	; (800279c <HAL_GPIO_Init+0x354>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800271e:	4a1f      	ldr	r2, [pc, #124]	; (800279c <HAL_GPIO_Init+0x354>)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002724:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_GPIO_Init+0x354>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002748:	4a14      	ldr	r2, [pc, #80]	; (800279c <HAL_GPIO_Init+0x354>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3301      	adds	r3, #1
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	2b0f      	cmp	r3, #15
 8002758:	f67f ae86 	bls.w	8002468 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	40013800 	.word	0x40013800
 8002774:	40020000 	.word	0x40020000
 8002778:	40020400 	.word	0x40020400
 800277c:	40020800 	.word	0x40020800
 8002780:	40020c00 	.word	0x40020c00
 8002784:	40021000 	.word	0x40021000
 8002788:	40021400 	.word	0x40021400
 800278c:	40021800 	.word	0x40021800
 8002790:	40021c00 	.word	0x40021c00
 8002794:	40022000 	.word	0x40022000
 8002798:	40022400 	.word	0x40022400
 800279c:	40013c00 	.word	0x40013c00

080027a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
 80027ac:	4613      	mov	r3, r2
 80027ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b0:	787b      	ldrb	r3, [r7, #1]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80027bc:	e003      	b.n	80027c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	041a      	lsls	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	619a      	str	r2, [r3, #24]
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027e4:	887a      	ldrh	r2, [r7, #2]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4013      	ands	r3, r2
 80027ea:	041a      	lsls	r2, r3, #16
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	43d9      	mvns	r1, r3
 80027f0:	887b      	ldrh	r3, [r7, #2]
 80027f2:	400b      	ands	r3, r1
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	619a      	str	r2, [r3, #24]
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	4013      	ands	r3, r2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800281e:	4a05      	ldr	r2, [pc, #20]	; (8002834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f806 	bl	8002838 <HAL_GPIO_EXTI_Callback>
  }
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40013c00 	.word	0x40013c00

08002838 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800285a:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a22      	ldr	r2, [pc, #136]	; (80028e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002872:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a1d      	ldr	r2, [pc, #116]	; (80028ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800287e:	f7fe fb21 	bl	8000ec4 <HAL_GetTick>
 8002882:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002884:	e009      	b.n	800289a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002886:	f7fe fb1d 	bl	8000ec4 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002894:	d901      	bls.n	800289a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e022      	b.n	80028e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800289a:	4b14      	ldr	r3, [pc, #80]	; (80028ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a6:	d1ee      	bne.n	8002886 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028a8:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0f      	ldr	r2, [pc, #60]	; (80028ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028b4:	f7fe fb06 	bl	8000ec4 <HAL_GetTick>
 80028b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028ba:	e009      	b.n	80028d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028bc:	f7fe fb02 	bl	8000ec4 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ca:	d901      	bls.n	80028d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e007      	b.n	80028e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028dc:	d1ee      	bne.n	80028bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40007000 	.word	0x40007000

080028f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80028f8:	2300      	movs	r3, #0
 80028fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e291      	b.n	8002e2a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8087 	beq.w	8002a22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002914:	4b96      	ldr	r3, [pc, #600]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 030c 	and.w	r3, r3, #12
 800291c:	2b04      	cmp	r3, #4
 800291e:	d00c      	beq.n	800293a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002920:	4b93      	ldr	r3, [pc, #588]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 030c 	and.w	r3, r3, #12
 8002928:	2b08      	cmp	r3, #8
 800292a:	d112      	bne.n	8002952 <HAL_RCC_OscConfig+0x62>
 800292c:	4b90      	ldr	r3, [pc, #576]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002934:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002938:	d10b      	bne.n	8002952 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293a:	4b8d      	ldr	r3, [pc, #564]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d06c      	beq.n	8002a20 <HAL_RCC_OscConfig+0x130>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d168      	bne.n	8002a20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e26b      	b.n	8002e2a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295a:	d106      	bne.n	800296a <HAL_RCC_OscConfig+0x7a>
 800295c:	4b84      	ldr	r3, [pc, #528]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a83      	ldr	r2, [pc, #524]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	e02e      	b.n	80029c8 <HAL_RCC_OscConfig+0xd8>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0x9c>
 8002972:	4b7f      	ldr	r3, [pc, #508]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a7e      	ldr	r2, [pc, #504]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	4b7c      	ldr	r3, [pc, #496]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a7b      	ldr	r2, [pc, #492]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	e01d      	b.n	80029c8 <HAL_RCC_OscConfig+0xd8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002994:	d10c      	bne.n	80029b0 <HAL_RCC_OscConfig+0xc0>
 8002996:	4b76      	ldr	r3, [pc, #472]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a75      	ldr	r2, [pc, #468]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 800299c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	4b73      	ldr	r3, [pc, #460]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a72      	ldr	r2, [pc, #456]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 80029a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	e00b      	b.n	80029c8 <HAL_RCC_OscConfig+0xd8>
 80029b0:	4b6f      	ldr	r3, [pc, #444]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a6e      	ldr	r2, [pc, #440]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 80029b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	4b6c      	ldr	r3, [pc, #432]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a6b      	ldr	r2, [pc, #428]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 80029c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d013      	beq.n	80029f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7fe fa78 	bl	8000ec4 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d8:	f7fe fa74 	bl	8000ec4 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b64      	cmp	r3, #100	; 0x64
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e21f      	b.n	8002e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ea:	4b61      	ldr	r3, [pc, #388]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0xe8>
 80029f6:	e014      	b.n	8002a22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7fe fa64 	bl	8000ec4 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a00:	f7fe fa60 	bl	8000ec4 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	; 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e20b      	b.n	8002e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a12:	4b57      	ldr	r3, [pc, #348]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x110>
 8002a1e:	e000      	b.n	8002a22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d069      	beq.n	8002b02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a2e:	4b50      	ldr	r3, [pc, #320]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00b      	beq.n	8002a52 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a3a:	4b4d      	ldr	r3, [pc, #308]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d11c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x190>
 8002a46:	4b4a      	ldr	r3, [pc, #296]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d116      	bne.n	8002a80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a52:	4b47      	ldr	r3, [pc, #284]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d005      	beq.n	8002a6a <HAL_RCC_OscConfig+0x17a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d001      	beq.n	8002a6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e1df      	b.n	8002e2a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6a:	4b41      	ldr	r3, [pc, #260]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	493d      	ldr	r1, [pc, #244]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7e:	e040      	b.n	8002b02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d023      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a88:	4b39      	ldr	r3, [pc, #228]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a38      	ldr	r2, [pc, #224]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7fe fa16 	bl	8000ec4 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a9c:	f7fe fa12 	bl	8000ec4 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e1bd      	b.n	8002e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aae:	4b30      	ldr	r3, [pc, #192]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aba:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4929      	ldr	r1, [pc, #164]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]
 8002ace:	e018      	b.n	8002b02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad0:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a26      	ldr	r2, [pc, #152]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002ad6:	f023 0301 	bic.w	r3, r3, #1
 8002ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe f9f2 	bl	8000ec4 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae4:	f7fe f9ee 	bl	8000ec4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e199      	b.n	8002e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af6:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d038      	beq.n	8002b80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d019      	beq.n	8002b4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b16:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1a:	4a15      	ldr	r2, [pc, #84]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b22:	f7fe f9cf 	bl	8000ec4 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2a:	f7fe f9cb 	bl	8000ec4 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e176      	b.n	8002e2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x23a>
 8002b48:	e01a      	b.n	8002b80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4e:	4a08      	ldr	r2, [pc, #32]	; (8002b70 <HAL_RCC_OscConfig+0x280>)
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b56:	f7fe f9b5 	bl	8000ec4 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b5e:	f7fe f9b1 	bl	8000ec4 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d903      	bls.n	8002b74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e15c      	b.n	8002e2a <HAL_RCC_OscConfig+0x53a>
 8002b70:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b74:	4b91      	ldr	r3, [pc, #580]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1ee      	bne.n	8002b5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80a4 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b8e:	4b8b      	ldr	r3, [pc, #556]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10d      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9a:	4b88      	ldr	r3, [pc, #544]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	4a87      	ldr	r2, [pc, #540]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba6:	4b85      	ldr	r3, [pc, #532]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb6:	4b82      	ldr	r3, [pc, #520]	; (8002dc0 <HAL_RCC_OscConfig+0x4d0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d118      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bc2:	4b7f      	ldr	r3, [pc, #508]	; (8002dc0 <HAL_RCC_OscConfig+0x4d0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a7e      	ldr	r2, [pc, #504]	; (8002dc0 <HAL_RCC_OscConfig+0x4d0>)
 8002bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bce:	f7fe f979 	bl	8000ec4 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd6:	f7fe f975 	bl	8000ec4 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b64      	cmp	r3, #100	; 0x64
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e120      	b.n	8002e2a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be8:	4b75      	ldr	r3, [pc, #468]	; (8002dc0 <HAL_RCC_OscConfig+0x4d0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCC_OscConfig+0x31a>
 8002bfc:	4b6f      	ldr	r3, [pc, #444]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c00:	4a6e      	ldr	r2, [pc, #440]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6713      	str	r3, [r2, #112]	; 0x70
 8002c08:	e02d      	b.n	8002c66 <HAL_RCC_OscConfig+0x376>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x33c>
 8002c12:	4b6a      	ldr	r3, [pc, #424]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	4a69      	ldr	r2, [pc, #420]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002c18:	f023 0301 	bic.w	r3, r3, #1
 8002c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1e:	4b67      	ldr	r3, [pc, #412]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	4a66      	ldr	r2, [pc, #408]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002c24:	f023 0304 	bic.w	r3, r3, #4
 8002c28:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2a:	e01c      	b.n	8002c66 <HAL_RCC_OscConfig+0x376>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b05      	cmp	r3, #5
 8002c32:	d10c      	bne.n	8002c4e <HAL_RCC_OscConfig+0x35e>
 8002c34:	4b61      	ldr	r3, [pc, #388]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	4a60      	ldr	r2, [pc, #384]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002c3a:	f043 0304 	orr.w	r3, r3, #4
 8002c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c40:	4b5e      	ldr	r3, [pc, #376]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	4a5d      	ldr	r2, [pc, #372]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4c:	e00b      	b.n	8002c66 <HAL_RCC_OscConfig+0x376>
 8002c4e:	4b5b      	ldr	r3, [pc, #364]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c52:	4a5a      	ldr	r2, [pc, #360]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002c54:	f023 0301 	bic.w	r3, r3, #1
 8002c58:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5a:	4b58      	ldr	r3, [pc, #352]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5e:	4a57      	ldr	r2, [pc, #348]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002c60:	f023 0304 	bic.w	r3, r3, #4
 8002c64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d015      	beq.n	8002c9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6e:	f7fe f929 	bl	8000ec4 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c74:	e00a      	b.n	8002c8c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c76:	f7fe f925 	bl	8000ec4 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e0ce      	b.n	8002e2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8c:	4b4b      	ldr	r3, [pc, #300]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0ee      	beq.n	8002c76 <HAL_RCC_OscConfig+0x386>
 8002c98:	e014      	b.n	8002cc4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9a:	f7fe f913 	bl	8000ec4 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca2:	f7fe f90f 	bl	8000ec4 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e0b8      	b.n	8002e2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb8:	4b40      	ldr	r3, [pc, #256]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1ee      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cc4:	7dfb      	ldrb	r3, [r7, #23]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d105      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cca:	4b3c      	ldr	r3, [pc, #240]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a3b      	ldr	r2, [pc, #236]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 80a4 	beq.w	8002e28 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ce0:	4b36      	ldr	r3, [pc, #216]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d06b      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d149      	bne.n	8002d88 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf4:	4b31      	ldr	r3, [pc, #196]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a30      	ldr	r2, [pc, #192]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002cfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe f8e0 	bl	8000ec4 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fe f8dc 	bl	8000ec4 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e087      	b.n	8002e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1a:	4b28      	ldr	r3, [pc, #160]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69da      	ldr	r2, [r3, #28]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	019b      	lsls	r3, r3, #6
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	085b      	lsrs	r3, r3, #1
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	041b      	lsls	r3, r3, #16
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	061b      	lsls	r3, r3, #24
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	4a1b      	ldr	r2, [pc, #108]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002d4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d52:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d54:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a18      	ldr	r2, [pc, #96]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7fe f8b0 	bl	8000ec4 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d68:	f7fe f8ac 	bl	8000ec4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e057      	b.n	8002e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x478>
 8002d86:	e04f      	b.n	8002e28 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0b      	ldr	r2, [pc, #44]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe f896 	bl	8000ec4 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7fe f892 	bl	8000ec4 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e03d      	b.n	8002e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dae:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <HAL_RCC_OscConfig+0x4cc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x4ac>
 8002dba:	e035      	b.n	8002e28 <HAL_RCC_OscConfig+0x538>
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002dc4:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <HAL_RCC_OscConfig+0x544>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d028      	beq.n	8002e24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d121      	bne.n	8002e24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d11a      	bne.n	8002e24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002df4:	4013      	ands	r3, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dfa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d111      	bne.n	8002e24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	085b      	lsrs	r3, r3, #1
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d107      	bne.n	8002e24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d001      	beq.n	8002e28 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40023800 	.word	0x40023800

08002e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0d0      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e50:	4b6a      	ldr	r3, [pc, #424]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d910      	bls.n	8002e80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b67      	ldr	r3, [pc, #412]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 020f 	bic.w	r2, r3, #15
 8002e66:	4965      	ldr	r1, [pc, #404]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b63      	ldr	r3, [pc, #396]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0b8      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d020      	beq.n	8002ece <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e98:	4b59      	ldr	r3, [pc, #356]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	4a58      	ldr	r2, [pc, #352]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ea2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb0:	4b53      	ldr	r3, [pc, #332]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4a52      	ldr	r2, [pc, #328]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ebc:	4b50      	ldr	r3, [pc, #320]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	494d      	ldr	r1, [pc, #308]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d040      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	4b47      	ldr	r3, [pc, #284]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d115      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e07f      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efa:	4b41      	ldr	r3, [pc, #260]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e073      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0a:	4b3d      	ldr	r3, [pc, #244]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e06b      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f1a:	4b39      	ldr	r3, [pc, #228]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f023 0203 	bic.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4936      	ldr	r1, [pc, #216]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f2c:	f7fd ffca 	bl	8000ec4 <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f34:	f7fd ffc6 	bl	8000ec4 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e053      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	4b2d      	ldr	r3, [pc, #180]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 020c 	and.w	r2, r3, #12
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d1eb      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b27      	ldr	r3, [pc, #156]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d210      	bcs.n	8002f8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 020f 	bic.w	r2, r3, #15
 8002f72:	4922      	ldr	r1, [pc, #136]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e032      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d008      	beq.n	8002faa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f98:	4b19      	ldr	r3, [pc, #100]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4916      	ldr	r1, [pc, #88]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fb6:	4b12      	ldr	r3, [pc, #72]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	490e      	ldr	r1, [pc, #56]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fca:	f000 f821 	bl	8003010 <HAL_RCC_GetSysClockFreq>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	490a      	ldr	r1, [pc, #40]	; (8003004 <HAL_RCC_ClockConfig+0x1cc>)
 8002fdc:	5ccb      	ldrb	r3, [r1, r3]
 8002fde:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe2:	4a09      	ldr	r2, [pc, #36]	; (8003008 <HAL_RCC_ClockConfig+0x1d0>)
 8002fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <HAL_RCC_ClockConfig+0x1d4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd ff26 	bl	8000e3c <HAL_InitTick>

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023c00 	.word	0x40023c00
 8003000:	40023800 	.word	0x40023800
 8003004:	08011df4 	.word	0x08011df4
 8003008:	20000000 	.word	0x20000000
 800300c:	20000004 	.word	0x20000004

08003010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003010:	b5b0      	push	{r4, r5, r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003016:	2100      	movs	r1, #0
 8003018:	6079      	str	r1, [r7, #4]
 800301a:	2100      	movs	r1, #0
 800301c:	60f9      	str	r1, [r7, #12]
 800301e:	2100      	movs	r1, #0
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003022:	2100      	movs	r1, #0
 8003024:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003026:	4952      	ldr	r1, [pc, #328]	; (8003170 <HAL_RCC_GetSysClockFreq+0x160>)
 8003028:	6889      	ldr	r1, [r1, #8]
 800302a:	f001 010c 	and.w	r1, r1, #12
 800302e:	2908      	cmp	r1, #8
 8003030:	d00d      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x3e>
 8003032:	2908      	cmp	r1, #8
 8003034:	f200 8094 	bhi.w	8003160 <HAL_RCC_GetSysClockFreq+0x150>
 8003038:	2900      	cmp	r1, #0
 800303a:	d002      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x32>
 800303c:	2904      	cmp	r1, #4
 800303e:	d003      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x38>
 8003040:	e08e      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003042:	4b4c      	ldr	r3, [pc, #304]	; (8003174 <HAL_RCC_GetSysClockFreq+0x164>)
 8003044:	60bb      	str	r3, [r7, #8]
      break;
 8003046:	e08e      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003048:	4b4b      	ldr	r3, [pc, #300]	; (8003178 <HAL_RCC_GetSysClockFreq+0x168>)
 800304a:	60bb      	str	r3, [r7, #8]
      break;
 800304c:	e08b      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800304e:	4948      	ldr	r1, [pc, #288]	; (8003170 <HAL_RCC_GetSysClockFreq+0x160>)
 8003050:	6849      	ldr	r1, [r1, #4]
 8003052:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003056:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003058:	4945      	ldr	r1, [pc, #276]	; (8003170 <HAL_RCC_GetSysClockFreq+0x160>)
 800305a:	6849      	ldr	r1, [r1, #4]
 800305c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003060:	2900      	cmp	r1, #0
 8003062:	d024      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003064:	4942      	ldr	r1, [pc, #264]	; (8003170 <HAL_RCC_GetSysClockFreq+0x160>)
 8003066:	6849      	ldr	r1, [r1, #4]
 8003068:	0989      	lsrs	r1, r1, #6
 800306a:	4608      	mov	r0, r1
 800306c:	f04f 0100 	mov.w	r1, #0
 8003070:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003074:	f04f 0500 	mov.w	r5, #0
 8003078:	ea00 0204 	and.w	r2, r0, r4
 800307c:	ea01 0305 	and.w	r3, r1, r5
 8003080:	493d      	ldr	r1, [pc, #244]	; (8003178 <HAL_RCC_GetSysClockFreq+0x168>)
 8003082:	fb01 f003 	mul.w	r0, r1, r3
 8003086:	2100      	movs	r1, #0
 8003088:	fb01 f102 	mul.w	r1, r1, r2
 800308c:	1844      	adds	r4, r0, r1
 800308e:	493a      	ldr	r1, [pc, #232]	; (8003178 <HAL_RCC_GetSysClockFreq+0x168>)
 8003090:	fba2 0101 	umull	r0, r1, r2, r1
 8003094:	1863      	adds	r3, r4, r1
 8003096:	4619      	mov	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	461a      	mov	r2, r3
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	f7fd f91e 	bl	80002e0 <__aeabi_uldivmod>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4613      	mov	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	e04a      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ae:	4b30      	ldr	r3, [pc, #192]	; (8003170 <HAL_RCC_GetSysClockFreq+0x160>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	461a      	mov	r2, r3
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030be:	f04f 0100 	mov.w	r1, #0
 80030c2:	ea02 0400 	and.w	r4, r2, r0
 80030c6:	ea03 0501 	and.w	r5, r3, r1
 80030ca:	4620      	mov	r0, r4
 80030cc:	4629      	mov	r1, r5
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	014b      	lsls	r3, r1, #5
 80030d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030dc:	0142      	lsls	r2, r0, #5
 80030de:	4610      	mov	r0, r2
 80030e0:	4619      	mov	r1, r3
 80030e2:	1b00      	subs	r0, r0, r4
 80030e4:	eb61 0105 	sbc.w	r1, r1, r5
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	018b      	lsls	r3, r1, #6
 80030f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030f6:	0182      	lsls	r2, r0, #6
 80030f8:	1a12      	subs	r2, r2, r0
 80030fa:	eb63 0301 	sbc.w	r3, r3, r1
 80030fe:	f04f 0000 	mov.w	r0, #0
 8003102:	f04f 0100 	mov.w	r1, #0
 8003106:	00d9      	lsls	r1, r3, #3
 8003108:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800310c:	00d0      	lsls	r0, r2, #3
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	1912      	adds	r2, r2, r4
 8003114:	eb45 0303 	adc.w	r3, r5, r3
 8003118:	f04f 0000 	mov.w	r0, #0
 800311c:	f04f 0100 	mov.w	r1, #0
 8003120:	0299      	lsls	r1, r3, #10
 8003122:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003126:	0290      	lsls	r0, r2, #10
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4610      	mov	r0, r2
 800312e:	4619      	mov	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	461a      	mov	r2, r3
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	f7fd f8d2 	bl	80002e0 <__aeabi_uldivmod>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4613      	mov	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003144:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_RCC_GetSysClockFreq+0x160>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	0c1b      	lsrs	r3, r3, #16
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	3301      	adds	r3, #1
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	fbb2 f3f3 	udiv	r3, r2, r3
 800315c:	60bb      	str	r3, [r7, #8]
      break;
 800315e:	e002      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <HAL_RCC_GetSysClockFreq+0x164>)
 8003162:	60bb      	str	r3, [r7, #8]
      break;
 8003164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003166:	68bb      	ldr	r3, [r7, #8]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bdb0      	pop	{r4, r5, r7, pc}
 8003170:	40023800 	.word	0x40023800
 8003174:	00f42400 	.word	0x00f42400
 8003178:	017d7840 	.word	0x017d7840

0800317c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003180:	4b03      	ldr	r3, [pc, #12]	; (8003190 <HAL_RCC_GetHCLKFreq+0x14>)
 8003182:	681b      	ldr	r3, [r3, #0]
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000000 	.word	0x20000000

08003194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e049      	b.n	800323a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fd fc02 	bl	80009c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3304      	adds	r3, #4
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f000 f8ae 	bl	8003334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b01      	cmp	r3, #1
 8003256:	d001      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e054      	b.n	8003306 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a26      	ldr	r2, [pc, #152]	; (8003314 <HAL_TIM_Base_Start_IT+0xd0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d022      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003286:	d01d      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a22      	ldr	r2, [pc, #136]	; (8003318 <HAL_TIM_Base_Start_IT+0xd4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d018      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a21      	ldr	r2, [pc, #132]	; (800331c <HAL_TIM_Base_Start_IT+0xd8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d013      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a1f      	ldr	r2, [pc, #124]	; (8003320 <HAL_TIM_Base_Start_IT+0xdc>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00e      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1e      	ldr	r2, [pc, #120]	; (8003324 <HAL_TIM_Base_Start_IT+0xe0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d009      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <HAL_TIM_Base_Start_IT+0xe4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d004      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1b      	ldr	r2, [pc, #108]	; (800332c <HAL_TIM_Base_Start_IT+0xe8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d115      	bne.n	80032f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	4b19      	ldr	r3, [pc, #100]	; (8003330 <HAL_TIM_Base_Start_IT+0xec>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d015      	beq.n	8003302 <HAL_TIM_Base_Start_IT+0xbe>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032dc:	d011      	beq.n	8003302 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0201 	orr.w	r2, r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ee:	e008      	b.n	8003302 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	e000      	b.n	8003304 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003302:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40010000 	.word	0x40010000
 8003318:	40000400 	.word	0x40000400
 800331c:	40000800 	.word	0x40000800
 8003320:	40000c00 	.word	0x40000c00
 8003324:	40010400 	.word	0x40010400
 8003328:	40014000 	.word	0x40014000
 800332c:	40001800 	.word	0x40001800
 8003330:	00010007 	.word	0x00010007

08003334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a40      	ldr	r2, [pc, #256]	; (8003448 <TIM_Base_SetConfig+0x114>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <TIM_Base_SetConfig+0x40>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003352:	d00f      	beq.n	8003374 <TIM_Base_SetConfig+0x40>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a3d      	ldr	r2, [pc, #244]	; (800344c <TIM_Base_SetConfig+0x118>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00b      	beq.n	8003374 <TIM_Base_SetConfig+0x40>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a3c      	ldr	r2, [pc, #240]	; (8003450 <TIM_Base_SetConfig+0x11c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d007      	beq.n	8003374 <TIM_Base_SetConfig+0x40>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a3b      	ldr	r2, [pc, #236]	; (8003454 <TIM_Base_SetConfig+0x120>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d003      	beq.n	8003374 <TIM_Base_SetConfig+0x40>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a3a      	ldr	r2, [pc, #232]	; (8003458 <TIM_Base_SetConfig+0x124>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d108      	bne.n	8003386 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a2f      	ldr	r2, [pc, #188]	; (8003448 <TIM_Base_SetConfig+0x114>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d02b      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003394:	d027      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a2c      	ldr	r2, [pc, #176]	; (800344c <TIM_Base_SetConfig+0x118>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d023      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a2b      	ldr	r2, [pc, #172]	; (8003450 <TIM_Base_SetConfig+0x11c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01f      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a2a      	ldr	r2, [pc, #168]	; (8003454 <TIM_Base_SetConfig+0x120>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d01b      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a29      	ldr	r2, [pc, #164]	; (8003458 <TIM_Base_SetConfig+0x124>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d017      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a28      	ldr	r2, [pc, #160]	; (800345c <TIM_Base_SetConfig+0x128>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a27      	ldr	r2, [pc, #156]	; (8003460 <TIM_Base_SetConfig+0x12c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00f      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a26      	ldr	r2, [pc, #152]	; (8003464 <TIM_Base_SetConfig+0x130>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00b      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a25      	ldr	r2, [pc, #148]	; (8003468 <TIM_Base_SetConfig+0x134>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d007      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a24      	ldr	r2, [pc, #144]	; (800346c <TIM_Base_SetConfig+0x138>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d003      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a23      	ldr	r2, [pc, #140]	; (8003470 <TIM_Base_SetConfig+0x13c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d108      	bne.n	80033f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <TIM_Base_SetConfig+0x114>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d003      	beq.n	800342c <TIM_Base_SetConfig+0xf8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a0c      	ldr	r2, [pc, #48]	; (8003458 <TIM_Base_SetConfig+0x124>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d103      	bne.n	8003434 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	615a      	str	r2, [r3, #20]
}
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40010000 	.word	0x40010000
 800344c:	40000400 	.word	0x40000400
 8003450:	40000800 	.word	0x40000800
 8003454:	40000c00 	.word	0x40000c00
 8003458:	40010400 	.word	0x40010400
 800345c:	40014000 	.word	0x40014000
 8003460:	40014400 	.word	0x40014400
 8003464:	40014800 	.word	0x40014800
 8003468:	40001800 	.word	0x40001800
 800346c:	40001c00 	.word	0x40001c00
 8003470:	40002000 	.word	0x40002000

08003474 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800347a:	4b8d      	ldr	r3, [pc, #564]	; (80036b0 <MX_LWIP_Init+0x23c>)
 800347c:	22c0      	movs	r2, #192	; 0xc0
 800347e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003480:	4b8b      	ldr	r3, [pc, #556]	; (80036b0 <MX_LWIP_Init+0x23c>)
 8003482:	22a8      	movs	r2, #168	; 0xa8
 8003484:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 8003486:	4b8a      	ldr	r3, [pc, #552]	; (80036b0 <MX_LWIP_Init+0x23c>)
 8003488:	2202      	movs	r2, #2
 800348a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 90;
 800348c:	4b88      	ldr	r3, [pc, #544]	; (80036b0 <MX_LWIP_Init+0x23c>)
 800348e:	225a      	movs	r2, #90	; 0x5a
 8003490:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003492:	4b88      	ldr	r3, [pc, #544]	; (80036b4 <MX_LWIP_Init+0x240>)
 8003494:	22ff      	movs	r2, #255	; 0xff
 8003496:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003498:	4b86      	ldr	r3, [pc, #536]	; (80036b4 <MX_LWIP_Init+0x240>)
 800349a:	22ff      	movs	r2, #255	; 0xff
 800349c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800349e:	4b85      	ldr	r3, [pc, #532]	; (80036b4 <MX_LWIP_Init+0x240>)
 80034a0:	22ff      	movs	r2, #255	; 0xff
 80034a2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80034a4:	4b83      	ldr	r3, [pc, #524]	; (80036b4 <MX_LWIP_Init+0x240>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80034aa:	4b83      	ldr	r3, [pc, #524]	; (80036b8 <MX_LWIP_Init+0x244>)
 80034ac:	22c0      	movs	r2, #192	; 0xc0
 80034ae:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80034b0:	4b81      	ldr	r3, [pc, #516]	; (80036b8 <MX_LWIP_Init+0x244>)
 80034b2:	22a8      	movs	r2, #168	; 0xa8
 80034b4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80034b6:	4b80      	ldr	r3, [pc, #512]	; (80036b8 <MX_LWIP_Init+0x244>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80034bc:	4b7e      	ldr	r3, [pc, #504]	; (80036b8 <MX_LWIP_Init+0x244>)
 80034be:	2201      	movs	r2, #1
 80034c0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80034c2:	f000 fccb 	bl	8003e5c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80034c6:	4b7a      	ldr	r3, [pc, #488]	; (80036b0 <MX_LWIP_Init+0x23c>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	061a      	lsls	r2, r3, #24
 80034cc:	4b78      	ldr	r3, [pc, #480]	; (80036b0 <MX_LWIP_Init+0x23c>)
 80034ce:	785b      	ldrb	r3, [r3, #1]
 80034d0:	041b      	lsls	r3, r3, #16
 80034d2:	431a      	orrs	r2, r3
 80034d4:	4b76      	ldr	r3, [pc, #472]	; (80036b0 <MX_LWIP_Init+0x23c>)
 80034d6:	789b      	ldrb	r3, [r3, #2]
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	4313      	orrs	r3, r2
 80034dc:	4a74      	ldr	r2, [pc, #464]	; (80036b0 <MX_LWIP_Init+0x23c>)
 80034de:	78d2      	ldrb	r2, [r2, #3]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	061a      	lsls	r2, r3, #24
 80034e4:	4b72      	ldr	r3, [pc, #456]	; (80036b0 <MX_LWIP_Init+0x23c>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	0619      	lsls	r1, r3, #24
 80034ea:	4b71      	ldr	r3, [pc, #452]	; (80036b0 <MX_LWIP_Init+0x23c>)
 80034ec:	785b      	ldrb	r3, [r3, #1]
 80034ee:	041b      	lsls	r3, r3, #16
 80034f0:	4319      	orrs	r1, r3
 80034f2:	4b6f      	ldr	r3, [pc, #444]	; (80036b0 <MX_LWIP_Init+0x23c>)
 80034f4:	789b      	ldrb	r3, [r3, #2]
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	430b      	orrs	r3, r1
 80034fa:	496d      	ldr	r1, [pc, #436]	; (80036b0 <MX_LWIP_Init+0x23c>)
 80034fc:	78c9      	ldrb	r1, [r1, #3]
 80034fe:	430b      	orrs	r3, r1
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003506:	431a      	orrs	r2, r3
 8003508:	4b69      	ldr	r3, [pc, #420]	; (80036b0 <MX_LWIP_Init+0x23c>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	0619      	lsls	r1, r3, #24
 800350e:	4b68      	ldr	r3, [pc, #416]	; (80036b0 <MX_LWIP_Init+0x23c>)
 8003510:	785b      	ldrb	r3, [r3, #1]
 8003512:	041b      	lsls	r3, r3, #16
 8003514:	4319      	orrs	r1, r3
 8003516:	4b66      	ldr	r3, [pc, #408]	; (80036b0 <MX_LWIP_Init+0x23c>)
 8003518:	789b      	ldrb	r3, [r3, #2]
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	430b      	orrs	r3, r1
 800351e:	4964      	ldr	r1, [pc, #400]	; (80036b0 <MX_LWIP_Init+0x23c>)
 8003520:	78c9      	ldrb	r1, [r1, #3]
 8003522:	430b      	orrs	r3, r1
 8003524:	0a1b      	lsrs	r3, r3, #8
 8003526:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800352a:	431a      	orrs	r2, r3
 800352c:	4b60      	ldr	r3, [pc, #384]	; (80036b0 <MX_LWIP_Init+0x23c>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	0619      	lsls	r1, r3, #24
 8003532:	4b5f      	ldr	r3, [pc, #380]	; (80036b0 <MX_LWIP_Init+0x23c>)
 8003534:	785b      	ldrb	r3, [r3, #1]
 8003536:	041b      	lsls	r3, r3, #16
 8003538:	4319      	orrs	r1, r3
 800353a:	4b5d      	ldr	r3, [pc, #372]	; (80036b0 <MX_LWIP_Init+0x23c>)
 800353c:	789b      	ldrb	r3, [r3, #2]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	430b      	orrs	r3, r1
 8003542:	495b      	ldr	r1, [pc, #364]	; (80036b0 <MX_LWIP_Init+0x23c>)
 8003544:	78c9      	ldrb	r1, [r1, #3]
 8003546:	430b      	orrs	r3, r1
 8003548:	0e1b      	lsrs	r3, r3, #24
 800354a:	4313      	orrs	r3, r2
 800354c:	4a5b      	ldr	r2, [pc, #364]	; (80036bc <MX_LWIP_Init+0x248>)
 800354e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003550:	4b58      	ldr	r3, [pc, #352]	; (80036b4 <MX_LWIP_Init+0x240>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	061a      	lsls	r2, r3, #24
 8003556:	4b57      	ldr	r3, [pc, #348]	; (80036b4 <MX_LWIP_Init+0x240>)
 8003558:	785b      	ldrb	r3, [r3, #1]
 800355a:	041b      	lsls	r3, r3, #16
 800355c:	431a      	orrs	r2, r3
 800355e:	4b55      	ldr	r3, [pc, #340]	; (80036b4 <MX_LWIP_Init+0x240>)
 8003560:	789b      	ldrb	r3, [r3, #2]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	4313      	orrs	r3, r2
 8003566:	4a53      	ldr	r2, [pc, #332]	; (80036b4 <MX_LWIP_Init+0x240>)
 8003568:	78d2      	ldrb	r2, [r2, #3]
 800356a:	4313      	orrs	r3, r2
 800356c:	061a      	lsls	r2, r3, #24
 800356e:	4b51      	ldr	r3, [pc, #324]	; (80036b4 <MX_LWIP_Init+0x240>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	0619      	lsls	r1, r3, #24
 8003574:	4b4f      	ldr	r3, [pc, #316]	; (80036b4 <MX_LWIP_Init+0x240>)
 8003576:	785b      	ldrb	r3, [r3, #1]
 8003578:	041b      	lsls	r3, r3, #16
 800357a:	4319      	orrs	r1, r3
 800357c:	4b4d      	ldr	r3, [pc, #308]	; (80036b4 <MX_LWIP_Init+0x240>)
 800357e:	789b      	ldrb	r3, [r3, #2]
 8003580:	021b      	lsls	r3, r3, #8
 8003582:	430b      	orrs	r3, r1
 8003584:	494b      	ldr	r1, [pc, #300]	; (80036b4 <MX_LWIP_Init+0x240>)
 8003586:	78c9      	ldrb	r1, [r1, #3]
 8003588:	430b      	orrs	r3, r1
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003590:	431a      	orrs	r2, r3
 8003592:	4b48      	ldr	r3, [pc, #288]	; (80036b4 <MX_LWIP_Init+0x240>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	0619      	lsls	r1, r3, #24
 8003598:	4b46      	ldr	r3, [pc, #280]	; (80036b4 <MX_LWIP_Init+0x240>)
 800359a:	785b      	ldrb	r3, [r3, #1]
 800359c:	041b      	lsls	r3, r3, #16
 800359e:	4319      	orrs	r1, r3
 80035a0:	4b44      	ldr	r3, [pc, #272]	; (80036b4 <MX_LWIP_Init+0x240>)
 80035a2:	789b      	ldrb	r3, [r3, #2]
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	430b      	orrs	r3, r1
 80035a8:	4942      	ldr	r1, [pc, #264]	; (80036b4 <MX_LWIP_Init+0x240>)
 80035aa:	78c9      	ldrb	r1, [r1, #3]
 80035ac:	430b      	orrs	r3, r1
 80035ae:	0a1b      	lsrs	r3, r3, #8
 80035b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80035b4:	431a      	orrs	r2, r3
 80035b6:	4b3f      	ldr	r3, [pc, #252]	; (80036b4 <MX_LWIP_Init+0x240>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	0619      	lsls	r1, r3, #24
 80035bc:	4b3d      	ldr	r3, [pc, #244]	; (80036b4 <MX_LWIP_Init+0x240>)
 80035be:	785b      	ldrb	r3, [r3, #1]
 80035c0:	041b      	lsls	r3, r3, #16
 80035c2:	4319      	orrs	r1, r3
 80035c4:	4b3b      	ldr	r3, [pc, #236]	; (80036b4 <MX_LWIP_Init+0x240>)
 80035c6:	789b      	ldrb	r3, [r3, #2]
 80035c8:	021b      	lsls	r3, r3, #8
 80035ca:	430b      	orrs	r3, r1
 80035cc:	4939      	ldr	r1, [pc, #228]	; (80036b4 <MX_LWIP_Init+0x240>)
 80035ce:	78c9      	ldrb	r1, [r1, #3]
 80035d0:	430b      	orrs	r3, r1
 80035d2:	0e1b      	lsrs	r3, r3, #24
 80035d4:	4313      	orrs	r3, r2
 80035d6:	4a3a      	ldr	r2, [pc, #232]	; (80036c0 <MX_LWIP_Init+0x24c>)
 80035d8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80035da:	4b37      	ldr	r3, [pc, #220]	; (80036b8 <MX_LWIP_Init+0x244>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	061a      	lsls	r2, r3, #24
 80035e0:	4b35      	ldr	r3, [pc, #212]	; (80036b8 <MX_LWIP_Init+0x244>)
 80035e2:	785b      	ldrb	r3, [r3, #1]
 80035e4:	041b      	lsls	r3, r3, #16
 80035e6:	431a      	orrs	r2, r3
 80035e8:	4b33      	ldr	r3, [pc, #204]	; (80036b8 <MX_LWIP_Init+0x244>)
 80035ea:	789b      	ldrb	r3, [r3, #2]
 80035ec:	021b      	lsls	r3, r3, #8
 80035ee:	4313      	orrs	r3, r2
 80035f0:	4a31      	ldr	r2, [pc, #196]	; (80036b8 <MX_LWIP_Init+0x244>)
 80035f2:	78d2      	ldrb	r2, [r2, #3]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	061a      	lsls	r2, r3, #24
 80035f8:	4b2f      	ldr	r3, [pc, #188]	; (80036b8 <MX_LWIP_Init+0x244>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	0619      	lsls	r1, r3, #24
 80035fe:	4b2e      	ldr	r3, [pc, #184]	; (80036b8 <MX_LWIP_Init+0x244>)
 8003600:	785b      	ldrb	r3, [r3, #1]
 8003602:	041b      	lsls	r3, r3, #16
 8003604:	4319      	orrs	r1, r3
 8003606:	4b2c      	ldr	r3, [pc, #176]	; (80036b8 <MX_LWIP_Init+0x244>)
 8003608:	789b      	ldrb	r3, [r3, #2]
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	430b      	orrs	r3, r1
 800360e:	492a      	ldr	r1, [pc, #168]	; (80036b8 <MX_LWIP_Init+0x244>)
 8003610:	78c9      	ldrb	r1, [r1, #3]
 8003612:	430b      	orrs	r3, r1
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800361a:	431a      	orrs	r2, r3
 800361c:	4b26      	ldr	r3, [pc, #152]	; (80036b8 <MX_LWIP_Init+0x244>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	0619      	lsls	r1, r3, #24
 8003622:	4b25      	ldr	r3, [pc, #148]	; (80036b8 <MX_LWIP_Init+0x244>)
 8003624:	785b      	ldrb	r3, [r3, #1]
 8003626:	041b      	lsls	r3, r3, #16
 8003628:	4319      	orrs	r1, r3
 800362a:	4b23      	ldr	r3, [pc, #140]	; (80036b8 <MX_LWIP_Init+0x244>)
 800362c:	789b      	ldrb	r3, [r3, #2]
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	430b      	orrs	r3, r1
 8003632:	4921      	ldr	r1, [pc, #132]	; (80036b8 <MX_LWIP_Init+0x244>)
 8003634:	78c9      	ldrb	r1, [r1, #3]
 8003636:	430b      	orrs	r3, r1
 8003638:	0a1b      	lsrs	r3, r3, #8
 800363a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800363e:	431a      	orrs	r2, r3
 8003640:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <MX_LWIP_Init+0x244>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	0619      	lsls	r1, r3, #24
 8003646:	4b1c      	ldr	r3, [pc, #112]	; (80036b8 <MX_LWIP_Init+0x244>)
 8003648:	785b      	ldrb	r3, [r3, #1]
 800364a:	041b      	lsls	r3, r3, #16
 800364c:	4319      	orrs	r1, r3
 800364e:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <MX_LWIP_Init+0x244>)
 8003650:	789b      	ldrb	r3, [r3, #2]
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	430b      	orrs	r3, r1
 8003656:	4918      	ldr	r1, [pc, #96]	; (80036b8 <MX_LWIP_Init+0x244>)
 8003658:	78c9      	ldrb	r1, [r1, #3]
 800365a:	430b      	orrs	r3, r1
 800365c:	0e1b      	lsrs	r3, r3, #24
 800365e:	4313      	orrs	r3, r2
 8003660:	4a18      	ldr	r2, [pc, #96]	; (80036c4 <MX_LWIP_Init+0x250>)
 8003662:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003664:	4b18      	ldr	r3, [pc, #96]	; (80036c8 <MX_LWIP_Init+0x254>)
 8003666:	9302      	str	r3, [sp, #8]
 8003668:	4b18      	ldr	r3, [pc, #96]	; (80036cc <MX_LWIP_Init+0x258>)
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	2300      	movs	r3, #0
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <MX_LWIP_Init+0x250>)
 8003672:	4a13      	ldr	r2, [pc, #76]	; (80036c0 <MX_LWIP_Init+0x24c>)
 8003674:	4911      	ldr	r1, [pc, #68]	; (80036bc <MX_LWIP_Init+0x248>)
 8003676:	4816      	ldr	r0, [pc, #88]	; (80036d0 <MX_LWIP_Init+0x25c>)
 8003678:	f001 f896 	bl	80047a8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800367c:	4814      	ldr	r0, [pc, #80]	; (80036d0 <MX_LWIP_Init+0x25c>)
 800367e:	f001 fa45 	bl	8004b0c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003682:	4b13      	ldr	r3, [pc, #76]	; (80036d0 <MX_LWIP_Init+0x25c>)
 8003684:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003688:	089b      	lsrs	r3, r3, #2
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003694:	480e      	ldr	r0, [pc, #56]	; (80036d0 <MX_LWIP_Init+0x25c>)
 8003696:	f001 fa49 	bl	8004b2c <netif_set_up>
 800369a:	e002      	b.n	80036a2 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800369c:	480c      	ldr	r0, [pc, #48]	; (80036d0 <MX_LWIP_Init+0x25c>)
 800369e:	f001 fab1 	bl	8004c04 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80036a2:	490c      	ldr	r1, [pc, #48]	; (80036d4 <MX_LWIP_Init+0x260>)
 80036a4:	480a      	ldr	r0, [pc, #40]	; (80036d0 <MX_LWIP_Init+0x25c>)
 80036a6:	f001 fadf 	bl	8004c68 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80036aa:	bf00      	nop
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000310 	.word	0x20000310
 80036b4:	2000030c 	.word	0x2000030c
 80036b8:	200002d0 	.word	0x200002d0
 80036bc:	20000308 	.word	0x20000308
 80036c0:	20000314 	.word	0x20000314
 80036c4:	20000318 	.word	0x20000318
 80036c8:	0800dcf5 	.word	0x0800dcf5
 80036cc:	08003c89 	.word	0x08003c89
 80036d0:	200002d4 	.word	0x200002d4
 80036d4:	08003cf5 	.word	0x08003cf5

080036d8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08e      	sub	sp, #56	; 0x38
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a4e      	ldr	r2, [pc, #312]	; (8003830 <HAL_ETH_MspInit+0x158>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	f040 8096 	bne.w	8003828 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80036fc:	4b4d      	ldr	r3, [pc, #308]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	4a4c      	ldr	r2, [pc, #304]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 8003702:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003706:	6313      	str	r3, [r2, #48]	; 0x30
 8003708:	4b4a      	ldr	r3, [pc, #296]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003710:	623b      	str	r3, [r7, #32]
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	4b47      	ldr	r3, [pc, #284]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	4a46      	ldr	r2, [pc, #280]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 800371a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800371e:	6313      	str	r3, [r2, #48]	; 0x30
 8003720:	4b44      	ldr	r3, [pc, #272]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	4b41      	ldr	r3, [pc, #260]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	4a40      	ldr	r2, [pc, #256]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 8003732:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003736:	6313      	str	r3, [r2, #48]	; 0x30
 8003738:	4b3e      	ldr	r3, [pc, #248]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003744:	4b3b      	ldr	r3, [pc, #236]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	4a3a      	ldr	r2, [pc, #232]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 800374a:	f043 0304 	orr.w	r3, r3, #4
 800374e:	6313      	str	r3, [r2, #48]	; 0x30
 8003750:	4b38      	ldr	r3, [pc, #224]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800375c:	4b35      	ldr	r3, [pc, #212]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	4a34      	ldr	r2, [pc, #208]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	6313      	str	r3, [r2, #48]	; 0x30
 8003768:	4b32      	ldr	r3, [pc, #200]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003774:	4b2f      	ldr	r3, [pc, #188]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	4a2e      	ldr	r2, [pc, #184]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 800377a:	f043 0302 	orr.w	r3, r3, #2
 800377e:	6313      	str	r3, [r2, #48]	; 0x30
 8003780:	4b2c      	ldr	r3, [pc, #176]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800378c:	4b29      	ldr	r3, [pc, #164]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	4a28      	ldr	r2, [pc, #160]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 8003792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003796:	6313      	str	r3, [r2, #48]	; 0x30
 8003798:	4b26      	ldr	r3, [pc, #152]	; (8003834 <HAL_ETH_MspInit+0x15c>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80037a4:	2332      	movs	r3, #50	; 0x32
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a8:	2302      	movs	r3, #2
 80037aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b0:	2303      	movs	r3, #3
 80037b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037b4:	230b      	movs	r3, #11
 80037b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037bc:	4619      	mov	r1, r3
 80037be:	481e      	ldr	r0, [pc, #120]	; (8003838 <HAL_ETH_MspInit+0x160>)
 80037c0:	f7fe fe42 	bl	8002448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80037c4:	2386      	movs	r3, #134	; 0x86
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c8:	2302      	movs	r3, #2
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d0:	2303      	movs	r3, #3
 80037d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037d4:	230b      	movs	r3, #11
 80037d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037dc:	4619      	mov	r1, r3
 80037de:	4817      	ldr	r0, [pc, #92]	; (800383c <HAL_ETH_MspInit+0x164>)
 80037e0:	f7fe fe32 	bl	8002448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80037e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ea:	2302      	movs	r3, #2
 80037ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037f2:	2303      	movs	r3, #3
 80037f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037f6:	230b      	movs	r3, #11
 80037f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037fe:	4619      	mov	r1, r3
 8003800:	480f      	ldr	r0, [pc, #60]	; (8003840 <HAL_ETH_MspInit+0x168>)
 8003802:	f7fe fe21 	bl	8002448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003806:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380c:	2302      	movs	r3, #2
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003810:	2300      	movs	r3, #0
 8003812:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003814:	2303      	movs	r3, #3
 8003816:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003818:	230b      	movs	r3, #11
 800381a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800381c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003820:	4619      	mov	r1, r3
 8003822:	4808      	ldr	r0, [pc, #32]	; (8003844 <HAL_ETH_MspInit+0x16c>)
 8003824:	f7fe fe10 	bl	8002448 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003828:	bf00      	nop
 800382a:	3738      	adds	r7, #56	; 0x38
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40028000 	.word	0x40028000
 8003834:	40023800 	.word	0x40023800
 8003838:	40020800 	.word	0x40020800
 800383c:	40020000 	.word	0x40020000
 8003840:	40020400 	.word	0x40020400
 8003844:	40021800 	.word	0x40021800

08003848 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003854:	4b4d      	ldr	r3, [pc, #308]	; (800398c <low_level_init+0x144>)
 8003856:	4a4e      	ldr	r2, [pc, #312]	; (8003990 <low_level_init+0x148>)
 8003858:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800385a:	4b4c      	ldr	r3, [pc, #304]	; (800398c <low_level_init+0x144>)
 800385c:	2201      	movs	r2, #1
 800385e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003860:	4b4a      	ldr	r3, [pc, #296]	; (800398c <low_level_init+0x144>)
 8003862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003866:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003868:	4b48      	ldr	r3, [pc, #288]	; (800398c <low_level_init+0x144>)
 800386a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800386e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003870:	4b46      	ldr	r3, [pc, #280]	; (800398c <low_level_init+0x144>)
 8003872:	2200      	movs	r2, #0
 8003874:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003876:	2300      	movs	r3, #0
 8003878:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800387e:	23e1      	movs	r3, #225	; 0xe1
 8003880:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003882:	2300      	movs	r3, #0
 8003884:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003886:	2300      	movs	r3, #0
 8003888:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800388a:	2300      	movs	r3, #0
 800388c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800388e:	4a3f      	ldr	r2, [pc, #252]	; (800398c <low_level_init+0x144>)
 8003890:	f107 0308 	add.w	r3, r7, #8
 8003894:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003896:	4b3d      	ldr	r3, [pc, #244]	; (800398c <low_level_init+0x144>)
 8003898:	2200      	movs	r2, #0
 800389a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800389c:	4b3b      	ldr	r3, [pc, #236]	; (800398c <low_level_init+0x144>)
 800389e:	2200      	movs	r2, #0
 80038a0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80038a2:	4b3a      	ldr	r3, [pc, #232]	; (800398c <low_level_init+0x144>)
 80038a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80038a8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80038aa:	4838      	ldr	r0, [pc, #224]	; (800398c <low_level_init+0x144>)
 80038ac:	f7fd fcc8 	bl	8001240 <HAL_ETH_Init>
 80038b0:	4603      	mov	r3, r0
 80038b2:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d108      	bne.n	80038cc <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80038c0:	f043 0304 	orr.w	r3, r3, #4
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80038cc:	2304      	movs	r3, #4
 80038ce:	4a31      	ldr	r2, [pc, #196]	; (8003994 <low_level_init+0x14c>)
 80038d0:	4931      	ldr	r1, [pc, #196]	; (8003998 <low_level_init+0x150>)
 80038d2:	482e      	ldr	r0, [pc, #184]	; (800398c <low_level_init+0x144>)
 80038d4:	f7fd fe4e 	bl	8001574 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80038d8:	2304      	movs	r3, #4
 80038da:	4a30      	ldr	r2, [pc, #192]	; (800399c <low_level_init+0x154>)
 80038dc:	4930      	ldr	r1, [pc, #192]	; (80039a0 <low_level_init+0x158>)
 80038de:	482b      	ldr	r0, [pc, #172]	; (800398c <low_level_init+0x144>)
 80038e0:	f7fd feb1 	bl	8001646 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2206      	movs	r2, #6
 80038e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80038ec:	4b27      	ldr	r3, [pc, #156]	; (800398c <low_level_init+0x144>)
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	781a      	ldrb	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80038f8:	4b24      	ldr	r3, [pc, #144]	; (800398c <low_level_init+0x144>)
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	785a      	ldrb	r2, [r3, #1]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003904:	4b21      	ldr	r3, [pc, #132]	; (800398c <low_level_init+0x144>)
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	789a      	ldrb	r2, [r3, #2]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003910:	4b1e      	ldr	r3, [pc, #120]	; (800398c <low_level_init+0x144>)
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	78da      	ldrb	r2, [r3, #3]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800391c:	4b1b      	ldr	r3, [pc, #108]	; (800398c <low_level_init+0x144>)
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	791a      	ldrb	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003928:	4b18      	ldr	r3, [pc, #96]	; (800398c <low_level_init+0x144>)
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	795a      	ldrb	r2, [r3, #5]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800393a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003942:	f043 030a 	orr.w	r3, r3, #10
 8003946:	b2da      	uxtb	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800394e:	480f      	ldr	r0, [pc, #60]	; (800398c <low_level_init+0x144>)
 8003950:	f7fe f922 	bl	8001b98 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003954:	f107 0310 	add.w	r3, r7, #16
 8003958:	461a      	mov	r2, r3
 800395a:	211d      	movs	r1, #29
 800395c:	480b      	ldr	r0, [pc, #44]	; (800398c <low_level_init+0x144>)
 800395e:	f7fe f84d 	bl	80019fc <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f043 030b 	orr.w	r3, r3, #11
 8003968:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	461a      	mov	r2, r3
 800396e:	211d      	movs	r1, #29
 8003970:	4806      	ldr	r0, [pc, #24]	; (800398c <low_level_init+0x144>)
 8003972:	f7fe f8ab 	bl	8001acc <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003976:	f107 0310 	add.w	r3, r7, #16
 800397a:	461a      	mov	r2, r3
 800397c:	211d      	movs	r1, #29
 800397e:	4803      	ldr	r0, [pc, #12]	; (800398c <low_level_init+0x144>)
 8003980:	f7fe f83c 	bl	80019fc <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003984:	bf00      	nop
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20001bec 	.word	0x20001bec
 8003990:	40028000 	.word	0x40028000
 8003994:	20001c34 	.word	0x20001c34
 8003998:	2000031c 	.word	0x2000031c
 800399c:	2000039c 	.word	0x2000039c
 80039a0:	20001b6c 	.word	0x20001b6c

080039a4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08a      	sub	sp, #40	; 0x28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80039ae:	4b4b      	ldr	r3, [pc, #300]	; (8003adc <low_level_output+0x138>)
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80039ba:	2300      	movs	r3, #0
 80039bc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80039c6:	4b45      	ldr	r3, [pc, #276]	; (8003adc <low_level_output+0x138>)
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	623b      	str	r3, [r7, #32]
 80039d4:	e05a      	b.n	8003a8c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	da03      	bge.n	80039e6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80039de:	23f8      	movs	r3, #248	; 0xf8
 80039e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80039e4:	e05c      	b.n	8003aa0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	895b      	ldrh	r3, [r3, #10]
 80039ea:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80039f0:	e02f      	b.n	8003a52 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80039f2:	69fa      	ldr	r2, [r7, #28]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	18d0      	adds	r0, r2, r3
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	18d1      	adds	r1, r2, r3
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003a06:	1a9b      	subs	r3, r3, r2
 8003a08:	461a      	mov	r2, r3
 8003a0a:	f00a fa7b 	bl	800df04 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	da03      	bge.n	8003a24 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003a1c:	23f8      	movs	r3, #248	; 0xf8
 8003a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003a22:	e03d      	b.n	8003aa0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003a34:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003a40:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003a4c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4413      	add	r3, r2
 8003a58:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d8c8      	bhi.n	80039f2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003a60:	69fa      	ldr	r2, [r7, #28]
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	18d0      	adds	r0, r2, r3
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4619      	mov	r1, r3
 8003a72:	f00a fa47 	bl	800df04 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4413      	add	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	623b      	str	r3, [r7, #32]
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1a1      	bne.n	80039d6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003a92:	6979      	ldr	r1, [r7, #20]
 8003a94:	4811      	ldr	r0, [pc, #68]	; (8003adc <low_level_output+0x138>)
 8003a96:	f7fd fe43 	bl	8001720 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003aa0:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <low_level_output+0x138>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	f241 0314 	movw	r3, #4116	; 0x1014
 8003aa8:	4413      	add	r3, r2
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00d      	beq.n	8003ad0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003ab4:	4b09      	ldr	r3, [pc, #36]	; (8003adc <low_level_output+0x138>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	f241 0314 	movw	r3, #4116	; 0x1014
 8003abc:	4413      	add	r3, r2
 8003abe:	2220      	movs	r2, #32
 8003ac0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003ac2:	4b06      	ldr	r3, [pc, #24]	; (8003adc <low_level_output+0x138>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	f241 0304 	movw	r3, #4100	; 0x1004
 8003aca:	4413      	add	r3, r2
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003ad0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3728      	adds	r7, #40	; 0x28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20001bec 	.word	0x20001bec

08003ae0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08c      	sub	sp, #48	; 0x30
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003b04:	484f      	ldr	r0, [pc, #316]	; (8003c44 <low_level_input+0x164>)
 8003b06:	f7fd fef5 	bl	80018f4 <HAL_ETH_GetReceivedFrame>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <low_level_input+0x34>

    return NULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	e092      	b.n	8003c3a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003b14:	4b4b      	ldr	r3, [pc, #300]	; (8003c44 <low_level_input+0x164>)
 8003b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b18:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003b1a:	4b4a      	ldr	r3, [pc, #296]	; (8003c44 <low_level_input+0x164>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003b20:	89fb      	ldrh	r3, [r7, #14]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d007      	beq.n	8003b36 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003b26:	89fb      	ldrh	r3, [r7, #14]
 8003b28:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	2000      	movs	r0, #0
 8003b30:	f001 f936 	bl	8004da0 <pbuf_alloc>
 8003b34:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d04b      	beq.n	8003bd4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003b3c:	4b41      	ldr	r3, [pc, #260]	; (8003c44 <low_level_input+0x164>)
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b4a:	e040      	b.n	8003bce <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	895b      	ldrh	r3, [r3, #10]
 8003b50:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003b56:	e021      	b.n	8003b9c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	18d0      	adds	r0, r2, r3
 8003b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	18d1      	adds	r1, r2, r3
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f00a f9c8 	bl	800df04 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	4413      	add	r3, r2
 8003b86:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003b8a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003b96:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d8d6      	bhi.n	8003b58 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	18d0      	adds	r0, r2, r3
 8003bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	f00a f9a2 	bl	800df04 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003bc0:	69fa      	ldr	r2, [r7, #28]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1bb      	bne.n	8003b4c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <low_level_input+0x164>)
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	e00b      	b.n	8003bf8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <low_level_input+0x164>)
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d3ee      	bcc.n	8003be0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003c02:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <low_level_input+0x164>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003c08:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <low_level_input+0x164>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	f241 0314 	movw	r3, #4116	; 0x1014
 8003c10:	4413      	add	r3, r2
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00d      	beq.n	8003c38 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003c1c:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <low_level_input+0x164>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	f241 0314 	movw	r3, #4116	; 0x1014
 8003c24:	4413      	add	r3, r2
 8003c26:	2280      	movs	r2, #128	; 0x80
 8003c28:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003c2a:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <low_level_input+0x164>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	f241 0308 	movw	r3, #4104	; 0x1008
 8003c32:	4413      	add	r3, r2
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3730      	adds	r7, #48	; 0x30
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20001bec 	.word	0x20001bec

08003c48 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff ff45 	bl	8003ae0 <low_level_input>
 8003c56:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d010      	beq.n	8003c80 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	4798      	blx	r3
 8003c68:	4603      	mov	r3, r0
 8003c6a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003c6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d006      	beq.n	8003c82 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f001 fb77 	bl	8005368 <pbuf_free>
    p = NULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	e000      	b.n	8003c82 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003c80:	bf00      	nop
  }
}
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <ethernetif_init+0x1c>
 8003c96:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <ethernetif_init+0x48>)
 8003c98:	f240 221a 	movw	r2, #538	; 0x21a
 8003c9c:	490d      	ldr	r1, [pc, #52]	; (8003cd4 <ethernetif_init+0x4c>)
 8003c9e:	480e      	ldr	r0, [pc, #56]	; (8003cd8 <ethernetif_init+0x50>)
 8003ca0:	f00a f960 	bl	800df64 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2273      	movs	r2, #115	; 0x73
 8003ca8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2274      	movs	r2, #116	; 0x74
 8003cb0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a09      	ldr	r2, [pc, #36]	; (8003cdc <ethernetif_init+0x54>)
 8003cb8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a08      	ldr	r2, [pc, #32]	; (8003ce0 <ethernetif_init+0x58>)
 8003cbe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fdc1 	bl	8003848 <low_level_init>

  return ERR_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	0800f414 	.word	0x0800f414
 8003cd4:	0800f430 	.word	0x0800f430
 8003cd8:	0800f440 	.word	0x0800f440
 8003cdc:	0800c1b9 	.word	0x0800c1b9
 8003ce0:	080039a5 	.word	0x080039a5

08003ce4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003ce8:	f7fd f8ec 	bl	8000ec4 <HAL_GetTick>
 8003cec:	4603      	mov	r3, r0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003d0a:	089b      	lsrs	r3, r3, #2
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d05d      	beq.n	8003dd2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003d16:	4b34      	ldr	r3, [pc, #208]	; (8003de8 <ethernetif_update_config+0xf4>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d03f      	beq.n	8003d9e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003d1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d22:	2100      	movs	r1, #0
 8003d24:	4830      	ldr	r0, [pc, #192]	; (8003de8 <ethernetif_update_config+0xf4>)
 8003d26:	f7fd fed1 	bl	8001acc <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003d2a:	f7fd f8cb 	bl	8000ec4 <HAL_GetTick>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003d32:	f107 0308 	add.w	r3, r7, #8
 8003d36:	461a      	mov	r2, r3
 8003d38:	2101      	movs	r1, #1
 8003d3a:	482b      	ldr	r0, [pc, #172]	; (8003de8 <ethernetif_update_config+0xf4>)
 8003d3c:	f7fd fe5e 	bl	80019fc <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003d40:	f7fd f8c0 	bl	8000ec4 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d4e:	d828      	bhi.n	8003da2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0eb      	beq.n	8003d32 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003d5a:	f107 0308 	add.w	r3, r7, #8
 8003d5e:	461a      	mov	r2, r3
 8003d60:	2110      	movs	r1, #16
 8003d62:	4821      	ldr	r0, [pc, #132]	; (8003de8 <ethernetif_update_config+0xf4>)
 8003d64:	f7fd fe4a 	bl	80019fc <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d004      	beq.n	8003d7c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003d72:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <ethernetif_update_config+0xf4>)
 8003d74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d78:	60da      	str	r2, [r3, #12]
 8003d7a:	e002      	b.n	8003d82 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003d7c:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <ethernetif_update_config+0xf4>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003d8c:	4b16      	ldr	r3, [pc, #88]	; (8003de8 <ethernetif_update_config+0xf4>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	609a      	str	r2, [r3, #8]
 8003d92:	e016      	b.n	8003dc2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003d94:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <ethernetif_update_config+0xf4>)
 8003d96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d9a:	609a      	str	r2, [r3, #8]
 8003d9c:	e011      	b.n	8003dc2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003d9e:	bf00      	nop
 8003da0:	e000      	b.n	8003da4 <ethernetif_update_config+0xb0>
          goto error;
 8003da2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003da4:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <ethernetif_update_config+0xf4>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	08db      	lsrs	r3, r3, #3
 8003daa:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <ethernetif_update_config+0xf4>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	085b      	lsrs	r3, r3, #1
 8003db2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003db4:	4313      	orrs	r3, r2
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	2100      	movs	r1, #0
 8003dbc:	480a      	ldr	r0, [pc, #40]	; (8003de8 <ethernetif_update_config+0xf4>)
 8003dbe:	f7fd fe85 	bl	8001acc <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4808      	ldr	r0, [pc, #32]	; (8003de8 <ethernetif_update_config+0xf4>)
 8003dc6:	f7fd ff45 	bl	8001c54 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003dca:	4807      	ldr	r0, [pc, #28]	; (8003de8 <ethernetif_update_config+0xf4>)
 8003dcc:	f7fd fee4 	bl	8001b98 <HAL_ETH_Start>
 8003dd0:	e002      	b.n	8003dd8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003dd2:	4805      	ldr	r0, [pc, #20]	; (8003de8 <ethernetif_update_config+0xf4>)
 8003dd4:	f7fd ff0f 	bl	8001bf6 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f807 	bl	8003dec <ethernetif_notify_conn_changed>
}
 8003dde:	bf00      	nop
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20001bec 	.word	0x20001bec

08003dec <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	021b      	lsls	r3, r3, #8
 8003e0e:	b21a      	sxth	r2, r3
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	b21b      	sxth	r3, r3
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	b21b      	sxth	r3, r3
 8003e1c:	b29b      	uxth	r3, r3
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	061a      	lsls	r2, r3, #24
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	0a1b      	lsrs	r3, r3, #8
 8003e44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	0e1b      	lsrs	r3, r3, #24
 8003e4e:	4313      	orrs	r3, r2
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003e66:	f000 f8d5 	bl	8004014 <mem_init>
  memp_init();
 8003e6a:	f000 fbdb 	bl	8004624 <memp_init>
  pbuf_init();
  netif_init();
 8003e6e:	f000 fc93 	bl	8004798 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003e72:	f007 f84b 	bl	800af0c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003e76:	f001 fda7 	bl	80059c8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003e7a:	f006 ffbd 	bl	800adf8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003e7e:	bf00      	nop
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003e92:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <ptr_to_mem+0x20>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	4413      	add	r3, r2
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	20000098 	.word	0x20000098

08003eac <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <mem_to_ptr+0x20>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	b29b      	uxth	r3, r3
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	20000098 	.word	0x20000098

08003ed0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003ed0:	b590      	push	{r4, r7, lr}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003ed8:	4b45      	ldr	r3, [pc, #276]	; (8003ff0 <plug_holes+0x120>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d206      	bcs.n	8003ef0 <plug_holes+0x20>
 8003ee2:	4b44      	ldr	r3, [pc, #272]	; (8003ff4 <plug_holes+0x124>)
 8003ee4:	f240 12df 	movw	r2, #479	; 0x1df
 8003ee8:	4943      	ldr	r1, [pc, #268]	; (8003ff8 <plug_holes+0x128>)
 8003eea:	4844      	ldr	r0, [pc, #272]	; (8003ffc <plug_holes+0x12c>)
 8003eec:	f00a f83a 	bl	800df64 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003ef0:	4b43      	ldr	r3, [pc, #268]	; (8004000 <plug_holes+0x130>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d306      	bcc.n	8003f08 <plug_holes+0x38>
 8003efa:	4b3e      	ldr	r3, [pc, #248]	; (8003ff4 <plug_holes+0x124>)
 8003efc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003f00:	4940      	ldr	r1, [pc, #256]	; (8004004 <plug_holes+0x134>)
 8003f02:	483e      	ldr	r0, [pc, #248]	; (8003ffc <plug_holes+0x12c>)
 8003f04:	f00a f82e 	bl	800df64 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	791b      	ldrb	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d006      	beq.n	8003f1e <plug_holes+0x4e>
 8003f10:	4b38      	ldr	r3, [pc, #224]	; (8003ff4 <plug_holes+0x124>)
 8003f12:	f240 12e1 	movw	r2, #481	; 0x1e1
 8003f16:	493c      	ldr	r1, [pc, #240]	; (8004008 <plug_holes+0x138>)
 8003f18:	4838      	ldr	r0, [pc, #224]	; (8003ffc <plug_holes+0x12c>)
 8003f1a:	f00a f823 	bl	800df64 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003f26:	d906      	bls.n	8003f36 <plug_holes+0x66>
 8003f28:	4b32      	ldr	r3, [pc, #200]	; (8003ff4 <plug_holes+0x124>)
 8003f2a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8003f2e:	4937      	ldr	r1, [pc, #220]	; (800400c <plug_holes+0x13c>)
 8003f30:	4832      	ldr	r0, [pc, #200]	; (8003ffc <plug_holes+0x12c>)
 8003f32:	f00a f817 	bl	800df64 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff ffa4 	bl	8003e88 <ptr_to_mem>
 8003f40:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d024      	beq.n	8003f94 <plug_holes+0xc4>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	791b      	ldrb	r3, [r3, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d120      	bne.n	8003f94 <plug_holes+0xc4>
 8003f52:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <plug_holes+0x130>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d01b      	beq.n	8003f94 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003f5c:	4b2c      	ldr	r3, [pc, #176]	; (8004010 <plug_holes+0x140>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d102      	bne.n	8003f6c <plug_holes+0x9c>
      lfree = mem;
 8003f66:	4a2a      	ldr	r2, [pc, #168]	; (8004010 <plug_holes+0x140>)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	881a      	ldrh	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003f7c:	d00a      	beq.n	8003f94 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff ff80 	bl	8003e88 <ptr_to_mem>
 8003f88:	4604      	mov	r4, r0
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff ff8e 	bl	8003eac <mem_to_ptr>
 8003f90:	4603      	mov	r3, r0
 8003f92:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	885b      	ldrh	r3, [r3, #2]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff ff75 	bl	8003e88 <ptr_to_mem>
 8003f9e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d01f      	beq.n	8003fe8 <plug_holes+0x118>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	791b      	ldrb	r3, [r3, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d11b      	bne.n	8003fe8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003fb0:	4b17      	ldr	r3, [pc, #92]	; (8004010 <plug_holes+0x140>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d102      	bne.n	8003fc0 <plug_holes+0xf0>
      lfree = pmem;
 8003fba:	4a15      	ldr	r2, [pc, #84]	; (8004010 <plug_holes+0x140>)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	881a      	ldrh	r2, [r3, #0]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003fd0:	d00a      	beq.n	8003fe8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff ff56 	bl	8003e88 <ptr_to_mem>
 8003fdc:	4604      	mov	r4, r0
 8003fde:	68b8      	ldr	r0, [r7, #8]
 8003fe0:	f7ff ff64 	bl	8003eac <mem_to_ptr>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003fe8:	bf00      	nop
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd90      	pop	{r4, r7, pc}
 8003ff0:	20000098 	.word	0x20000098
 8003ff4:	0800f468 	.word	0x0800f468
 8003ff8:	0800f498 	.word	0x0800f498
 8003ffc:	0800f4b0 	.word	0x0800f4b0
 8004000:	2000009c 	.word	0x2000009c
 8004004:	0800f4d8 	.word	0x0800f4d8
 8004008:	0800f4f4 	.word	0x0800f4f4
 800400c:	0800f510 	.word	0x0800f510
 8004010:	200000a0 	.word	0x200000a0

08004014 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800401a:	4b18      	ldr	r3, [pc, #96]	; (800407c <mem_init+0x68>)
 800401c:	3303      	adds	r3, #3
 800401e:	f023 0303 	bic.w	r3, r3, #3
 8004022:	461a      	mov	r2, r3
 8004024:	4b16      	ldr	r3, [pc, #88]	; (8004080 <mem_init+0x6c>)
 8004026:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004028:	4b15      	ldr	r3, [pc, #84]	; (8004080 <mem_init+0x6c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004034:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004042:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8004046:	f7ff ff1f 	bl	8003e88 <ptr_to_mem>
 800404a:	4603      	mov	r3, r0
 800404c:	4a0d      	ldr	r2, [pc, #52]	; (8004084 <mem_init+0x70>)
 800404e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004050:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <mem_init+0x70>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2201      	movs	r2, #1
 8004056:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004058:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <mem_init+0x70>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004060:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004062:	4b08      	ldr	r3, [pc, #32]	; (8004084 <mem_init+0x70>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800406a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800406c:	4b04      	ldr	r3, [pc, #16]	; (8004080 <mem_init+0x6c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a05      	ldr	r2, [pc, #20]	; (8004088 <mem_init+0x74>)
 8004072:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	2000341c 	.word	0x2000341c
 8004080:	20000098 	.word	0x20000098
 8004084:	2000009c 	.word	0x2000009c
 8004088:	200000a0 	.word	0x200000a0

0800408c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff ff09 	bl	8003eac <mem_to_ptr>
 800409a:	4603      	mov	r3, r0
 800409c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff fef0 	bl	8003e88 <ptr_to_mem>
 80040a8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	885b      	ldrh	r3, [r3, #2]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff feea 	bl	8003e88 <ptr_to_mem>
 80040b4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80040be:	d818      	bhi.n	80040f2 <mem_link_valid+0x66>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	885b      	ldrh	r3, [r3, #2]
 80040c4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80040c8:	d813      	bhi.n	80040f2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80040ce:	8afa      	ldrh	r2, [r7, #22]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d004      	beq.n	80040de <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	8afa      	ldrh	r2, [r7, #22]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d109      	bne.n	80040f2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80040de:	4b08      	ldr	r3, [pc, #32]	; (8004100 <mem_link_valid+0x74>)
 80040e0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d006      	beq.n	80040f6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	885b      	ldrh	r3, [r3, #2]
 80040ec:	8afa      	ldrh	r2, [r7, #22]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d001      	beq.n	80040f6 <mem_link_valid+0x6a>
    return 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e000      	b.n	80040f8 <mem_link_valid+0x6c>
  }
  return 1;
 80040f6:	2301      	movs	r3, #1
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	2000009c 	.word	0x2000009c

08004104 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d04c      	beq.n	80041ac <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d007      	beq.n	800412c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800411c:	4b25      	ldr	r3, [pc, #148]	; (80041b4 <mem_free+0xb0>)
 800411e:	f240 2273 	movw	r2, #627	; 0x273
 8004122:	4925      	ldr	r1, [pc, #148]	; (80041b8 <mem_free+0xb4>)
 8004124:	4825      	ldr	r0, [pc, #148]	; (80041bc <mem_free+0xb8>)
 8004126:	f009 ff1d 	bl	800df64 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800412a:	e040      	b.n	80041ae <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3b08      	subs	r3, #8
 8004130:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004132:	4b23      	ldr	r3, [pc, #140]	; (80041c0 <mem_free+0xbc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	429a      	cmp	r2, r3
 800413a:	d306      	bcc.n	800414a <mem_free+0x46>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f103 020c 	add.w	r2, r3, #12
 8004142:	4b20      	ldr	r3, [pc, #128]	; (80041c4 <mem_free+0xc0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d907      	bls.n	800415a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800414a:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <mem_free+0xb0>)
 800414c:	f240 227f 	movw	r2, #639	; 0x27f
 8004150:	491d      	ldr	r1, [pc, #116]	; (80041c8 <mem_free+0xc4>)
 8004152:	481a      	ldr	r0, [pc, #104]	; (80041bc <mem_free+0xb8>)
 8004154:	f009 ff06 	bl	800df64 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004158:	e029      	b.n	80041ae <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	791b      	ldrb	r3, [r3, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d107      	bne.n	8004172 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004162:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <mem_free+0xb0>)
 8004164:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004168:	4918      	ldr	r1, [pc, #96]	; (80041cc <mem_free+0xc8>)
 800416a:	4814      	ldr	r0, [pc, #80]	; (80041bc <mem_free+0xb8>)
 800416c:	f009 fefa 	bl	800df64 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004170:	e01d      	b.n	80041ae <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f7ff ff8a 	bl	800408c <mem_link_valid>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d107      	bne.n	800418e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800417e:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <mem_free+0xb0>)
 8004180:	f240 2295 	movw	r2, #661	; 0x295
 8004184:	4912      	ldr	r1, [pc, #72]	; (80041d0 <mem_free+0xcc>)
 8004186:	480d      	ldr	r0, [pc, #52]	; (80041bc <mem_free+0xb8>)
 8004188:	f009 feec 	bl	800df64 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800418c:	e00f      	b.n	80041ae <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004194:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <mem_free+0xd0>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	429a      	cmp	r2, r3
 800419c:	d202      	bcs.n	80041a4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800419e:	4a0d      	ldr	r2, [pc, #52]	; (80041d4 <mem_free+0xd0>)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f7ff fe93 	bl	8003ed0 <plug_holes>
 80041aa:	e000      	b.n	80041ae <mem_free+0xaa>
    return;
 80041ac:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	0800f468 	.word	0x0800f468
 80041b8:	0800f53c 	.word	0x0800f53c
 80041bc:	0800f4b0 	.word	0x0800f4b0
 80041c0:	20000098 	.word	0x20000098
 80041c4:	2000009c 	.word	0x2000009c
 80041c8:	0800f560 	.word	0x0800f560
 80041cc:	0800f57c 	.word	0x0800f57c
 80041d0:	0800f5a4 	.word	0x0800f5a4
 80041d4:	200000a0 	.word	0x200000a0

080041d8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80041e4:	887b      	ldrh	r3, [r7, #2]
 80041e6:	3303      	adds	r3, #3
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	f023 0303 	bic.w	r3, r3, #3
 80041ee:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80041f0:	8bfb      	ldrh	r3, [r7, #30]
 80041f2:	2b0b      	cmp	r3, #11
 80041f4:	d801      	bhi.n	80041fa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80041f6:	230c      	movs	r3, #12
 80041f8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80041fa:	8bfb      	ldrh	r3, [r7, #30]
 80041fc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004200:	d803      	bhi.n	800420a <mem_trim+0x32>
 8004202:	8bfa      	ldrh	r2, [r7, #30]
 8004204:	887b      	ldrh	r3, [r7, #2]
 8004206:	429a      	cmp	r2, r3
 8004208:	d201      	bcs.n	800420e <mem_trim+0x36>
    return NULL;
 800420a:	2300      	movs	r3, #0
 800420c:	e0cc      	b.n	80043a8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800420e:	4b68      	ldr	r3, [pc, #416]	; (80043b0 <mem_trim+0x1d8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	429a      	cmp	r2, r3
 8004216:	d304      	bcc.n	8004222 <mem_trim+0x4a>
 8004218:	4b66      	ldr	r3, [pc, #408]	; (80043b4 <mem_trim+0x1dc>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	429a      	cmp	r2, r3
 8004220:	d306      	bcc.n	8004230 <mem_trim+0x58>
 8004222:	4b65      	ldr	r3, [pc, #404]	; (80043b8 <mem_trim+0x1e0>)
 8004224:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004228:	4964      	ldr	r1, [pc, #400]	; (80043bc <mem_trim+0x1e4>)
 800422a:	4865      	ldr	r0, [pc, #404]	; (80043c0 <mem_trim+0x1e8>)
 800422c:	f009 fe9a 	bl	800df64 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004230:	4b5f      	ldr	r3, [pc, #380]	; (80043b0 <mem_trim+0x1d8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	429a      	cmp	r2, r3
 8004238:	d304      	bcc.n	8004244 <mem_trim+0x6c>
 800423a:	4b5e      	ldr	r3, [pc, #376]	; (80043b4 <mem_trim+0x1dc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	429a      	cmp	r2, r3
 8004242:	d301      	bcc.n	8004248 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	e0af      	b.n	80043a8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3b08      	subs	r3, #8
 800424c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800424e:	69b8      	ldr	r0, [r7, #24]
 8004250:	f7ff fe2c 	bl	8003eac <mem_to_ptr>
 8004254:	4603      	mov	r3, r0
 8004256:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	881a      	ldrh	r2, [r3, #0]
 800425c:	8afb      	ldrh	r3, [r7, #22]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	b29b      	uxth	r3, r3
 8004262:	3b08      	subs	r3, #8
 8004264:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004266:	8bfa      	ldrh	r2, [r7, #30]
 8004268:	8abb      	ldrh	r3, [r7, #20]
 800426a:	429a      	cmp	r2, r3
 800426c:	d906      	bls.n	800427c <mem_trim+0xa4>
 800426e:	4b52      	ldr	r3, [pc, #328]	; (80043b8 <mem_trim+0x1e0>)
 8004270:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004274:	4953      	ldr	r1, [pc, #332]	; (80043c4 <mem_trim+0x1ec>)
 8004276:	4852      	ldr	r0, [pc, #328]	; (80043c0 <mem_trim+0x1e8>)
 8004278:	f009 fe74 	bl	800df64 <iprintf>
  if (newsize > size) {
 800427c:	8bfa      	ldrh	r2, [r7, #30]
 800427e:	8abb      	ldrh	r3, [r7, #20]
 8004280:	429a      	cmp	r2, r3
 8004282:	d901      	bls.n	8004288 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004284:	2300      	movs	r3, #0
 8004286:	e08f      	b.n	80043a8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004288:	8bfa      	ldrh	r2, [r7, #30]
 800428a:	8abb      	ldrh	r3, [r7, #20]
 800428c:	429a      	cmp	r2, r3
 800428e:	d101      	bne.n	8004294 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	e089      	b.n	80043a8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fdf5 	bl	8003e88 <ptr_to_mem>
 800429e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	791b      	ldrb	r3, [r3, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d13f      	bne.n	8004328 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80042b0:	d106      	bne.n	80042c0 <mem_trim+0xe8>
 80042b2:	4b41      	ldr	r3, [pc, #260]	; (80043b8 <mem_trim+0x1e0>)
 80042b4:	f240 22f5 	movw	r2, #757	; 0x2f5
 80042b8:	4943      	ldr	r1, [pc, #268]	; (80043c8 <mem_trim+0x1f0>)
 80042ba:	4841      	ldr	r0, [pc, #260]	; (80043c0 <mem_trim+0x1e8>)
 80042bc:	f009 fe52 	bl	800df64 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80042c6:	8afa      	ldrh	r2, [r7, #22]
 80042c8:	8bfb      	ldrh	r3, [r7, #30]
 80042ca:	4413      	add	r3, r2
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3308      	adds	r3, #8
 80042d0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80042d2:	4b3e      	ldr	r3, [pc, #248]	; (80043cc <mem_trim+0x1f4>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d106      	bne.n	80042ea <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80042dc:	89fb      	ldrh	r3, [r7, #14]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fdd2 	bl	8003e88 <ptr_to_mem>
 80042e4:	4603      	mov	r3, r0
 80042e6:	4a39      	ldr	r2, [pc, #228]	; (80043cc <mem_trim+0x1f4>)
 80042e8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80042ea:	89fb      	ldrh	r3, [r7, #14]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fdcb 	bl	8003e88 <ptr_to_mem>
 80042f2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	2200      	movs	r2, #0
 80042f8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	89ba      	ldrh	r2, [r7, #12]
 80042fe:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	8afa      	ldrh	r2, [r7, #22]
 8004304:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	89fa      	ldrh	r2, [r7, #14]
 800430a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004314:	d047      	beq.n	80043a6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff fdb4 	bl	8003e88 <ptr_to_mem>
 8004320:	4602      	mov	r2, r0
 8004322:	89fb      	ldrh	r3, [r7, #14]
 8004324:	8053      	strh	r3, [r2, #2]
 8004326:	e03e      	b.n	80043a6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004328:	8bfb      	ldrh	r3, [r7, #30]
 800432a:	f103 0214 	add.w	r2, r3, #20
 800432e:	8abb      	ldrh	r3, [r7, #20]
 8004330:	429a      	cmp	r2, r3
 8004332:	d838      	bhi.n	80043a6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004334:	8afa      	ldrh	r2, [r7, #22]
 8004336:	8bfb      	ldrh	r3, [r7, #30]
 8004338:	4413      	add	r3, r2
 800433a:	b29b      	uxth	r3, r3
 800433c:	3308      	adds	r3, #8
 800433e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004348:	d106      	bne.n	8004358 <mem_trim+0x180>
 800434a:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <mem_trim+0x1e0>)
 800434c:	f240 3216 	movw	r2, #790	; 0x316
 8004350:	491d      	ldr	r1, [pc, #116]	; (80043c8 <mem_trim+0x1f0>)
 8004352:	481b      	ldr	r0, [pc, #108]	; (80043c0 <mem_trim+0x1e8>)
 8004354:	f009 fe06 	bl	800df64 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004358:	89fb      	ldrh	r3, [r7, #14]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff fd94 	bl	8003e88 <ptr_to_mem>
 8004360:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004362:	4b1a      	ldr	r3, [pc, #104]	; (80043cc <mem_trim+0x1f4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	429a      	cmp	r2, r3
 800436a:	d202      	bcs.n	8004372 <mem_trim+0x19a>
      lfree = mem2;
 800436c:	4a17      	ldr	r2, [pc, #92]	; (80043cc <mem_trim+0x1f4>)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2200      	movs	r2, #0
 8004376:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	881a      	ldrh	r2, [r3, #0]
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	8afa      	ldrh	r2, [r7, #22]
 8004384:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	89fa      	ldrh	r2, [r7, #14]
 800438a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004394:	d007      	beq.n	80043a6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff fd74 	bl	8003e88 <ptr_to_mem>
 80043a0:	4602      	mov	r2, r0
 80043a2:	89fb      	ldrh	r3, [r7, #14]
 80043a4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80043a6:	687b      	ldr	r3, [r7, #4]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000098 	.word	0x20000098
 80043b4:	2000009c 	.word	0x2000009c
 80043b8:	0800f468 	.word	0x0800f468
 80043bc:	0800f5d8 	.word	0x0800f5d8
 80043c0:	0800f4b0 	.word	0x0800f4b0
 80043c4:	0800f5f0 	.word	0x0800f5f0
 80043c8:	0800f610 	.word	0x0800f610
 80043cc:	200000a0 	.word	0x200000a0

080043d0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80043da:	88fb      	ldrh	r3, [r7, #6]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <mem_malloc+0x14>
    return NULL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e0d9      	b.n	8004598 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80043e4:	88fb      	ldrh	r3, [r7, #6]
 80043e6:	3303      	adds	r3, #3
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	f023 0303 	bic.w	r3, r3, #3
 80043ee:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80043f0:	8bbb      	ldrh	r3, [r7, #28]
 80043f2:	2b0b      	cmp	r3, #11
 80043f4:	d801      	bhi.n	80043fa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80043f6:	230c      	movs	r3, #12
 80043f8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80043fa:	8bbb      	ldrh	r3, [r7, #28]
 80043fc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004400:	d803      	bhi.n	800440a <mem_malloc+0x3a>
 8004402:	8bba      	ldrh	r2, [r7, #28]
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	429a      	cmp	r2, r3
 8004408:	d201      	bcs.n	800440e <mem_malloc+0x3e>
    return NULL;
 800440a:	2300      	movs	r3, #0
 800440c:	e0c4      	b.n	8004598 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800440e:	4b64      	ldr	r3, [pc, #400]	; (80045a0 <mem_malloc+0x1d0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff fd4a 	bl	8003eac <mem_to_ptr>
 8004418:	4603      	mov	r3, r0
 800441a:	83fb      	strh	r3, [r7, #30]
 800441c:	e0b4      	b.n	8004588 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800441e:	8bfb      	ldrh	r3, [r7, #30]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fd31 	bl	8003e88 <ptr_to_mem>
 8004426:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	791b      	ldrb	r3, [r3, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	f040 80a4 	bne.w	800457a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	8bfb      	ldrh	r3, [r7, #30]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f1a3 0208 	sub.w	r2, r3, #8
 8004440:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004442:	429a      	cmp	r2, r3
 8004444:	f0c0 8099 	bcc.w	800457a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	461a      	mov	r2, r3
 800444e:	8bfb      	ldrh	r3, [r7, #30]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	f1a3 0208 	sub.w	r2, r3, #8
 8004456:	8bbb      	ldrh	r3, [r7, #28]
 8004458:	3314      	adds	r3, #20
 800445a:	429a      	cmp	r2, r3
 800445c:	d333      	bcc.n	80044c6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800445e:	8bfa      	ldrh	r2, [r7, #30]
 8004460:	8bbb      	ldrh	r3, [r7, #28]
 8004462:	4413      	add	r3, r2
 8004464:	b29b      	uxth	r3, r3
 8004466:	3308      	adds	r3, #8
 8004468:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800446a:	8a7b      	ldrh	r3, [r7, #18]
 800446c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004470:	d106      	bne.n	8004480 <mem_malloc+0xb0>
 8004472:	4b4c      	ldr	r3, [pc, #304]	; (80045a4 <mem_malloc+0x1d4>)
 8004474:	f240 3287 	movw	r2, #903	; 0x387
 8004478:	494b      	ldr	r1, [pc, #300]	; (80045a8 <mem_malloc+0x1d8>)
 800447a:	484c      	ldr	r0, [pc, #304]	; (80045ac <mem_malloc+0x1dc>)
 800447c:	f009 fd72 	bl	800df64 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004480:	8a7b      	ldrh	r3, [r7, #18]
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff fd00 	bl	8003e88 <ptr_to_mem>
 8004488:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	881a      	ldrh	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8bfa      	ldrh	r2, [r7, #30]
 800449c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	8a7a      	ldrh	r2, [r7, #18]
 80044a2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2201      	movs	r2, #1
 80044a8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80044b2:	d00b      	beq.n	80044cc <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff fce5 	bl	8003e88 <ptr_to_mem>
 80044be:	4602      	mov	r2, r0
 80044c0:	8a7b      	ldrh	r3, [r7, #18]
 80044c2:	8053      	strh	r3, [r2, #2]
 80044c4:	e002      	b.n	80044cc <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2201      	movs	r2, #1
 80044ca:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80044cc:	4b34      	ldr	r3, [pc, #208]	; (80045a0 <mem_malloc+0x1d0>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d127      	bne.n	8004526 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80044d6:	4b32      	ldr	r3, [pc, #200]	; (80045a0 <mem_malloc+0x1d0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80044dc:	e005      	b.n	80044ea <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff fcd0 	bl	8003e88 <ptr_to_mem>
 80044e8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	791b      	ldrb	r3, [r3, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d004      	beq.n	80044fc <mem_malloc+0x12c>
 80044f2:	4b2f      	ldr	r3, [pc, #188]	; (80045b0 <mem_malloc+0x1e0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d1f0      	bne.n	80044de <mem_malloc+0x10e>
          }
          lfree = cur;
 80044fc:	4a28      	ldr	r2, [pc, #160]	; (80045a0 <mem_malloc+0x1d0>)
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004502:	4b27      	ldr	r3, [pc, #156]	; (80045a0 <mem_malloc+0x1d0>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <mem_malloc+0x1e0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d00b      	beq.n	8004526 <mem_malloc+0x156>
 800450e:	4b24      	ldr	r3, [pc, #144]	; (80045a0 <mem_malloc+0x1d0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	791b      	ldrb	r3, [r3, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d006      	beq.n	8004526 <mem_malloc+0x156>
 8004518:	4b22      	ldr	r3, [pc, #136]	; (80045a4 <mem_malloc+0x1d4>)
 800451a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800451e:	4925      	ldr	r1, [pc, #148]	; (80045b4 <mem_malloc+0x1e4>)
 8004520:	4822      	ldr	r0, [pc, #136]	; (80045ac <mem_malloc+0x1dc>)
 8004522:	f009 fd1f 	bl	800df64 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004526:	8bba      	ldrh	r2, [r7, #28]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	4413      	add	r3, r2
 800452c:	3308      	adds	r3, #8
 800452e:	4a20      	ldr	r2, [pc, #128]	; (80045b0 <mem_malloc+0x1e0>)
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	4293      	cmp	r3, r2
 8004534:	d906      	bls.n	8004544 <mem_malloc+0x174>
 8004536:	4b1b      	ldr	r3, [pc, #108]	; (80045a4 <mem_malloc+0x1d4>)
 8004538:	f240 32b9 	movw	r2, #953	; 0x3b9
 800453c:	491e      	ldr	r1, [pc, #120]	; (80045b8 <mem_malloc+0x1e8>)
 800453e:	481b      	ldr	r0, [pc, #108]	; (80045ac <mem_malloc+0x1dc>)
 8004540:	f009 fd10 	bl	800df64 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d006      	beq.n	800455c <mem_malloc+0x18c>
 800454e:	4b15      	ldr	r3, [pc, #84]	; (80045a4 <mem_malloc+0x1d4>)
 8004550:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004554:	4919      	ldr	r1, [pc, #100]	; (80045bc <mem_malloc+0x1ec>)
 8004556:	4815      	ldr	r0, [pc, #84]	; (80045ac <mem_malloc+0x1dc>)
 8004558:	f009 fd04 	bl	800df64 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d006      	beq.n	8004574 <mem_malloc+0x1a4>
 8004566:	4b0f      	ldr	r3, [pc, #60]	; (80045a4 <mem_malloc+0x1d4>)
 8004568:	f240 32bd 	movw	r2, #957	; 0x3bd
 800456c:	4914      	ldr	r1, [pc, #80]	; (80045c0 <mem_malloc+0x1f0>)
 800456e:	480f      	ldr	r0, [pc, #60]	; (80045ac <mem_malloc+0x1dc>)
 8004570:	f009 fcf8 	bl	800df64 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	3308      	adds	r3, #8
 8004578:	e00e      	b.n	8004598 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800457a:	8bfb      	ldrh	r3, [r7, #30]
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff fc83 	bl	8003e88 <ptr_to_mem>
 8004582:	4603      	mov	r3, r0
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004588:	8bfa      	ldrh	r2, [r7, #30]
 800458a:	8bbb      	ldrh	r3, [r7, #28]
 800458c:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8004590:	429a      	cmp	r2, r3
 8004592:	f4ff af44 	bcc.w	800441e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3720      	adds	r7, #32
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	200000a0 	.word	0x200000a0
 80045a4:	0800f468 	.word	0x0800f468
 80045a8:	0800f610 	.word	0x0800f610
 80045ac:	0800f4b0 	.word	0x0800f4b0
 80045b0:	2000009c 	.word	0x2000009c
 80045b4:	0800f624 	.word	0x0800f624
 80045b8:	0800f640 	.word	0x0800f640
 80045bc:	0800f670 	.word	0x0800f670
 80045c0:	0800f6a0 	.word	0x0800f6a0

080045c4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	3303      	adds	r3, #3
 80045da:	f023 0303 	bic.w	r3, r3, #3
 80045de:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e011      	b.n	800460a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4413      	add	r3, r2
 8004602:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3301      	adds	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	885b      	ldrh	r3, [r3, #2]
 800460e:	461a      	mov	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4293      	cmp	r3, r2
 8004614:	dbe7      	blt.n	80045e6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004616:	bf00      	nop
 8004618:	bf00      	nop
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800462a:	2300      	movs	r3, #0
 800462c:	80fb      	strh	r3, [r7, #6]
 800462e:	e009      	b.n	8004644 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004630:	88fb      	ldrh	r3, [r7, #6]
 8004632:	4a08      	ldr	r2, [pc, #32]	; (8004654 <memp_init+0x30>)
 8004634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff ffc3 	bl	80045c4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	3301      	adds	r3, #1
 8004642:	80fb      	strh	r3, [r7, #6]
 8004644:	88fb      	ldrh	r3, [r7, #6]
 8004646:	2b08      	cmp	r3, #8
 8004648:	d9f2      	bls.n	8004630 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800464a:	bf00      	nop
 800464c:	bf00      	nop
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	08011e70 	.word	0x08011e70

08004658 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d012      	beq.n	8004694 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	6812      	ldr	r2, [r2, #0]
 8004676:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d006      	beq.n	8004690 <do_memp_malloc_pool+0x38>
 8004682:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <do_memp_malloc_pool+0x48>)
 8004684:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004688:	4906      	ldr	r1, [pc, #24]	; (80046a4 <do_memp_malloc_pool+0x4c>)
 800468a:	4807      	ldr	r0, [pc, #28]	; (80046a8 <do_memp_malloc_pool+0x50>)
 800468c:	f009 fc6a 	bl	800df64 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	e000      	b.n	8004696 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	0800f6c4 	.word	0x0800f6c4
 80046a4:	0800f6f4 	.word	0x0800f6f4
 80046a8:	0800f718 	.word	0x0800f718

080046ac <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d908      	bls.n	80046ce <memp_malloc+0x22>
 80046bc:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <memp_malloc+0x3c>)
 80046be:	f240 1257 	movw	r2, #343	; 0x157
 80046c2:	490a      	ldr	r1, [pc, #40]	; (80046ec <memp_malloc+0x40>)
 80046c4:	480a      	ldr	r0, [pc, #40]	; (80046f0 <memp_malloc+0x44>)
 80046c6:	f009 fc4d 	bl	800df64 <iprintf>
 80046ca:	2300      	movs	r3, #0
 80046cc:	e008      	b.n	80046e0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	4a08      	ldr	r2, [pc, #32]	; (80046f4 <memp_malloc+0x48>)
 80046d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff ffbe 	bl	8004658 <do_memp_malloc_pool>
 80046dc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80046de:	68fb      	ldr	r3, [r7, #12]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	0800f6c4 	.word	0x0800f6c4
 80046ec:	0800f754 	.word	0x0800f754
 80046f0:	0800f718 	.word	0x0800f718
 80046f4:	08011e70 	.word	0x08011e70

080046f8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	f003 0303 	and.w	r3, r3, #3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d006      	beq.n	800471a <do_memp_free_pool+0x22>
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <do_memp_free_pool+0x40>)
 800470e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004712:	490a      	ldr	r1, [pc, #40]	; (800473c <do_memp_free_pool+0x44>)
 8004714:	480a      	ldr	r0, [pc, #40]	; (8004740 <do_memp_free_pool+0x48>)
 8004716:	f009 fc25 	bl	800df64 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	0800f6c4 	.word	0x0800f6c4
 800473c:	0800f774 	.word	0x0800f774
 8004740:	0800f718 	.word	0x0800f718

08004744 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	6039      	str	r1, [r7, #0]
 800474e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004750:	79fb      	ldrb	r3, [r7, #7]
 8004752:	2b08      	cmp	r3, #8
 8004754:	d907      	bls.n	8004766 <memp_free+0x22>
 8004756:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <memp_free+0x44>)
 8004758:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800475c:	490b      	ldr	r1, [pc, #44]	; (800478c <memp_free+0x48>)
 800475e:	480c      	ldr	r0, [pc, #48]	; (8004790 <memp_free+0x4c>)
 8004760:	f009 fc00 	bl	800df64 <iprintf>
 8004764:	e00c      	b.n	8004780 <memp_free+0x3c>

  if (mem == NULL) {
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d008      	beq.n	800477e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800476c:	79fb      	ldrb	r3, [r7, #7]
 800476e:	4a09      	ldr	r2, [pc, #36]	; (8004794 <memp_free+0x50>)
 8004770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004774:	6839      	ldr	r1, [r7, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff ffbe 	bl	80046f8 <do_memp_free_pool>
 800477c:	e000      	b.n	8004780 <memp_free+0x3c>
    return;
 800477e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	0800f6c4 	.word	0x0800f6c4
 800478c:	0800f794 	.word	0x0800f794
 8004790:	0800f718 	.word	0x0800f718
 8004794:	08011e70 	.word	0x08011e70

08004798 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800479c:	bf00      	nop
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d108      	bne.n	80047ce <netif_add+0x26>
 80047bc:	4b57      	ldr	r3, [pc, #348]	; (800491c <netif_add+0x174>)
 80047be:	f240 1227 	movw	r2, #295	; 0x127
 80047c2:	4957      	ldr	r1, [pc, #348]	; (8004920 <netif_add+0x178>)
 80047c4:	4857      	ldr	r0, [pc, #348]	; (8004924 <netif_add+0x17c>)
 80047c6:	f009 fbcd 	bl	800df64 <iprintf>
 80047ca:	2300      	movs	r3, #0
 80047cc:	e0a2      	b.n	8004914 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d108      	bne.n	80047e6 <netif_add+0x3e>
 80047d4:	4b51      	ldr	r3, [pc, #324]	; (800491c <netif_add+0x174>)
 80047d6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80047da:	4953      	ldr	r1, [pc, #332]	; (8004928 <netif_add+0x180>)
 80047dc:	4851      	ldr	r0, [pc, #324]	; (8004924 <netif_add+0x17c>)
 80047de:	f009 fbc1 	bl	800df64 <iprintf>
 80047e2:	2300      	movs	r3, #0
 80047e4:	e096      	b.n	8004914 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80047ec:	4b4f      	ldr	r3, [pc, #316]	; (800492c <netif_add+0x184>)
 80047ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80047f6:	4b4d      	ldr	r3, [pc, #308]	; (800492c <netif_add+0x184>)
 80047f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004800:	4b4a      	ldr	r3, [pc, #296]	; (800492c <netif_add+0x184>)
 8004802:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4a45      	ldr	r2, [pc, #276]	; (8004930 <netif_add+0x188>)
 800481a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a3a      	ldr	r2, [r7, #32]
 8004834:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004836:	4b3f      	ldr	r3, [pc, #252]	; (8004934 <netif_add+0x18c>)
 8004838:	781a      	ldrb	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004844:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f913 	bl	8004a78 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	4798      	blx	r3
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <netif_add+0xba>
    return NULL;
 800485e:	2300      	movs	r3, #0
 8004860:	e058      	b.n	8004914 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004868:	2bff      	cmp	r3, #255	; 0xff
 800486a:	d103      	bne.n	8004874 <netif_add+0xcc>
        netif->num = 0;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8004874:	2300      	movs	r3, #0
 8004876:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004878:	4b2f      	ldr	r3, [pc, #188]	; (8004938 <netif_add+0x190>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	e02b      	b.n	80048d8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	429a      	cmp	r2, r3
 8004886:	d106      	bne.n	8004896 <netif_add+0xee>
 8004888:	4b24      	ldr	r3, [pc, #144]	; (800491c <netif_add+0x174>)
 800488a:	f240 128b 	movw	r2, #395	; 0x18b
 800488e:	492b      	ldr	r1, [pc, #172]	; (800493c <netif_add+0x194>)
 8004890:	4824      	ldr	r0, [pc, #144]	; (8004924 <netif_add+0x17c>)
 8004892:	f009 fb67 	bl	800df64 <iprintf>
        num_netifs++;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	3301      	adds	r3, #1
 800489a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	2bff      	cmp	r3, #255	; 0xff
 80048a0:	dd06      	ble.n	80048b0 <netif_add+0x108>
 80048a2:	4b1e      	ldr	r3, [pc, #120]	; (800491c <netif_add+0x174>)
 80048a4:	f240 128d 	movw	r2, #397	; 0x18d
 80048a8:	4925      	ldr	r1, [pc, #148]	; (8004940 <netif_add+0x198>)
 80048aa:	481e      	ldr	r0, [pc, #120]	; (8004924 <netif_add+0x17c>)
 80048ac:	f009 fb5a 	bl	800df64 <iprintf>
        if (netif2->num == netif->num) {
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048bc:	429a      	cmp	r2, r3
 80048be:	d108      	bne.n	80048d2 <netif_add+0x12a>
          netif->num++;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048c6:	3301      	adds	r3, #1
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80048d0:	e005      	b.n	80048de <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1d0      	bne.n	8004880 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1be      	bne.n	8004862 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048ea:	2bfe      	cmp	r3, #254	; 0xfe
 80048ec:	d103      	bne.n	80048f6 <netif_add+0x14e>
    netif_num = 0;
 80048ee:	4b11      	ldr	r3, [pc, #68]	; (8004934 <netif_add+0x18c>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
 80048f4:	e006      	b.n	8004904 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048fc:	3301      	adds	r3, #1
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <netif_add+0x18c>)
 8004902:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004904:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <netif_add+0x190>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800490c:	4a0a      	ldr	r2, [pc, #40]	; (8004938 <netif_add+0x190>)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004912:	68fb      	ldr	r3, [r7, #12]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	0800f7b0 	.word	0x0800f7b0
 8004920:	0800f844 	.word	0x0800f844
 8004924:	0800f800 	.word	0x0800f800
 8004928:	0800f860 	.word	0x0800f860
 800492c:	08011ed4 	.word	0x08011ed4
 8004930:	08004c8b 	.word	0x08004c8b
 8004934:	200000c8 	.word	0x200000c8
 8004938:	20008af8 	.word	0x20008af8
 800493c:	0800f884 	.word	0x0800f884
 8004940:	0800f898 	.word	0x0800f898

08004944 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800494e:	6839      	ldr	r1, [r7, #0]
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f002 fb81 	bl	8007058 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004956:	6839      	ldr	r1, [r7, #0]
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f006 ffb1 	bl	800b8c0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <netif_do_set_ipaddr+0x20>
 800497a:	4b1d      	ldr	r3, [pc, #116]	; (80049f0 <netif_do_set_ipaddr+0x88>)
 800497c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004980:	491c      	ldr	r1, [pc, #112]	; (80049f4 <netif_do_set_ipaddr+0x8c>)
 8004982:	481d      	ldr	r0, [pc, #116]	; (80049f8 <netif_do_set_ipaddr+0x90>)
 8004984:	f009 faee 	bl	800df64 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <netif_do_set_ipaddr+0x34>
 800498e:	4b18      	ldr	r3, [pc, #96]	; (80049f0 <netif_do_set_ipaddr+0x88>)
 8004990:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004994:	4917      	ldr	r1, [pc, #92]	; (80049f4 <netif_do_set_ipaddr+0x8c>)
 8004996:	4818      	ldr	r0, [pc, #96]	; (80049f8 <netif_do_set_ipaddr+0x90>)
 8004998:	f009 fae4 	bl	800df64 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3304      	adds	r3, #4
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d01c      	beq.n	80049e4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3304      	adds	r3, #4
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80049ba:	f107 0314 	add.w	r3, r7, #20
 80049be:	4619      	mov	r1, r3
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7ff ffbf 	bl	8004944 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <netif_do_set_ipaddr+0x6a>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	e000      	b.n	80049d4 <netif_do_set_ipaddr+0x6c>
 80049d2:	2300      	movs	r3, #0
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80049d8:	2101      	movs	r1, #1
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f8d2 	bl	8004b84 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	0800f7b0 	.word	0x0800f7b0
 80049f4:	0800f8c8 	.word	0x0800f8c8
 80049f8:	0800f800 	.word	0x0800f800

080049fc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3308      	adds	r3, #8
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d00a      	beq.n	8004a2c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <netif_do_set_netmask+0x26>
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	e000      	b.n	8004a24 <netif_do_set_netmask+0x28>
 8004a22:	2300      	movs	r3, #0
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b085      	sub	sp, #20
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d00a      	beq.n	8004a6a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <netif_do_set_gw+0x26>
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	e000      	b.n	8004a62 <netif_do_set_gw+0x28>
 8004a60:	2300      	movs	r3, #0
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b088      	sub	sp, #32
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004a94:	4b1c      	ldr	r3, [pc, #112]	; (8004b08 <netif_set_addr+0x90>)
 8004a96:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004a9e:	4b1a      	ldr	r3, [pc, #104]	; (8004b08 <netif_set_addr+0x90>)
 8004aa0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004aa8:	4b17      	ldr	r3, [pc, #92]	; (8004b08 <netif_set_addr+0x90>)
 8004aaa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <netif_set_addr+0x42>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <netif_set_addr+0x46>
 8004aba:	2301      	movs	r3, #1
 8004abc:	e000      	b.n	8004ac0 <netif_set_addr+0x48>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d006      	beq.n	8004ad6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004ac8:	f107 0310 	add.w	r3, r7, #16
 8004acc:	461a      	mov	r2, r3
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f7ff ff49 	bl	8004968 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f7ff ff8e 	bl	80049fc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	6839      	ldr	r1, [r7, #0]
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7ff ffa8 	bl	8004a3a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d106      	bne.n	8004afe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004af0:	f107 0310 	add.w	r3, r7, #16
 8004af4:	461a      	mov	r2, r3
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f7ff ff35 	bl	8004968 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004afe:	bf00      	nop
 8004b00:	3720      	adds	r7, #32
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	08011ed4 	.word	0x08011ed4

08004b0c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004b14:	4a04      	ldr	r2, [pc, #16]	; (8004b28 <netif_set_default+0x1c>)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20008afc 	.word	0x20008afc

08004b2c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d107      	bne.n	8004b4a <netif_set_up+0x1e>
 8004b3a:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <netif_set_up+0x4c>)
 8004b3c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004b40:	490e      	ldr	r1, [pc, #56]	; (8004b7c <netif_set_up+0x50>)
 8004b42:	480f      	ldr	r0, [pc, #60]	; (8004b80 <netif_set_up+0x54>)
 8004b44:	f009 fa0e 	bl	800df64 <iprintf>
 8004b48:	e013      	b.n	8004b72 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10c      	bne.n	8004b72 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004b6a:	2103      	movs	r1, #3
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f809 	bl	8004b84 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	0800f7b0 	.word	0x0800f7b0
 8004b7c:	0800f938 	.word	0x0800f938
 8004b80:	0800f800 	.word	0x0800f800

08004b84 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <netif_issue_reports+0x20>
 8004b96:	4b18      	ldr	r3, [pc, #96]	; (8004bf8 <netif_issue_reports+0x74>)
 8004b98:	f240 326d 	movw	r2, #877	; 0x36d
 8004b9c:	4917      	ldr	r1, [pc, #92]	; (8004bfc <netif_issue_reports+0x78>)
 8004b9e:	4818      	ldr	r0, [pc, #96]	; (8004c00 <netif_issue_reports+0x7c>)
 8004ba0:	f009 f9e0 	bl	800df64 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01e      	beq.n	8004bf0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004bb8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d017      	beq.n	8004bf0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004bc0:	78fb      	ldrb	r3, [r7, #3]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d013      	beq.n	8004bf2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00e      	beq.n	8004bf2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d007      	beq.n	8004bf2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3304      	adds	r3, #4
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f007 fdd3 	bl	800c794 <etharp_request>
 8004bee:	e000      	b.n	8004bf2 <netif_issue_reports+0x6e>
    return;
 8004bf0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	0800f7b0 	.word	0x0800f7b0
 8004bfc:	0800f954 	.word	0x0800f954
 8004c00:	0800f800 	.word	0x0800f800

08004c04 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d107      	bne.n	8004c22 <netif_set_down+0x1e>
 8004c12:	4b12      	ldr	r3, [pc, #72]	; (8004c5c <netif_set_down+0x58>)
 8004c14:	f240 329b 	movw	r2, #923	; 0x39b
 8004c18:	4911      	ldr	r1, [pc, #68]	; (8004c60 <netif_set_down+0x5c>)
 8004c1a:	4812      	ldr	r0, [pc, #72]	; (8004c64 <netif_set_down+0x60>)
 8004c1c:	f009 f9a2 	bl	800df64 <iprintf>
 8004c20:	e019      	b.n	8004c56 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d012      	beq.n	8004c56 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f007 f95d 	bl	800bf10 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	0800f7b0 	.word	0x0800f7b0
 8004c60:	0800f978 	.word	0x0800f978
 8004c64:	0800f800 	.word	0x0800f800

08004c68 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	61da      	str	r2, [r3, #28]
  }
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b085      	sub	sp, #20
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004c96:	f06f 030b 	mvn.w	r3, #11
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
	...

08004ca8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	4603      	mov	r3, r0
 8004cb0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d013      	beq.n	8004ce0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004cb8:	4b0d      	ldr	r3, [pc, #52]	; (8004cf0 <netif_get_by_index+0x48>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	e00c      	b.n	8004cda <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	79fa      	ldrb	r2, [r7, #7]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d101      	bne.n	8004cd4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	e006      	b.n	8004ce2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1ef      	bne.n	8004cc0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20008af8 	.word	0x20008af8

08004cf4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004cfa:	4b0c      	ldr	r3, [pc, #48]	; (8004d2c <pbuf_free_ooseq+0x38>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004d00:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <pbuf_free_ooseq+0x3c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	e00a      	b.n	8004d1e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f002 f9df 	bl	80070d4 <tcp_free_ooseq>
      return;
 8004d16:	e005      	b.n	8004d24 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	607b      	str	r3, [r7, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1f1      	bne.n	8004d08 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20008b00 	.word	0x20008b00
 8004d30:	20008b08 	.word	0x20008b08

08004d34 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004d38:	4b03      	ldr	r3, [pc, #12]	; (8004d48 <pbuf_pool_is_empty+0x14>)
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004d3e:	bf00      	nop
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	20008b00 	.word	0x20008b00

08004d4c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	4611      	mov	r1, r2
 8004d58:	461a      	mov	r2, r3
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	80fb      	strh	r3, [r7, #6]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	88fa      	ldrh	r2, [r7, #6]
 8004d72:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	88ba      	ldrh	r2, [r7, #4]
 8004d78:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004d7a:	8b3b      	ldrh	r3, [r7, #24]
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	7f3a      	ldrb	r2, [r7, #28]
 8004d86:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	73da      	strb	r2, [r3, #15]
}
 8004d94:	bf00      	nop
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08c      	sub	sp, #48	; 0x30
 8004da4:	af02      	add	r7, sp, #8
 8004da6:	4603      	mov	r3, r0
 8004da8:	71fb      	strb	r3, [r7, #7]
 8004daa:	460b      	mov	r3, r1
 8004dac:	80bb      	strh	r3, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004db6:	887b      	ldrh	r3, [r7, #2]
 8004db8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004dbc:	d07f      	beq.n	8004ebe <pbuf_alloc+0x11e>
 8004dbe:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004dc2:	f300 80c8 	bgt.w	8004f56 <pbuf_alloc+0x1b6>
 8004dc6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004dca:	d010      	beq.n	8004dee <pbuf_alloc+0x4e>
 8004dcc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004dd0:	f300 80c1 	bgt.w	8004f56 <pbuf_alloc+0x1b6>
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d002      	beq.n	8004dde <pbuf_alloc+0x3e>
 8004dd8:	2b41      	cmp	r3, #65	; 0x41
 8004dda:	f040 80bc 	bne.w	8004f56 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004dde:	887a      	ldrh	r2, [r7, #2]
 8004de0:	88bb      	ldrh	r3, [r7, #4]
 8004de2:	4619      	mov	r1, r3
 8004de4:	2000      	movs	r0, #0
 8004de6:	f000 f8d1 	bl	8004f8c <pbuf_alloc_reference>
 8004dea:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004dec:	e0bd      	b.n	8004f6a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004df6:	88bb      	ldrh	r3, [r7, #4]
 8004df8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004dfa:	2008      	movs	r0, #8
 8004dfc:	f7ff fc56 	bl	80046ac <memp_malloc>
 8004e00:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d109      	bne.n	8004e1c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8004e08:	f7ff ff94 	bl	8004d34 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <pbuf_alloc+0x78>
            pbuf_free(p);
 8004e12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e14:	f000 faa8 	bl	8005368 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	e0a7      	b.n	8004f6c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004e1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e1e:	3303      	adds	r3, #3
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	f023 0303 	bic.w	r3, r3, #3
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	8b7a      	ldrh	r2, [r7, #26]
 8004e30:	4293      	cmp	r3, r2
 8004e32:	bf28      	it	cs
 8004e34:	4613      	movcs	r3, r2
 8004e36:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004e38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e3a:	3310      	adds	r3, #16
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	3303      	adds	r3, #3
 8004e42:	f023 0303 	bic.w	r3, r3, #3
 8004e46:	4618      	mov	r0, r3
 8004e48:	89f9      	ldrh	r1, [r7, #14]
 8004e4a:	8b7a      	ldrh	r2, [r7, #26]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	9301      	str	r3, [sp, #4]
 8004e50:	887b      	ldrh	r3, [r7, #2]
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	460b      	mov	r3, r1
 8004e56:	4601      	mov	r1, r0
 8004e58:	6938      	ldr	r0, [r7, #16]
 8004e5a:	f7ff ff77 	bl	8004d4c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d006      	beq.n	8004e78 <pbuf_alloc+0xd8>
 8004e6a:	4b42      	ldr	r3, [pc, #264]	; (8004f74 <pbuf_alloc+0x1d4>)
 8004e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e70:	4941      	ldr	r1, [pc, #260]	; (8004f78 <pbuf_alloc+0x1d8>)
 8004e72:	4842      	ldr	r0, [pc, #264]	; (8004f7c <pbuf_alloc+0x1dc>)
 8004e74:	f009 f876 	bl	800df64 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004e78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e7a:	3303      	adds	r3, #3
 8004e7c:	f023 0303 	bic.w	r3, r3, #3
 8004e80:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004e84:	d106      	bne.n	8004e94 <pbuf_alloc+0xf4>
 8004e86:	4b3b      	ldr	r3, [pc, #236]	; (8004f74 <pbuf_alloc+0x1d4>)
 8004e88:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004e8c:	493c      	ldr	r1, [pc, #240]	; (8004f80 <pbuf_alloc+0x1e0>)
 8004e8e:	483b      	ldr	r0, [pc, #236]	; (8004f7c <pbuf_alloc+0x1dc>)
 8004e90:	f009 f868 	bl	800df64 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d102      	bne.n	8004ea0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e9e:	e002      	b.n	8004ea6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004eaa:	8b7a      	ldrh	r2, [r7, #26]
 8004eac:	89fb      	ldrh	r3, [r7, #14]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8004eb6:	8b7b      	ldrh	r3, [r7, #26]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d19e      	bne.n	8004dfa <pbuf_alloc+0x5a>
      break;
 8004ebc:	e055      	b.n	8004f6a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004ebe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ec0:	3303      	adds	r3, #3
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	f023 0303 	bic.w	r3, r3, #3
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	88bb      	ldrh	r3, [r7, #4]
 8004ecc:	3303      	adds	r3, #3
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	f023 0303 	bic.w	r3, r3, #3
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	4413      	add	r3, r2
 8004ed8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004eda:	8b3b      	ldrh	r3, [r7, #24]
 8004edc:	3310      	adds	r3, #16
 8004ede:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004ee0:	8b3a      	ldrh	r2, [r7, #24]
 8004ee2:	88bb      	ldrh	r3, [r7, #4]
 8004ee4:	3303      	adds	r3, #3
 8004ee6:	f023 0303 	bic.w	r3, r3, #3
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d306      	bcc.n	8004efc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004eee:	8afa      	ldrh	r2, [r7, #22]
 8004ef0:	88bb      	ldrh	r3, [r7, #4]
 8004ef2:	3303      	adds	r3, #3
 8004ef4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d201      	bcs.n	8004f00 <pbuf_alloc+0x160>
        return NULL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	e035      	b.n	8004f6c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004f00:	8afb      	ldrh	r3, [r7, #22]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff fa64 	bl	80043d0 <mem_malloc>
 8004f08:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <pbuf_alloc+0x174>
        return NULL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	e02b      	b.n	8004f6c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004f14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f16:	3310      	adds	r3, #16
 8004f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3303      	adds	r3, #3
 8004f1e:	f023 0303 	bic.w	r3, r3, #3
 8004f22:	4618      	mov	r0, r3
 8004f24:	88b9      	ldrh	r1, [r7, #4]
 8004f26:	88ba      	ldrh	r2, [r7, #4]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	887b      	ldrh	r3, [r7, #2]
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	460b      	mov	r3, r1
 8004f32:	4601      	mov	r1, r0
 8004f34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f36:	f7ff ff09 	bl	8004d4c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d010      	beq.n	8004f68 <pbuf_alloc+0x1c8>
 8004f46:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <pbuf_alloc+0x1d4>)
 8004f48:	f44f 7291 	mov.w	r2, #290	; 0x122
 8004f4c:	490d      	ldr	r1, [pc, #52]	; (8004f84 <pbuf_alloc+0x1e4>)
 8004f4e:	480b      	ldr	r0, [pc, #44]	; (8004f7c <pbuf_alloc+0x1dc>)
 8004f50:	f009 f808 	bl	800df64 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004f54:	e008      	b.n	8004f68 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004f56:	4b07      	ldr	r3, [pc, #28]	; (8004f74 <pbuf_alloc+0x1d4>)
 8004f58:	f240 1227 	movw	r2, #295	; 0x127
 8004f5c:	490a      	ldr	r1, [pc, #40]	; (8004f88 <pbuf_alloc+0x1e8>)
 8004f5e:	4807      	ldr	r0, [pc, #28]	; (8004f7c <pbuf_alloc+0x1dc>)
 8004f60:	f009 f800 	bl	800df64 <iprintf>
      return NULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	e001      	b.n	8004f6c <pbuf_alloc+0x1cc>
      break;
 8004f68:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3728      	adds	r7, #40	; 0x28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	0800f9e0 	.word	0x0800f9e0
 8004f78:	0800fa10 	.word	0x0800fa10
 8004f7c:	0800fa40 	.word	0x0800fa40
 8004f80:	0800fa68 	.word	0x0800fa68
 8004f84:	0800fa9c 	.word	0x0800fa9c
 8004f88:	0800fac8 	.word	0x0800fac8

08004f8c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	807b      	strh	r3, [r7, #2]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004f9c:	883b      	ldrh	r3, [r7, #0]
 8004f9e:	2b41      	cmp	r3, #65	; 0x41
 8004fa0:	d009      	beq.n	8004fb6 <pbuf_alloc_reference+0x2a>
 8004fa2:	883b      	ldrh	r3, [r7, #0]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d006      	beq.n	8004fb6 <pbuf_alloc_reference+0x2a>
 8004fa8:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <pbuf_alloc_reference+0x5c>)
 8004faa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004fae:	490f      	ldr	r1, [pc, #60]	; (8004fec <pbuf_alloc_reference+0x60>)
 8004fb0:	480f      	ldr	r0, [pc, #60]	; (8004ff0 <pbuf_alloc_reference+0x64>)
 8004fb2:	f008 ffd7 	bl	800df64 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004fb6:	2007      	movs	r0, #7
 8004fb8:	f7ff fb78 	bl	80046ac <memp_malloc>
 8004fbc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	e00b      	b.n	8004fe0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004fc8:	8879      	ldrh	r1, [r7, #2]
 8004fca:	887a      	ldrh	r2, [r7, #2]
 8004fcc:	2300      	movs	r3, #0
 8004fce:	9301      	str	r3, [sp, #4]
 8004fd0:	883b      	ldrh	r3, [r7, #0]
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f7ff feb7 	bl	8004d4c <pbuf_init_alloced_pbuf>
  return p;
 8004fde:	68fb      	ldr	r3, [r7, #12]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	0800f9e0 	.word	0x0800f9e0
 8004fec:	0800fae4 	.word	0x0800fae4
 8004ff0:	0800fa40 	.word	0x0800fa40

08004ff4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	607b      	str	r3, [r7, #4]
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	73fb      	strb	r3, [r7, #15]
 8005000:	460b      	mov	r3, r1
 8005002:	81bb      	strh	r3, [r7, #12]
 8005004:	4613      	mov	r3, r2
 8005006:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800500c:	8a7b      	ldrh	r3, [r7, #18]
 800500e:	3303      	adds	r3, #3
 8005010:	f023 0203 	bic.w	r2, r3, #3
 8005014:	89bb      	ldrh	r3, [r7, #12]
 8005016:	441a      	add	r2, r3
 8005018:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800501a:	429a      	cmp	r2, r3
 800501c:	d901      	bls.n	8005022 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800501e:	2300      	movs	r3, #0
 8005020:	e018      	b.n	8005054 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d007      	beq.n	8005038 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005028:	8a7b      	ldrh	r3, [r7, #18]
 800502a:	3303      	adds	r3, #3
 800502c:	f023 0303 	bic.w	r3, r3, #3
 8005030:	6a3a      	ldr	r2, [r7, #32]
 8005032:	4413      	add	r3, r2
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	e001      	b.n	800503c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	89b9      	ldrh	r1, [r7, #12]
 8005040:	89ba      	ldrh	r2, [r7, #12]
 8005042:	2302      	movs	r3, #2
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	897b      	ldrh	r3, [r7, #10]
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	460b      	mov	r3, r1
 800504c:	6979      	ldr	r1, [r7, #20]
 800504e:	f7ff fe7d 	bl	8004d4c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005052:	687b      	ldr	r3, [r7, #4]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <pbuf_realloc+0x20>
 800506e:	4b3a      	ldr	r3, [pc, #232]	; (8005158 <pbuf_realloc+0xfc>)
 8005070:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005074:	4939      	ldr	r1, [pc, #228]	; (800515c <pbuf_realloc+0x100>)
 8005076:	483a      	ldr	r0, [pc, #232]	; (8005160 <pbuf_realloc+0x104>)
 8005078:	f008 ff74 	bl	800df64 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	891b      	ldrh	r3, [r3, #8]
 8005080:	887a      	ldrh	r2, [r7, #2]
 8005082:	429a      	cmp	r2, r3
 8005084:	d263      	bcs.n	800514e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	891a      	ldrh	r2, [r3, #8]
 800508a:	887b      	ldrh	r3, [r7, #2]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005090:	887b      	ldrh	r3, [r7, #2]
 8005092:	817b      	strh	r3, [r7, #10]
  q = p;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005098:	e018      	b.n	80050cc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	895b      	ldrh	r3, [r3, #10]
 800509e:	897a      	ldrh	r2, [r7, #10]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	891a      	ldrh	r2, [r3, #8]
 80050a8:	893b      	ldrh	r3, [r7, #8]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <pbuf_realloc+0x70>
 80050be:	4b26      	ldr	r3, [pc, #152]	; (8005158 <pbuf_realloc+0xfc>)
 80050c0:	f240 12af 	movw	r2, #431	; 0x1af
 80050c4:	4927      	ldr	r1, [pc, #156]	; (8005164 <pbuf_realloc+0x108>)
 80050c6:	4826      	ldr	r0, [pc, #152]	; (8005160 <pbuf_realloc+0x104>)
 80050c8:	f008 ff4c 	bl	800df64 <iprintf>
  while (rem_len > q->len) {
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	895b      	ldrh	r3, [r3, #10]
 80050d0:	897a      	ldrh	r2, [r7, #10]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d8e1      	bhi.n	800509a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	7b1b      	ldrb	r3, [r3, #12]
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d121      	bne.n	8005126 <pbuf_realloc+0xca>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	895b      	ldrh	r3, [r3, #10]
 80050e6:	897a      	ldrh	r2, [r7, #10]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d01c      	beq.n	8005126 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	7b5b      	ldrb	r3, [r3, #13]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d116      	bne.n	8005126 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	b29a      	uxth	r2, r3
 8005102:	897b      	ldrh	r3, [r7, #10]
 8005104:	4413      	add	r3, r2
 8005106:	b29b      	uxth	r3, r3
 8005108:	4619      	mov	r1, r3
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f7ff f864 	bl	80041d8 <mem_trim>
 8005110:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d106      	bne.n	8005126 <pbuf_realloc+0xca>
 8005118:	4b0f      	ldr	r3, [pc, #60]	; (8005158 <pbuf_realloc+0xfc>)
 800511a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800511e:	4912      	ldr	r1, [pc, #72]	; (8005168 <pbuf_realloc+0x10c>)
 8005120:	480f      	ldr	r0, [pc, #60]	; (8005160 <pbuf_realloc+0x104>)
 8005122:	f008 ff1f 	bl	800df64 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	897a      	ldrh	r2, [r7, #10]
 800512a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	895a      	ldrh	r2, [r3, #10]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d004      	beq.n	8005146 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f000 f911 	bl	8005368 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	e000      	b.n	8005150 <pbuf_realloc+0xf4>
    return;
 800514e:	bf00      	nop

}
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	0800f9e0 	.word	0x0800f9e0
 800515c:	0800faf8 	.word	0x0800faf8
 8005160:	0800fa40 	.word	0x0800fa40
 8005164:	0800fb10 	.word	0x0800fb10
 8005168:	0800fb28 	.word	0x0800fb28

0800516c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	4613      	mov	r3, r2
 8005178:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d106      	bne.n	800518e <pbuf_add_header_impl+0x22>
 8005180:	4b2b      	ldr	r3, [pc, #172]	; (8005230 <pbuf_add_header_impl+0xc4>)
 8005182:	f240 12df 	movw	r2, #479	; 0x1df
 8005186:	492b      	ldr	r1, [pc, #172]	; (8005234 <pbuf_add_header_impl+0xc8>)
 8005188:	482b      	ldr	r0, [pc, #172]	; (8005238 <pbuf_add_header_impl+0xcc>)
 800518a:	f008 feeb 	bl	800df64 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <pbuf_add_header_impl+0x30>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800519a:	d301      	bcc.n	80051a0 <pbuf_add_header_impl+0x34>
    return 1;
 800519c:	2301      	movs	r3, #1
 800519e:	e043      	b.n	8005228 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <pbuf_add_header_impl+0x3e>
    return 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	e03e      	b.n	8005228 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	891a      	ldrh	r2, [r3, #8]
 80051b2:	8a7b      	ldrh	r3, [r7, #18]
 80051b4:	4413      	add	r3, r2
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	8a7a      	ldrh	r2, [r7, #18]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d901      	bls.n	80051c2 <pbuf_add_header_impl+0x56>
    return 1;
 80051be:	2301      	movs	r3, #1
 80051c0:	e032      	b.n	8005228 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	7b1b      	ldrb	r3, [r3, #12]
 80051c6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80051c8:	8a3b      	ldrh	r3, [r7, #16]
 80051ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00c      	beq.n	80051ec <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	425b      	negs	r3, r3
 80051da:	4413      	add	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3310      	adds	r3, #16
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d20d      	bcs.n	8005204 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e01d      	b.n	8005228 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80051ec:	79fb      	ldrb	r3, [r7, #7]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d006      	beq.n	8005200 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	425b      	negs	r3, r3
 80051fa:	4413      	add	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	e001      	b.n	8005204 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005200:	2301      	movs	r3, #1
 8005202:	e011      	b.n	8005228 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	895a      	ldrh	r2, [r3, #10]
 800520e:	8a7b      	ldrh	r3, [r7, #18]
 8005210:	4413      	add	r3, r2
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	891a      	ldrh	r2, [r3, #8]
 800521c:	8a7b      	ldrh	r3, [r7, #18]
 800521e:	4413      	add	r3, r2
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	811a      	strh	r2, [r3, #8]


  return 0;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	0800f9e0 	.word	0x0800f9e0
 8005234:	0800fb44 	.word	0x0800fb44
 8005238:	0800fa40 	.word	0x0800fa40

0800523c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005246:	2200      	movs	r2, #0
 8005248:	6839      	ldr	r1, [r7, #0]
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7ff ff8e 	bl	800516c <pbuf_add_header_impl>
 8005250:	4603      	mov	r3, r0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d106      	bne.n	800527a <pbuf_remove_header+0x1e>
 800526c:	4b20      	ldr	r3, [pc, #128]	; (80052f0 <pbuf_remove_header+0x94>)
 800526e:	f240 224b 	movw	r2, #587	; 0x24b
 8005272:	4920      	ldr	r1, [pc, #128]	; (80052f4 <pbuf_remove_header+0x98>)
 8005274:	4820      	ldr	r0, [pc, #128]	; (80052f8 <pbuf_remove_header+0x9c>)
 8005276:	f008 fe75 	bl	800df64 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <pbuf_remove_header+0x2c>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005286:	d301      	bcc.n	800528c <pbuf_remove_header+0x30>
    return 1;
 8005288:	2301      	movs	r3, #1
 800528a:	e02c      	b.n	80052e6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <pbuf_remove_header+0x3a>
    return 0;
 8005292:	2300      	movs	r3, #0
 8005294:	e027      	b.n	80052e6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	895b      	ldrh	r3, [r3, #10]
 800529e:	89fa      	ldrh	r2, [r7, #14]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d908      	bls.n	80052b6 <pbuf_remove_header+0x5a>
 80052a4:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <pbuf_remove_header+0x94>)
 80052a6:	f240 2255 	movw	r2, #597	; 0x255
 80052aa:	4914      	ldr	r1, [pc, #80]	; (80052fc <pbuf_remove_header+0xa0>)
 80052ac:	4812      	ldr	r0, [pc, #72]	; (80052f8 <pbuf_remove_header+0x9c>)
 80052ae:	f008 fe59 	bl	800df64 <iprintf>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e017      	b.n	80052e6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	441a      	add	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	895a      	ldrh	r2, [r3, #10]
 80052cc:	89fb      	ldrh	r3, [r7, #14]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	891a      	ldrh	r2, [r3, #8]
 80052da:	89fb      	ldrh	r3, [r7, #14]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	b29a      	uxth	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	0800f9e0 	.word	0x0800f9e0
 80052f4:	0800fb44 	.word	0x0800fb44
 80052f8:	0800fa40 	.word	0x0800fa40
 80052fc:	0800fb50 	.word	0x0800fb50

08005300 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	807b      	strh	r3, [r7, #2]
 800530c:	4613      	mov	r3, r2
 800530e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005310:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005314:	2b00      	cmp	r3, #0
 8005316:	da08      	bge.n	800532a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005318:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800531c:	425b      	negs	r3, r3
 800531e:	4619      	mov	r1, r3
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7ff ff9b 	bl	800525c <pbuf_remove_header>
 8005326:	4603      	mov	r3, r0
 8005328:	e007      	b.n	800533a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800532a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800532e:	787a      	ldrb	r2, [r7, #1]
 8005330:	4619      	mov	r1, r3
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7ff ff1a 	bl	800516c <pbuf_add_header_impl>
 8005338:	4603      	mov	r3, r0
  }
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	460b      	mov	r3, r1
 800534c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800534e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005352:	2201      	movs	r2, #1
 8005354:	4619      	mov	r1, r3
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff ffd2 	bl	8005300 <pbuf_header_impl>
 800535c:	4603      	mov	r3, r0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10b      	bne.n	800538e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d106      	bne.n	800538a <pbuf_free+0x22>
 800537c:	4b38      	ldr	r3, [pc, #224]	; (8005460 <pbuf_free+0xf8>)
 800537e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005382:	4938      	ldr	r1, [pc, #224]	; (8005464 <pbuf_free+0xfc>)
 8005384:	4838      	ldr	r0, [pc, #224]	; (8005468 <pbuf_free+0x100>)
 8005386:	f008 fded 	bl	800df64 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800538a:	2300      	movs	r3, #0
 800538c:	e063      	b.n	8005456 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005392:	e05c      	b.n	800544e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	7b9b      	ldrb	r3, [r3, #14]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d106      	bne.n	80053aa <pbuf_free+0x42>
 800539c:	4b30      	ldr	r3, [pc, #192]	; (8005460 <pbuf_free+0xf8>)
 800539e:	f240 22f1 	movw	r2, #753	; 0x2f1
 80053a2:	4932      	ldr	r1, [pc, #200]	; (800546c <pbuf_free+0x104>)
 80053a4:	4830      	ldr	r0, [pc, #192]	; (8005468 <pbuf_free+0x100>)
 80053a6:	f008 fddd 	bl	800df64 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	7b9b      	ldrb	r3, [r3, #14]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	739a      	strb	r2, [r3, #14]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	7b9b      	ldrb	r3, [r3, #14]
 80053ba:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80053bc:	7dbb      	ldrb	r3, [r7, #22]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d143      	bne.n	800544a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	7b1b      	ldrb	r3, [r3, #12]
 80053cc:	f003 030f 	and.w	r3, r3, #15
 80053d0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	7b5b      	ldrb	r3, [r3, #13]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d011      	beq.n	8005402 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d106      	bne.n	80053f8 <pbuf_free+0x90>
 80053ea:	4b1d      	ldr	r3, [pc, #116]	; (8005460 <pbuf_free+0xf8>)
 80053ec:	f240 22ff 	movw	r2, #767	; 0x2ff
 80053f0:	491f      	ldr	r1, [pc, #124]	; (8005470 <pbuf_free+0x108>)
 80053f2:	481d      	ldr	r0, [pc, #116]	; (8005468 <pbuf_free+0x100>)
 80053f4:	f008 fdb6 	bl	800df64 <iprintf>
        pc->custom_free_function(p);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	4798      	blx	r3
 8005400:	e01d      	b.n	800543e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	2b02      	cmp	r3, #2
 8005406:	d104      	bne.n	8005412 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005408:	6879      	ldr	r1, [r7, #4]
 800540a:	2008      	movs	r0, #8
 800540c:	f7ff f99a 	bl	8004744 <memp_free>
 8005410:	e015      	b.n	800543e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005412:	7bfb      	ldrb	r3, [r7, #15]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d104      	bne.n	8005422 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	2007      	movs	r0, #7
 800541c:	f7ff f992 	bl	8004744 <memp_free>
 8005420:	e00d      	b.n	800543e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d103      	bne.n	8005430 <pbuf_free+0xc8>
          mem_free(p);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7fe fe6b 	bl	8004104 <mem_free>
 800542e:	e006      	b.n	800543e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005430:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <pbuf_free+0xf8>)
 8005432:	f240 320f 	movw	r2, #783	; 0x30f
 8005436:	490f      	ldr	r1, [pc, #60]	; (8005474 <pbuf_free+0x10c>)
 8005438:	480b      	ldr	r0, [pc, #44]	; (8005468 <pbuf_free+0x100>)
 800543a:	f008 fd93 	bl	800df64 <iprintf>
        }
      }
      count++;
 800543e:	7dfb      	ldrb	r3, [r7, #23]
 8005440:	3301      	adds	r3, #1
 8005442:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	607b      	str	r3, [r7, #4]
 8005448:	e001      	b.n	800544e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800544a:	2300      	movs	r3, #0
 800544c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d19f      	bne.n	8005394 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005454:	7dfb      	ldrb	r3, [r7, #23]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	0800f9e0 	.word	0x0800f9e0
 8005464:	0800fb44 	.word	0x0800fb44
 8005468:	0800fa40 	.word	0x0800fa40
 800546c:	0800fb70 	.word	0x0800fb70
 8005470:	0800fb88 	.word	0x0800fb88
 8005474:	0800fbac 	.word	0x0800fbac

08005478 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005480:	2300      	movs	r3, #0
 8005482:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005484:	e005      	b.n	8005492 <pbuf_clen+0x1a>
    ++len;
 8005486:	89fb      	ldrh	r3, [r7, #14]
 8005488:	3301      	adds	r3, #1
 800548a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1f6      	bne.n	8005486 <pbuf_clen+0xe>
  }
  return len;
 8005498:	89fb      	ldrh	r3, [r7, #14]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
	...

080054a8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d010      	beq.n	80054d8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	7b9b      	ldrb	r3, [r3, #14]
 80054ba:	3301      	adds	r3, #1
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	7b9b      	ldrb	r3, [r3, #14]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <pbuf_ref+0x30>
 80054ca:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <pbuf_ref+0x38>)
 80054cc:	f240 3242 	movw	r2, #834	; 0x342
 80054d0:	4904      	ldr	r1, [pc, #16]	; (80054e4 <pbuf_ref+0x3c>)
 80054d2:	4805      	ldr	r0, [pc, #20]	; (80054e8 <pbuf_ref+0x40>)
 80054d4:	f008 fd46 	bl	800df64 <iprintf>
  }
}
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	0800f9e0 	.word	0x0800f9e0
 80054e4:	0800fbc0 	.word	0x0800fbc0
 80054e8:	0800fa40 	.word	0x0800fa40

080054ec <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <pbuf_cat+0x16>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d107      	bne.n	8005512 <pbuf_cat+0x26>
 8005502:	4b20      	ldr	r3, [pc, #128]	; (8005584 <pbuf_cat+0x98>)
 8005504:	f240 3259 	movw	r2, #857	; 0x359
 8005508:	491f      	ldr	r1, [pc, #124]	; (8005588 <pbuf_cat+0x9c>)
 800550a:	4820      	ldr	r0, [pc, #128]	; (800558c <pbuf_cat+0xa0>)
 800550c:	f008 fd2a 	bl	800df64 <iprintf>
 8005510:	e034      	b.n	800557c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	e00a      	b.n	800552e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	891a      	ldrh	r2, [r3, #8]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	891b      	ldrh	r3, [r3, #8]
 8005520:	4413      	add	r3, r2
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1f0      	bne.n	8005518 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	891a      	ldrh	r2, [r3, #8]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	895b      	ldrh	r3, [r3, #10]
 800553e:	429a      	cmp	r2, r3
 8005540:	d006      	beq.n	8005550 <pbuf_cat+0x64>
 8005542:	4b10      	ldr	r3, [pc, #64]	; (8005584 <pbuf_cat+0x98>)
 8005544:	f240 3262 	movw	r2, #866	; 0x362
 8005548:	4911      	ldr	r1, [pc, #68]	; (8005590 <pbuf_cat+0xa4>)
 800554a:	4810      	ldr	r0, [pc, #64]	; (800558c <pbuf_cat+0xa0>)
 800554c:	f008 fd0a 	bl	800df64 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d006      	beq.n	8005566 <pbuf_cat+0x7a>
 8005558:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <pbuf_cat+0x98>)
 800555a:	f240 3263 	movw	r2, #867	; 0x363
 800555e:	490d      	ldr	r1, [pc, #52]	; (8005594 <pbuf_cat+0xa8>)
 8005560:	480a      	ldr	r0, [pc, #40]	; (800558c <pbuf_cat+0xa0>)
 8005562:	f008 fcff 	bl	800df64 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	891a      	ldrh	r2, [r3, #8]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	891b      	ldrh	r3, [r3, #8]
 800556e:	4413      	add	r3, r2
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	0800f9e0 	.word	0x0800f9e0
 8005588:	0800fbd4 	.word	0x0800fbd4
 800558c:	0800fa40 	.word	0x0800fa40
 8005590:	0800fc0c 	.word	0x0800fc0c
 8005594:	0800fc3c 	.word	0x0800fc3c

08005598 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80055a2:	6839      	ldr	r1, [r7, #0]
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff ffa1 	bl	80054ec <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80055aa:	6838      	ldr	r0, [r7, #0]
 80055ac:	f7ff ff7c 	bl	80054a8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	2300      	movs	r3, #0
 80055c8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d008      	beq.n	80055e2 <pbuf_copy+0x2a>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d005      	beq.n	80055e2 <pbuf_copy+0x2a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	891a      	ldrh	r2, [r3, #8]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	891b      	ldrh	r3, [r3, #8]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d209      	bcs.n	80055f6 <pbuf_copy+0x3e>
 80055e2:	4b57      	ldr	r3, [pc, #348]	; (8005740 <pbuf_copy+0x188>)
 80055e4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80055e8:	4956      	ldr	r1, [pc, #344]	; (8005744 <pbuf_copy+0x18c>)
 80055ea:	4857      	ldr	r0, [pc, #348]	; (8005748 <pbuf_copy+0x190>)
 80055ec:	f008 fcba 	bl	800df64 <iprintf>
 80055f0:	f06f 030f 	mvn.w	r3, #15
 80055f4:	e09f      	b.n	8005736 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	895b      	ldrh	r3, [r3, #10]
 80055fa:	461a      	mov	r2, r3
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	1ad2      	subs	r2, r2, r3
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	895b      	ldrh	r3, [r3, #10]
 8005604:	4619      	mov	r1, r3
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1acb      	subs	r3, r1, r3
 800560a:	429a      	cmp	r2, r3
 800560c:	d306      	bcc.n	800561c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	895b      	ldrh	r3, [r3, #10]
 8005612:	461a      	mov	r2, r3
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	e005      	b.n	8005628 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	895b      	ldrh	r3, [r3, #10]
 8005620:	461a      	mov	r2, r3
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	18d0      	adds	r0, r2, r3
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	4413      	add	r3, r2
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4619      	mov	r1, r3
 800563c:	f008 fc62 	bl	800df04 <memcpy>
    offset_to += len;
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4413      	add	r3, r2
 8005646:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4413      	add	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	895b      	ldrh	r3, [r3, #10]
 8005654:	461a      	mov	r2, r3
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	4293      	cmp	r3, r2
 800565a:	d906      	bls.n	800566a <pbuf_copy+0xb2>
 800565c:	4b38      	ldr	r3, [pc, #224]	; (8005740 <pbuf_copy+0x188>)
 800565e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005662:	493a      	ldr	r1, [pc, #232]	; (800574c <pbuf_copy+0x194>)
 8005664:	4838      	ldr	r0, [pc, #224]	; (8005748 <pbuf_copy+0x190>)
 8005666:	f008 fc7d 	bl	800df64 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	895b      	ldrh	r3, [r3, #10]
 800566e:	461a      	mov	r2, r3
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	4293      	cmp	r3, r2
 8005674:	d906      	bls.n	8005684 <pbuf_copy+0xcc>
 8005676:	4b32      	ldr	r3, [pc, #200]	; (8005740 <pbuf_copy+0x188>)
 8005678:	f240 32da 	movw	r2, #986	; 0x3da
 800567c:	4934      	ldr	r1, [pc, #208]	; (8005750 <pbuf_copy+0x198>)
 800567e:	4832      	ldr	r0, [pc, #200]	; (8005748 <pbuf_copy+0x190>)
 8005680:	f008 fc70 	bl	800df64 <iprintf>
    if (offset_from >= p_from->len) {
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	895b      	ldrh	r3, [r3, #10]
 8005688:	461a      	mov	r2, r3
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	4293      	cmp	r3, r2
 800568e:	d304      	bcc.n	800569a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	895b      	ldrh	r3, [r3, #10]
 800569e:	461a      	mov	r2, r3
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d114      	bne.n	80056d0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10c      	bne.n	80056d0 <pbuf_copy+0x118>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d009      	beq.n	80056d0 <pbuf_copy+0x118>
 80056bc:	4b20      	ldr	r3, [pc, #128]	; (8005740 <pbuf_copy+0x188>)
 80056be:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80056c2:	4924      	ldr	r1, [pc, #144]	; (8005754 <pbuf_copy+0x19c>)
 80056c4:	4820      	ldr	r0, [pc, #128]	; (8005748 <pbuf_copy+0x190>)
 80056c6:	f008 fc4d 	bl	800df64 <iprintf>
 80056ca:	f06f 030f 	mvn.w	r3, #15
 80056ce:	e032      	b.n	8005736 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d013      	beq.n	80056fe <pbuf_copy+0x146>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	895a      	ldrh	r2, [r3, #10]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	891b      	ldrh	r3, [r3, #8]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d10d      	bne.n	80056fe <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d009      	beq.n	80056fe <pbuf_copy+0x146>
 80056ea:	4b15      	ldr	r3, [pc, #84]	; (8005740 <pbuf_copy+0x188>)
 80056ec:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80056f0:	4919      	ldr	r1, [pc, #100]	; (8005758 <pbuf_copy+0x1a0>)
 80056f2:	4815      	ldr	r0, [pc, #84]	; (8005748 <pbuf_copy+0x190>)
 80056f4:	f008 fc36 	bl	800df64 <iprintf>
 80056f8:	f06f 0305 	mvn.w	r3, #5
 80056fc:	e01b      	b.n	8005736 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d013      	beq.n	800572c <pbuf_copy+0x174>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	895a      	ldrh	r2, [r3, #10]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	891b      	ldrh	r3, [r3, #8]
 800570c:	429a      	cmp	r2, r3
 800570e:	d10d      	bne.n	800572c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d009      	beq.n	800572c <pbuf_copy+0x174>
 8005718:	4b09      	ldr	r3, [pc, #36]	; (8005740 <pbuf_copy+0x188>)
 800571a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800571e:	490e      	ldr	r1, [pc, #56]	; (8005758 <pbuf_copy+0x1a0>)
 8005720:	4809      	ldr	r0, [pc, #36]	; (8005748 <pbuf_copy+0x190>)
 8005722:	f008 fc1f 	bl	800df64 <iprintf>
 8005726:	f06f 0305 	mvn.w	r3, #5
 800572a:	e004      	b.n	8005736 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	f47f af61 	bne.w	80055f6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	0800f9e0 	.word	0x0800f9e0
 8005744:	0800fc88 	.word	0x0800fc88
 8005748:	0800fa40 	.word	0x0800fa40
 800574c:	0800fcb8 	.word	0x0800fcb8
 8005750:	0800fcd0 	.word	0x0800fcd0
 8005754:	0800fcec 	.word	0x0800fcec
 8005758:	0800fcfc 	.word	0x0800fcfc

0800575c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	4611      	mov	r1, r2
 8005768:	461a      	mov	r2, r3
 800576a:	460b      	mov	r3, r1
 800576c:	80fb      	strh	r3, [r7, #6]
 800576e:	4613      	mov	r3, r2
 8005770:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005776:	2300      	movs	r3, #0
 8005778:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d108      	bne.n	8005792 <pbuf_copy_partial+0x36>
 8005780:	4b2b      	ldr	r3, [pc, #172]	; (8005830 <pbuf_copy_partial+0xd4>)
 8005782:	f240 420a 	movw	r2, #1034	; 0x40a
 8005786:	492b      	ldr	r1, [pc, #172]	; (8005834 <pbuf_copy_partial+0xd8>)
 8005788:	482b      	ldr	r0, [pc, #172]	; (8005838 <pbuf_copy_partial+0xdc>)
 800578a:	f008 fbeb 	bl	800df64 <iprintf>
 800578e:	2300      	movs	r3, #0
 8005790:	e04a      	b.n	8005828 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d108      	bne.n	80057aa <pbuf_copy_partial+0x4e>
 8005798:	4b25      	ldr	r3, [pc, #148]	; (8005830 <pbuf_copy_partial+0xd4>)
 800579a:	f240 420b 	movw	r2, #1035	; 0x40b
 800579e:	4927      	ldr	r1, [pc, #156]	; (800583c <pbuf_copy_partial+0xe0>)
 80057a0:	4825      	ldr	r0, [pc, #148]	; (8005838 <pbuf_copy_partial+0xdc>)
 80057a2:	f008 fbdf 	bl	800df64 <iprintf>
 80057a6:	2300      	movs	r3, #0
 80057a8:	e03e      	b.n	8005828 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	61fb      	str	r3, [r7, #28]
 80057ae:	e034      	b.n	800581a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80057b0:	88bb      	ldrh	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <pbuf_copy_partial+0x70>
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	895b      	ldrh	r3, [r3, #10]
 80057ba:	88ba      	ldrh	r2, [r7, #4]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d305      	bcc.n	80057cc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	895b      	ldrh	r3, [r3, #10]
 80057c4:	88ba      	ldrh	r2, [r7, #4]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	80bb      	strh	r3, [r7, #4]
 80057ca:	e023      	b.n	8005814 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	895a      	ldrh	r2, [r3, #10]
 80057d0:	88bb      	ldrh	r3, [r7, #4]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80057d6:	8b3a      	ldrh	r2, [r7, #24]
 80057d8:	88fb      	ldrh	r3, [r7, #6]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d901      	bls.n	80057e2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80057e2:	8b7b      	ldrh	r3, [r7, #26]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	18d0      	adds	r0, r2, r3
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	88bb      	ldrh	r3, [r7, #4]
 80057ee:	4413      	add	r3, r2
 80057f0:	8b3a      	ldrh	r2, [r7, #24]
 80057f2:	4619      	mov	r1, r3
 80057f4:	f008 fb86 	bl	800df04 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80057f8:	8afa      	ldrh	r2, [r7, #22]
 80057fa:	8b3b      	ldrh	r3, [r7, #24]
 80057fc:	4413      	add	r3, r2
 80057fe:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005800:	8b7a      	ldrh	r2, [r7, #26]
 8005802:	8b3b      	ldrh	r3, [r7, #24]
 8005804:	4413      	add	r3, r2
 8005806:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005808:	88fa      	ldrh	r2, [r7, #6]
 800580a:	8b3b      	ldrh	r3, [r7, #24]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	61fb      	str	r3, [r7, #28]
 800581a:	88fb      	ldrh	r3, [r7, #6]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <pbuf_copy_partial+0xca>
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1c4      	bne.n	80057b0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005826:	8afb      	ldrh	r3, [r7, #22]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3720      	adds	r7, #32
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	0800f9e0 	.word	0x0800f9e0
 8005834:	0800fd28 	.word	0x0800fd28
 8005838:	0800fa40 	.word	0x0800fa40
 800583c:	0800fd48 	.word	0x0800fd48

08005840 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	4613      	mov	r3, r2
 800584c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800584e:	88fb      	ldrh	r3, [r7, #6]
 8005850:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d109      	bne.n	8005870 <pbuf_take+0x30>
 800585c:	4b3a      	ldr	r3, [pc, #232]	; (8005948 <pbuf_take+0x108>)
 800585e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8005862:	493a      	ldr	r1, [pc, #232]	; (800594c <pbuf_take+0x10c>)
 8005864:	483a      	ldr	r0, [pc, #232]	; (8005950 <pbuf_take+0x110>)
 8005866:	f008 fb7d 	bl	800df64 <iprintf>
 800586a:	f06f 030f 	mvn.w	r3, #15
 800586e:	e067      	b.n	8005940 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d109      	bne.n	800588a <pbuf_take+0x4a>
 8005876:	4b34      	ldr	r3, [pc, #208]	; (8005948 <pbuf_take+0x108>)
 8005878:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800587c:	4935      	ldr	r1, [pc, #212]	; (8005954 <pbuf_take+0x114>)
 800587e:	4834      	ldr	r0, [pc, #208]	; (8005950 <pbuf_take+0x110>)
 8005880:	f008 fb70 	bl	800df64 <iprintf>
 8005884:	f06f 030f 	mvn.w	r3, #15
 8005888:	e05a      	b.n	8005940 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	891b      	ldrh	r3, [r3, #8]
 800588e:	88fa      	ldrh	r2, [r7, #6]
 8005890:	429a      	cmp	r2, r3
 8005892:	d909      	bls.n	80058a8 <pbuf_take+0x68>
 8005894:	4b2c      	ldr	r3, [pc, #176]	; (8005948 <pbuf_take+0x108>)
 8005896:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800589a:	492f      	ldr	r1, [pc, #188]	; (8005958 <pbuf_take+0x118>)
 800589c:	482c      	ldr	r0, [pc, #176]	; (8005950 <pbuf_take+0x110>)
 800589e:	f008 fb61 	bl	800df64 <iprintf>
 80058a2:	f04f 33ff 	mov.w	r3, #4294967295
 80058a6:	e04b      	b.n	8005940 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d007      	beq.n	80058be <pbuf_take+0x7e>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d004      	beq.n	80058be <pbuf_take+0x7e>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	891b      	ldrh	r3, [r3, #8]
 80058b8:	88fa      	ldrh	r2, [r7, #6]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d902      	bls.n	80058c4 <pbuf_take+0x84>
    return ERR_ARG;
 80058be:	f06f 030f 	mvn.w	r3, #15
 80058c2:	e03d      	b.n	8005940 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	61fb      	str	r3, [r7, #28]
 80058c8:	e028      	b.n	800591c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d106      	bne.n	80058de <pbuf_take+0x9e>
 80058d0:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <pbuf_take+0x108>)
 80058d2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80058d6:	4921      	ldr	r1, [pc, #132]	; (800595c <pbuf_take+0x11c>)
 80058d8:	481d      	ldr	r0, [pc, #116]	; (8005950 <pbuf_take+0x110>)
 80058da:	f008 fb43 	bl	800df64 <iprintf>
    buf_copy_len = total_copy_len;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	895b      	ldrh	r3, [r3, #10]
 80058e6:	461a      	mov	r2, r3
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d902      	bls.n	80058f4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	895b      	ldrh	r3, [r3, #10]
 80058f2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	6858      	ldr	r0, [r3, #4]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4413      	add	r3, r2
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	4619      	mov	r1, r3
 8005902:	f008 faff 	bl	800df04 <memcpy>
    total_copy_len -= buf_copy_len;
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	4413      	add	r3, r2
 8005914:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1d3      	bne.n	80058ca <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d103      	bne.n	8005930 <pbuf_take+0xf0>
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	429a      	cmp	r2, r3
 800592e:	d006      	beq.n	800593e <pbuf_take+0xfe>
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <pbuf_take+0x108>)
 8005932:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8005936:	490a      	ldr	r1, [pc, #40]	; (8005960 <pbuf_take+0x120>)
 8005938:	4805      	ldr	r0, [pc, #20]	; (8005950 <pbuf_take+0x110>)
 800593a:	f008 fb13 	bl	800df64 <iprintf>
  return ERR_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3720      	adds	r7, #32
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	0800f9e0 	.word	0x0800f9e0
 800594c:	0800fdb8 	.word	0x0800fdb8
 8005950:	0800fa40 	.word	0x0800fa40
 8005954:	0800fdd0 	.word	0x0800fdd0
 8005958:	0800fdec 	.word	0x0800fdec
 800595c:	0800fe0c 	.word	0x0800fe0c
 8005960:	0800fe24 	.word	0x0800fe24

08005964 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	4603      	mov	r3, r0
 800596c:	603a      	str	r2, [r7, #0]
 800596e:	71fb      	strb	r3, [r7, #7]
 8005970:	460b      	mov	r3, r1
 8005972:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	8919      	ldrh	r1, [r3, #8]
 8005978:	88ba      	ldrh	r2, [r7, #4]
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	4618      	mov	r0, r3
 800597e:	f7ff fa0f 	bl	8004da0 <pbuf_alloc>
 8005982:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <pbuf_clone+0x2a>
    return NULL;
 800598a:	2300      	movs	r3, #0
 800598c:	e011      	b.n	80059b2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800598e:	6839      	ldr	r1, [r7, #0]
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7ff fe11 	bl	80055b8 <pbuf_copy>
 8005996:	4603      	mov	r3, r0
 8005998:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800599a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d006      	beq.n	80059b0 <pbuf_clone+0x4c>
 80059a2:	4b06      	ldr	r3, [pc, #24]	; (80059bc <pbuf_clone+0x58>)
 80059a4:	f240 5224 	movw	r2, #1316	; 0x524
 80059a8:	4905      	ldr	r1, [pc, #20]	; (80059c0 <pbuf_clone+0x5c>)
 80059aa:	4806      	ldr	r0, [pc, #24]	; (80059c4 <pbuf_clone+0x60>)
 80059ac:	f008 fada 	bl	800df64 <iprintf>
  return q;
 80059b0:	68fb      	ldr	r3, [r7, #12]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	0800f9e0 	.word	0x0800f9e0
 80059c0:	0800fe54 	.word	0x0800fe54
 80059c4:	0800fa40 	.word	0x0800fa40

080059c8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80059cc:	f008 fae2 	bl	800df94 <rand>
 80059d0:	4603      	mov	r3, r0
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80059d8:	b29b      	uxth	r3, r3
 80059da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80059de:	b29a      	uxth	r2, r3
 80059e0:	4b01      	ldr	r3, [pc, #4]	; (80059e8 <tcp_init+0x20>)
 80059e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80059e4:	bf00      	nop
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	2000000a 	.word	0x2000000a

080059ec <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	7d1b      	ldrb	r3, [r3, #20]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d105      	bne.n	8005a08 <tcp_free+0x1c>
 80059fc:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <tcp_free+0x2c>)
 80059fe:	22d4      	movs	r2, #212	; 0xd4
 8005a00:	4906      	ldr	r1, [pc, #24]	; (8005a1c <tcp_free+0x30>)
 8005a02:	4807      	ldr	r0, [pc, #28]	; (8005a20 <tcp_free+0x34>)
 8005a04:	f008 faae 	bl	800df64 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005a08:	6879      	ldr	r1, [r7, #4]
 8005a0a:	2001      	movs	r0, #1
 8005a0c:	f7fe fe9a 	bl	8004744 <memp_free>
}
 8005a10:	bf00      	nop
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	0800fee0 	.word	0x0800fee0
 8005a1c:	0800ff10 	.word	0x0800ff10
 8005a20:	0800ff24 	.word	0x0800ff24

08005a24 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	7d1b      	ldrb	r3, [r3, #20]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d105      	bne.n	8005a40 <tcp_free_listen+0x1c>
 8005a34:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <tcp_free_listen+0x2c>)
 8005a36:	22df      	movs	r2, #223	; 0xdf
 8005a38:	4906      	ldr	r1, [pc, #24]	; (8005a54 <tcp_free_listen+0x30>)
 8005a3a:	4807      	ldr	r0, [pc, #28]	; (8005a58 <tcp_free_listen+0x34>)
 8005a3c:	f008 fa92 	bl	800df64 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	2002      	movs	r0, #2
 8005a44:	f7fe fe7e 	bl	8004744 <memp_free>
}
 8005a48:	bf00      	nop
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	0800fee0 	.word	0x0800fee0
 8005a54:	0800ff4c 	.word	0x0800ff4c
 8005a58:	0800ff24 	.word	0x0800ff24

08005a5c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005a60:	f000 fea2 	bl	80067a8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005a64:	4b07      	ldr	r3, [pc, #28]	; (8005a84 <tcp_tmr+0x28>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <tcp_tmr+0x28>)
 8005a6e:	701a      	strb	r2, [r3, #0]
 8005a70:	4b04      	ldr	r3, [pc, #16]	; (8005a84 <tcp_tmr+0x28>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005a7c:	f000 fb54 	bl	8006128 <tcp_slowtmr>
  }
}
 8005a80:	bf00      	nop
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	200000c9 	.word	0x200000c9

08005a88 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d105      	bne.n	8005aa4 <tcp_remove_listener+0x1c>
 8005a98:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <tcp_remove_listener+0x48>)
 8005a9a:	22ff      	movs	r2, #255	; 0xff
 8005a9c:	490d      	ldr	r1, [pc, #52]	; (8005ad4 <tcp_remove_listener+0x4c>)
 8005a9e:	480e      	ldr	r0, [pc, #56]	; (8005ad8 <tcp_remove_listener+0x50>)
 8005aa0:	f008 fa60 	bl	800df64 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	e00a      	b.n	8005ac0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d102      	bne.n	8005aba <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f1      	bne.n	8005aaa <tcp_remove_listener+0x22>
    }
  }
}
 8005ac6:	bf00      	nop
 8005ac8:	bf00      	nop
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	0800fee0 	.word	0x0800fee0
 8005ad4:	0800ff68 	.word	0x0800ff68
 8005ad8:	0800ff24 	.word	0x0800ff24

08005adc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <tcp_listen_closed+0x1c>
 8005aea:	4b14      	ldr	r3, [pc, #80]	; (8005b3c <tcp_listen_closed+0x60>)
 8005aec:	f240 1211 	movw	r2, #273	; 0x111
 8005af0:	4913      	ldr	r1, [pc, #76]	; (8005b40 <tcp_listen_closed+0x64>)
 8005af2:	4814      	ldr	r0, [pc, #80]	; (8005b44 <tcp_listen_closed+0x68>)
 8005af4:	f008 fa36 	bl	800df64 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	7d1b      	ldrb	r3, [r3, #20]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d006      	beq.n	8005b0e <tcp_listen_closed+0x32>
 8005b00:	4b0e      	ldr	r3, [pc, #56]	; (8005b3c <tcp_listen_closed+0x60>)
 8005b02:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005b06:	4910      	ldr	r1, [pc, #64]	; (8005b48 <tcp_listen_closed+0x6c>)
 8005b08:	480e      	ldr	r0, [pc, #56]	; (8005b44 <tcp_listen_closed+0x68>)
 8005b0a:	f008 fa2b 	bl	800df64 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005b0e:	2301      	movs	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	e00b      	b.n	8005b2c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005b14:	4a0d      	ldr	r2, [pc, #52]	; (8005b4c <tcp_listen_closed+0x70>)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff ffb1 	bl	8005a88 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d9f0      	bls.n	8005b14 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005b32:	bf00      	nop
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	0800fee0 	.word	0x0800fee0
 8005b40:	0800ff90 	.word	0x0800ff90
 8005b44:	0800ff24 	.word	0x0800ff24
 8005b48:	0800ff9c 	.word	0x0800ff9c
 8005b4c:	08011eac 	.word	0x08011eac

08005b50 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005b50:	b5b0      	push	{r4, r5, r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af04      	add	r7, sp, #16
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d106      	bne.n	8005b70 <tcp_close_shutdown+0x20>
 8005b62:	4b63      	ldr	r3, [pc, #396]	; (8005cf0 <tcp_close_shutdown+0x1a0>)
 8005b64:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005b68:	4962      	ldr	r1, [pc, #392]	; (8005cf4 <tcp_close_shutdown+0x1a4>)
 8005b6a:	4863      	ldr	r0, [pc, #396]	; (8005cf8 <tcp_close_shutdown+0x1a8>)
 8005b6c:	f008 f9fa 	bl	800df64 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d066      	beq.n	8005c44 <tcp_close_shutdown+0xf4>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	7d1b      	ldrb	r3, [r3, #20]
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d003      	beq.n	8005b86 <tcp_close_shutdown+0x36>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	7d1b      	ldrb	r3, [r3, #20]
 8005b82:	2b07      	cmp	r3, #7
 8005b84:	d15e      	bne.n	8005c44 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d104      	bne.n	8005b98 <tcp_close_shutdown+0x48>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b92:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005b96:	d055      	beq.n	8005c44 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	8b5b      	ldrh	r3, [r3, #26]
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d106      	bne.n	8005bb2 <tcp_close_shutdown+0x62>
 8005ba4:	4b52      	ldr	r3, [pc, #328]	; (8005cf0 <tcp_close_shutdown+0x1a0>)
 8005ba6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005baa:	4954      	ldr	r1, [pc, #336]	; (8005cfc <tcp_close_shutdown+0x1ac>)
 8005bac:	4852      	ldr	r0, [pc, #328]	; (8005cf8 <tcp_close_shutdown+0x1a8>)
 8005bae:	f008 f9d9 	bl	800df64 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005bba:	687d      	ldr	r5, [r7, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	8ad2      	ldrh	r2, [r2, #22]
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	8b09      	ldrh	r1, [r1, #24]
 8005bc8:	9102      	str	r1, [sp, #8]
 8005bca:	9201      	str	r2, [sp, #4]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	462b      	mov	r3, r5
 8005bd0:	4622      	mov	r2, r4
 8005bd2:	4601      	mov	r1, r0
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f004 fe8d 	bl	800a8f4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f001 f8c6 	bl	8006d6c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005be0:	4b47      	ldr	r3, [pc, #284]	; (8005d00 <tcp_close_shutdown+0x1b0>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d105      	bne.n	8005bf6 <tcp_close_shutdown+0xa6>
 8005bea:	4b45      	ldr	r3, [pc, #276]	; (8005d00 <tcp_close_shutdown+0x1b0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	4a43      	ldr	r2, [pc, #268]	; (8005d00 <tcp_close_shutdown+0x1b0>)
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	e013      	b.n	8005c1e <tcp_close_shutdown+0xce>
 8005bf6:	4b42      	ldr	r3, [pc, #264]	; (8005d00 <tcp_close_shutdown+0x1b0>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	e00c      	b.n	8005c18 <tcp_close_shutdown+0xc8>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d104      	bne.n	8005c12 <tcp_close_shutdown+0xc2>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	60da      	str	r2, [r3, #12]
 8005c10:	e005      	b.n	8005c1e <tcp_close_shutdown+0xce>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1ef      	bne.n	8005bfe <tcp_close_shutdown+0xae>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	60da      	str	r2, [r3, #12]
 8005c24:	4b37      	ldr	r3, [pc, #220]	; (8005d04 <tcp_close_shutdown+0x1b4>)
 8005c26:	2201      	movs	r2, #1
 8005c28:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005c2a:	4b37      	ldr	r3, [pc, #220]	; (8005d08 <tcp_close_shutdown+0x1b8>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d102      	bne.n	8005c3a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005c34:	f003 fd5a 	bl	80096ec <tcp_trigger_input_pcb_close>
 8005c38:	e002      	b.n	8005c40 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff fed6 	bl	80059ec <tcp_free>
      }
      return ERR_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e050      	b.n	8005ce6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	7d1b      	ldrb	r3, [r3, #20]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d03b      	beq.n	8005cc4 <tcp_close_shutdown+0x174>
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	dc44      	bgt.n	8005cda <tcp_close_shutdown+0x18a>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <tcp_close_shutdown+0x10a>
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d02a      	beq.n	8005cae <tcp_close_shutdown+0x15e>
 8005c58:	e03f      	b.n	8005cda <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	8adb      	ldrh	r3, [r3, #22]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d021      	beq.n	8005ca6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005c62:	4b2a      	ldr	r3, [pc, #168]	; (8005d0c <tcp_close_shutdown+0x1bc>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d105      	bne.n	8005c78 <tcp_close_shutdown+0x128>
 8005c6c:	4b27      	ldr	r3, [pc, #156]	; (8005d0c <tcp_close_shutdown+0x1bc>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	4a26      	ldr	r2, [pc, #152]	; (8005d0c <tcp_close_shutdown+0x1bc>)
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	e013      	b.n	8005ca0 <tcp_close_shutdown+0x150>
 8005c78:	4b24      	ldr	r3, [pc, #144]	; (8005d0c <tcp_close_shutdown+0x1bc>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	e00c      	b.n	8005c9a <tcp_close_shutdown+0x14a>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d104      	bne.n	8005c94 <tcp_close_shutdown+0x144>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	60da      	str	r2, [r3, #12]
 8005c92:	e005      	b.n	8005ca0 <tcp_close_shutdown+0x150>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1ef      	bne.n	8005c80 <tcp_close_shutdown+0x130>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff fea0 	bl	80059ec <tcp_free>
      break;
 8005cac:	e01a      	b.n	8005ce4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7ff ff14 	bl	8005adc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005cb4:	6879      	ldr	r1, [r7, #4]
 8005cb6:	4816      	ldr	r0, [pc, #88]	; (8005d10 <tcp_close_shutdown+0x1c0>)
 8005cb8:	f001 f8a8 	bl	8006e0c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff feb1 	bl	8005a24 <tcp_free_listen>
      break;
 8005cc2:	e00f      	b.n	8005ce4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	480e      	ldr	r0, [pc, #56]	; (8005d00 <tcp_close_shutdown+0x1b0>)
 8005cc8:	f001 f8a0 	bl	8006e0c <tcp_pcb_remove>
 8005ccc:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <tcp_close_shutdown+0x1b4>)
 8005cce:	2201      	movs	r2, #1
 8005cd0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7ff fe8a 	bl	80059ec <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005cd8:	e004      	b.n	8005ce4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f81a 	bl	8005d14 <tcp_close_shutdown_fin>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	e000      	b.n	8005ce6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bdb0      	pop	{r4, r5, r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	0800fee0 	.word	0x0800fee0
 8005cf4:	0800ffb4 	.word	0x0800ffb4
 8005cf8:	0800ff24 	.word	0x0800ff24
 8005cfc:	0800ffd4 	.word	0x0800ffd4
 8005d00:	20008b08 	.word	0x20008b08
 8005d04:	20008b04 	.word	0x20008b04
 8005d08:	20008b1c 	.word	0x20008b1c
 8005d0c:	20008b14 	.word	0x20008b14
 8005d10:	20008b10 	.word	0x20008b10

08005d14 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <tcp_close_shutdown_fin+0x1c>
 8005d22:	4b2e      	ldr	r3, [pc, #184]	; (8005ddc <tcp_close_shutdown_fin+0xc8>)
 8005d24:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005d28:	492d      	ldr	r1, [pc, #180]	; (8005de0 <tcp_close_shutdown_fin+0xcc>)
 8005d2a:	482e      	ldr	r0, [pc, #184]	; (8005de4 <tcp_close_shutdown_fin+0xd0>)
 8005d2c:	f008 f91a 	bl	800df64 <iprintf>

  switch (pcb->state) {
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	7d1b      	ldrb	r3, [r3, #20]
 8005d34:	2b07      	cmp	r3, #7
 8005d36:	d020      	beq.n	8005d7a <tcp_close_shutdown_fin+0x66>
 8005d38:	2b07      	cmp	r3, #7
 8005d3a:	dc2b      	bgt.n	8005d94 <tcp_close_shutdown_fin+0x80>
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	d002      	beq.n	8005d46 <tcp_close_shutdown_fin+0x32>
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d00d      	beq.n	8005d60 <tcp_close_shutdown_fin+0x4c>
 8005d44:	e026      	b.n	8005d94 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f003 fee2 	bl	8009b10 <tcp_send_fin>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d11f      	bne.n	8005d98 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2205      	movs	r2, #5
 8005d5c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005d5e:	e01b      	b.n	8005d98 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f003 fed5 	bl	8009b10 <tcp_send_fin>
 8005d66:	4603      	mov	r3, r0
 8005d68:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d114      	bne.n	8005d9c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2205      	movs	r2, #5
 8005d76:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005d78:	e010      	b.n	8005d9c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f003 fec8 	bl	8009b10 <tcp_send_fin>
 8005d80:	4603      	mov	r3, r0
 8005d82:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d109      	bne.n	8005da0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2209      	movs	r2, #9
 8005d90:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005d92:	e005      	b.n	8005da0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	e01c      	b.n	8005dd2 <tcp_close_shutdown_fin+0xbe>
      break;
 8005d98:	bf00      	nop
 8005d9a:	e002      	b.n	8005da2 <tcp_close_shutdown_fin+0x8e>
      break;
 8005d9c:	bf00      	nop
 8005d9e:	e000      	b.n	8005da2 <tcp_close_shutdown_fin+0x8e>
      break;
 8005da0:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d103      	bne.n	8005db2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f003 ffee 	bl	8009d8c <tcp_output>
 8005db0:	e00d      	b.n	8005dce <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dba:	d108      	bne.n	8005dce <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	8b5b      	ldrh	r3, [r3, #26]
 8005dc0:	f043 0308 	orr.w	r3, r3, #8
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	e001      	b.n	8005dd2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	0800fee0 	.word	0x0800fee0
 8005de0:	0800ff90 	.word	0x0800ff90
 8005de4:	0800ff24 	.word	0x0800ff24

08005de8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d109      	bne.n	8005e0a <tcp_close+0x22>
 8005df6:	4b0f      	ldr	r3, [pc, #60]	; (8005e34 <tcp_close+0x4c>)
 8005df8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005dfc:	490e      	ldr	r1, [pc, #56]	; (8005e38 <tcp_close+0x50>)
 8005dfe:	480f      	ldr	r0, [pc, #60]	; (8005e3c <tcp_close+0x54>)
 8005e00:	f008 f8b0 	bl	800df64 <iprintf>
 8005e04:	f06f 030f 	mvn.w	r3, #15
 8005e08:	e00f      	b.n	8005e2a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	7d1b      	ldrb	r3, [r3, #20]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d006      	beq.n	8005e20 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	8b5b      	ldrh	r3, [r3, #26]
 8005e16:	f043 0310 	orr.w	r3, r3, #16
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005e20:	2101      	movs	r1, #1
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff fe94 	bl	8005b50 <tcp_close_shutdown>
 8005e28:	4603      	mov	r3, r0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	0800fee0 	.word	0x0800fee0
 8005e38:	0800fff0 	.word	0x0800fff0
 8005e3c:	0800ff24 	.word	0x0800ff24

08005e40 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08e      	sub	sp, #56	; 0x38
 8005e44:	af04      	add	r7, sp, #16
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d107      	bne.n	8005e60 <tcp_abandon+0x20>
 8005e50:	4b52      	ldr	r3, [pc, #328]	; (8005f9c <tcp_abandon+0x15c>)
 8005e52:	f240 223d 	movw	r2, #573	; 0x23d
 8005e56:	4952      	ldr	r1, [pc, #328]	; (8005fa0 <tcp_abandon+0x160>)
 8005e58:	4852      	ldr	r0, [pc, #328]	; (8005fa4 <tcp_abandon+0x164>)
 8005e5a:	f008 f883 	bl	800df64 <iprintf>
 8005e5e:	e099      	b.n	8005f94 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	7d1b      	ldrb	r3, [r3, #20]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d106      	bne.n	8005e76 <tcp_abandon+0x36>
 8005e68:	4b4c      	ldr	r3, [pc, #304]	; (8005f9c <tcp_abandon+0x15c>)
 8005e6a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005e6e:	494e      	ldr	r1, [pc, #312]	; (8005fa8 <tcp_abandon+0x168>)
 8005e70:	484c      	ldr	r0, [pc, #304]	; (8005fa4 <tcp_abandon+0x164>)
 8005e72:	f008 f877 	bl	800df64 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	7d1b      	ldrb	r3, [r3, #20]
 8005e7a:	2b0a      	cmp	r3, #10
 8005e7c:	d107      	bne.n	8005e8e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	484a      	ldr	r0, [pc, #296]	; (8005fac <tcp_abandon+0x16c>)
 8005e82:	f000 ffc3 	bl	8006e0c <tcp_pcb_remove>
    tcp_free(pcb);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff fdb0 	bl	80059ec <tcp_free>
 8005e8c:	e082      	b.n	8005f94 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005e92:	2300      	movs	r3, #0
 8005e94:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	7d1b      	ldrb	r3, [r3, #20]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d126      	bne.n	8005f06 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8adb      	ldrh	r3, [r3, #22]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d02e      	beq.n	8005f1e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005ec0:	4b3b      	ldr	r3, [pc, #236]	; (8005fb0 <tcp_abandon+0x170>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d105      	bne.n	8005ed6 <tcp_abandon+0x96>
 8005eca:	4b39      	ldr	r3, [pc, #228]	; (8005fb0 <tcp_abandon+0x170>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	4a37      	ldr	r2, [pc, #220]	; (8005fb0 <tcp_abandon+0x170>)
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	e013      	b.n	8005efe <tcp_abandon+0xbe>
 8005ed6:	4b36      	ldr	r3, [pc, #216]	; (8005fb0 <tcp_abandon+0x170>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	e00c      	b.n	8005ef8 <tcp_abandon+0xb8>
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d104      	bne.n	8005ef2 <tcp_abandon+0xb2>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	60da      	str	r2, [r3, #12]
 8005ef0:	e005      	b.n	8005efe <tcp_abandon+0xbe>
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	61fb      	str	r3, [r7, #28]
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1ef      	bne.n	8005ede <tcp_abandon+0x9e>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	60da      	str	r2, [r3, #12]
 8005f04:	e00b      	b.n	8005f1e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	8adb      	ldrh	r3, [r3, #22]
 8005f0e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005f10:	6879      	ldr	r1, [r7, #4]
 8005f12:	4828      	ldr	r0, [pc, #160]	; (8005fb4 <tcp_abandon+0x174>)
 8005f14:	f000 ff7a 	bl	8006e0c <tcp_pcb_remove>
 8005f18:	4b27      	ldr	r3, [pc, #156]	; (8005fb8 <tcp_abandon+0x178>)
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d004      	beq.n	8005f30 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fd1c 	bl	8006968 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fd13 	bl	8006968 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d004      	beq.n	8005f54 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fd0a 	bl	8006968 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00e      	beq.n	8005f78 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	8b12      	ldrh	r2, [r2, #24]
 8005f64:	9202      	str	r2, [sp, #8]
 8005f66:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005f68:	9201      	str	r2, [sp, #4]
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	69b9      	ldr	r1, [r7, #24]
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f004 fcbe 	bl	800a8f4 <tcp_rst>
    }
    last_state = pcb->state;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	7d1b      	ldrb	r3, [r3, #20]
 8005f7c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7ff fd34 	bl	80059ec <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d004      	beq.n	8005f94 <tcp_abandon+0x154>
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f06f 010c 	mvn.w	r1, #12
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	4798      	blx	r3
  }
}
 8005f94:	3728      	adds	r7, #40	; 0x28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	0800fee0 	.word	0x0800fee0
 8005fa0:	08010024 	.word	0x08010024
 8005fa4:	0800ff24 	.word	0x0800ff24
 8005fa8:	08010040 	.word	0x08010040
 8005fac:	20008b18 	.word	0x20008b18
 8005fb0:	20008b14 	.word	0x20008b14
 8005fb4:	20008b08 	.word	0x20008b08
 8005fb8:	20008b04 	.word	0x20008b04

08005fbc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff ff3a 	bl	8005e40 <tcp_abandon>
}
 8005fcc:	bf00      	nop
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d106      	bne.n	8005ff0 <tcp_update_rcv_ann_wnd+0x1c>
 8005fe2:	4b25      	ldr	r3, [pc, #148]	; (8006078 <tcp_update_rcv_ann_wnd+0xa4>)
 8005fe4:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005fe8:	4924      	ldr	r1, [pc, #144]	; (800607c <tcp_update_rcv_ann_wnd+0xa8>)
 8005fea:	4825      	ldr	r0, [pc, #148]	; (8006080 <tcp_update_rcv_ann_wnd+0xac>)
 8005fec:	f007 ffba 	bl	800df64 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005ff8:	4413      	add	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006004:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006008:	bf28      	it	cs
 800600a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800600e:	b292      	uxth	r2, r2
 8006010:	4413      	add	r3, r2
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	db08      	blt.n	800602c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	e020      	b.n	800606e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	dd03      	ble.n	8006042 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006040:	e014      	b.n	800606c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006054:	d306      	bcc.n	8006064 <tcp_update_rcv_ann_wnd+0x90>
 8006056:	4b08      	ldr	r3, [pc, #32]	; (8006078 <tcp_update_rcv_ann_wnd+0xa4>)
 8006058:	f240 32b6 	movw	r2, #950	; 0x3b6
 800605c:	4909      	ldr	r1, [pc, #36]	; (8006084 <tcp_update_rcv_ann_wnd+0xb0>)
 800605e:	4808      	ldr	r0, [pc, #32]	; (8006080 <tcp_update_rcv_ann_wnd+0xac>)
 8006060:	f007 ff80 	bl	800df64 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	b29a      	uxth	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800606c:	2300      	movs	r3, #0
  }
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	0800fee0 	.word	0x0800fee0
 800607c:	0801013c 	.word	0x0801013c
 8006080:	0800ff24 	.word	0x0800ff24
 8006084:	08010160 	.word	0x08010160

08006088 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d107      	bne.n	80060aa <tcp_recved+0x22>
 800609a:	4b1f      	ldr	r3, [pc, #124]	; (8006118 <tcp_recved+0x90>)
 800609c:	f240 32cf 	movw	r2, #975	; 0x3cf
 80060a0:	491e      	ldr	r1, [pc, #120]	; (800611c <tcp_recved+0x94>)
 80060a2:	481f      	ldr	r0, [pc, #124]	; (8006120 <tcp_recved+0x98>)
 80060a4:	f007 ff5e 	bl	800df64 <iprintf>
 80060a8:	e032      	b.n	8006110 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	7d1b      	ldrb	r3, [r3, #20]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d106      	bne.n	80060c0 <tcp_recved+0x38>
 80060b2:	4b19      	ldr	r3, [pc, #100]	; (8006118 <tcp_recved+0x90>)
 80060b4:	f240 32d2 	movw	r2, #978	; 0x3d2
 80060b8:	491a      	ldr	r1, [pc, #104]	; (8006124 <tcp_recved+0x9c>)
 80060ba:	4819      	ldr	r0, [pc, #100]	; (8006120 <tcp_recved+0x98>)
 80060bc:	f007 ff52 	bl	800df64 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80060c4:	887b      	ldrh	r3, [r7, #2]
 80060c6:	4413      	add	r3, r2
 80060c8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80060ca:	89fb      	ldrh	r3, [r7, #14]
 80060cc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80060d0:	d804      	bhi.n	80060dc <tcp_recved+0x54>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d6:	89fa      	ldrh	r2, [r7, #14]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d204      	bcs.n	80060e6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80060e2:	851a      	strh	r2, [r3, #40]	; 0x28
 80060e4:	e002      	b.n	80060ec <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	89fa      	ldrh	r2, [r7, #14]
 80060ea:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7ff ff71 	bl	8005fd4 <tcp_update_rcv_ann_wnd>
 80060f2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80060fa:	d309      	bcc.n	8006110 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	8b5b      	ldrh	r3, [r3, #26]
 8006100:	f043 0302 	orr.w	r3, r3, #2
 8006104:	b29a      	uxth	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f003 fe3e 	bl	8009d8c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	0800fee0 	.word	0x0800fee0
 800611c:	0801017c 	.word	0x0801017c
 8006120:	0800ff24 	.word	0x0800ff24
 8006124:	08010194 	.word	0x08010194

08006128 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006128:	b5b0      	push	{r4, r5, r7, lr}
 800612a:	b090      	sub	sp, #64	; 0x40
 800612c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006134:	4b94      	ldr	r3, [pc, #592]	; (8006388 <tcp_slowtmr+0x260>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3301      	adds	r3, #1
 800613a:	4a93      	ldr	r2, [pc, #588]	; (8006388 <tcp_slowtmr+0x260>)
 800613c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800613e:	4b93      	ldr	r3, [pc, #588]	; (800638c <tcp_slowtmr+0x264>)
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	3301      	adds	r3, #1
 8006144:	b2da      	uxtb	r2, r3
 8006146:	4b91      	ldr	r3, [pc, #580]	; (800638c <tcp_slowtmr+0x264>)
 8006148:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800614a:	2300      	movs	r3, #0
 800614c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800614e:	4b90      	ldr	r3, [pc, #576]	; (8006390 <tcp_slowtmr+0x268>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006154:	e29d      	b.n	8006692 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006158:	7d1b      	ldrb	r3, [r3, #20]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <tcp_slowtmr+0x44>
 800615e:	4b8d      	ldr	r3, [pc, #564]	; (8006394 <tcp_slowtmr+0x26c>)
 8006160:	f240 42be 	movw	r2, #1214	; 0x4be
 8006164:	498c      	ldr	r1, [pc, #560]	; (8006398 <tcp_slowtmr+0x270>)
 8006166:	488d      	ldr	r0, [pc, #564]	; (800639c <tcp_slowtmr+0x274>)
 8006168:	f007 fefc 	bl	800df64 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616e:	7d1b      	ldrb	r3, [r3, #20]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d106      	bne.n	8006182 <tcp_slowtmr+0x5a>
 8006174:	4b87      	ldr	r3, [pc, #540]	; (8006394 <tcp_slowtmr+0x26c>)
 8006176:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800617a:	4989      	ldr	r1, [pc, #548]	; (80063a0 <tcp_slowtmr+0x278>)
 800617c:	4887      	ldr	r0, [pc, #540]	; (800639c <tcp_slowtmr+0x274>)
 800617e:	f007 fef1 	bl	800df64 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006184:	7d1b      	ldrb	r3, [r3, #20]
 8006186:	2b0a      	cmp	r3, #10
 8006188:	d106      	bne.n	8006198 <tcp_slowtmr+0x70>
 800618a:	4b82      	ldr	r3, [pc, #520]	; (8006394 <tcp_slowtmr+0x26c>)
 800618c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006190:	4984      	ldr	r1, [pc, #528]	; (80063a4 <tcp_slowtmr+0x27c>)
 8006192:	4882      	ldr	r0, [pc, #520]	; (800639c <tcp_slowtmr+0x274>)
 8006194:	f007 fee6 	bl	800df64 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619a:	7f9a      	ldrb	r2, [r3, #30]
 800619c:	4b7b      	ldr	r3, [pc, #492]	; (800638c <tcp_slowtmr+0x264>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d105      	bne.n	80061b0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80061a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80061a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80061ae:	e270      	b.n	8006692 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80061b0:	4b76      	ldr	r3, [pc, #472]	; (800638c <tcp_slowtmr+0x264>)
 80061b2:	781a      	ldrb	r2, [r3, #0]
 80061b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80061c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c6:	7d1b      	ldrb	r3, [r3, #20]
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d10a      	bne.n	80061e2 <tcp_slowtmr+0xba>
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061d2:	2b05      	cmp	r3, #5
 80061d4:	d905      	bls.n	80061e2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80061d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061da:	3301      	adds	r3, #1
 80061dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80061e0:	e11e      	b.n	8006420 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061e8:	2b0b      	cmp	r3, #11
 80061ea:	d905      	bls.n	80061f8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80061ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061f0:	3301      	adds	r3, #1
 80061f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80061f6:	e113      	b.n	8006420 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80061f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d075      	beq.n	80062ee <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006206:	2b00      	cmp	r3, #0
 8006208:	d006      	beq.n	8006218 <tcp_slowtmr+0xf0>
 800620a:	4b62      	ldr	r3, [pc, #392]	; (8006394 <tcp_slowtmr+0x26c>)
 800620c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006210:	4965      	ldr	r1, [pc, #404]	; (80063a8 <tcp_slowtmr+0x280>)
 8006212:	4862      	ldr	r0, [pc, #392]	; (800639c <tcp_slowtmr+0x274>)
 8006214:	f007 fea6 	bl	800df64 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800621c:	2b00      	cmp	r3, #0
 800621e:	d106      	bne.n	800622e <tcp_slowtmr+0x106>
 8006220:	4b5c      	ldr	r3, [pc, #368]	; (8006394 <tcp_slowtmr+0x26c>)
 8006222:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006226:	4961      	ldr	r1, [pc, #388]	; (80063ac <tcp_slowtmr+0x284>)
 8006228:	485c      	ldr	r0, [pc, #368]	; (800639c <tcp_slowtmr+0x274>)
 800622a:	f007 fe9b 	bl	800df64 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800622e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006230:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006234:	2b0b      	cmp	r3, #11
 8006236:	d905      	bls.n	8006244 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800623c:	3301      	adds	r3, #1
 800623e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006242:	e0ed      	b.n	8006420 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006246:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800624a:	3b01      	subs	r3, #1
 800624c:	4a58      	ldr	r2, [pc, #352]	; (80063b0 <tcp_slowtmr+0x288>)
 800624e:	5cd3      	ldrb	r3, [r2, r3]
 8006250:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006254:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006258:	7c7a      	ldrb	r2, [r7, #17]
 800625a:	429a      	cmp	r2, r3
 800625c:	d907      	bls.n	800626e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006260:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006264:	3301      	adds	r3, #1
 8006266:	b2da      	uxtb	r2, r3
 8006268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006270:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006274:	7c7a      	ldrb	r2, [r7, #17]
 8006276:	429a      	cmp	r2, r3
 8006278:	f200 80d2 	bhi.w	8006420 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800627c:	2301      	movs	r3, #1
 800627e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006286:	2b00      	cmp	r3, #0
 8006288:	d108      	bne.n	800629c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800628a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800628c:	f004 fc26 	bl	800aadc <tcp_zero_window_probe>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d014      	beq.n	80062c0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006296:	2300      	movs	r3, #0
 8006298:	623b      	str	r3, [r7, #32]
 800629a:	e011      	b.n	80062c0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80062a2:	4619      	mov	r1, r3
 80062a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062a6:	f003 faeb 	bl	8009880 <tcp_split_unsent_seg>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d107      	bne.n	80062c0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80062b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062b2:	f003 fd6b 	bl	8009d8c <tcp_output>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80062bc:	2300      	movs	r3, #0
 80062be:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 80ac 	beq.w	8006420 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80062d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80062d6:	2b06      	cmp	r3, #6
 80062d8:	f200 80a2 	bhi.w	8006420 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80062e2:	3301      	adds	r3, #1
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80062ec:	e098      	b.n	8006420 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80062ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	db0f      	blt.n	8006318 <tcp_slowtmr+0x1f0>
 80062f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80062fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006302:	4293      	cmp	r3, r2
 8006304:	d008      	beq.n	8006318 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006308:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800630c:	b29b      	uxth	r3, r3
 800630e:	3301      	adds	r3, #1
 8006310:	b29b      	uxth	r3, r3
 8006312:	b21a      	sxth	r2, r3
 8006314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006316:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800631e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006320:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006324:	429a      	cmp	r2, r3
 8006326:	db7b      	blt.n	8006420 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006328:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800632a:	f004 f821 	bl	800a370 <tcp_rexmit_rto_prepare>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d007      	beq.n	8006344 <tcp_slowtmr+0x21c>
 8006334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006338:	2b00      	cmp	r3, #0
 800633a:	d171      	bne.n	8006420 <tcp_slowtmr+0x2f8>
 800633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006340:	2b00      	cmp	r3, #0
 8006342:	d06d      	beq.n	8006420 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006346:	7d1b      	ldrb	r3, [r3, #20]
 8006348:	2b02      	cmp	r3, #2
 800634a:	d03a      	beq.n	80063c2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800634c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006352:	2b0c      	cmp	r3, #12
 8006354:	bf28      	it	cs
 8006356:	230c      	movcs	r3, #12
 8006358:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800635a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006360:	10db      	asrs	r3, r3, #3
 8006362:	b21b      	sxth	r3, r3
 8006364:	461a      	mov	r2, r3
 8006366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006368:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800636c:	4413      	add	r3, r2
 800636e:	7efa      	ldrb	r2, [r7, #27]
 8006370:	4910      	ldr	r1, [pc, #64]	; (80063b4 <tcp_slowtmr+0x28c>)
 8006372:	5c8a      	ldrb	r2, [r1, r2]
 8006374:	4093      	lsls	r3, r2
 8006376:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800637e:	4293      	cmp	r3, r2
 8006380:	dc1a      	bgt.n	80063b8 <tcp_slowtmr+0x290>
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	b21a      	sxth	r2, r3
 8006386:	e019      	b.n	80063bc <tcp_slowtmr+0x294>
 8006388:	20008b0c 	.word	0x20008b0c
 800638c:	200000ca 	.word	0x200000ca
 8006390:	20008b08 	.word	0x20008b08
 8006394:	0800fee0 	.word	0x0800fee0
 8006398:	08010224 	.word	0x08010224
 800639c:	0800ff24 	.word	0x0800ff24
 80063a0:	08010250 	.word	0x08010250
 80063a4:	0801027c 	.word	0x0801027c
 80063a8:	080102ac 	.word	0x080102ac
 80063ac:	080102e0 	.word	0x080102e0
 80063b0:	08011ea4 	.word	0x08011ea4
 80063b4:	08011e94 	.word	0x08011e94
 80063b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80063c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c4:	2200      	movs	r2, #0
 80063c6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80063d4:	4293      	cmp	r3, r2
 80063d6:	bf28      	it	cs
 80063d8:	4613      	movcs	r3, r2
 80063da:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80063dc:	8a7b      	ldrh	r3, [r7, #18]
 80063de:	085b      	lsrs	r3, r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80063e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80063ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d206      	bcs.n	8006408 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80063fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	b29a      	uxth	r2, r3
 8006402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006404:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800640c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	2200      	movs	r2, #0
 8006416:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800641a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800641c:	f004 f818 	bl	800a450 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006422:	7d1b      	ldrb	r3, [r3, #20]
 8006424:	2b06      	cmp	r3, #6
 8006426:	d111      	bne.n	800644c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642a:	8b5b      	ldrh	r3, [r3, #26]
 800642c:	f003 0310 	and.w	r3, r3, #16
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00b      	beq.n	800644c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006434:	4b9c      	ldr	r3, [pc, #624]	; (80066a8 <tcp_slowtmr+0x580>)
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b28      	cmp	r3, #40	; 0x28
 8006440:	d904      	bls.n	800644c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006446:	3301      	adds	r3, #1
 8006448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800644c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644e:	7a5b      	ldrb	r3, [r3, #9]
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b00      	cmp	r3, #0
 8006456:	d04a      	beq.n	80064ee <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8006458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800645c:	2b04      	cmp	r3, #4
 800645e:	d003      	beq.n	8006468 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006462:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006464:	2b07      	cmp	r3, #7
 8006466:	d142      	bne.n	80064ee <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006468:	4b8f      	ldr	r3, [pc, #572]	; (80066a8 <tcp_slowtmr+0x580>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006478:	4b8c      	ldr	r3, [pc, #560]	; (80066ac <tcp_slowtmr+0x584>)
 800647a:	440b      	add	r3, r1
 800647c:	498c      	ldr	r1, [pc, #560]	; (80066b0 <tcp_slowtmr+0x588>)
 800647e:	fba1 1303 	umull	r1, r3, r1, r3
 8006482:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006484:	429a      	cmp	r2, r3
 8006486:	d90a      	bls.n	800649e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800648c:	3301      	adds	r3, #1
 800648e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006492:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006496:	3301      	adds	r3, #1
 8006498:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800649c:	e027      	b.n	80064ee <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800649e:	4b82      	ldr	r3, [pc, #520]	; (80066a8 <tcp_slowtmr+0x580>)
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80064b4:	4618      	mov	r0, r3
 80064b6:	4b7f      	ldr	r3, [pc, #508]	; (80066b4 <tcp_slowtmr+0x58c>)
 80064b8:	fb03 f300 	mul.w	r3, r3, r0
 80064bc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80064be:	497c      	ldr	r1, [pc, #496]	; (80066b0 <tcp_slowtmr+0x588>)
 80064c0:	fba1 1303 	umull	r1, r3, r1, r3
 80064c4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d911      	bls.n	80064ee <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80064ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064cc:	f004 fac6 	bl	800aa5c <tcp_keepalive>
 80064d0:	4603      	mov	r3, r0
 80064d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80064d6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d107      	bne.n	80064ee <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80064de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80064e4:	3301      	adds	r3, #1
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80064ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d011      	beq.n	800651a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80064f6:	4b6c      	ldr	r3, [pc, #432]	; (80066a8 <tcp_slowtmr+0x580>)
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	1ad2      	subs	r2, r2, r3
 8006500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006502:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006506:	4619      	mov	r1, r3
 8006508:	460b      	mov	r3, r1
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	440b      	add	r3, r1
 800650e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006510:	429a      	cmp	r2, r3
 8006512:	d302      	bcc.n	800651a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006514:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006516:	f000 fddd 	bl	80070d4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651c:	7d1b      	ldrb	r3, [r3, #20]
 800651e:	2b03      	cmp	r3, #3
 8006520:	d10b      	bne.n	800653a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006522:	4b61      	ldr	r3, [pc, #388]	; (80066a8 <tcp_slowtmr+0x580>)
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b28      	cmp	r3, #40	; 0x28
 800652e:	d904      	bls.n	800653a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006534:	3301      	adds	r3, #1
 8006536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800653a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653c:	7d1b      	ldrb	r3, [r3, #20]
 800653e:	2b09      	cmp	r3, #9
 8006540:	d10b      	bne.n	800655a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006542:	4b59      	ldr	r3, [pc, #356]	; (80066a8 <tcp_slowtmr+0x580>)
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2bf0      	cmp	r3, #240	; 0xf0
 800654e:	d904      	bls.n	800655a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8006550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006554:	3301      	adds	r3, #1
 8006556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800655a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800655e:	2b00      	cmp	r3, #0
 8006560:	d060      	beq.n	8006624 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006568:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800656a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800656c:	f000 fbfe 	bl	8006d6c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	2b00      	cmp	r3, #0
 8006574:	d010      	beq.n	8006598 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006576:	4b50      	ldr	r3, [pc, #320]	; (80066b8 <tcp_slowtmr+0x590>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800657c:	429a      	cmp	r2, r3
 800657e:	d106      	bne.n	800658e <tcp_slowtmr+0x466>
 8006580:	4b4e      	ldr	r3, [pc, #312]	; (80066bc <tcp_slowtmr+0x594>)
 8006582:	f240 526d 	movw	r2, #1389	; 0x56d
 8006586:	494e      	ldr	r1, [pc, #312]	; (80066c0 <tcp_slowtmr+0x598>)
 8006588:	484e      	ldr	r0, [pc, #312]	; (80066c4 <tcp_slowtmr+0x59c>)
 800658a:	f007 fceb 	bl	800df64 <iprintf>
        prev->next = pcb->next;
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006590:	68da      	ldr	r2, [r3, #12]
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	60da      	str	r2, [r3, #12]
 8006596:	e00f      	b.n	80065b8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006598:	4b47      	ldr	r3, [pc, #284]	; (80066b8 <tcp_slowtmr+0x590>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800659e:	429a      	cmp	r2, r3
 80065a0:	d006      	beq.n	80065b0 <tcp_slowtmr+0x488>
 80065a2:	4b46      	ldr	r3, [pc, #280]	; (80066bc <tcp_slowtmr+0x594>)
 80065a4:	f240 5271 	movw	r2, #1393	; 0x571
 80065a8:	4947      	ldr	r1, [pc, #284]	; (80066c8 <tcp_slowtmr+0x5a0>)
 80065aa:	4846      	ldr	r0, [pc, #280]	; (80066c4 <tcp_slowtmr+0x59c>)
 80065ac:	f007 fcda 	bl	800df64 <iprintf>
        tcp_active_pcbs = pcb->next;
 80065b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	4a40      	ldr	r2, [pc, #256]	; (80066b8 <tcp_slowtmr+0x590>)
 80065b6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80065b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d013      	beq.n	80065e8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80065c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80065c8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80065ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065cc:	3304      	adds	r3, #4
 80065ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065d0:	8ad2      	ldrh	r2, [r2, #22]
 80065d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065d4:	8b09      	ldrh	r1, [r1, #24]
 80065d6:	9102      	str	r1, [sp, #8]
 80065d8:	9201      	str	r2, [sp, #4]
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	462b      	mov	r3, r5
 80065de:	4622      	mov	r2, r4
 80065e0:	4601      	mov	r1, r0
 80065e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065e4:	f004 f986 	bl	800a8f4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80065e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80065ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f0:	7d1b      	ldrb	r3, [r3, #20]
 80065f2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80065f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80065f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80065fe:	6838      	ldr	r0, [r7, #0]
 8006600:	f7ff f9f4 	bl	80059ec <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006604:	4b31      	ldr	r3, [pc, #196]	; (80066cc <tcp_slowtmr+0x5a4>)
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d004      	beq.n	800661a <tcp_slowtmr+0x4f2>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f06f 010c 	mvn.w	r1, #12
 8006616:	68b8      	ldr	r0, [r7, #8]
 8006618:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800661a:	4b2c      	ldr	r3, [pc, #176]	; (80066cc <tcp_slowtmr+0x5a4>)
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d037      	beq.n	8006692 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8006622:	e592      	b.n	800614a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006626:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	7f1b      	ldrb	r3, [r3, #28]
 8006632:	3301      	adds	r3, #1
 8006634:	b2da      	uxtb	r2, r3
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	7f1a      	ldrb	r2, [r3, #28]
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	7f5b      	ldrb	r3, [r3, #29]
 8006642:	429a      	cmp	r2, r3
 8006644:	d325      	bcc.n	8006692 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	2200      	movs	r2, #0
 800664a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800664c:	4b1f      	ldr	r3, [pc, #124]	; (80066cc <tcp_slowtmr+0x5a4>)
 800664e:	2200      	movs	r2, #0
 8006650:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00b      	beq.n	8006674 <tcp_slowtmr+0x54c>
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006664:	6912      	ldr	r2, [r2, #16]
 8006666:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006668:	4610      	mov	r0, r2
 800666a:	4798      	blx	r3
 800666c:	4603      	mov	r3, r0
 800666e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006672:	e002      	b.n	800667a <tcp_slowtmr+0x552>
 8006674:	2300      	movs	r3, #0
 8006676:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800667a:	4b14      	ldr	r3, [pc, #80]	; (80066cc <tcp_slowtmr+0x5a4>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d000      	beq.n	8006684 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8006682:	e562      	b.n	800614a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006684:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006688:	2b00      	cmp	r3, #0
 800668a:	d102      	bne.n	8006692 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800668c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800668e:	f003 fb7d 	bl	8009d8c <tcp_output>
  while (pcb != NULL) {
 8006692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006694:	2b00      	cmp	r3, #0
 8006696:	f47f ad5e 	bne.w	8006156 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800669a:	2300      	movs	r3, #0
 800669c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800669e:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <tcp_slowtmr+0x5a8>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80066a4:	e069      	b.n	800677a <tcp_slowtmr+0x652>
 80066a6:	bf00      	nop
 80066a8:	20008b0c 	.word	0x20008b0c
 80066ac:	000a4cb8 	.word	0x000a4cb8
 80066b0:	10624dd3 	.word	0x10624dd3
 80066b4:	000124f8 	.word	0x000124f8
 80066b8:	20008b08 	.word	0x20008b08
 80066bc:	0800fee0 	.word	0x0800fee0
 80066c0:	08010318 	.word	0x08010318
 80066c4:	0800ff24 	.word	0x0800ff24
 80066c8:	08010344 	.word	0x08010344
 80066cc:	20008b04 	.word	0x20008b04
 80066d0:	20008b18 	.word	0x20008b18
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80066d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d6:	7d1b      	ldrb	r3, [r3, #20]
 80066d8:	2b0a      	cmp	r3, #10
 80066da:	d006      	beq.n	80066ea <tcp_slowtmr+0x5c2>
 80066dc:	4b2b      	ldr	r3, [pc, #172]	; (800678c <tcp_slowtmr+0x664>)
 80066de:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80066e2:	492b      	ldr	r1, [pc, #172]	; (8006790 <tcp_slowtmr+0x668>)
 80066e4:	482b      	ldr	r0, [pc, #172]	; (8006794 <tcp_slowtmr+0x66c>)
 80066e6:	f007 fc3d 	bl	800df64 <iprintf>
    pcb_remove = 0;
 80066ea:	2300      	movs	r3, #0
 80066ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80066f0:	4b29      	ldr	r3, [pc, #164]	; (8006798 <tcp_slowtmr+0x670>)
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2bf0      	cmp	r3, #240	; 0xf0
 80066fc:	d904      	bls.n	8006708 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80066fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006702:	3301      	adds	r3, #1
 8006704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800670c:	2b00      	cmp	r3, #0
 800670e:	d02f      	beq.n	8006770 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006710:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006712:	f000 fb2b 	bl	8006d6c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006718:	2b00      	cmp	r3, #0
 800671a:	d010      	beq.n	800673e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800671c:	4b1f      	ldr	r3, [pc, #124]	; (800679c <tcp_slowtmr+0x674>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006722:	429a      	cmp	r2, r3
 8006724:	d106      	bne.n	8006734 <tcp_slowtmr+0x60c>
 8006726:	4b19      	ldr	r3, [pc, #100]	; (800678c <tcp_slowtmr+0x664>)
 8006728:	f240 52af 	movw	r2, #1455	; 0x5af
 800672c:	491c      	ldr	r1, [pc, #112]	; (80067a0 <tcp_slowtmr+0x678>)
 800672e:	4819      	ldr	r0, [pc, #100]	; (8006794 <tcp_slowtmr+0x66c>)
 8006730:	f007 fc18 	bl	800df64 <iprintf>
        prev->next = pcb->next;
 8006734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006736:	68da      	ldr	r2, [r3, #12]
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	60da      	str	r2, [r3, #12]
 800673c:	e00f      	b.n	800675e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800673e:	4b17      	ldr	r3, [pc, #92]	; (800679c <tcp_slowtmr+0x674>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006744:	429a      	cmp	r2, r3
 8006746:	d006      	beq.n	8006756 <tcp_slowtmr+0x62e>
 8006748:	4b10      	ldr	r3, [pc, #64]	; (800678c <tcp_slowtmr+0x664>)
 800674a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800674e:	4915      	ldr	r1, [pc, #84]	; (80067a4 <tcp_slowtmr+0x67c>)
 8006750:	4810      	ldr	r0, [pc, #64]	; (8006794 <tcp_slowtmr+0x66c>)
 8006752:	f007 fc07 	bl	800df64 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	4a10      	ldr	r2, [pc, #64]	; (800679c <tcp_slowtmr+0x674>)
 800675c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006768:	69f8      	ldr	r0, [r7, #28]
 800676a:	f7ff f93f 	bl	80059ec <tcp_free>
 800676e:	e004      	b.n	800677a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006772:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800677a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1a9      	bne.n	80066d4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006780:	bf00      	nop
 8006782:	bf00      	nop
 8006784:	3730      	adds	r7, #48	; 0x30
 8006786:	46bd      	mov	sp, r7
 8006788:	bdb0      	pop	{r4, r5, r7, pc}
 800678a:	bf00      	nop
 800678c:	0800fee0 	.word	0x0800fee0
 8006790:	08010370 	.word	0x08010370
 8006794:	0800ff24 	.word	0x0800ff24
 8006798:	20008b0c 	.word	0x20008b0c
 800679c:	20008b18 	.word	0x20008b18
 80067a0:	080103a0 	.word	0x080103a0
 80067a4:	080103c8 	.word	0x080103c8

080067a8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80067ae:	4b2d      	ldr	r3, [pc, #180]	; (8006864 <tcp_fasttmr+0xbc>)
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	3301      	adds	r3, #1
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	4b2b      	ldr	r3, [pc, #172]	; (8006864 <tcp_fasttmr+0xbc>)
 80067b8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80067ba:	4b2b      	ldr	r3, [pc, #172]	; (8006868 <tcp_fasttmr+0xc0>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80067c0:	e048      	b.n	8006854 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	7f9a      	ldrb	r2, [r3, #30]
 80067c6:	4b27      	ldr	r3, [pc, #156]	; (8006864 <tcp_fasttmr+0xbc>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d03f      	beq.n	800684e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80067ce:	4b25      	ldr	r3, [pc, #148]	; (8006864 <tcp_fasttmr+0xbc>)
 80067d0:	781a      	ldrb	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	8b5b      	ldrh	r3, [r3, #26]
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d010      	beq.n	8006804 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	8b5b      	ldrh	r3, [r3, #26]
 80067e6:	f043 0302 	orr.w	r3, r3, #2
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f003 facb 	bl	8009d8c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	8b5b      	ldrh	r3, [r3, #26]
 80067fa:	f023 0303 	bic.w	r3, r3, #3
 80067fe:	b29a      	uxth	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	8b5b      	ldrh	r3, [r3, #26]
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b00      	cmp	r3, #0
 800680e:	d009      	beq.n	8006824 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	8b5b      	ldrh	r3, [r3, #26]
 8006814:	f023 0308 	bic.w	r3, r3, #8
 8006818:	b29a      	uxth	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7ff fa78 	bl	8005d14 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006832:	4b0e      	ldr	r3, [pc, #56]	; (800686c <tcp_fasttmr+0xc4>)
 8006834:	2200      	movs	r2, #0
 8006836:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f819 	bl	8006870 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800683e:	4b0b      	ldr	r3, [pc, #44]	; (800686c <tcp_fasttmr+0xc4>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d000      	beq.n	8006848 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006846:	e7b8      	b.n	80067ba <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	607b      	str	r3, [r7, #4]
 800684c:	e002      	b.n	8006854 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1b3      	bne.n	80067c2 <tcp_fasttmr+0x1a>
    }
  }
}
 800685a:	bf00      	nop
 800685c:	bf00      	nop
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	200000ca 	.word	0x200000ca
 8006868:	20008b08 	.word	0x20008b08
 800686c:	20008b04 	.word	0x20008b04

08006870 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006870:	b590      	push	{r4, r7, lr}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d109      	bne.n	8006892 <tcp_process_refused_data+0x22>
 800687e:	4b37      	ldr	r3, [pc, #220]	; (800695c <tcp_process_refused_data+0xec>)
 8006880:	f240 6209 	movw	r2, #1545	; 0x609
 8006884:	4936      	ldr	r1, [pc, #216]	; (8006960 <tcp_process_refused_data+0xf0>)
 8006886:	4837      	ldr	r0, [pc, #220]	; (8006964 <tcp_process_refused_data+0xf4>)
 8006888:	f007 fb6c 	bl	800df64 <iprintf>
 800688c:	f06f 030f 	mvn.w	r3, #15
 8006890:	e060      	b.n	8006954 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006896:	7b5b      	ldrb	r3, [r3, #13]
 8006898:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800689e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00b      	beq.n	80068c8 <tcp_process_refused_data+0x58>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6918      	ldr	r0, [r3, #16]
 80068ba:	2300      	movs	r3, #0
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	47a0      	blx	r4
 80068c2:	4603      	mov	r3, r0
 80068c4:	73fb      	strb	r3, [r7, #15]
 80068c6:	e007      	b.n	80068d8 <tcp_process_refused_data+0x68>
 80068c8:	2300      	movs	r3, #0
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	6879      	ldr	r1, [r7, #4]
 80068ce:	2000      	movs	r0, #0
 80068d0:	f000 f8a4 	bl	8006a1c <tcp_recv_null>
 80068d4:	4603      	mov	r3, r0
 80068d6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80068d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d12a      	bne.n	8006936 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80068e0:	7bbb      	ldrb	r3, [r7, #14]
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d033      	beq.n	8006952 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ee:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80068f2:	d005      	beq.n	8006900 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f8:	3301      	adds	r3, #1
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00b      	beq.n	8006922 <tcp_process_refused_data+0xb2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6918      	ldr	r0, [r3, #16]
 8006914:	2300      	movs	r3, #0
 8006916:	2200      	movs	r2, #0
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	47a0      	blx	r4
 800691c:	4603      	mov	r3, r0
 800691e:	73fb      	strb	r3, [r7, #15]
 8006920:	e001      	b.n	8006926 <tcp_process_refused_data+0xb6>
 8006922:	2300      	movs	r3, #0
 8006924:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800692a:	f113 0f0d 	cmn.w	r3, #13
 800692e:	d110      	bne.n	8006952 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006930:	f06f 030c 	mvn.w	r3, #12
 8006934:	e00e      	b.n	8006954 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800693a:	f113 0f0d 	cmn.w	r3, #13
 800693e:	d102      	bne.n	8006946 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006940:	f06f 030c 	mvn.w	r3, #12
 8006944:	e006      	b.n	8006954 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800694c:	f06f 0304 	mvn.w	r3, #4
 8006950:	e000      	b.n	8006954 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	bd90      	pop	{r4, r7, pc}
 800695c:	0800fee0 	.word	0x0800fee0
 8006960:	080103f0 	.word	0x080103f0
 8006964:	0800ff24 	.word	0x0800ff24

08006968 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006970:	e007      	b.n	8006982 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f80a 	bl	8006992 <tcp_seg_free>
    seg = next;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1f4      	bne.n	8006972 <tcp_segs_free+0xa>
  }
}
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00c      	beq.n	80069ba <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d004      	beq.n	80069b2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fe fcdb 	bl	8005368 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	2003      	movs	r0, #3
 80069b6:	f7fd fec5 	bl	8004744 <memp_free>
  }
}
 80069ba:	bf00      	nop
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d106      	bne.n	80069e0 <tcp_seg_copy+0x1c>
 80069d2:	4b0f      	ldr	r3, [pc, #60]	; (8006a10 <tcp_seg_copy+0x4c>)
 80069d4:	f240 6282 	movw	r2, #1666	; 0x682
 80069d8:	490e      	ldr	r1, [pc, #56]	; (8006a14 <tcp_seg_copy+0x50>)
 80069da:	480f      	ldr	r0, [pc, #60]	; (8006a18 <tcp_seg_copy+0x54>)
 80069dc:	f007 fac2 	bl	800df64 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80069e0:	2003      	movs	r0, #3
 80069e2:	f7fd fe63 	bl	80046ac <memp_malloc>
 80069e6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <tcp_seg_copy+0x2e>
    return NULL;
 80069ee:	2300      	movs	r3, #0
 80069f0:	e00a      	b.n	8006a08 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80069f2:	2210      	movs	r2, #16
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f007 fa84 	bl	800df04 <memcpy>
  pbuf_ref(cseg->p);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fe fd51 	bl	80054a8 <pbuf_ref>
  return cseg;
 8006a06:	68fb      	ldr	r3, [r7, #12]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	0800fee0 	.word	0x0800fee0
 8006a14:	08010434 	.word	0x08010434
 8006a18:	0800ff24 	.word	0x0800ff24

08006a1c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d109      	bne.n	8006a44 <tcp_recv_null+0x28>
 8006a30:	4b12      	ldr	r3, [pc, #72]	; (8006a7c <tcp_recv_null+0x60>)
 8006a32:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006a36:	4912      	ldr	r1, [pc, #72]	; (8006a80 <tcp_recv_null+0x64>)
 8006a38:	4812      	ldr	r0, [pc, #72]	; (8006a84 <tcp_recv_null+0x68>)
 8006a3a:	f007 fa93 	bl	800df64 <iprintf>
 8006a3e:	f06f 030f 	mvn.w	r3, #15
 8006a42:	e016      	b.n	8006a72 <tcp_recv_null+0x56>

  if (p != NULL) {
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d009      	beq.n	8006a5e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	891b      	ldrh	r3, [r3, #8]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	68b8      	ldr	r0, [r7, #8]
 8006a52:	f7ff fb19 	bl	8006088 <tcp_recved>
    pbuf_free(p);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7fe fc86 	bl	8005368 <pbuf_free>
 8006a5c:	e008      	b.n	8006a70 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006a5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006a66:	68b8      	ldr	r0, [r7, #8]
 8006a68:	f7ff f9be 	bl	8005de8 <tcp_close>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	e000      	b.n	8006a72 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	0800fee0 	.word	0x0800fee0
 8006a80:	08010450 	.word	0x08010450
 8006a84:	0800ff24 	.word	0x0800ff24

08006a88 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	4603      	mov	r3, r0
 8006a90:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	db01      	blt.n	8006a9e <tcp_kill_prio+0x16>
 8006a9a:	79fb      	ldrb	r3, [r7, #7]
 8006a9c:	e000      	b.n	8006aa0 <tcp_kill_prio+0x18>
 8006a9e:	237f      	movs	r3, #127	; 0x7f
 8006aa0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006aa2:	7afb      	ldrb	r3, [r7, #11]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d034      	beq.n	8006b12 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006aa8:	7afb      	ldrb	r3, [r7, #11]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ab6:	4b19      	ldr	r3, [pc, #100]	; (8006b1c <tcp_kill_prio+0x94>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	e01f      	b.n	8006afe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	7d5b      	ldrb	r3, [r3, #21]
 8006ac2:	7afa      	ldrb	r2, [r7, #11]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d80c      	bhi.n	8006ae2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006acc:	7afa      	ldrb	r2, [r7, #11]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d112      	bne.n	8006af8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006ad2:	4b13      	ldr	r3, [pc, #76]	; (8006b20 <tcp_kill_prio+0x98>)
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d80a      	bhi.n	8006af8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006ae2:	4b0f      	ldr	r3, [pc, #60]	; (8006b20 <tcp_kill_prio+0x98>)
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	7d5b      	ldrb	r3, [r3, #21]
 8006af6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	617b      	str	r3, [r7, #20]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1dc      	bne.n	8006abe <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d004      	beq.n	8006b14 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006b0a:	6938      	ldr	r0, [r7, #16]
 8006b0c:	f7ff fa56 	bl	8005fbc <tcp_abort>
 8006b10:	e000      	b.n	8006b14 <tcp_kill_prio+0x8c>
    return;
 8006b12:	bf00      	nop
  }
}
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20008b08 	.word	0x20008b08
 8006b20:	20008b0c 	.word	0x20008b0c

08006b24 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006b2e:	79fb      	ldrb	r3, [r7, #7]
 8006b30:	2b08      	cmp	r3, #8
 8006b32:	d009      	beq.n	8006b48 <tcp_kill_state+0x24>
 8006b34:	79fb      	ldrb	r3, [r7, #7]
 8006b36:	2b09      	cmp	r3, #9
 8006b38:	d006      	beq.n	8006b48 <tcp_kill_state+0x24>
 8006b3a:	4b1a      	ldr	r3, [pc, #104]	; (8006ba4 <tcp_kill_state+0x80>)
 8006b3c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006b40:	4919      	ldr	r1, [pc, #100]	; (8006ba8 <tcp_kill_state+0x84>)
 8006b42:	481a      	ldr	r0, [pc, #104]	; (8006bac <tcp_kill_state+0x88>)
 8006b44:	f007 fa0e 	bl	800df64 <iprintf>

  inactivity = 0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006b50:	4b17      	ldr	r3, [pc, #92]	; (8006bb0 <tcp_kill_state+0x8c>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	617b      	str	r3, [r7, #20]
 8006b56:	e017      	b.n	8006b88 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	7d1b      	ldrb	r3, [r3, #20]
 8006b5c:	79fa      	ldrb	r2, [r7, #7]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d10f      	bne.n	8006b82 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006b62:	4b14      	ldr	r3, [pc, #80]	; (8006bb4 <tcp_kill_state+0x90>)
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d807      	bhi.n	8006b82 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006b72:	4b10      	ldr	r3, [pc, #64]	; (8006bb4 <tcp_kill_state+0x90>)
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	617b      	str	r3, [r7, #20]
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e4      	bne.n	8006b58 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d003      	beq.n	8006b9c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006b94:	2100      	movs	r1, #0
 8006b96:	6938      	ldr	r0, [r7, #16]
 8006b98:	f7ff f952 	bl	8005e40 <tcp_abandon>
  }
}
 8006b9c:	bf00      	nop
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	0800fee0 	.word	0x0800fee0
 8006ba8:	0801046c 	.word	0x0801046c
 8006bac:	0800ff24 	.word	0x0800ff24
 8006bb0:	20008b08 	.word	0x20008b08
 8006bb4:	20008b0c 	.word	0x20008b0c

08006bb8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006bc6:	4b12      	ldr	r3, [pc, #72]	; (8006c10 <tcp_kill_timewait+0x58>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	e012      	b.n	8006bf4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006bce:	4b11      	ldr	r3, [pc, #68]	; (8006c14 <tcp_kill_timewait+0x5c>)
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d807      	bhi.n	8006bee <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006bde:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <tcp_kill_timewait+0x5c>)
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	60fb      	str	r3, [r7, #12]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e9      	bne.n	8006bce <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006c00:	68b8      	ldr	r0, [r7, #8]
 8006c02:	f7ff f9db 	bl	8005fbc <tcp_abort>
  }
}
 8006c06:	bf00      	nop
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	20008b18 	.word	0x20008b18
 8006c14:	20008b0c 	.word	0x20008b0c

08006c18 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006c1e:	4b10      	ldr	r3, [pc, #64]	; (8006c60 <tcp_handle_closepend+0x48>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006c24:	e014      	b.n	8006c50 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	8b5b      	ldrh	r3, [r3, #26]
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d009      	beq.n	8006c4c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	8b5b      	ldrh	r3, [r3, #26]
 8006c3c:	f023 0308 	bic.w	r3, r3, #8
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7ff f864 	bl	8005d14 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1e7      	bne.n	8006c26 <tcp_handle_closepend+0xe>
  }
}
 8006c56:	bf00      	nop
 8006c58:	bf00      	nop
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	20008b08 	.word	0x20008b08

08006c64 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006c6e:	2001      	movs	r0, #1
 8006c70:	f7fd fd1c 	bl	80046ac <memp_malloc>
 8006c74:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d126      	bne.n	8006cca <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006c7c:	f7ff ffcc 	bl	8006c18 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006c80:	f7ff ff9a 	bl	8006bb8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006c84:	2001      	movs	r0, #1
 8006c86:	f7fd fd11 	bl	80046ac <memp_malloc>
 8006c8a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d11b      	bne.n	8006cca <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006c92:	2009      	movs	r0, #9
 8006c94:	f7ff ff46 	bl	8006b24 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006c98:	2001      	movs	r0, #1
 8006c9a:	f7fd fd07 	bl	80046ac <memp_malloc>
 8006c9e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d111      	bne.n	8006cca <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006ca6:	2008      	movs	r0, #8
 8006ca8:	f7ff ff3c 	bl	8006b24 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006cac:	2001      	movs	r0, #1
 8006cae:	f7fd fcfd 	bl	80046ac <memp_malloc>
 8006cb2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d107      	bne.n	8006cca <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006cba:	79fb      	ldrb	r3, [r7, #7]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7ff fee3 	bl	8006a88 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006cc2:	2001      	movs	r0, #1
 8006cc4:	f7fd fcf2 	bl	80046ac <memp_malloc>
 8006cc8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d03f      	beq.n	8006d50 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006cd0:	229c      	movs	r2, #156	; 0x9c
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f007 f93d 	bl	800df54 <memset>
    pcb->prio = prio;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	79fa      	ldrb	r2, [r7, #7]
 8006cde:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006ce6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	22ff      	movs	r2, #255	; 0xff
 8006cfe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006d06:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2206      	movs	r2, #6
 8006d0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2206      	movs	r2, #6
 8006d14:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d1c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006d26:	4b0d      	ldr	r3, [pc, #52]	; (8006d5c <tcp_alloc+0xf8>)
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006d2e:	4b0c      	ldr	r3, [pc, #48]	; (8006d60 <tcp_alloc+0xfc>)
 8006d30:	781a      	ldrb	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006d3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4a08      	ldr	r2, [pc, #32]	; (8006d64 <tcp_alloc+0x100>)
 8006d44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4a07      	ldr	r2, [pc, #28]	; (8006d68 <tcp_alloc+0x104>)
 8006d4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006d50:	68fb      	ldr	r3, [r7, #12]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20008b0c 	.word	0x20008b0c
 8006d60:	200000ca 	.word	0x200000ca
 8006d64:	08006a1d 	.word	0x08006a1d
 8006d68:	006ddd00 	.word	0x006ddd00

08006d6c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d107      	bne.n	8006d8a <tcp_pcb_purge+0x1e>
 8006d7a:	4b21      	ldr	r3, [pc, #132]	; (8006e00 <tcp_pcb_purge+0x94>)
 8006d7c:	f640 0251 	movw	r2, #2129	; 0x851
 8006d80:	4920      	ldr	r1, [pc, #128]	; (8006e04 <tcp_pcb_purge+0x98>)
 8006d82:	4821      	ldr	r0, [pc, #132]	; (8006e08 <tcp_pcb_purge+0x9c>)
 8006d84:	f007 f8ee 	bl	800df64 <iprintf>
 8006d88:	e037      	b.n	8006dfa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	7d1b      	ldrb	r3, [r3, #20]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d033      	beq.n	8006dfa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006d96:	2b0a      	cmp	r3, #10
 8006d98:	d02f      	beq.n	8006dfa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d02b      	beq.n	8006dfa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d007      	beq.n	8006dba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fe fada 	bl	8005368 <pbuf_free>
      pcb->refused_data = NULL;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f986 	bl	80070d4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dce:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7ff fdc7 	bl	8006968 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7ff fdc2 	bl	8006968 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	66da      	str	r2, [r3, #108]	; 0x6c
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	0800fee0 	.word	0x0800fee0
 8006e04:	0801052c 	.word	0x0801052c
 8006e08:	0800ff24 	.word	0x0800ff24

08006e0c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d106      	bne.n	8006e2a <tcp_pcb_remove+0x1e>
 8006e1c:	4b3e      	ldr	r3, [pc, #248]	; (8006f18 <tcp_pcb_remove+0x10c>)
 8006e1e:	f640 0283 	movw	r2, #2179	; 0x883
 8006e22:	493e      	ldr	r1, [pc, #248]	; (8006f1c <tcp_pcb_remove+0x110>)
 8006e24:	483e      	ldr	r0, [pc, #248]	; (8006f20 <tcp_pcb_remove+0x114>)
 8006e26:	f007 f89d 	bl	800df64 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <tcp_pcb_remove+0x32>
 8006e30:	4b39      	ldr	r3, [pc, #228]	; (8006f18 <tcp_pcb_remove+0x10c>)
 8006e32:	f640 0284 	movw	r2, #2180	; 0x884
 8006e36:	493b      	ldr	r1, [pc, #236]	; (8006f24 <tcp_pcb_remove+0x118>)
 8006e38:	4839      	ldr	r0, [pc, #228]	; (8006f20 <tcp_pcb_remove+0x114>)
 8006e3a:	f007 f893 	bl	800df64 <iprintf>

  TCP_RMV(pcblist, pcb);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d105      	bne.n	8006e54 <tcp_pcb_remove+0x48>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	e013      	b.n	8006e7c <tcp_pcb_remove+0x70>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	e00c      	b.n	8006e76 <tcp_pcb_remove+0x6a>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d104      	bne.n	8006e70 <tcp_pcb_remove+0x64>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68da      	ldr	r2, [r3, #12]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	60da      	str	r2, [r3, #12]
 8006e6e:	e005      	b.n	8006e7c <tcp_pcb_remove+0x70>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1ef      	bne.n	8006e5c <tcp_pcb_remove+0x50>
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006e82:	6838      	ldr	r0, [r7, #0]
 8006e84:	f7ff ff72 	bl	8006d6c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	7d1b      	ldrb	r3, [r3, #20]
 8006e8c:	2b0a      	cmp	r3, #10
 8006e8e:	d013      	beq.n	8006eb8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d00f      	beq.n	8006eb8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	8b5b      	ldrh	r3, [r3, #26]
 8006e9c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d009      	beq.n	8006eb8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	8b5b      	ldrh	r3, [r3, #26]
 8006ea8:	f043 0302 	orr.w	r3, r3, #2
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006eb2:	6838      	ldr	r0, [r7, #0]
 8006eb4:	f002 ff6a 	bl	8009d8c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	7d1b      	ldrb	r3, [r3, #20]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d020      	beq.n	8006f02 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d006      	beq.n	8006ed6 <tcp_pcb_remove+0xca>
 8006ec8:	4b13      	ldr	r3, [pc, #76]	; (8006f18 <tcp_pcb_remove+0x10c>)
 8006eca:	f640 0293 	movw	r2, #2195	; 0x893
 8006ece:	4916      	ldr	r1, [pc, #88]	; (8006f28 <tcp_pcb_remove+0x11c>)
 8006ed0:	4813      	ldr	r0, [pc, #76]	; (8006f20 <tcp_pcb_remove+0x114>)
 8006ed2:	f007 f847 	bl	800df64 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d006      	beq.n	8006eec <tcp_pcb_remove+0xe0>
 8006ede:	4b0e      	ldr	r3, [pc, #56]	; (8006f18 <tcp_pcb_remove+0x10c>)
 8006ee0:	f640 0294 	movw	r2, #2196	; 0x894
 8006ee4:	4911      	ldr	r1, [pc, #68]	; (8006f2c <tcp_pcb_remove+0x120>)
 8006ee6:	480e      	ldr	r0, [pc, #56]	; (8006f20 <tcp_pcb_remove+0x114>)
 8006ee8:	f007 f83c 	bl	800df64 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d006      	beq.n	8006f02 <tcp_pcb_remove+0xf6>
 8006ef4:	4b08      	ldr	r3, [pc, #32]	; (8006f18 <tcp_pcb_remove+0x10c>)
 8006ef6:	f640 0296 	movw	r2, #2198	; 0x896
 8006efa:	490d      	ldr	r1, [pc, #52]	; (8006f30 <tcp_pcb_remove+0x124>)
 8006efc:	4808      	ldr	r0, [pc, #32]	; (8006f20 <tcp_pcb_remove+0x114>)
 8006efe:	f007 f831 	bl	800df64 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2200      	movs	r2, #0
 8006f06:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006f0e:	bf00      	nop
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	0800fee0 	.word	0x0800fee0
 8006f1c:	08010548 	.word	0x08010548
 8006f20:	0800ff24 	.word	0x0800ff24
 8006f24:	08010564 	.word	0x08010564
 8006f28:	08010584 	.word	0x08010584
 8006f2c:	0801059c 	.word	0x0801059c
 8006f30:	080105b8 	.word	0x080105b8

08006f34 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d106      	bne.n	8006f50 <tcp_next_iss+0x1c>
 8006f42:	4b0a      	ldr	r3, [pc, #40]	; (8006f6c <tcp_next_iss+0x38>)
 8006f44:	f640 02af 	movw	r2, #2223	; 0x8af
 8006f48:	4909      	ldr	r1, [pc, #36]	; (8006f70 <tcp_next_iss+0x3c>)
 8006f4a:	480a      	ldr	r0, [pc, #40]	; (8006f74 <tcp_next_iss+0x40>)
 8006f4c:	f007 f80a 	bl	800df64 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006f50:	4b09      	ldr	r3, [pc, #36]	; (8006f78 <tcp_next_iss+0x44>)
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	4b09      	ldr	r3, [pc, #36]	; (8006f7c <tcp_next_iss+0x48>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4413      	add	r3, r2
 8006f5a:	4a07      	ldr	r2, [pc, #28]	; (8006f78 <tcp_next_iss+0x44>)
 8006f5c:	6013      	str	r3, [r2, #0]
  return iss;
 8006f5e:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <tcp_next_iss+0x44>)
 8006f60:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	0800fee0 	.word	0x0800fee0
 8006f70:	080105d0 	.word	0x080105d0
 8006f74:	0800ff24 	.word	0x0800ff24
 8006f78:	2000000c 	.word	0x2000000c
 8006f7c:	20008b0c 	.word	0x20008b0c

08006f80 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
 8006f8c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d106      	bne.n	8006fa2 <tcp_eff_send_mss_netif+0x22>
 8006f94:	4b14      	ldr	r3, [pc, #80]	; (8006fe8 <tcp_eff_send_mss_netif+0x68>)
 8006f96:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8006f9a:	4914      	ldr	r1, [pc, #80]	; (8006fec <tcp_eff_send_mss_netif+0x6c>)
 8006f9c:	4814      	ldr	r0, [pc, #80]	; (8006ff0 <tcp_eff_send_mss_netif+0x70>)
 8006f9e:	f006 ffe1 	bl	800df64 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006fa8:	89fb      	ldrh	r3, [r7, #14]
 8006faa:	e019      	b.n	8006fe0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006fb0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006fb2:	8afb      	ldrh	r3, [r7, #22]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d012      	beq.n	8006fde <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006fb8:	2328      	movs	r3, #40	; 0x28
 8006fba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006fbc:	8afa      	ldrh	r2, [r7, #22]
 8006fbe:	8abb      	ldrh	r3, [r7, #20]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d904      	bls.n	8006fce <tcp_eff_send_mss_netif+0x4e>
 8006fc4:	8afa      	ldrh	r2, [r7, #22]
 8006fc6:	8abb      	ldrh	r3, [r7, #20]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	e000      	b.n	8006fd0 <tcp_eff_send_mss_netif+0x50>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006fd2:	8a7a      	ldrh	r2, [r7, #18]
 8006fd4:	89fb      	ldrh	r3, [r7, #14]
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	bf28      	it	cs
 8006fda:	4613      	movcs	r3, r2
 8006fdc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8006fde:	89fb      	ldrh	r3, [r7, #14]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	0800fee0 	.word	0x0800fee0
 8006fec:	080105ec 	.word	0x080105ec
 8006ff0:	0800ff24 	.word	0x0800ff24

08006ff4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d119      	bne.n	800703c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007008:	4b10      	ldr	r3, [pc, #64]	; (800704c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800700a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800700e:	4910      	ldr	r1, [pc, #64]	; (8007050 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007010:	4810      	ldr	r0, [pc, #64]	; (8007054 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007012:	f006 ffa7 	bl	800df64 <iprintf>

  while (pcb != NULL) {
 8007016:	e011      	b.n	800703c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	429a      	cmp	r2, r3
 8007022:	d108      	bne.n	8007036 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f7fe ffc6 	bl	8005fbc <tcp_abort>
      pcb = next;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	e002      	b.n	800703c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1ea      	bne.n	8007018 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	0800fee0 	.word	0x0800fee0
 8007050:	08010614 	.word	0x08010614
 8007054:	0800ff24 	.word	0x0800ff24

08007058 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d02a      	beq.n	80070be <tcp_netif_ip_addr_changed+0x66>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d026      	beq.n	80070be <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007070:	4b15      	ldr	r3, [pc, #84]	; (80070c8 <tcp_netif_ip_addr_changed+0x70>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7ff ffbc 	bl	8006ff4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800707c:	4b13      	ldr	r3, [pc, #76]	; (80070cc <tcp_netif_ip_addr_changed+0x74>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7ff ffb6 	bl	8006ff4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d017      	beq.n	80070be <tcp_netif_ip_addr_changed+0x66>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d013      	beq.n	80070be <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007096:	4b0e      	ldr	r3, [pc, #56]	; (80070d0 <tcp_netif_ip_addr_changed+0x78>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	60fb      	str	r3, [r7, #12]
 800709c:	e00c      	b.n	80070b8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d103      	bne.n	80070b2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1ef      	bne.n	800709e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80070be:	bf00      	nop
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	20008b08 	.word	0x20008b08
 80070cc:	20008b14 	.word	0x20008b14
 80070d0:	20008b10 	.word	0x20008b10

080070d4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d007      	beq.n	80070f4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7ff fc3d 	bl	8006968 <tcp_segs_free>
    pcb->ooseq = NULL;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80070f4:	bf00      	nop
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80070fc:	b590      	push	{r4, r7, lr}
 80070fe:	b08d      	sub	sp, #52	; 0x34
 8007100:	af04      	add	r7, sp, #16
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d105      	bne.n	8007118 <tcp_input+0x1c>
 800710c:	4b9b      	ldr	r3, [pc, #620]	; (800737c <tcp_input+0x280>)
 800710e:	2283      	movs	r2, #131	; 0x83
 8007110:	499b      	ldr	r1, [pc, #620]	; (8007380 <tcp_input+0x284>)
 8007112:	489c      	ldr	r0, [pc, #624]	; (8007384 <tcp_input+0x288>)
 8007114:	f006 ff26 	bl	800df64 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	4a9a      	ldr	r2, [pc, #616]	; (8007388 <tcp_input+0x28c>)
 800711e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	895b      	ldrh	r3, [r3, #10]
 8007124:	2b13      	cmp	r3, #19
 8007126:	f240 83c4 	bls.w	80078b2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800712a:	4b98      	ldr	r3, [pc, #608]	; (800738c <tcp_input+0x290>)
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	4a97      	ldr	r2, [pc, #604]	; (800738c <tcp_input+0x290>)
 8007130:	6812      	ldr	r2, [r2, #0]
 8007132:	4611      	mov	r1, r2
 8007134:	4618      	mov	r0, r3
 8007136:	f005 ff63 	bl	800d000 <ip4_addr_isbroadcast_u32>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	f040 83ba 	bne.w	80078b6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007142:	4b92      	ldr	r3, [pc, #584]	; (800738c <tcp_input+0x290>)
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800714a:	2be0      	cmp	r3, #224	; 0xe0
 800714c:	f000 83b3 	beq.w	80078b6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007150:	4b8d      	ldr	r3, [pc, #564]	; (8007388 <tcp_input+0x28c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	899b      	ldrh	r3, [r3, #12]
 8007156:	b29b      	uxth	r3, r3
 8007158:	4618      	mov	r0, r3
 800715a:	f7fc fe51 	bl	8003e00 <lwip_htons>
 800715e:	4603      	mov	r3, r0
 8007160:	0b1b      	lsrs	r3, r3, #12
 8007162:	b29b      	uxth	r3, r3
 8007164:	b2db      	uxtb	r3, r3
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800716a:	7cbb      	ldrb	r3, [r7, #18]
 800716c:	2b13      	cmp	r3, #19
 800716e:	f240 83a4 	bls.w	80078ba <tcp_input+0x7be>
 8007172:	7cbb      	ldrb	r3, [r7, #18]
 8007174:	b29a      	uxth	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	891b      	ldrh	r3, [r3, #8]
 800717a:	429a      	cmp	r2, r3
 800717c:	f200 839d 	bhi.w	80078ba <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007180:	7cbb      	ldrb	r3, [r7, #18]
 8007182:	b29b      	uxth	r3, r3
 8007184:	3b14      	subs	r3, #20
 8007186:	b29a      	uxth	r2, r3
 8007188:	4b81      	ldr	r3, [pc, #516]	; (8007390 <tcp_input+0x294>)
 800718a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800718c:	4b81      	ldr	r3, [pc, #516]	; (8007394 <tcp_input+0x298>)
 800718e:	2200      	movs	r2, #0
 8007190:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	895a      	ldrh	r2, [r3, #10]
 8007196:	7cbb      	ldrb	r3, [r7, #18]
 8007198:	b29b      	uxth	r3, r3
 800719a:	429a      	cmp	r2, r3
 800719c:	d309      	bcc.n	80071b2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800719e:	4b7c      	ldr	r3, [pc, #496]	; (8007390 <tcp_input+0x294>)
 80071a0:	881a      	ldrh	r2, [r3, #0]
 80071a2:	4b7d      	ldr	r3, [pc, #500]	; (8007398 <tcp_input+0x29c>)
 80071a4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80071a6:	7cbb      	ldrb	r3, [r7, #18]
 80071a8:	4619      	mov	r1, r3
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7fe f856 	bl	800525c <pbuf_remove_header>
 80071b0:	e04e      	b.n	8007250 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d105      	bne.n	80071c6 <tcp_input+0xca>
 80071ba:	4b70      	ldr	r3, [pc, #448]	; (800737c <tcp_input+0x280>)
 80071bc:	22c2      	movs	r2, #194	; 0xc2
 80071be:	4977      	ldr	r1, [pc, #476]	; (800739c <tcp_input+0x2a0>)
 80071c0:	4870      	ldr	r0, [pc, #448]	; (8007384 <tcp_input+0x288>)
 80071c2:	f006 fecf 	bl	800df64 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80071c6:	2114      	movs	r1, #20
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7fe f847 	bl	800525c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	895a      	ldrh	r2, [r3, #10]
 80071d2:	4b71      	ldr	r3, [pc, #452]	; (8007398 <tcp_input+0x29c>)
 80071d4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80071d6:	4b6e      	ldr	r3, [pc, #440]	; (8007390 <tcp_input+0x294>)
 80071d8:	881a      	ldrh	r2, [r3, #0]
 80071da:	4b6f      	ldr	r3, [pc, #444]	; (8007398 <tcp_input+0x29c>)
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80071e2:	4b6d      	ldr	r3, [pc, #436]	; (8007398 <tcp_input+0x29c>)
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7fe f837 	bl	800525c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	895b      	ldrh	r3, [r3, #10]
 80071f4:	8a3a      	ldrh	r2, [r7, #16]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	f200 8361 	bhi.w	80078be <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	4a64      	ldr	r2, [pc, #400]	; (8007394 <tcp_input+0x298>)
 8007204:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	8a3a      	ldrh	r2, [r7, #16]
 800720c:	4611      	mov	r1, r2
 800720e:	4618      	mov	r0, r3
 8007210:	f7fe f824 	bl	800525c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	891a      	ldrh	r2, [r3, #8]
 8007218:	8a3b      	ldrh	r3, [r7, #16]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	b29a      	uxth	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	895b      	ldrh	r3, [r3, #10]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d005      	beq.n	8007236 <tcp_input+0x13a>
 800722a:	4b54      	ldr	r3, [pc, #336]	; (800737c <tcp_input+0x280>)
 800722c:	22df      	movs	r2, #223	; 0xdf
 800722e:	495c      	ldr	r1, [pc, #368]	; (80073a0 <tcp_input+0x2a4>)
 8007230:	4854      	ldr	r0, [pc, #336]	; (8007384 <tcp_input+0x288>)
 8007232:	f006 fe97 	bl	800df64 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	891a      	ldrh	r2, [r3, #8]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	891b      	ldrh	r3, [r3, #8]
 8007240:	429a      	cmp	r2, r3
 8007242:	d005      	beq.n	8007250 <tcp_input+0x154>
 8007244:	4b4d      	ldr	r3, [pc, #308]	; (800737c <tcp_input+0x280>)
 8007246:	22e0      	movs	r2, #224	; 0xe0
 8007248:	4956      	ldr	r1, [pc, #344]	; (80073a4 <tcp_input+0x2a8>)
 800724a:	484e      	ldr	r0, [pc, #312]	; (8007384 <tcp_input+0x288>)
 800724c:	f006 fe8a 	bl	800df64 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007250:	4b4d      	ldr	r3, [pc, #308]	; (8007388 <tcp_input+0x28c>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	b29b      	uxth	r3, r3
 8007258:	4a4b      	ldr	r2, [pc, #300]	; (8007388 <tcp_input+0x28c>)
 800725a:	6814      	ldr	r4, [r2, #0]
 800725c:	4618      	mov	r0, r3
 800725e:	f7fc fdcf 	bl	8003e00 <lwip_htons>
 8007262:	4603      	mov	r3, r0
 8007264:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007266:	4b48      	ldr	r3, [pc, #288]	; (8007388 <tcp_input+0x28c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	885b      	ldrh	r3, [r3, #2]
 800726c:	b29b      	uxth	r3, r3
 800726e:	4a46      	ldr	r2, [pc, #280]	; (8007388 <tcp_input+0x28c>)
 8007270:	6814      	ldr	r4, [r2, #0]
 8007272:	4618      	mov	r0, r3
 8007274:	f7fc fdc4 	bl	8003e00 <lwip_htons>
 8007278:	4603      	mov	r3, r0
 800727a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800727c:	4b42      	ldr	r3, [pc, #264]	; (8007388 <tcp_input+0x28c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	4a41      	ldr	r2, [pc, #260]	; (8007388 <tcp_input+0x28c>)
 8007284:	6814      	ldr	r4, [r2, #0]
 8007286:	4618      	mov	r0, r3
 8007288:	f7fc fdcf 	bl	8003e2a <lwip_htonl>
 800728c:	4603      	mov	r3, r0
 800728e:	6063      	str	r3, [r4, #4]
 8007290:	6863      	ldr	r3, [r4, #4]
 8007292:	4a45      	ldr	r2, [pc, #276]	; (80073a8 <tcp_input+0x2ac>)
 8007294:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007296:	4b3c      	ldr	r3, [pc, #240]	; (8007388 <tcp_input+0x28c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	4a3a      	ldr	r2, [pc, #232]	; (8007388 <tcp_input+0x28c>)
 800729e:	6814      	ldr	r4, [r2, #0]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fc fdc2 	bl	8003e2a <lwip_htonl>
 80072a6:	4603      	mov	r3, r0
 80072a8:	60a3      	str	r3, [r4, #8]
 80072aa:	68a3      	ldr	r3, [r4, #8]
 80072ac:	4a3f      	ldr	r2, [pc, #252]	; (80073ac <tcp_input+0x2b0>)
 80072ae:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80072b0:	4b35      	ldr	r3, [pc, #212]	; (8007388 <tcp_input+0x28c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	89db      	ldrh	r3, [r3, #14]
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	4a33      	ldr	r2, [pc, #204]	; (8007388 <tcp_input+0x28c>)
 80072ba:	6814      	ldr	r4, [r2, #0]
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fc fd9f 	bl	8003e00 <lwip_htons>
 80072c2:	4603      	mov	r3, r0
 80072c4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80072c6:	4b30      	ldr	r3, [pc, #192]	; (8007388 <tcp_input+0x28c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	899b      	ldrh	r3, [r3, #12]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fc fd96 	bl	8003e00 <lwip_htons>
 80072d4:	4603      	mov	r3, r0
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	4b34      	ldr	r3, [pc, #208]	; (80073b0 <tcp_input+0x2b4>)
 80072e0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	891a      	ldrh	r2, [r3, #8]
 80072e6:	4b33      	ldr	r3, [pc, #204]	; (80073b4 <tcp_input+0x2b8>)
 80072e8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80072ea:	4b31      	ldr	r3, [pc, #196]	; (80073b0 <tcp_input+0x2b4>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00c      	beq.n	8007310 <tcp_input+0x214>
    tcplen++;
 80072f6:	4b2f      	ldr	r3, [pc, #188]	; (80073b4 <tcp_input+0x2b8>)
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	3301      	adds	r3, #1
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	4b2d      	ldr	r3, [pc, #180]	; (80073b4 <tcp_input+0x2b8>)
 8007300:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	891a      	ldrh	r2, [r3, #8]
 8007306:	4b2b      	ldr	r3, [pc, #172]	; (80073b4 <tcp_input+0x2b8>)
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	429a      	cmp	r2, r3
 800730c:	f200 82d9 	bhi.w	80078c2 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007310:	2300      	movs	r3, #0
 8007312:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007314:	4b28      	ldr	r3, [pc, #160]	; (80073b8 <tcp_input+0x2bc>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	61fb      	str	r3, [r7, #28]
 800731a:	e09d      	b.n	8007458 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	7d1b      	ldrb	r3, [r3, #20]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d105      	bne.n	8007330 <tcp_input+0x234>
 8007324:	4b15      	ldr	r3, [pc, #84]	; (800737c <tcp_input+0x280>)
 8007326:	22fb      	movs	r2, #251	; 0xfb
 8007328:	4924      	ldr	r1, [pc, #144]	; (80073bc <tcp_input+0x2c0>)
 800732a:	4816      	ldr	r0, [pc, #88]	; (8007384 <tcp_input+0x288>)
 800732c:	f006 fe1a 	bl	800df64 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	7d1b      	ldrb	r3, [r3, #20]
 8007334:	2b0a      	cmp	r3, #10
 8007336:	d105      	bne.n	8007344 <tcp_input+0x248>
 8007338:	4b10      	ldr	r3, [pc, #64]	; (800737c <tcp_input+0x280>)
 800733a:	22fc      	movs	r2, #252	; 0xfc
 800733c:	4920      	ldr	r1, [pc, #128]	; (80073c0 <tcp_input+0x2c4>)
 800733e:	4811      	ldr	r0, [pc, #68]	; (8007384 <tcp_input+0x288>)
 8007340:	f006 fe10 	bl	800df64 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	7d1b      	ldrb	r3, [r3, #20]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d105      	bne.n	8007358 <tcp_input+0x25c>
 800734c:	4b0b      	ldr	r3, [pc, #44]	; (800737c <tcp_input+0x280>)
 800734e:	22fd      	movs	r2, #253	; 0xfd
 8007350:	491c      	ldr	r1, [pc, #112]	; (80073c4 <tcp_input+0x2c8>)
 8007352:	480c      	ldr	r0, [pc, #48]	; (8007384 <tcp_input+0x288>)
 8007354:	f006 fe06 	bl	800df64 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	7a1b      	ldrb	r3, [r3, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d033      	beq.n	80073c8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	7a1a      	ldrb	r2, [r3, #8]
 8007364:	4b09      	ldr	r3, [pc, #36]	; (800738c <tcp_input+0x290>)
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800736c:	3301      	adds	r3, #1
 800736e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007370:	429a      	cmp	r2, r3
 8007372:	d029      	beq.n	80073c8 <tcp_input+0x2cc>
      prev = pcb;
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	61bb      	str	r3, [r7, #24]
      continue;
 8007378:	e06b      	b.n	8007452 <tcp_input+0x356>
 800737a:	bf00      	nop
 800737c:	08010648 	.word	0x08010648
 8007380:	0801067c 	.word	0x0801067c
 8007384:	08010694 	.word	0x08010694
 8007388:	200000dc 	.word	0x200000dc
 800738c:	20003404 	.word	0x20003404
 8007390:	200000e0 	.word	0x200000e0
 8007394:	200000e4 	.word	0x200000e4
 8007398:	200000e2 	.word	0x200000e2
 800739c:	080106bc 	.word	0x080106bc
 80073a0:	080106cc 	.word	0x080106cc
 80073a4:	080106d8 	.word	0x080106d8
 80073a8:	200000ec 	.word	0x200000ec
 80073ac:	200000f0 	.word	0x200000f0
 80073b0:	200000f8 	.word	0x200000f8
 80073b4:	200000f6 	.word	0x200000f6
 80073b8:	20008b08 	.word	0x20008b08
 80073bc:	080106f8 	.word	0x080106f8
 80073c0:	08010720 	.word	0x08010720
 80073c4:	0801074c 	.word	0x0801074c
    }

    if (pcb->remote_port == tcphdr->src &&
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	8b1a      	ldrh	r2, [r3, #24]
 80073cc:	4b94      	ldr	r3, [pc, #592]	; (8007620 <tcp_input+0x524>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d13a      	bne.n	800744e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	8ada      	ldrh	r2, [r3, #22]
 80073dc:	4b90      	ldr	r3, [pc, #576]	; (8007620 <tcp_input+0x524>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	885b      	ldrh	r3, [r3, #2]
 80073e2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d132      	bne.n	800744e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	4b8d      	ldr	r3, [pc, #564]	; (8007624 <tcp_input+0x528>)
 80073ee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d12c      	bne.n	800744e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	4b8a      	ldr	r3, [pc, #552]	; (8007624 <tcp_input+0x528>)
 80073fa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d126      	bne.n	800744e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	69fa      	ldr	r2, [r7, #28]
 8007406:	429a      	cmp	r2, r3
 8007408:	d106      	bne.n	8007418 <tcp_input+0x31c>
 800740a:	4b87      	ldr	r3, [pc, #540]	; (8007628 <tcp_input+0x52c>)
 800740c:	f240 120d 	movw	r2, #269	; 0x10d
 8007410:	4986      	ldr	r1, [pc, #536]	; (800762c <tcp_input+0x530>)
 8007412:	4887      	ldr	r0, [pc, #540]	; (8007630 <tcp_input+0x534>)
 8007414:	f006 fda6 	bl	800df64 <iprintf>
      if (prev != NULL) {
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00a      	beq.n	8007434 <tcp_input+0x338>
        prev->next = pcb->next;
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	68da      	ldr	r2, [r3, #12]
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007426:	4b83      	ldr	r3, [pc, #524]	; (8007634 <tcp_input+0x538>)
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800742e:	4a81      	ldr	r2, [pc, #516]	; (8007634 <tcp_input+0x538>)
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	69fa      	ldr	r2, [r7, #28]
 800743a:	429a      	cmp	r2, r3
 800743c:	d111      	bne.n	8007462 <tcp_input+0x366>
 800743e:	4b7a      	ldr	r3, [pc, #488]	; (8007628 <tcp_input+0x52c>)
 8007440:	f240 1215 	movw	r2, #277	; 0x115
 8007444:	497c      	ldr	r1, [pc, #496]	; (8007638 <tcp_input+0x53c>)
 8007446:	487a      	ldr	r0, [pc, #488]	; (8007630 <tcp_input+0x534>)
 8007448:	f006 fd8c 	bl	800df64 <iprintf>
      break;
 800744c:	e009      	b.n	8007462 <tcp_input+0x366>
    }
    prev = pcb;
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	61fb      	str	r3, [r7, #28]
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	2b00      	cmp	r3, #0
 800745c:	f47f af5e 	bne.w	800731c <tcp_input+0x220>
 8007460:	e000      	b.n	8007464 <tcp_input+0x368>
      break;
 8007462:	bf00      	nop
  }

  if (pcb == NULL) {
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	2b00      	cmp	r3, #0
 8007468:	f040 8095 	bne.w	8007596 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800746c:	4b73      	ldr	r3, [pc, #460]	; (800763c <tcp_input+0x540>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	61fb      	str	r3, [r7, #28]
 8007472:	e03f      	b.n	80074f4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	7d1b      	ldrb	r3, [r3, #20]
 8007478:	2b0a      	cmp	r3, #10
 800747a:	d006      	beq.n	800748a <tcp_input+0x38e>
 800747c:	4b6a      	ldr	r3, [pc, #424]	; (8007628 <tcp_input+0x52c>)
 800747e:	f240 121f 	movw	r2, #287	; 0x11f
 8007482:	496f      	ldr	r1, [pc, #444]	; (8007640 <tcp_input+0x544>)
 8007484:	486a      	ldr	r0, [pc, #424]	; (8007630 <tcp_input+0x534>)
 8007486:	f006 fd6d 	bl	800df64 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	7a1b      	ldrb	r3, [r3, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d009      	beq.n	80074a6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	7a1a      	ldrb	r2, [r3, #8]
 8007496:	4b63      	ldr	r3, [pc, #396]	; (8007624 <tcp_input+0x528>)
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800749e:	3301      	adds	r3, #1
 80074a0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d122      	bne.n	80074ec <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	8b1a      	ldrh	r2, [r3, #24]
 80074aa:	4b5d      	ldr	r3, [pc, #372]	; (8007620 <tcp_input+0x524>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d11b      	bne.n	80074ee <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	8ada      	ldrh	r2, [r3, #22]
 80074ba:	4b59      	ldr	r3, [pc, #356]	; (8007620 <tcp_input+0x524>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	885b      	ldrh	r3, [r3, #2]
 80074c0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d113      	bne.n	80074ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	4b56      	ldr	r3, [pc, #344]	; (8007624 <tcp_input+0x528>)
 80074cc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d10d      	bne.n	80074ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	4b53      	ldr	r3, [pc, #332]	; (8007624 <tcp_input+0x528>)
 80074d8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80074da:	429a      	cmp	r2, r3
 80074dc:	d107      	bne.n	80074ee <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80074de:	69f8      	ldr	r0, [r7, #28]
 80074e0:	f000 fb54 	bl	8007b8c <tcp_timewait_input>
        }
        pbuf_free(p);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7fd ff3f 	bl	8005368 <pbuf_free>
        return;
 80074ea:	e1f0      	b.n	80078ce <tcp_input+0x7d2>
        continue;
 80074ec:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	61fb      	str	r3, [r7, #28]
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1bc      	bne.n	8007474 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80074fe:	4b51      	ldr	r3, [pc, #324]	; (8007644 <tcp_input+0x548>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	e02a      	b.n	800755c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	7a1b      	ldrb	r3, [r3, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00c      	beq.n	8007528 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	7a1a      	ldrb	r2, [r3, #8]
 8007512:	4b44      	ldr	r3, [pc, #272]	; (8007624 <tcp_input+0x528>)
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800751a:	3301      	adds	r3, #1
 800751c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800751e:	429a      	cmp	r2, r3
 8007520:	d002      	beq.n	8007528 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	61bb      	str	r3, [r7, #24]
        continue;
 8007526:	e016      	b.n	8007556 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	8ada      	ldrh	r2, [r3, #22]
 800752c:	4b3c      	ldr	r3, [pc, #240]	; (8007620 <tcp_input+0x524>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	885b      	ldrh	r3, [r3, #2]
 8007532:	b29b      	uxth	r3, r3
 8007534:	429a      	cmp	r2, r3
 8007536:	d10c      	bne.n	8007552 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	4b39      	ldr	r3, [pc, #228]	; (8007624 <tcp_input+0x528>)
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	429a      	cmp	r2, r3
 8007542:	d00f      	beq.n	8007564 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00d      	beq.n	8007566 <tcp_input+0x46a>
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d009      	beq.n	8007566 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	617b      	str	r3, [r7, #20]
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1d1      	bne.n	8007506 <tcp_input+0x40a>
 8007562:	e000      	b.n	8007566 <tcp_input+0x46a>
            break;
 8007564:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d014      	beq.n	8007596 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00a      	beq.n	8007588 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	68da      	ldr	r2, [r3, #12]
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800757a:	4b32      	ldr	r3, [pc, #200]	; (8007644 <tcp_input+0x548>)
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007582:	4a30      	ldr	r2, [pc, #192]	; (8007644 <tcp_input+0x548>)
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007588:	6978      	ldr	r0, [r7, #20]
 800758a:	f000 fa01 	bl	8007990 <tcp_listen_input>
      }
      pbuf_free(p);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7fd feea 	bl	8005368 <pbuf_free>
      return;
 8007594:	e19b      	b.n	80078ce <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 8160 	beq.w	800785e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800759e:	4b2a      	ldr	r3, [pc, #168]	; (8007648 <tcp_input+0x54c>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	891a      	ldrh	r2, [r3, #8]
 80075a8:	4b27      	ldr	r3, [pc, #156]	; (8007648 <tcp_input+0x54c>)
 80075aa:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80075ac:	4a26      	ldr	r2, [pc, #152]	; (8007648 <tcp_input+0x54c>)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80075b2:	4b1b      	ldr	r3, [pc, #108]	; (8007620 <tcp_input+0x524>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a24      	ldr	r2, [pc, #144]	; (8007648 <tcp_input+0x54c>)
 80075b8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80075ba:	4b24      	ldr	r3, [pc, #144]	; (800764c <tcp_input+0x550>)
 80075bc:	2200      	movs	r2, #0
 80075be:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80075c0:	4b23      	ldr	r3, [pc, #140]	; (8007650 <tcp_input+0x554>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80075c6:	4b23      	ldr	r3, [pc, #140]	; (8007654 <tcp_input+0x558>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80075cc:	4b22      	ldr	r3, [pc, #136]	; (8007658 <tcp_input+0x55c>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	f003 0308 	and.w	r3, r3, #8
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d006      	beq.n	80075e6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	7b5b      	ldrb	r3, [r3, #13]
 80075dc:	f043 0301 	orr.w	r3, r3, #1
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d038      	beq.n	8007660 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80075ee:	69f8      	ldr	r0, [r7, #28]
 80075f0:	f7ff f93e 	bl	8006870 <tcp_process_refused_data>
 80075f4:	4603      	mov	r3, r0
 80075f6:	f113 0f0d 	cmn.w	r3, #13
 80075fa:	d007      	beq.n	800760c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007600:	2b00      	cmp	r3, #0
 8007602:	d02d      	beq.n	8007660 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007604:	4b15      	ldr	r3, [pc, #84]	; (800765c <tcp_input+0x560>)
 8007606:	881b      	ldrh	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d029      	beq.n	8007660 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007610:	2b00      	cmp	r3, #0
 8007612:	f040 8104 	bne.w	800781e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007616:	69f8      	ldr	r0, [r7, #28]
 8007618:	f003 f9be 	bl	800a998 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800761c:	e0ff      	b.n	800781e <tcp_input+0x722>
 800761e:	bf00      	nop
 8007620:	200000dc 	.word	0x200000dc
 8007624:	20003404 	.word	0x20003404
 8007628:	08010648 	.word	0x08010648
 800762c:	08010774 	.word	0x08010774
 8007630:	08010694 	.word	0x08010694
 8007634:	20008b08 	.word	0x20008b08
 8007638:	080107a0 	.word	0x080107a0
 800763c:	20008b18 	.word	0x20008b18
 8007640:	080107cc 	.word	0x080107cc
 8007644:	20008b10 	.word	0x20008b10
 8007648:	200000cc 	.word	0x200000cc
 800764c:	200000fc 	.word	0x200000fc
 8007650:	200000f9 	.word	0x200000f9
 8007654:	200000f4 	.word	0x200000f4
 8007658:	200000f8 	.word	0x200000f8
 800765c:	200000f6 	.word	0x200000f6
      }
    }
    tcp_input_pcb = pcb;
 8007660:	4a9c      	ldr	r2, [pc, #624]	; (80078d4 <tcp_input+0x7d8>)
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007666:	69f8      	ldr	r0, [r7, #28]
 8007668:	f000 fb0a 	bl	8007c80 <tcp_process>
 800766c:	4603      	mov	r3, r0
 800766e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007670:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007674:	f113 0f0d 	cmn.w	r3, #13
 8007678:	f000 80d3 	beq.w	8007822 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800767c:	4b96      	ldr	r3, [pc, #600]	; (80078d8 <tcp_input+0x7dc>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	f003 0308 	and.w	r3, r3, #8
 8007684:	2b00      	cmp	r3, #0
 8007686:	d015      	beq.n	80076b4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800768e:	2b00      	cmp	r3, #0
 8007690:	d008      	beq.n	80076a4 <tcp_input+0x5a8>
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007698:	69fa      	ldr	r2, [r7, #28]
 800769a:	6912      	ldr	r2, [r2, #16]
 800769c:	f06f 010d 	mvn.w	r1, #13
 80076a0:	4610      	mov	r0, r2
 80076a2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80076a4:	69f9      	ldr	r1, [r7, #28]
 80076a6:	488d      	ldr	r0, [pc, #564]	; (80078dc <tcp_input+0x7e0>)
 80076a8:	f7ff fbb0 	bl	8006e0c <tcp_pcb_remove>
        tcp_free(pcb);
 80076ac:	69f8      	ldr	r0, [r7, #28]
 80076ae:	f7fe f99d 	bl	80059ec <tcp_free>
 80076b2:	e0c1      	b.n	8007838 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80076b8:	4b89      	ldr	r3, [pc, #548]	; (80078e0 <tcp_input+0x7e4>)
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d01d      	beq.n	80076fc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80076c0:	4b87      	ldr	r3, [pc, #540]	; (80078e0 <tcp_input+0x7e4>)
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <tcp_input+0x5ea>
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076d6:	69fa      	ldr	r2, [r7, #28]
 80076d8:	6910      	ldr	r0, [r2, #16]
 80076da:	89fa      	ldrh	r2, [r7, #14]
 80076dc:	69f9      	ldr	r1, [r7, #28]
 80076de:	4798      	blx	r3
 80076e0:	4603      	mov	r3, r0
 80076e2:	74fb      	strb	r3, [r7, #19]
 80076e4:	e001      	b.n	80076ea <tcp_input+0x5ee>
 80076e6:	2300      	movs	r3, #0
 80076e8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80076ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80076ee:	f113 0f0d 	cmn.w	r3, #13
 80076f2:	f000 8098 	beq.w	8007826 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80076f6:	4b7a      	ldr	r3, [pc, #488]	; (80078e0 <tcp_input+0x7e4>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80076fc:	69f8      	ldr	r0, [r7, #28]
 80076fe:	f000 f907 	bl	8007910 <tcp_input_delayed_close>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	f040 8090 	bne.w	800782a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800770a:	4b76      	ldr	r3, [pc, #472]	; (80078e4 <tcp_input+0x7e8>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d041      	beq.n	8007796 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007716:	2b00      	cmp	r3, #0
 8007718:	d006      	beq.n	8007728 <tcp_input+0x62c>
 800771a:	4b73      	ldr	r3, [pc, #460]	; (80078e8 <tcp_input+0x7ec>)
 800771c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007720:	4972      	ldr	r1, [pc, #456]	; (80078ec <tcp_input+0x7f0>)
 8007722:	4873      	ldr	r0, [pc, #460]	; (80078f0 <tcp_input+0x7f4>)
 8007724:	f006 fc1e 	bl	800df64 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	8b5b      	ldrh	r3, [r3, #26]
 800772c:	f003 0310 	and.w	r3, r3, #16
 8007730:	2b00      	cmp	r3, #0
 8007732:	d008      	beq.n	8007746 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007734:	4b6b      	ldr	r3, [pc, #428]	; (80078e4 <tcp_input+0x7e8>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4618      	mov	r0, r3
 800773a:	f7fd fe15 	bl	8005368 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800773e:	69f8      	ldr	r0, [r7, #28]
 8007740:	f7fe fc3c 	bl	8005fbc <tcp_abort>
            goto aborted;
 8007744:	e078      	b.n	8007838 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00c      	beq.n	800776a <tcp_input+0x66e>
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	6918      	ldr	r0, [r3, #16]
 800775a:	4b62      	ldr	r3, [pc, #392]	; (80078e4 <tcp_input+0x7e8>)
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	2300      	movs	r3, #0
 8007760:	69f9      	ldr	r1, [r7, #28]
 8007762:	47a0      	blx	r4
 8007764:	4603      	mov	r3, r0
 8007766:	74fb      	strb	r3, [r7, #19]
 8007768:	e008      	b.n	800777c <tcp_input+0x680>
 800776a:	4b5e      	ldr	r3, [pc, #376]	; (80078e4 <tcp_input+0x7e8>)
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	2300      	movs	r3, #0
 8007770:	69f9      	ldr	r1, [r7, #28]
 8007772:	2000      	movs	r0, #0
 8007774:	f7ff f952 	bl	8006a1c <tcp_recv_null>
 8007778:	4603      	mov	r3, r0
 800777a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800777c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007780:	f113 0f0d 	cmn.w	r3, #13
 8007784:	d053      	beq.n	800782e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007786:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800778e:	4b55      	ldr	r3, [pc, #340]	; (80078e4 <tcp_input+0x7e8>)
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007796:	4b50      	ldr	r3, [pc, #320]	; (80078d8 <tcp_input+0x7dc>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	f003 0320 	and.w	r3, r3, #32
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d030      	beq.n	8007804 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d009      	beq.n	80077be <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077ae:	7b5a      	ldrb	r2, [r3, #13]
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077b4:	f042 0220 	orr.w	r2, r2, #32
 80077b8:	b2d2      	uxtb	r2, r2
 80077ba:	735a      	strb	r2, [r3, #13]
 80077bc:	e022      	b.n	8007804 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80077c6:	d005      	beq.n	80077d4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077cc:	3301      	adds	r3, #1
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00b      	beq.n	80077f6 <tcp_input+0x6fa>
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	6918      	ldr	r0, [r3, #16]
 80077e8:	2300      	movs	r3, #0
 80077ea:	2200      	movs	r2, #0
 80077ec:	69f9      	ldr	r1, [r7, #28]
 80077ee:	47a0      	blx	r4
 80077f0:	4603      	mov	r3, r0
 80077f2:	74fb      	strb	r3, [r7, #19]
 80077f4:	e001      	b.n	80077fa <tcp_input+0x6fe>
 80077f6:	2300      	movs	r3, #0
 80077f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80077fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80077fe:	f113 0f0d 	cmn.w	r3, #13
 8007802:	d016      	beq.n	8007832 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007804:	4b33      	ldr	r3, [pc, #204]	; (80078d4 <tcp_input+0x7d8>)
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800780a:	69f8      	ldr	r0, [r7, #28]
 800780c:	f000 f880 	bl	8007910 <tcp_input_delayed_close>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10f      	bne.n	8007836 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007816:	69f8      	ldr	r0, [r7, #28]
 8007818:	f002 fab8 	bl	8009d8c <tcp_output>
 800781c:	e00c      	b.n	8007838 <tcp_input+0x73c>
        goto aborted;
 800781e:	bf00      	nop
 8007820:	e00a      	b.n	8007838 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007822:	bf00      	nop
 8007824:	e008      	b.n	8007838 <tcp_input+0x73c>
              goto aborted;
 8007826:	bf00      	nop
 8007828:	e006      	b.n	8007838 <tcp_input+0x73c>
          goto aborted;
 800782a:	bf00      	nop
 800782c:	e004      	b.n	8007838 <tcp_input+0x73c>
            goto aborted;
 800782e:	bf00      	nop
 8007830:	e002      	b.n	8007838 <tcp_input+0x73c>
              goto aborted;
 8007832:	bf00      	nop
 8007834:	e000      	b.n	8007838 <tcp_input+0x73c>
          goto aborted;
 8007836:	bf00      	nop
    tcp_input_pcb = NULL;
 8007838:	4b26      	ldr	r3, [pc, #152]	; (80078d4 <tcp_input+0x7d8>)
 800783a:	2200      	movs	r2, #0
 800783c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800783e:	4b29      	ldr	r3, [pc, #164]	; (80078e4 <tcp_input+0x7e8>)
 8007840:	2200      	movs	r2, #0
 8007842:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007844:	4b2b      	ldr	r3, [pc, #172]	; (80078f4 <tcp_input+0x7f8>)
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d03f      	beq.n	80078cc <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800784c:	4b29      	ldr	r3, [pc, #164]	; (80078f4 <tcp_input+0x7f8>)
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	4618      	mov	r0, r3
 8007852:	f7fd fd89 	bl	8005368 <pbuf_free>
      inseg.p = NULL;
 8007856:	4b27      	ldr	r3, [pc, #156]	; (80078f4 <tcp_input+0x7f8>)
 8007858:	2200      	movs	r2, #0
 800785a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800785c:	e036      	b.n	80078cc <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800785e:	4b26      	ldr	r3, [pc, #152]	; (80078f8 <tcp_input+0x7fc>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	899b      	ldrh	r3, [r3, #12]
 8007864:	b29b      	uxth	r3, r3
 8007866:	4618      	mov	r0, r3
 8007868:	f7fc faca 	bl	8003e00 <lwip_htons>
 800786c:	4603      	mov	r3, r0
 800786e:	b2db      	uxtb	r3, r3
 8007870:	f003 0304 	and.w	r3, r3, #4
 8007874:	2b00      	cmp	r3, #0
 8007876:	d118      	bne.n	80078aa <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007878:	4b20      	ldr	r3, [pc, #128]	; (80078fc <tcp_input+0x800>)
 800787a:	6819      	ldr	r1, [r3, #0]
 800787c:	4b20      	ldr	r3, [pc, #128]	; (8007900 <tcp_input+0x804>)
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	461a      	mov	r2, r3
 8007882:	4b20      	ldr	r3, [pc, #128]	; (8007904 <tcp_input+0x808>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007888:	4b1b      	ldr	r3, [pc, #108]	; (80078f8 <tcp_input+0x7fc>)
 800788a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800788c:	885b      	ldrh	r3, [r3, #2]
 800788e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007890:	4a19      	ldr	r2, [pc, #100]	; (80078f8 <tcp_input+0x7fc>)
 8007892:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007894:	8812      	ldrh	r2, [r2, #0]
 8007896:	b292      	uxth	r2, r2
 8007898:	9202      	str	r2, [sp, #8]
 800789a:	9301      	str	r3, [sp, #4]
 800789c:	4b1a      	ldr	r3, [pc, #104]	; (8007908 <tcp_input+0x80c>)
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	4b1a      	ldr	r3, [pc, #104]	; (800790c <tcp_input+0x810>)
 80078a2:	4602      	mov	r2, r0
 80078a4:	2000      	movs	r0, #0
 80078a6:	f003 f825 	bl	800a8f4 <tcp_rst>
    pbuf_free(p);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7fd fd5c 	bl	8005368 <pbuf_free>
  return;
 80078b0:	e00c      	b.n	80078cc <tcp_input+0x7d0>
    goto dropped;
 80078b2:	bf00      	nop
 80078b4:	e006      	b.n	80078c4 <tcp_input+0x7c8>
    goto dropped;
 80078b6:	bf00      	nop
 80078b8:	e004      	b.n	80078c4 <tcp_input+0x7c8>
    goto dropped;
 80078ba:	bf00      	nop
 80078bc:	e002      	b.n	80078c4 <tcp_input+0x7c8>
      goto dropped;
 80078be:	bf00      	nop
 80078c0:	e000      	b.n	80078c4 <tcp_input+0x7c8>
      goto dropped;
 80078c2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7fd fd4f 	bl	8005368 <pbuf_free>
 80078ca:	e000      	b.n	80078ce <tcp_input+0x7d2>
  return;
 80078cc:	bf00      	nop
}
 80078ce:	3724      	adds	r7, #36	; 0x24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd90      	pop	{r4, r7, pc}
 80078d4:	20008b1c 	.word	0x20008b1c
 80078d8:	200000f9 	.word	0x200000f9
 80078dc:	20008b08 	.word	0x20008b08
 80078e0:	200000f4 	.word	0x200000f4
 80078e4:	200000fc 	.word	0x200000fc
 80078e8:	08010648 	.word	0x08010648
 80078ec:	080107fc 	.word	0x080107fc
 80078f0:	08010694 	.word	0x08010694
 80078f4:	200000cc 	.word	0x200000cc
 80078f8:	200000dc 	.word	0x200000dc
 80078fc:	200000f0 	.word	0x200000f0
 8007900:	200000f6 	.word	0x200000f6
 8007904:	200000ec 	.word	0x200000ec
 8007908:	20003414 	.word	0x20003414
 800790c:	20003418 	.word	0x20003418

08007910 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d106      	bne.n	800792c <tcp_input_delayed_close+0x1c>
 800791e:	4b17      	ldr	r3, [pc, #92]	; (800797c <tcp_input_delayed_close+0x6c>)
 8007920:	f240 225a 	movw	r2, #602	; 0x25a
 8007924:	4916      	ldr	r1, [pc, #88]	; (8007980 <tcp_input_delayed_close+0x70>)
 8007926:	4817      	ldr	r0, [pc, #92]	; (8007984 <tcp_input_delayed_close+0x74>)
 8007928:	f006 fb1c 	bl	800df64 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800792c:	4b16      	ldr	r3, [pc, #88]	; (8007988 <tcp_input_delayed_close+0x78>)
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	f003 0310 	and.w	r3, r3, #16
 8007934:	2b00      	cmp	r3, #0
 8007936:	d01c      	beq.n	8007972 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	8b5b      	ldrh	r3, [r3, #26]
 800793c:	f003 0310 	and.w	r3, r3, #16
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10d      	bne.n	8007960 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800794a:	2b00      	cmp	r3, #0
 800794c:	d008      	beq.n	8007960 <tcp_input_delayed_close+0x50>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	6912      	ldr	r2, [r2, #16]
 8007958:	f06f 010e 	mvn.w	r1, #14
 800795c:	4610      	mov	r0, r2
 800795e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	480a      	ldr	r0, [pc, #40]	; (800798c <tcp_input_delayed_close+0x7c>)
 8007964:	f7ff fa52 	bl	8006e0c <tcp_pcb_remove>
    tcp_free(pcb);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7fe f83f 	bl	80059ec <tcp_free>
    return 1;
 800796e:	2301      	movs	r3, #1
 8007970:	e000      	b.n	8007974 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	08010648 	.word	0x08010648
 8007980:	08010818 	.word	0x08010818
 8007984:	08010694 	.word	0x08010694
 8007988:	200000f9 	.word	0x200000f9
 800798c:	20008b08 	.word	0x20008b08

08007990 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007990:	b590      	push	{r4, r7, lr}
 8007992:	b08b      	sub	sp, #44	; 0x2c
 8007994:	af04      	add	r7, sp, #16
 8007996:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007998:	4b6f      	ldr	r3, [pc, #444]	; (8007b58 <tcp_listen_input+0x1c8>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f040 80d2 	bne.w	8007b4a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d106      	bne.n	80079ba <tcp_listen_input+0x2a>
 80079ac:	4b6b      	ldr	r3, [pc, #428]	; (8007b5c <tcp_listen_input+0x1cc>)
 80079ae:	f240 2281 	movw	r2, #641	; 0x281
 80079b2:	496b      	ldr	r1, [pc, #428]	; (8007b60 <tcp_listen_input+0x1d0>)
 80079b4:	486b      	ldr	r0, [pc, #428]	; (8007b64 <tcp_listen_input+0x1d4>)
 80079b6:	f006 fad5 	bl	800df64 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80079ba:	4b67      	ldr	r3, [pc, #412]	; (8007b58 <tcp_listen_input+0x1c8>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	f003 0310 	and.w	r3, r3, #16
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d019      	beq.n	80079fa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079c6:	4b68      	ldr	r3, [pc, #416]	; (8007b68 <tcp_listen_input+0x1d8>)
 80079c8:	6819      	ldr	r1, [r3, #0]
 80079ca:	4b68      	ldr	r3, [pc, #416]	; (8007b6c <tcp_listen_input+0x1dc>)
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	4b67      	ldr	r3, [pc, #412]	; (8007b70 <tcp_listen_input+0x1e0>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079d6:	4b67      	ldr	r3, [pc, #412]	; (8007b74 <tcp_listen_input+0x1e4>)
 80079d8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079da:	885b      	ldrh	r3, [r3, #2]
 80079dc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079de:	4a65      	ldr	r2, [pc, #404]	; (8007b74 <tcp_listen_input+0x1e4>)
 80079e0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079e2:	8812      	ldrh	r2, [r2, #0]
 80079e4:	b292      	uxth	r2, r2
 80079e6:	9202      	str	r2, [sp, #8]
 80079e8:	9301      	str	r3, [sp, #4]
 80079ea:	4b63      	ldr	r3, [pc, #396]	; (8007b78 <tcp_listen_input+0x1e8>)
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	4b63      	ldr	r3, [pc, #396]	; (8007b7c <tcp_listen_input+0x1ec>)
 80079f0:	4602      	mov	r2, r0
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f002 ff7e 	bl	800a8f4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80079f8:	e0a9      	b.n	8007b4e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80079fa:	4b57      	ldr	r3, [pc, #348]	; (8007b58 <tcp_listen_input+0x1c8>)
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 80a3 	beq.w	8007b4e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	7d5b      	ldrb	r3, [r3, #21]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7ff f929 	bl	8006c64 <tcp_alloc>
 8007a12:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d111      	bne.n	8007a3e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <tcp_listen_input+0xa8>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	6910      	ldr	r0, [r2, #16]
 8007a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a2e:	2100      	movs	r1, #0
 8007a30:	4798      	blx	r3
 8007a32:	4603      	mov	r3, r0
 8007a34:	73bb      	strb	r3, [r7, #14]
      return;
 8007a36:	e08b      	b.n	8007b50 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007a38:	23f0      	movs	r3, #240	; 0xf0
 8007a3a:	73bb      	strb	r3, [r7, #14]
      return;
 8007a3c:	e088      	b.n	8007b50 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007a3e:	4b50      	ldr	r3, [pc, #320]	; (8007b80 <tcp_listen_input+0x1f0>)
 8007a40:	695a      	ldr	r2, [r3, #20]
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007a46:	4b4e      	ldr	r3, [pc, #312]	; (8007b80 <tcp_listen_input+0x1f0>)
 8007a48:	691a      	ldr	r2, [r3, #16]
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	8ada      	ldrh	r2, [r3, #22]
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007a56:	4b47      	ldr	r3, [pc, #284]	; (8007b74 <tcp_listen_input+0x1e4>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2203      	movs	r2, #3
 8007a66:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007a68:	4b41      	ldr	r3, [pc, #260]	; (8007b70 <tcp_listen_input+0x1e0>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007a7a:	6978      	ldr	r0, [r7, #20]
 8007a7c:	f7ff fa5a 	bl	8006f34 <tcp_next_iss>
 8007a80:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007a9a:	4b35      	ldr	r3, [pc, #212]	; (8007b70 <tcp_listen_input+0x1e0>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	1e5a      	subs	r2, r3, #1
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691a      	ldr	r2, [r3, #16]
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	7a5b      	ldrb	r3, [r3, #9]
 8007ab6:	f003 030c 	and.w	r3, r3, #12
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	7a1a      	ldrb	r2, [r3, #8]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007ac8:	4b2e      	ldr	r3, [pc, #184]	; (8007b84 <tcp_listen_input+0x1f4>)
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	60da      	str	r2, [r3, #12]
 8007ad0:	4a2c      	ldr	r2, [pc, #176]	; (8007b84 <tcp_listen_input+0x1f4>)
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	f003 f8cf 	bl	800ac78 <tcp_timer_needed>
 8007ada:	4b2b      	ldr	r3, [pc, #172]	; (8007b88 <tcp_listen_input+0x1f8>)
 8007adc:	2201      	movs	r2, #1
 8007ade:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007ae0:	6978      	ldr	r0, [r7, #20]
 8007ae2:	f001 fd8d 	bl	8009600 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007ae6:	4b23      	ldr	r3, [pc, #140]	; (8007b74 <tcp_listen_input+0x1e4>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	89db      	ldrh	r3, [r3, #14]
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	3304      	adds	r3, #4
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f004 ffe3 	bl	800cad4 <ip4_route>
 8007b0e:	4601      	mov	r1, r0
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	3304      	adds	r3, #4
 8007b14:	461a      	mov	r2, r3
 8007b16:	4620      	mov	r0, r4
 8007b18:	f7ff fa32 	bl	8006f80 <tcp_eff_send_mss_netif>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	461a      	mov	r2, r3
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007b24:	2112      	movs	r1, #18
 8007b26:	6978      	ldr	r0, [r7, #20]
 8007b28:	f002 f842 	bl	8009bb0 <tcp_enqueue_flags>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d004      	beq.n	8007b42 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007b38:	2100      	movs	r1, #0
 8007b3a:	6978      	ldr	r0, [r7, #20]
 8007b3c:	f7fe f980 	bl	8005e40 <tcp_abandon>
      return;
 8007b40:	e006      	b.n	8007b50 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007b42:	6978      	ldr	r0, [r7, #20]
 8007b44:	f002 f922 	bl	8009d8c <tcp_output>
  return;
 8007b48:	e001      	b.n	8007b4e <tcp_listen_input+0x1be>
    return;
 8007b4a:	bf00      	nop
 8007b4c:	e000      	b.n	8007b50 <tcp_listen_input+0x1c0>
  return;
 8007b4e:	bf00      	nop
}
 8007b50:	371c      	adds	r7, #28
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd90      	pop	{r4, r7, pc}
 8007b56:	bf00      	nop
 8007b58:	200000f8 	.word	0x200000f8
 8007b5c:	08010648 	.word	0x08010648
 8007b60:	08010840 	.word	0x08010840
 8007b64:	08010694 	.word	0x08010694
 8007b68:	200000f0 	.word	0x200000f0
 8007b6c:	200000f6 	.word	0x200000f6
 8007b70:	200000ec 	.word	0x200000ec
 8007b74:	200000dc 	.word	0x200000dc
 8007b78:	20003414 	.word	0x20003414
 8007b7c:	20003418 	.word	0x20003418
 8007b80:	20003404 	.word	0x20003404
 8007b84:	20008b08 	.word	0x20008b08
 8007b88:	20008b04 	.word	0x20008b04

08007b8c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af04      	add	r7, sp, #16
 8007b92:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007b94:	4b2f      	ldr	r3, [pc, #188]	; (8007c54 <tcp_timewait_input+0xc8>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	f003 0304 	and.w	r3, r3, #4
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d153      	bne.n	8007c48 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d106      	bne.n	8007bb4 <tcp_timewait_input+0x28>
 8007ba6:	4b2c      	ldr	r3, [pc, #176]	; (8007c58 <tcp_timewait_input+0xcc>)
 8007ba8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007bac:	492b      	ldr	r1, [pc, #172]	; (8007c5c <tcp_timewait_input+0xd0>)
 8007bae:	482c      	ldr	r0, [pc, #176]	; (8007c60 <tcp_timewait_input+0xd4>)
 8007bb0:	f006 f9d8 	bl	800df64 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007bb4:	4b27      	ldr	r3, [pc, #156]	; (8007c54 <tcp_timewait_input+0xc8>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d02a      	beq.n	8007c16 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007bc0:	4b28      	ldr	r3, [pc, #160]	; (8007c64 <tcp_timewait_input+0xd8>)
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	db2d      	blt.n	8007c2a <tcp_timewait_input+0x9e>
 8007bce:	4b25      	ldr	r3, [pc, #148]	; (8007c64 <tcp_timewait_input+0xd8>)
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd6:	6879      	ldr	r1, [r7, #4]
 8007bd8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007bda:	440b      	add	r3, r1
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	dc23      	bgt.n	8007c2a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007be2:	4b21      	ldr	r3, [pc, #132]	; (8007c68 <tcp_timewait_input+0xdc>)
 8007be4:	6819      	ldr	r1, [r3, #0]
 8007be6:	4b21      	ldr	r3, [pc, #132]	; (8007c6c <tcp_timewait_input+0xe0>)
 8007be8:	881b      	ldrh	r3, [r3, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	4b1d      	ldr	r3, [pc, #116]	; (8007c64 <tcp_timewait_input+0xd8>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007bf2:	4b1f      	ldr	r3, [pc, #124]	; (8007c70 <tcp_timewait_input+0xe4>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bf6:	885b      	ldrh	r3, [r3, #2]
 8007bf8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007bfa:	4a1d      	ldr	r2, [pc, #116]	; (8007c70 <tcp_timewait_input+0xe4>)
 8007bfc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bfe:	8812      	ldrh	r2, [r2, #0]
 8007c00:	b292      	uxth	r2, r2
 8007c02:	9202      	str	r2, [sp, #8]
 8007c04:	9301      	str	r3, [sp, #4]
 8007c06:	4b1b      	ldr	r3, [pc, #108]	; (8007c74 <tcp_timewait_input+0xe8>)
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	4b1b      	ldr	r3, [pc, #108]	; (8007c78 <tcp_timewait_input+0xec>)
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f002 fe70 	bl	800a8f4 <tcp_rst>
      return;
 8007c14:	e01b      	b.n	8007c4e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8007c16:	4b0f      	ldr	r3, [pc, #60]	; (8007c54 <tcp_timewait_input+0xc8>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007c22:	4b16      	ldr	r3, [pc, #88]	; (8007c7c <tcp_timewait_input+0xf0>)
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007c2a:	4b10      	ldr	r3, [pc, #64]	; (8007c6c <tcp_timewait_input+0xe0>)
 8007c2c:	881b      	ldrh	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00c      	beq.n	8007c4c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	8b5b      	ldrh	r3, [r3, #26]
 8007c36:	f043 0302 	orr.w	r3, r3, #2
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f002 f8a3 	bl	8009d8c <tcp_output>
  }
  return;
 8007c46:	e001      	b.n	8007c4c <tcp_timewait_input+0xc0>
    return;
 8007c48:	bf00      	nop
 8007c4a:	e000      	b.n	8007c4e <tcp_timewait_input+0xc2>
  return;
 8007c4c:	bf00      	nop
}
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	200000f8 	.word	0x200000f8
 8007c58:	08010648 	.word	0x08010648
 8007c5c:	08010860 	.word	0x08010860
 8007c60:	08010694 	.word	0x08010694
 8007c64:	200000ec 	.word	0x200000ec
 8007c68:	200000f0 	.word	0x200000f0
 8007c6c:	200000f6 	.word	0x200000f6
 8007c70:	200000dc 	.word	0x200000dc
 8007c74:	20003414 	.word	0x20003414
 8007c78:	20003418 	.word	0x20003418
 8007c7c:	20008b0c 	.word	0x20008b0c

08007c80 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007c80:	b590      	push	{r4, r7, lr}
 8007c82:	b08d      	sub	sp, #52	; 0x34
 8007c84:	af04      	add	r7, sp, #16
 8007c86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d106      	bne.n	8007ca4 <tcp_process+0x24>
 8007c96:	4ba5      	ldr	r3, [pc, #660]	; (8007f2c <tcp_process+0x2ac>)
 8007c98:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007c9c:	49a4      	ldr	r1, [pc, #656]	; (8007f30 <tcp_process+0x2b0>)
 8007c9e:	48a5      	ldr	r0, [pc, #660]	; (8007f34 <tcp_process+0x2b4>)
 8007ca0:	f006 f960 	bl	800df64 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007ca4:	4ba4      	ldr	r3, [pc, #656]	; (8007f38 <tcp_process+0x2b8>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	f003 0304 	and.w	r3, r3, #4
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d04e      	beq.n	8007d4e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	7d1b      	ldrb	r3, [r3, #20]
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d108      	bne.n	8007cca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007cbc:	4b9f      	ldr	r3, [pc, #636]	; (8007f3c <tcp_process+0x2bc>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d123      	bne.n	8007d0c <tcp_process+0x8c>
        acceptable = 1;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	76fb      	strb	r3, [r7, #27]
 8007cc8:	e020      	b.n	8007d0c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cce:	4b9c      	ldr	r3, [pc, #624]	; (8007f40 <tcp_process+0x2c0>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d102      	bne.n	8007cdc <tcp_process+0x5c>
        acceptable = 1;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	76fb      	strb	r3, [r7, #27]
 8007cda:	e017      	b.n	8007d0c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007cdc:	4b98      	ldr	r3, [pc, #608]	; (8007f40 <tcp_process+0x2c0>)
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	db10      	blt.n	8007d0c <tcp_process+0x8c>
 8007cea:	4b95      	ldr	r3, [pc, #596]	; (8007f40 <tcp_process+0x2c0>)
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf2:	6879      	ldr	r1, [r7, #4]
 8007cf4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007cf6:	440b      	add	r3, r1
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	dc06      	bgt.n	8007d0c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	8b5b      	ldrh	r3, [r3, #26]
 8007d02:	f043 0302 	orr.w	r3, r3, #2
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007d0c:	7efb      	ldrb	r3, [r7, #27]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d01b      	beq.n	8007d4a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	7d1b      	ldrb	r3, [r3, #20]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d106      	bne.n	8007d28 <tcp_process+0xa8>
 8007d1a:	4b84      	ldr	r3, [pc, #528]	; (8007f2c <tcp_process+0x2ac>)
 8007d1c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8007d20:	4988      	ldr	r1, [pc, #544]	; (8007f44 <tcp_process+0x2c4>)
 8007d22:	4884      	ldr	r0, [pc, #528]	; (8007f34 <tcp_process+0x2b4>)
 8007d24:	f006 f91e 	bl	800df64 <iprintf>
      recv_flags |= TF_RESET;
 8007d28:	4b87      	ldr	r3, [pc, #540]	; (8007f48 <tcp_process+0x2c8>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	f043 0308 	orr.w	r3, r3, #8
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	4b85      	ldr	r3, [pc, #532]	; (8007f48 <tcp_process+0x2c8>)
 8007d34:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	8b5b      	ldrh	r3, [r3, #26]
 8007d3a:	f023 0301 	bic.w	r3, r3, #1
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007d44:	f06f 030d 	mvn.w	r3, #13
 8007d48:	e37a      	b.n	8008440 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e378      	b.n	8008440 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007d4e:	4b7a      	ldr	r3, [pc, #488]	; (8007f38 <tcp_process+0x2b8>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d010      	beq.n	8007d7c <tcp_process+0xfc>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	7d1b      	ldrb	r3, [r3, #20]
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d00c      	beq.n	8007d7c <tcp_process+0xfc>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	7d1b      	ldrb	r3, [r3, #20]
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	d008      	beq.n	8007d7c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	8b5b      	ldrh	r3, [r3, #26]
 8007d6e:	f043 0302 	orr.w	r3, r3, #2
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	e361      	b.n	8008440 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	8b5b      	ldrh	r3, [r3, #26]
 8007d80:	f003 0310 	and.w	r3, r3, #16
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d103      	bne.n	8007d90 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007d88:	4b70      	ldr	r3, [pc, #448]	; (8007f4c <tcp_process+0x2cc>)
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f001 fc2d 	bl	8009600 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	7d1b      	ldrb	r3, [r3, #20]
 8007daa:	3b02      	subs	r3, #2
 8007dac:	2b07      	cmp	r3, #7
 8007dae:	f200 8337 	bhi.w	8008420 <tcp_process+0x7a0>
 8007db2:	a201      	add	r2, pc, #4	; (adr r2, 8007db8 <tcp_process+0x138>)
 8007db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db8:	08007dd9 	.word	0x08007dd9
 8007dbc:	08008009 	.word	0x08008009
 8007dc0:	08008181 	.word	0x08008181
 8007dc4:	080081ab 	.word	0x080081ab
 8007dc8:	080082cf 	.word	0x080082cf
 8007dcc:	08008181 	.word	0x08008181
 8007dd0:	0800835b 	.word	0x0800835b
 8007dd4:	080083eb 	.word	0x080083eb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007dd8:	4b57      	ldr	r3, [pc, #348]	; (8007f38 <tcp_process+0x2b8>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	f003 0310 	and.w	r3, r3, #16
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 80e4 	beq.w	8007fae <tcp_process+0x32e>
 8007de6:	4b54      	ldr	r3, [pc, #336]	; (8007f38 <tcp_process+0x2b8>)
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	f003 0302 	and.w	r3, r3, #2
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 80dd 	beq.w	8007fae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	4b50      	ldr	r3, [pc, #320]	; (8007f3c <tcp_process+0x2bc>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	f040 80d5 	bne.w	8007fae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8007e04:	4b4e      	ldr	r3, [pc, #312]	; (8007f40 <tcp_process+0x2c0>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	1c5a      	adds	r2, r3, #1
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8007e16:	4b49      	ldr	r3, [pc, #292]	; (8007f3c <tcp_process+0x2bc>)
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007e1e:	4b4c      	ldr	r3, [pc, #304]	; (8007f50 <tcp_process+0x2d0>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	89db      	ldrh	r3, [r3, #14]
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007e38:	4b41      	ldr	r3, [pc, #260]	; (8007f40 <tcp_process+0x2c0>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	1e5a      	subs	r2, r3, #1
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2204      	movs	r2, #4
 8007e46:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3304      	adds	r3, #4
 8007e50:	4618      	mov	r0, r3
 8007e52:	f004 fe3f 	bl	800cad4 <ip4_route>
 8007e56:	4601      	mov	r1, r0
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f7ff f88e 	bl	8006f80 <tcp_eff_send_mss_netif>
 8007e64:	4603      	mov	r3, r0
 8007e66:	461a      	mov	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e70:	009a      	lsls	r2, r3, #2
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e76:	005b      	lsls	r3, r3, #1
 8007e78:	f241 111c 	movw	r1, #4380	; 0x111c
 8007e7c:	428b      	cmp	r3, r1
 8007e7e:	bf38      	it	cc
 8007e80:	460b      	movcc	r3, r1
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d204      	bcs.n	8007e90 <tcp_process+0x210>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	e00d      	b.n	8007eac <tcp_process+0x22c>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	f241 121c 	movw	r2, #4380	; 0x111c
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d904      	bls.n	8007ea8 <tcp_process+0x228>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ea2:	005b      	lsls	r3, r3, #1
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	e001      	b.n	8007eac <tcp_process+0x22c>
 8007ea8:	f241 131c 	movw	r3, #4380	; 0x111c
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d106      	bne.n	8007eca <tcp_process+0x24a>
 8007ebc:	4b1b      	ldr	r3, [pc, #108]	; (8007f2c <tcp_process+0x2ac>)
 8007ebe:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8007ec2:	4924      	ldr	r1, [pc, #144]	; (8007f54 <tcp_process+0x2d4>)
 8007ec4:	481b      	ldr	r0, [pc, #108]	; (8007f34 <tcp_process+0x2b4>)
 8007ec6:	f006 f84d 	bl	800df64 <iprintf>
        --pcb->snd_queuelen;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ede:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d111      	bne.n	8007f0a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d106      	bne.n	8007f00 <tcp_process+0x280>
 8007ef2:	4b0e      	ldr	r3, [pc, #56]	; (8007f2c <tcp_process+0x2ac>)
 8007ef4:	f44f 725d 	mov.w	r2, #884	; 0x374
 8007ef8:	4917      	ldr	r1, [pc, #92]	; (8007f58 <tcp_process+0x2d8>)
 8007efa:	480e      	ldr	r0, [pc, #56]	; (8007f34 <tcp_process+0x2b4>)
 8007efc:	f006 f832 	bl	800df64 <iprintf>
          pcb->unsent = rseg->next;
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	66da      	str	r2, [r3, #108]	; 0x6c
 8007f08:	e003      	b.n	8007f12 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8007f12:	69f8      	ldr	r0, [r7, #28]
 8007f14:	f7fe fd3d 	bl	8006992 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d11d      	bne.n	8007f5c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f26:	861a      	strh	r2, [r3, #48]	; 0x30
 8007f28:	e01f      	b.n	8007f6a <tcp_process+0x2ea>
 8007f2a:	bf00      	nop
 8007f2c:	08010648 	.word	0x08010648
 8007f30:	08010880 	.word	0x08010880
 8007f34:	08010694 	.word	0x08010694
 8007f38:	200000f8 	.word	0x200000f8
 8007f3c:	200000f0 	.word	0x200000f0
 8007f40:	200000ec 	.word	0x200000ec
 8007f44:	0801089c 	.word	0x0801089c
 8007f48:	200000f9 	.word	0x200000f9
 8007f4c:	20008b0c 	.word	0x20008b0c
 8007f50:	200000dc 	.word	0x200000dc
 8007f54:	080108bc 	.word	0x080108bc
 8007f58:	080108d4 	.word	0x080108d4
        } else {
          pcb->rtime = 0;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00a      	beq.n	8007f8a <tcp_process+0x30a>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	6910      	ldr	r0, [r2, #16]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	4798      	blx	r3
 8007f84:	4603      	mov	r3, r0
 8007f86:	76bb      	strb	r3, [r7, #26]
 8007f88:	e001      	b.n	8007f8e <tcp_process+0x30e>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8007f8e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007f92:	f113 0f0d 	cmn.w	r3, #13
 8007f96:	d102      	bne.n	8007f9e <tcp_process+0x31e>
          return ERR_ABRT;
 8007f98:	f06f 030c 	mvn.w	r3, #12
 8007f9c:	e250      	b.n	8008440 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	8b5b      	ldrh	r3, [r3, #26]
 8007fa2:	f043 0302 	orr.w	r3, r3, #2
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007fac:	e23a      	b.n	8008424 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007fae:	4b9d      	ldr	r3, [pc, #628]	; (8008224 <tcp_process+0x5a4>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	f003 0310 	and.w	r3, r3, #16
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 8234 	beq.w	8008424 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007fbc:	4b9a      	ldr	r3, [pc, #616]	; (8008228 <tcp_process+0x5a8>)
 8007fbe:	6819      	ldr	r1, [r3, #0]
 8007fc0:	4b9a      	ldr	r3, [pc, #616]	; (800822c <tcp_process+0x5ac>)
 8007fc2:	881b      	ldrh	r3, [r3, #0]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	4b9a      	ldr	r3, [pc, #616]	; (8008230 <tcp_process+0x5b0>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007fcc:	4b99      	ldr	r3, [pc, #612]	; (8008234 <tcp_process+0x5b4>)
 8007fce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007fd0:	885b      	ldrh	r3, [r3, #2]
 8007fd2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007fd4:	4a97      	ldr	r2, [pc, #604]	; (8008234 <tcp_process+0x5b4>)
 8007fd6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007fd8:	8812      	ldrh	r2, [r2, #0]
 8007fda:	b292      	uxth	r2, r2
 8007fdc:	9202      	str	r2, [sp, #8]
 8007fde:	9301      	str	r3, [sp, #4]
 8007fe0:	4b95      	ldr	r3, [pc, #596]	; (8008238 <tcp_process+0x5b8>)
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	4b95      	ldr	r3, [pc, #596]	; (800823c <tcp_process+0x5bc>)
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f002 fc83 	bl	800a8f4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ff4:	2b05      	cmp	r3, #5
 8007ff6:	f200 8215 	bhi.w	8008424 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f002 fa4d 	bl	800a4a0 <tcp_rexmit_rto>
      break;
 8008006:	e20d      	b.n	8008424 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008008:	4b86      	ldr	r3, [pc, #536]	; (8008224 <tcp_process+0x5a4>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	f003 0310 	and.w	r3, r3, #16
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 80a1 	beq.w	8008158 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008016:	4b84      	ldr	r3, [pc, #528]	; (8008228 <tcp_process+0x5a8>)
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	3b01      	subs	r3, #1
 8008022:	2b00      	cmp	r3, #0
 8008024:	db7e      	blt.n	8008124 <tcp_process+0x4a4>
 8008026:	4b80      	ldr	r3, [pc, #512]	; (8008228 <tcp_process+0x5a8>)
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	2b00      	cmp	r3, #0
 8008032:	dc77      	bgt.n	8008124 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2204      	movs	r2, #4
 8008038:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800803e:	2b00      	cmp	r3, #0
 8008040:	d102      	bne.n	8008048 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008042:	23fa      	movs	r3, #250	; 0xfa
 8008044:	76bb      	strb	r3, [r7, #26]
 8008046:	e01d      	b.n	8008084 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d106      	bne.n	8008060 <tcp_process+0x3e0>
 8008052:	4b7b      	ldr	r3, [pc, #492]	; (8008240 <tcp_process+0x5c0>)
 8008054:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008058:	497a      	ldr	r1, [pc, #488]	; (8008244 <tcp_process+0x5c4>)
 800805a:	487b      	ldr	r0, [pc, #492]	; (8008248 <tcp_process+0x5c8>)
 800805c:	f005 ff82 	bl	800df64 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00a      	beq.n	8008080 <tcp_process+0x400>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	6910      	ldr	r0, [r2, #16]
 8008074:	2200      	movs	r2, #0
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	4798      	blx	r3
 800807a:	4603      	mov	r3, r0
 800807c:	76bb      	strb	r3, [r7, #26]
 800807e:	e001      	b.n	8008084 <tcp_process+0x404>
 8008080:	23f0      	movs	r3, #240	; 0xf0
 8008082:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008084:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00a      	beq.n	80080a2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800808c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008090:	f113 0f0d 	cmn.w	r3, #13
 8008094:	d002      	beq.n	800809c <tcp_process+0x41c>
              tcp_abort(pcb);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7fd ff90 	bl	8005fbc <tcp_abort>
            }
            return ERR_ABRT;
 800809c:	f06f 030c 	mvn.w	r3, #12
 80080a0:	e1ce      	b.n	8008440 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fae0 	bl	8008668 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80080a8:	4b68      	ldr	r3, [pc, #416]	; (800824c <tcp_process+0x5cc>)
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d005      	beq.n	80080bc <tcp_process+0x43c>
            recv_acked--;
 80080b0:	4b66      	ldr	r3, [pc, #408]	; (800824c <tcp_process+0x5cc>)
 80080b2:	881b      	ldrh	r3, [r3, #0]
 80080b4:	3b01      	subs	r3, #1
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	4b64      	ldr	r3, [pc, #400]	; (800824c <tcp_process+0x5cc>)
 80080ba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080c0:	009a      	lsls	r2, r3, #2
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080c6:	005b      	lsls	r3, r3, #1
 80080c8:	f241 111c 	movw	r1, #4380	; 0x111c
 80080cc:	428b      	cmp	r3, r1
 80080ce:	bf38      	it	cc
 80080d0:	460b      	movcc	r3, r1
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d204      	bcs.n	80080e0 <tcp_process+0x460>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	b29b      	uxth	r3, r3
 80080de:	e00d      	b.n	80080fc <tcp_process+0x47c>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080e4:	005b      	lsls	r3, r3, #1
 80080e6:	f241 121c 	movw	r2, #4380	; 0x111c
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d904      	bls.n	80080f8 <tcp_process+0x478>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080f2:	005b      	lsls	r3, r3, #1
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	e001      	b.n	80080fc <tcp_process+0x47c>
 80080f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008102:	4b53      	ldr	r3, [pc, #332]	; (8008250 <tcp_process+0x5d0>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	f003 0320 	and.w	r3, r3, #32
 800810a:	2b00      	cmp	r3, #0
 800810c:	d037      	beq.n	800817e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	8b5b      	ldrh	r3, [r3, #26]
 8008112:	f043 0302 	orr.w	r3, r3, #2
 8008116:	b29a      	uxth	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2207      	movs	r2, #7
 8008120:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008122:	e02c      	b.n	800817e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008124:	4b40      	ldr	r3, [pc, #256]	; (8008228 <tcp_process+0x5a8>)
 8008126:	6819      	ldr	r1, [r3, #0]
 8008128:	4b40      	ldr	r3, [pc, #256]	; (800822c <tcp_process+0x5ac>)
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	461a      	mov	r2, r3
 800812e:	4b40      	ldr	r3, [pc, #256]	; (8008230 <tcp_process+0x5b0>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008134:	4b3f      	ldr	r3, [pc, #252]	; (8008234 <tcp_process+0x5b4>)
 8008136:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008138:	885b      	ldrh	r3, [r3, #2]
 800813a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800813c:	4a3d      	ldr	r2, [pc, #244]	; (8008234 <tcp_process+0x5b4>)
 800813e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008140:	8812      	ldrh	r2, [r2, #0]
 8008142:	b292      	uxth	r2, r2
 8008144:	9202      	str	r2, [sp, #8]
 8008146:	9301      	str	r3, [sp, #4]
 8008148:	4b3b      	ldr	r3, [pc, #236]	; (8008238 <tcp_process+0x5b8>)
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	4b3b      	ldr	r3, [pc, #236]	; (800823c <tcp_process+0x5bc>)
 800814e:	4602      	mov	r2, r0
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f002 fbcf 	bl	800a8f4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008156:	e167      	b.n	8008428 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008158:	4b32      	ldr	r3, [pc, #200]	; (8008224 <tcp_process+0x5a4>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	f003 0302 	and.w	r3, r3, #2
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 8161 	beq.w	8008428 <tcp_process+0x7a8>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	1e5a      	subs	r2, r3, #1
 800816c:	4b30      	ldr	r3, [pc, #192]	; (8008230 <tcp_process+0x5b0>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	429a      	cmp	r2, r3
 8008172:	f040 8159 	bne.w	8008428 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f002 f9b4 	bl	800a4e4 <tcp_rexmit>
      break;
 800817c:	e154      	b.n	8008428 <tcp_process+0x7a8>
 800817e:	e153      	b.n	8008428 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fa71 	bl	8008668 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008186:	4b32      	ldr	r3, [pc, #200]	; (8008250 <tcp_process+0x5d0>)
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	f003 0320 	and.w	r3, r3, #32
 800818e:	2b00      	cmp	r3, #0
 8008190:	f000 814c 	beq.w	800842c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	8b5b      	ldrh	r3, [r3, #26]
 8008198:	f043 0302 	orr.w	r3, r3, #2
 800819c:	b29a      	uxth	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2207      	movs	r2, #7
 80081a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80081a8:	e140      	b.n	800842c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fa5c 	bl	8008668 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80081b0:	4b27      	ldr	r3, [pc, #156]	; (8008250 <tcp_process+0x5d0>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	f003 0320 	and.w	r3, r3, #32
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d071      	beq.n	80082a0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80081bc:	4b19      	ldr	r3, [pc, #100]	; (8008224 <tcp_process+0x5a4>)
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	f003 0310 	and.w	r3, r3, #16
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d060      	beq.n	800828a <tcp_process+0x60a>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081cc:	4b16      	ldr	r3, [pc, #88]	; (8008228 <tcp_process+0x5a8>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d15a      	bne.n	800828a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d156      	bne.n	800828a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	8b5b      	ldrh	r3, [r3, #26]
 80081e0:	f043 0302 	orr.w	r3, r3, #2
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7fe fdbe 	bl	8006d6c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80081f0:	4b18      	ldr	r3, [pc, #96]	; (8008254 <tcp_process+0x5d4>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d105      	bne.n	8008206 <tcp_process+0x586>
 80081fa:	4b16      	ldr	r3, [pc, #88]	; (8008254 <tcp_process+0x5d4>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	4a14      	ldr	r2, [pc, #80]	; (8008254 <tcp_process+0x5d4>)
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	e02e      	b.n	8008264 <tcp_process+0x5e4>
 8008206:	4b13      	ldr	r3, [pc, #76]	; (8008254 <tcp_process+0x5d4>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	617b      	str	r3, [r7, #20]
 800820c:	e027      	b.n	800825e <tcp_process+0x5de>
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	429a      	cmp	r2, r3
 8008216:	d11f      	bne.n	8008258 <tcp_process+0x5d8>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68da      	ldr	r2, [r3, #12]
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	60da      	str	r2, [r3, #12]
 8008220:	e020      	b.n	8008264 <tcp_process+0x5e4>
 8008222:	bf00      	nop
 8008224:	200000f8 	.word	0x200000f8
 8008228:	200000f0 	.word	0x200000f0
 800822c:	200000f6 	.word	0x200000f6
 8008230:	200000ec 	.word	0x200000ec
 8008234:	200000dc 	.word	0x200000dc
 8008238:	20003414 	.word	0x20003414
 800823c:	20003418 	.word	0x20003418
 8008240:	08010648 	.word	0x08010648
 8008244:	080108e8 	.word	0x080108e8
 8008248:	08010694 	.word	0x08010694
 800824c:	200000f4 	.word	0x200000f4
 8008250:	200000f9 	.word	0x200000f9
 8008254:	20008b08 	.word	0x20008b08
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	617b      	str	r3, [r7, #20]
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1d4      	bne.n	800820e <tcp_process+0x58e>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	60da      	str	r2, [r3, #12]
 800826a:	4b77      	ldr	r3, [pc, #476]	; (8008448 <tcp_process+0x7c8>)
 800826c:	2201      	movs	r2, #1
 800826e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	220a      	movs	r2, #10
 8008274:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008276:	4b75      	ldr	r3, [pc, #468]	; (800844c <tcp_process+0x7cc>)
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	60da      	str	r2, [r3, #12]
 800827e:	4a73      	ldr	r2, [pc, #460]	; (800844c <tcp_process+0x7cc>)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	f002 fcf8 	bl	800ac78 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008288:	e0d2      	b.n	8008430 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	8b5b      	ldrh	r3, [r3, #26]
 800828e:	f043 0302 	orr.w	r3, r3, #2
 8008292:	b29a      	uxth	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2208      	movs	r2, #8
 800829c:	751a      	strb	r2, [r3, #20]
      break;
 800829e:	e0c7      	b.n	8008430 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80082a0:	4b6b      	ldr	r3, [pc, #428]	; (8008450 <tcp_process+0x7d0>)
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	f003 0310 	and.w	r3, r3, #16
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 80c1 	beq.w	8008430 <tcp_process+0x7b0>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082b2:	4b68      	ldr	r3, [pc, #416]	; (8008454 <tcp_process+0x7d4>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	f040 80ba 	bne.w	8008430 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f040 80b5 	bne.w	8008430 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2206      	movs	r2, #6
 80082ca:	751a      	strb	r2, [r3, #20]
      break;
 80082cc:	e0b0      	b.n	8008430 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f9ca 	bl	8008668 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80082d4:	4b60      	ldr	r3, [pc, #384]	; (8008458 <tcp_process+0x7d8>)
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	f003 0320 	and.w	r3, r3, #32
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 80a9 	beq.w	8008434 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	8b5b      	ldrh	r3, [r3, #26]
 80082e6:	f043 0302 	orr.w	r3, r3, #2
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7fe fd3b 	bl	8006d6c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80082f6:	4b59      	ldr	r3, [pc, #356]	; (800845c <tcp_process+0x7dc>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d105      	bne.n	800830c <tcp_process+0x68c>
 8008300:	4b56      	ldr	r3, [pc, #344]	; (800845c <tcp_process+0x7dc>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	4a55      	ldr	r2, [pc, #340]	; (800845c <tcp_process+0x7dc>)
 8008308:	6013      	str	r3, [r2, #0]
 800830a:	e013      	b.n	8008334 <tcp_process+0x6b4>
 800830c:	4b53      	ldr	r3, [pc, #332]	; (800845c <tcp_process+0x7dc>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	613b      	str	r3, [r7, #16]
 8008312:	e00c      	b.n	800832e <tcp_process+0x6ae>
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	429a      	cmp	r2, r3
 800831c:	d104      	bne.n	8008328 <tcp_process+0x6a8>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68da      	ldr	r2, [r3, #12]
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	60da      	str	r2, [r3, #12]
 8008326:	e005      	b.n	8008334 <tcp_process+0x6b4>
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	613b      	str	r3, [r7, #16]
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1ef      	bne.n	8008314 <tcp_process+0x694>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	60da      	str	r2, [r3, #12]
 800833a:	4b43      	ldr	r3, [pc, #268]	; (8008448 <tcp_process+0x7c8>)
 800833c:	2201      	movs	r2, #1
 800833e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	220a      	movs	r2, #10
 8008344:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008346:	4b41      	ldr	r3, [pc, #260]	; (800844c <tcp_process+0x7cc>)
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	60da      	str	r2, [r3, #12]
 800834e:	4a3f      	ldr	r2, [pc, #252]	; (800844c <tcp_process+0x7cc>)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6013      	str	r3, [r2, #0]
 8008354:	f002 fc90 	bl	800ac78 <tcp_timer_needed>
      }
      break;
 8008358:	e06c      	b.n	8008434 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f984 	bl	8008668 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008360:	4b3b      	ldr	r3, [pc, #236]	; (8008450 <tcp_process+0x7d0>)
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	f003 0310 	and.w	r3, r3, #16
 8008368:	2b00      	cmp	r3, #0
 800836a:	d065      	beq.n	8008438 <tcp_process+0x7b8>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008370:	4b38      	ldr	r3, [pc, #224]	; (8008454 <tcp_process+0x7d4>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	429a      	cmp	r2, r3
 8008376:	d15f      	bne.n	8008438 <tcp_process+0x7b8>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800837c:	2b00      	cmp	r3, #0
 800837e:	d15b      	bne.n	8008438 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f7fe fcf3 	bl	8006d6c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008386:	4b35      	ldr	r3, [pc, #212]	; (800845c <tcp_process+0x7dc>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	429a      	cmp	r2, r3
 800838e:	d105      	bne.n	800839c <tcp_process+0x71c>
 8008390:	4b32      	ldr	r3, [pc, #200]	; (800845c <tcp_process+0x7dc>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	4a31      	ldr	r2, [pc, #196]	; (800845c <tcp_process+0x7dc>)
 8008398:	6013      	str	r3, [r2, #0]
 800839a:	e013      	b.n	80083c4 <tcp_process+0x744>
 800839c:	4b2f      	ldr	r3, [pc, #188]	; (800845c <tcp_process+0x7dc>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	60fb      	str	r3, [r7, #12]
 80083a2:	e00c      	b.n	80083be <tcp_process+0x73e>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d104      	bne.n	80083b8 <tcp_process+0x738>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	68da      	ldr	r2, [r3, #12]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	60da      	str	r2, [r3, #12]
 80083b6:	e005      	b.n	80083c4 <tcp_process+0x744>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	60fb      	str	r3, [r7, #12]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1ef      	bne.n	80083a4 <tcp_process+0x724>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	60da      	str	r2, [r3, #12]
 80083ca:	4b1f      	ldr	r3, [pc, #124]	; (8008448 <tcp_process+0x7c8>)
 80083cc:	2201      	movs	r2, #1
 80083ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	220a      	movs	r2, #10
 80083d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80083d6:	4b1d      	ldr	r3, [pc, #116]	; (800844c <tcp_process+0x7cc>)
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	60da      	str	r2, [r3, #12]
 80083de:	4a1b      	ldr	r2, [pc, #108]	; (800844c <tcp_process+0x7cc>)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6013      	str	r3, [r2, #0]
 80083e4:	f002 fc48 	bl	800ac78 <tcp_timer_needed>
      }
      break;
 80083e8:	e026      	b.n	8008438 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f93c 	bl	8008668 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80083f0:	4b17      	ldr	r3, [pc, #92]	; (8008450 <tcp_process+0x7d0>)
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	f003 0310 	and.w	r3, r3, #16
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d01f      	beq.n	800843c <tcp_process+0x7bc>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008400:	4b14      	ldr	r3, [pc, #80]	; (8008454 <tcp_process+0x7d4>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	429a      	cmp	r2, r3
 8008406:	d119      	bne.n	800843c <tcp_process+0x7bc>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800840c:	2b00      	cmp	r3, #0
 800840e:	d115      	bne.n	800843c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008410:	4b11      	ldr	r3, [pc, #68]	; (8008458 <tcp_process+0x7d8>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	f043 0310 	orr.w	r3, r3, #16
 8008418:	b2da      	uxtb	r2, r3
 800841a:	4b0f      	ldr	r3, [pc, #60]	; (8008458 <tcp_process+0x7d8>)
 800841c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800841e:	e00d      	b.n	800843c <tcp_process+0x7bc>
    default:
      break;
 8008420:	bf00      	nop
 8008422:	e00c      	b.n	800843e <tcp_process+0x7be>
      break;
 8008424:	bf00      	nop
 8008426:	e00a      	b.n	800843e <tcp_process+0x7be>
      break;
 8008428:	bf00      	nop
 800842a:	e008      	b.n	800843e <tcp_process+0x7be>
      break;
 800842c:	bf00      	nop
 800842e:	e006      	b.n	800843e <tcp_process+0x7be>
      break;
 8008430:	bf00      	nop
 8008432:	e004      	b.n	800843e <tcp_process+0x7be>
      break;
 8008434:	bf00      	nop
 8008436:	e002      	b.n	800843e <tcp_process+0x7be>
      break;
 8008438:	bf00      	nop
 800843a:	e000      	b.n	800843e <tcp_process+0x7be>
      break;
 800843c:	bf00      	nop
  }
  return ERR_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3724      	adds	r7, #36	; 0x24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd90      	pop	{r4, r7, pc}
 8008448:	20008b04 	.word	0x20008b04
 800844c:	20008b18 	.word	0x20008b18
 8008450:	200000f8 	.word	0x200000f8
 8008454:	200000f0 	.word	0x200000f0
 8008458:	200000f9 	.word	0x200000f9
 800845c:	20008b08 	.word	0x20008b08

08008460 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008460:	b590      	push	{r4, r7, lr}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d106      	bne.n	800847e <tcp_oos_insert_segment+0x1e>
 8008470:	4b3b      	ldr	r3, [pc, #236]	; (8008560 <tcp_oos_insert_segment+0x100>)
 8008472:	f240 421f 	movw	r2, #1055	; 0x41f
 8008476:	493b      	ldr	r1, [pc, #236]	; (8008564 <tcp_oos_insert_segment+0x104>)
 8008478:	483b      	ldr	r0, [pc, #236]	; (8008568 <tcp_oos_insert_segment+0x108>)
 800847a:	f005 fd73 	bl	800df64 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	899b      	ldrh	r3, [r3, #12]
 8008484:	b29b      	uxth	r3, r3
 8008486:	4618      	mov	r0, r3
 8008488:	f7fb fcba 	bl	8003e00 <lwip_htons>
 800848c:	4603      	mov	r3, r0
 800848e:	b2db      	uxtb	r3, r3
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	2b00      	cmp	r3, #0
 8008496:	d028      	beq.n	80084ea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008498:	6838      	ldr	r0, [r7, #0]
 800849a:	f7fe fa65 	bl	8006968 <tcp_segs_free>
    next = NULL;
 800849e:	2300      	movs	r3, #0
 80084a0:	603b      	str	r3, [r7, #0]
 80084a2:	e056      	b.n	8008552 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	899b      	ldrh	r3, [r3, #12]
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7fb fca7 	bl	8003e00 <lwip_htons>
 80084b2:	4603      	mov	r3, r0
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	f003 0301 	and.w	r3, r3, #1
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00d      	beq.n	80084da <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	899b      	ldrh	r3, [r3, #12]
 80084c4:	b29c      	uxth	r4, r3
 80084c6:	2001      	movs	r0, #1
 80084c8:	f7fb fc9a 	bl	8003e00 <lwip_htons>
 80084cc:	4603      	mov	r3, r0
 80084ce:	461a      	mov	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	4322      	orrs	r2, r4
 80084d6:	b292      	uxth	r2, r2
 80084d8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f7fe fa54 	bl	8006992 <tcp_seg_free>
    while (next &&
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00e      	beq.n	800850e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	891b      	ldrh	r3, [r3, #8]
 80084f4:	461a      	mov	r2, r3
 80084f6:	4b1d      	ldr	r3, [pc, #116]	; (800856c <tcp_oos_insert_segment+0x10c>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	441a      	add	r2, r3
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	8909      	ldrh	r1, [r1, #8]
 8008506:	440b      	add	r3, r1
 8008508:	1ad3      	subs	r3, r2, r3
    while (next &&
 800850a:	2b00      	cmp	r3, #0
 800850c:	daca      	bge.n	80084a4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d01e      	beq.n	8008552 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	891b      	ldrh	r3, [r3, #8]
 8008518:	461a      	mov	r2, r3
 800851a:	4b14      	ldr	r3, [pc, #80]	; (800856c <tcp_oos_insert_segment+0x10c>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	441a      	add	r2, r3
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008528:	2b00      	cmp	r3, #0
 800852a:	dd12      	ble.n	8008552 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	b29a      	uxth	r2, r3
 8008534:	4b0d      	ldr	r3, [pc, #52]	; (800856c <tcp_oos_insert_segment+0x10c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	b29b      	uxth	r3, r3
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	b29a      	uxth	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	891b      	ldrh	r3, [r3, #8]
 800854a:	4619      	mov	r1, r3
 800854c:	4610      	mov	r0, r2
 800854e:	f7fc fd85 	bl	800505c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	601a      	str	r2, [r3, #0]
}
 8008558:	bf00      	nop
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	bd90      	pop	{r4, r7, pc}
 8008560:	08010648 	.word	0x08010648
 8008564:	08010908 	.word	0x08010908
 8008568:	08010694 	.word	0x08010694
 800856c:	200000ec 	.word	0x200000ec

08008570 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008570:	b5b0      	push	{r4, r5, r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800857e:	e03e      	b.n	80085fe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	4618      	mov	r0, r3
 8008590:	f7fc ff72 	bl	8005478 <pbuf_clen>
 8008594:	4603      	mov	r3, r0
 8008596:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800859e:	8a7a      	ldrh	r2, [r7, #18]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d906      	bls.n	80085b2 <tcp_free_acked_segments+0x42>
 80085a4:	4b2a      	ldr	r3, [pc, #168]	; (8008650 <tcp_free_acked_segments+0xe0>)
 80085a6:	f240 4257 	movw	r2, #1111	; 0x457
 80085aa:	492a      	ldr	r1, [pc, #168]	; (8008654 <tcp_free_acked_segments+0xe4>)
 80085ac:	482a      	ldr	r0, [pc, #168]	; (8008658 <tcp_free_acked_segments+0xe8>)
 80085ae:	f005 fcd9 	bl	800df64 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80085b8:	8a7b      	ldrh	r3, [r7, #18]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	b29a      	uxth	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	891a      	ldrh	r2, [r3, #8]
 80085c8:	4b24      	ldr	r3, [pc, #144]	; (800865c <tcp_free_acked_segments+0xec>)
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	4413      	add	r3, r2
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	4b22      	ldr	r3, [pc, #136]	; (800865c <tcp_free_acked_segments+0xec>)
 80085d2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80085d4:	6978      	ldr	r0, [r7, #20]
 80085d6:	f7fe f9dc 	bl	8006992 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00c      	beq.n	80085fe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d109      	bne.n	80085fe <tcp_free_acked_segments+0x8e>
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d106      	bne.n	80085fe <tcp_free_acked_segments+0x8e>
 80085f0:	4b17      	ldr	r3, [pc, #92]	; (8008650 <tcp_free_acked_segments+0xe0>)
 80085f2:	f240 4261 	movw	r2, #1121	; 0x461
 80085f6:	491a      	ldr	r1, [pc, #104]	; (8008660 <tcp_free_acked_segments+0xf0>)
 80085f8:	4817      	ldr	r0, [pc, #92]	; (8008658 <tcp_free_acked_segments+0xe8>)
 80085fa:	f005 fcb3 	bl	800df64 <iprintf>
  while (seg_list != NULL &&
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d020      	beq.n	8008646 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	4618      	mov	r0, r3
 800860c:	f7fb fc0d 	bl	8003e2a <lwip_htonl>
 8008610:	4604      	mov	r4, r0
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	891b      	ldrh	r3, [r3, #8]
 8008616:	461d      	mov	r5, r3
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	899b      	ldrh	r3, [r3, #12]
 800861e:	b29b      	uxth	r3, r3
 8008620:	4618      	mov	r0, r3
 8008622:	f7fb fbed 	bl	8003e00 <lwip_htons>
 8008626:	4603      	mov	r3, r0
 8008628:	b2db      	uxtb	r3, r3
 800862a:	f003 0303 	and.w	r3, r3, #3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <tcp_free_acked_segments+0xc6>
 8008632:	2301      	movs	r3, #1
 8008634:	e000      	b.n	8008638 <tcp_free_acked_segments+0xc8>
 8008636:	2300      	movs	r3, #0
 8008638:	442b      	add	r3, r5
 800863a:	18e2      	adds	r2, r4, r3
 800863c:	4b09      	ldr	r3, [pc, #36]	; (8008664 <tcp_free_acked_segments+0xf4>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008642:	2b00      	cmp	r3, #0
 8008644:	dd9c      	ble.n	8008580 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008646:	68bb      	ldr	r3, [r7, #8]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3718      	adds	r7, #24
 800864c:	46bd      	mov	sp, r7
 800864e:	bdb0      	pop	{r4, r5, r7, pc}
 8008650:	08010648 	.word	0x08010648
 8008654:	08010930 	.word	0x08010930
 8008658:	08010694 	.word	0x08010694
 800865c:	200000f4 	.word	0x200000f4
 8008660:	08010958 	.word	0x08010958
 8008664:	200000f0 	.word	0x200000f0

08008668 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008668:	b5b0      	push	{r4, r5, r7, lr}
 800866a:	b094      	sub	sp, #80	; 0x50
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d106      	bne.n	8008688 <tcp_receive+0x20>
 800867a:	4ba6      	ldr	r3, [pc, #664]	; (8008914 <tcp_receive+0x2ac>)
 800867c:	f240 427b 	movw	r2, #1147	; 0x47b
 8008680:	49a5      	ldr	r1, [pc, #660]	; (8008918 <tcp_receive+0x2b0>)
 8008682:	48a6      	ldr	r0, [pc, #664]	; (800891c <tcp_receive+0x2b4>)
 8008684:	f005 fc6e 	bl	800df64 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	7d1b      	ldrb	r3, [r3, #20]
 800868c:	2b03      	cmp	r3, #3
 800868e:	d806      	bhi.n	800869e <tcp_receive+0x36>
 8008690:	4ba0      	ldr	r3, [pc, #640]	; (8008914 <tcp_receive+0x2ac>)
 8008692:	f240 427c 	movw	r2, #1148	; 0x47c
 8008696:	49a2      	ldr	r1, [pc, #648]	; (8008920 <tcp_receive+0x2b8>)
 8008698:	48a0      	ldr	r0, [pc, #640]	; (800891c <tcp_receive+0x2b4>)
 800869a:	f005 fc63 	bl	800df64 <iprintf>

  if (flags & TCP_ACK) {
 800869e:	4ba1      	ldr	r3, [pc, #644]	; (8008924 <tcp_receive+0x2bc>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	f003 0310 	and.w	r3, r3, #16
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f000 8263 	beq.w	8008b72 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086b2:	461a      	mov	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b8:	4413      	add	r3, r2
 80086ba:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086c0:	4b99      	ldr	r3, [pc, #612]	; (8008928 <tcp_receive+0x2c0>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	db1b      	blt.n	8008702 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086ce:	4b96      	ldr	r3, [pc, #600]	; (8008928 <tcp_receive+0x2c0>)
 80086d0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d106      	bne.n	80086e4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80086da:	4b94      	ldr	r3, [pc, #592]	; (800892c <tcp_receive+0x2c4>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	db0e      	blt.n	8008702 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80086e8:	4b90      	ldr	r3, [pc, #576]	; (800892c <tcp_receive+0x2c4>)
 80086ea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d125      	bne.n	800873c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80086f0:	4b8f      	ldr	r3, [pc, #572]	; (8008930 <tcp_receive+0x2c8>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	89db      	ldrh	r3, [r3, #14]
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086fe:	429a      	cmp	r2, r3
 8008700:	d91c      	bls.n	800873c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008702:	4b8b      	ldr	r3, [pc, #556]	; (8008930 <tcp_receive+0x2c8>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	89db      	ldrh	r3, [r3, #14]
 8008708:	b29a      	uxth	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800871c:	429a      	cmp	r2, r3
 800871e:	d205      	bcs.n	800872c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800872c:	4b7e      	ldr	r3, [pc, #504]	; (8008928 <tcp_receive+0x2c0>)
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008734:	4b7d      	ldr	r3, [pc, #500]	; (800892c <tcp_receive+0x2c4>)
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800873c:	4b7b      	ldr	r3, [pc, #492]	; (800892c <tcp_receive+0x2c4>)
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	dc58      	bgt.n	80087fc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800874a:	4b7a      	ldr	r3, [pc, #488]	; (8008934 <tcp_receive+0x2cc>)
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d14b      	bne.n	80087ea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800875c:	4413      	add	r3, r2
 800875e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008760:	429a      	cmp	r2, r3
 8008762:	d142      	bne.n	80087ea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800876a:	2b00      	cmp	r3, #0
 800876c:	db3d      	blt.n	80087ea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008772:	4b6e      	ldr	r3, [pc, #440]	; (800892c <tcp_receive+0x2c4>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	429a      	cmp	r2, r3
 8008778:	d137      	bne.n	80087ea <tcp_receive+0x182>
              found_dupack = 1;
 800877a:	2301      	movs	r3, #1
 800877c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008784:	2bff      	cmp	r3, #255	; 0xff
 8008786:	d007      	beq.n	8008798 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800878e:	3301      	adds	r3, #1
 8008790:	b2da      	uxtb	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d91b      	bls.n	80087da <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087ac:	4413      	add	r3, r2
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d30a      	bcc.n	80087d0 <tcp_receive+0x168>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087c4:	4413      	add	r3, r2
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80087ce:	e004      	b.n	80087da <tcp_receive+0x172>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d902      	bls.n	80087ea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f001 fee9 	bl	800a5bc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80087ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f040 8160 	bne.w	8008ab2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087fa:	e15a      	b.n	8008ab2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80087fc:	4b4b      	ldr	r3, [pc, #300]	; (800892c <tcp_receive+0x2c4>)
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	3b01      	subs	r3, #1
 8008808:	2b00      	cmp	r3, #0
 800880a:	f2c0 814d 	blt.w	8008aa8 <tcp_receive+0x440>
 800880e:	4b47      	ldr	r3, [pc, #284]	; (800892c <tcp_receive+0x2c4>)
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	2b00      	cmp	r3, #0
 800881a:	f300 8145 	bgt.w	8008aa8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	8b5b      	ldrh	r3, [r3, #26]
 8008822:	f003 0304 	and.w	r3, r3, #4
 8008826:	2b00      	cmp	r3, #0
 8008828:	d010      	beq.n	800884c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	8b5b      	ldrh	r3, [r3, #26]
 800882e:	f023 0304 	bic.w	r3, r3, #4
 8008832:	b29a      	uxth	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800885a:	10db      	asrs	r3, r3, #3
 800885c:	b21b      	sxth	r3, r3
 800885e:	b29a      	uxth	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008866:	b29b      	uxth	r3, r3
 8008868:	4413      	add	r3, r2
 800886a:	b29b      	uxth	r3, r3
 800886c:	b21a      	sxth	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008874:	4b2d      	ldr	r3, [pc, #180]	; (800892c <tcp_receive+0x2c4>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	b29a      	uxth	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800887e:	b29b      	uxth	r3, r3
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800888c:	4b27      	ldr	r3, [pc, #156]	; (800892c <tcp_receive+0x2c4>)
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	7d1b      	ldrb	r3, [r3, #20]
 8008898:	2b03      	cmp	r3, #3
 800889a:	f240 8096 	bls.w	80089ca <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d244      	bcs.n	8008938 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	8b5b      	ldrh	r3, [r3, #26]
 80088b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <tcp_receive+0x256>
 80088ba:	2301      	movs	r3, #1
 80088bc:	e000      	b.n	80088c0 <tcp_receive+0x258>
 80088be:	2302      	movs	r3, #2
 80088c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80088c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088ce:	fb12 f303 	smulbb	r3, r2, r3
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80088d6:	4293      	cmp	r3, r2
 80088d8:	bf28      	it	cs
 80088da:	4613      	movcs	r3, r2
 80088dc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80088e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80088e6:	4413      	add	r3, r2
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d309      	bcc.n	8008908 <tcp_receive+0x2a0>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80088fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80088fc:	4413      	add	r3, r2
 80088fe:	b29a      	uxth	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008906:	e060      	b.n	80089ca <tcp_receive+0x362>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800890e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008912:	e05a      	b.n	80089ca <tcp_receive+0x362>
 8008914:	08010648 	.word	0x08010648
 8008918:	08010978 	.word	0x08010978
 800891c:	08010694 	.word	0x08010694
 8008920:	08010994 	.word	0x08010994
 8008924:	200000f8 	.word	0x200000f8
 8008928:	200000ec 	.word	0x200000ec
 800892c:	200000f0 	.word	0x200000f0
 8008930:	200000dc 	.word	0x200000dc
 8008934:	200000f6 	.word	0x200000f6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800893e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008940:	4413      	add	r3, r2
 8008942:	b29a      	uxth	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800894a:	429a      	cmp	r2, r3
 800894c:	d309      	bcc.n	8008962 <tcp_receive+0x2fa>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008954:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008956:	4413      	add	r3, r2
 8008958:	b29a      	uxth	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008960:	e004      	b.n	800896c <tcp_receive+0x304>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008968:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008978:	429a      	cmp	r2, r3
 800897a:	d326      	bcc.n	80089ca <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	b29a      	uxth	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800899c:	4413      	add	r3, r2
 800899e:	b29a      	uxth	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d30a      	bcc.n	80089c0 <tcp_receive+0x358>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089b4:	4413      	add	r3, r2
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80089be:	e004      	b.n	80089ca <tcp_receive+0x362>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089d2:	4a98      	ldr	r2, [pc, #608]	; (8008c34 <tcp_receive+0x5cc>)
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f7ff fdcb 	bl	8008570 <tcp_free_acked_segments>
 80089da:	4602      	mov	r2, r0
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e8:	4a93      	ldr	r2, [pc, #588]	; (8008c38 <tcp_receive+0x5d0>)
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7ff fdc0 	bl	8008570 <tcp_free_acked_segments>
 80089f0:	4602      	mov	r2, r0
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d104      	bne.n	8008a08 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a04:	861a      	strh	r2, [r3, #48]	; 0x30
 8008a06:	e002      	b.n	8008a0e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d103      	bne.n	8008a24 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8008a2a:	4b84      	ldr	r3, [pc, #528]	; (8008c3c <tcp_receive+0x5d4>)
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	4413      	add	r3, r2
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	8b5b      	ldrh	r3, [r3, #26]
 8008a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d035      	beq.n	8008ab0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d118      	bne.n	8008a7e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00c      	beq.n	8008a6e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fb f9e2 	bl	8003e2a <lwip_htonl>
 8008a66:	4603      	mov	r3, r0
 8008a68:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	dc20      	bgt.n	8008ab0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	8b5b      	ldrh	r3, [r3, #26]
 8008a72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008a7c:	e018      	b.n	8008ab0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fb f9cd 	bl	8003e2a <lwip_htonl>
 8008a90:	4603      	mov	r3, r0
 8008a92:	1ae3      	subs	r3, r4, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dc0b      	bgt.n	8008ab0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	8b5b      	ldrh	r3, [r3, #26]
 8008a9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008aa6:	e003      	b.n	8008ab0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f001 ff75 	bl	800a998 <tcp_send_empty_ack>
 8008aae:	e000      	b.n	8008ab2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008ab0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d05b      	beq.n	8008b72 <tcp_receive+0x50a>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008abe:	4b60      	ldr	r3, [pc, #384]	; (8008c40 <tcp_receive+0x5d8>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	da54      	bge.n	8008b72 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008ac8:	4b5e      	ldr	r3, [pc, #376]	; (8008c44 <tcp_receive+0x5dc>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008adc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008ae6:	10db      	asrs	r3, r3, #3
 8008ae8:	b21b      	sxth	r3, r3
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008b00:	4413      	add	r3, r2
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	b21a      	sxth	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008b0a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	da05      	bge.n	8008b1e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8008b12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008b16:	425b      	negs	r3, r3
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008b1e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008b28:	109b      	asrs	r3, r3, #2
 8008b2a:	b21b      	sxth	r3, r3
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008b42:	4413      	add	r3, r2
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	b21a      	sxth	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008b52:	10db      	asrs	r3, r3, #3
 8008b54:	b21b      	sxth	r3, r3
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	4413      	add	r3, r2
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	b21a      	sxth	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008b72:	4b35      	ldr	r3, [pc, #212]	; (8008c48 <tcp_receive+0x5e0>)
 8008b74:	881b      	ldrh	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f000 84e1 	beq.w	800953e <tcp_receive+0xed6>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	7d1b      	ldrb	r3, [r3, #20]
 8008b80:	2b06      	cmp	r3, #6
 8008b82:	f200 84dc 	bhi.w	800953e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b8a:	4b30      	ldr	r3, [pc, #192]	; (8008c4c <tcp_receive+0x5e4>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	3b01      	subs	r3, #1
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f2c0 808e 	blt.w	8008cb4 <tcp_receive+0x64c>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b9c:	4b2a      	ldr	r3, [pc, #168]	; (8008c48 <tcp_receive+0x5e0>)
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	4b2a      	ldr	r3, [pc, #168]	; (8008c4c <tcp_receive+0x5e4>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	440b      	add	r3, r1
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	3301      	adds	r3, #1
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f300 8081 	bgt.w	8008cb4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008bb2:	4b27      	ldr	r3, [pc, #156]	; (8008c50 <tcp_receive+0x5e8>)
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bbc:	4b23      	ldr	r3, [pc, #140]	; (8008c4c <tcp_receive+0x5e4>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008bc4:	4b22      	ldr	r3, [pc, #136]	; (8008c50 <tcp_receive+0x5e8>)
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d106      	bne.n	8008bda <tcp_receive+0x572>
 8008bcc:	4b21      	ldr	r3, [pc, #132]	; (8008c54 <tcp_receive+0x5ec>)
 8008bce:	f240 5294 	movw	r2, #1428	; 0x594
 8008bd2:	4921      	ldr	r1, [pc, #132]	; (8008c58 <tcp_receive+0x5f0>)
 8008bd4:	4821      	ldr	r0, [pc, #132]	; (8008c5c <tcp_receive+0x5f4>)
 8008bd6:	f005 f9c5 	bl	800df64 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d906      	bls.n	8008bf2 <tcp_receive+0x58a>
 8008be4:	4b1b      	ldr	r3, [pc, #108]	; (8008c54 <tcp_receive+0x5ec>)
 8008be6:	f240 5295 	movw	r2, #1429	; 0x595
 8008bea:	491d      	ldr	r1, [pc, #116]	; (8008c60 <tcp_receive+0x5f8>)
 8008bec:	481b      	ldr	r0, [pc, #108]	; (8008c5c <tcp_receive+0x5f4>)
 8008bee:	f005 f9b9 	bl	800df64 <iprintf>
      off = (u16_t)off32;
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008bf8:	4b15      	ldr	r3, [pc, #84]	; (8008c50 <tcp_receive+0x5e8>)
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	891b      	ldrh	r3, [r3, #8]
 8008bfe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d906      	bls.n	8008c14 <tcp_receive+0x5ac>
 8008c06:	4b13      	ldr	r3, [pc, #76]	; (8008c54 <tcp_receive+0x5ec>)
 8008c08:	f240 5297 	movw	r2, #1431	; 0x597
 8008c0c:	4915      	ldr	r1, [pc, #84]	; (8008c64 <tcp_receive+0x5fc>)
 8008c0e:	4813      	ldr	r0, [pc, #76]	; (8008c5c <tcp_receive+0x5f4>)
 8008c10:	f005 f9a8 	bl	800df64 <iprintf>
      inseg.len -= off;
 8008c14:	4b0e      	ldr	r3, [pc, #56]	; (8008c50 <tcp_receive+0x5e8>)
 8008c16:	891a      	ldrh	r2, [r3, #8]
 8008c18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <tcp_receive+0x5e8>)
 8008c22:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008c24:	4b0a      	ldr	r3, [pc, #40]	; (8008c50 <tcp_receive+0x5e8>)
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	891a      	ldrh	r2, [r3, #8]
 8008c2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8008c32:	e029      	b.n	8008c88 <tcp_receive+0x620>
 8008c34:	080109b0 	.word	0x080109b0
 8008c38:	080109b8 	.word	0x080109b8
 8008c3c:	200000f4 	.word	0x200000f4
 8008c40:	200000f0 	.word	0x200000f0
 8008c44:	20008b0c 	.word	0x20008b0c
 8008c48:	200000f6 	.word	0x200000f6
 8008c4c:	200000ec 	.word	0x200000ec
 8008c50:	200000cc 	.word	0x200000cc
 8008c54:	08010648 	.word	0x08010648
 8008c58:	080109c0 	.word	0x080109c0
 8008c5c:	08010694 	.word	0x08010694
 8008c60:	080109d0 	.word	0x080109d0
 8008c64:	080109e0 	.word	0x080109e0
        off -= p->len;
 8008c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c6a:	895b      	ldrh	r3, [r3, #10]
 8008c6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008c76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c78:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008c7a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c7e:	2200      	movs	r2, #0
 8008c80:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c8a:	895b      	ldrh	r3, [r3, #10]
 8008c8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d8e9      	bhi.n	8008c68 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008c94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008c9c:	f7fc fade 	bl	800525c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	4a91      	ldr	r2, [pc, #580]	; (8008eec <tcp_receive+0x884>)
 8008ca6:	6013      	str	r3, [r2, #0]
 8008ca8:	4b91      	ldr	r3, [pc, #580]	; (8008ef0 <tcp_receive+0x888>)
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	4a8f      	ldr	r2, [pc, #572]	; (8008eec <tcp_receive+0x884>)
 8008cae:	6812      	ldr	r2, [r2, #0]
 8008cb0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008cb2:	e00d      	b.n	8008cd0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008cb4:	4b8d      	ldr	r3, [pc, #564]	; (8008eec <tcp_receive+0x884>)
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	da06      	bge.n	8008cd0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	8b5b      	ldrh	r3, [r3, #26]
 8008cc6:	f043 0302 	orr.w	r3, r3, #2
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008cd0:	4b86      	ldr	r3, [pc, #536]	; (8008eec <tcp_receive+0x884>)
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f2c0 842a 	blt.w	8009534 <tcp_receive+0xecc>
 8008ce0:	4b82      	ldr	r3, [pc, #520]	; (8008eec <tcp_receive+0x884>)
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce8:	6879      	ldr	r1, [r7, #4]
 8008cea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008cec:	440b      	add	r3, r1
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f300 841e 	bgt.w	8009534 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cfc:	4b7b      	ldr	r3, [pc, #492]	; (8008eec <tcp_receive+0x884>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	f040 829a 	bne.w	800923a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008d06:	4b7a      	ldr	r3, [pc, #488]	; (8008ef0 <tcp_receive+0x888>)
 8008d08:	891c      	ldrh	r4, [r3, #8]
 8008d0a:	4b79      	ldr	r3, [pc, #484]	; (8008ef0 <tcp_receive+0x888>)
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	899b      	ldrh	r3, [r3, #12]
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fb f874 	bl	8003e00 <lwip_htons>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	f003 0303 	and.w	r3, r3, #3
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <tcp_receive+0x6c0>
 8008d24:	2301      	movs	r3, #1
 8008d26:	e000      	b.n	8008d2a <tcp_receive+0x6c2>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4423      	add	r3, r4
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	4b71      	ldr	r3, [pc, #452]	; (8008ef4 <tcp_receive+0x88c>)
 8008d30:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008d36:	4b6f      	ldr	r3, [pc, #444]	; (8008ef4 <tcp_receive+0x88c>)
 8008d38:	881b      	ldrh	r3, [r3, #0]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d275      	bcs.n	8008e2a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008d3e:	4b6c      	ldr	r3, [pc, #432]	; (8008ef0 <tcp_receive+0x888>)
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	899b      	ldrh	r3, [r3, #12]
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fb f85a 	bl	8003e00 <lwip_htons>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d01f      	beq.n	8008d98 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008d58:	4b65      	ldr	r3, [pc, #404]	; (8008ef0 <tcp_receive+0x888>)
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	899b      	ldrh	r3, [r3, #12]
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	b21b      	sxth	r3, r3
 8008d62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008d66:	b21c      	sxth	r4, r3
 8008d68:	4b61      	ldr	r3, [pc, #388]	; (8008ef0 <tcp_receive+0x888>)
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	899b      	ldrh	r3, [r3, #12]
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fb f845 	bl	8003e00 <lwip_htons>
 8008d76:	4603      	mov	r3, r0
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fb f83c 	bl	8003e00 <lwip_htons>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	b21b      	sxth	r3, r3
 8008d8c:	4323      	orrs	r3, r4
 8008d8e:	b21a      	sxth	r2, r3
 8008d90:	4b57      	ldr	r3, [pc, #348]	; (8008ef0 <tcp_receive+0x888>)
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	b292      	uxth	r2, r2
 8008d96:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008d9c:	4b54      	ldr	r3, [pc, #336]	; (8008ef0 <tcp_receive+0x888>)
 8008d9e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008da0:	4b53      	ldr	r3, [pc, #332]	; (8008ef0 <tcp_receive+0x888>)
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	899b      	ldrh	r3, [r3, #12]
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7fb f829 	bl	8003e00 <lwip_htons>
 8008dae:	4603      	mov	r3, r0
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	f003 0302 	and.w	r3, r3, #2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d005      	beq.n	8008dc6 <tcp_receive+0x75e>
            inseg.len -= 1;
 8008dba:	4b4d      	ldr	r3, [pc, #308]	; (8008ef0 <tcp_receive+0x888>)
 8008dbc:	891b      	ldrh	r3, [r3, #8]
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	4b4b      	ldr	r3, [pc, #300]	; (8008ef0 <tcp_receive+0x888>)
 8008dc4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008dc6:	4b4a      	ldr	r3, [pc, #296]	; (8008ef0 <tcp_receive+0x888>)
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	4a49      	ldr	r2, [pc, #292]	; (8008ef0 <tcp_receive+0x888>)
 8008dcc:	8912      	ldrh	r2, [r2, #8]
 8008dce:	4611      	mov	r1, r2
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7fc f943 	bl	800505c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008dd6:	4b46      	ldr	r3, [pc, #280]	; (8008ef0 <tcp_receive+0x888>)
 8008dd8:	891c      	ldrh	r4, [r3, #8]
 8008dda:	4b45      	ldr	r3, [pc, #276]	; (8008ef0 <tcp_receive+0x888>)
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	899b      	ldrh	r3, [r3, #12]
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fb f80c 	bl	8003e00 <lwip_htons>
 8008de8:	4603      	mov	r3, r0
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	f003 0303 	and.w	r3, r3, #3
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <tcp_receive+0x790>
 8008df4:	2301      	movs	r3, #1
 8008df6:	e000      	b.n	8008dfa <tcp_receive+0x792>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	4423      	add	r3, r4
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	4b3d      	ldr	r3, [pc, #244]	; (8008ef4 <tcp_receive+0x88c>)
 8008e00:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008e02:	4b3c      	ldr	r3, [pc, #240]	; (8008ef4 <tcp_receive+0x88c>)
 8008e04:	881b      	ldrh	r3, [r3, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	4b38      	ldr	r3, [pc, #224]	; (8008eec <tcp_receive+0x884>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	441a      	add	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e12:	6879      	ldr	r1, [r7, #4]
 8008e14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008e16:	440b      	add	r3, r1
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d006      	beq.n	8008e2a <tcp_receive+0x7c2>
 8008e1c:	4b36      	ldr	r3, [pc, #216]	; (8008ef8 <tcp_receive+0x890>)
 8008e1e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8008e22:	4936      	ldr	r1, [pc, #216]	; (8008efc <tcp_receive+0x894>)
 8008e24:	4836      	ldr	r0, [pc, #216]	; (8008f00 <tcp_receive+0x898>)
 8008e26:	f005 f89d 	bl	800df64 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f000 80e7 	beq.w	8009002 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008e34:	4b2e      	ldr	r3, [pc, #184]	; (8008ef0 <tcp_receive+0x888>)
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	899b      	ldrh	r3, [r3, #12]
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7fa ffdf 	bl	8003e00 <lwip_htons>
 8008e42:	4603      	mov	r3, r0
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d010      	beq.n	8008e70 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008e4e:	e00a      	b.n	8008e66 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e54:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f7fd fd96 	bl	8006992 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1f0      	bne.n	8008e50 <tcp_receive+0x7e8>
 8008e6e:	e0c8      	b.n	8009002 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e74:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008e76:	e052      	b.n	8008f1e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	899b      	ldrh	r3, [r3, #12]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7fa ffbd 	bl	8003e00 <lwip_htons>
 8008e86:	4603      	mov	r3, r0
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d03d      	beq.n	8008f0e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008e92:	4b17      	ldr	r3, [pc, #92]	; (8008ef0 <tcp_receive+0x888>)
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	899b      	ldrh	r3, [r3, #12]
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7fa ffb0 	bl	8003e00 <lwip_htons>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d130      	bne.n	8008f0e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008eac:	4b10      	ldr	r3, [pc, #64]	; (8008ef0 <tcp_receive+0x888>)
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	899b      	ldrh	r3, [r3, #12]
 8008eb2:	b29c      	uxth	r4, r3
 8008eb4:	2001      	movs	r0, #1
 8008eb6:	f7fa ffa3 	bl	8003e00 <lwip_htons>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	4b0c      	ldr	r3, [pc, #48]	; (8008ef0 <tcp_receive+0x888>)
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	4322      	orrs	r2, r4
 8008ec4:	b292      	uxth	r2, r2
 8008ec6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008ec8:	4b09      	ldr	r3, [pc, #36]	; (8008ef0 <tcp_receive+0x888>)
 8008eca:	891c      	ldrh	r4, [r3, #8]
 8008ecc:	4b08      	ldr	r3, [pc, #32]	; (8008ef0 <tcp_receive+0x888>)
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	899b      	ldrh	r3, [r3, #12]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fa ff93 	bl	8003e00 <lwip_htons>
 8008eda:	4603      	mov	r3, r0
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	f003 0303 	and.w	r3, r3, #3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00e      	beq.n	8008f04 <tcp_receive+0x89c>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e00d      	b.n	8008f06 <tcp_receive+0x89e>
 8008eea:	bf00      	nop
 8008eec:	200000ec 	.word	0x200000ec
 8008ef0:	200000cc 	.word	0x200000cc
 8008ef4:	200000f6 	.word	0x200000f6
 8008ef8:	08010648 	.word	0x08010648
 8008efc:	080109f0 	.word	0x080109f0
 8008f00:	08010694 	.word	0x08010694
 8008f04:	2300      	movs	r3, #0
 8008f06:	4423      	add	r3, r4
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	4b98      	ldr	r3, [pc, #608]	; (800916c <tcp_receive+0xb04>)
 8008f0c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8008f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f10:	613b      	str	r3, [r7, #16]
              next = next->next;
 8008f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8008f18:	6938      	ldr	r0, [r7, #16]
 8008f1a:	f7fd fd3a 	bl	8006992 <tcp_seg_free>
            while (next &&
 8008f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00e      	beq.n	8008f42 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008f24:	4b91      	ldr	r3, [pc, #580]	; (800916c <tcp_receive+0xb04>)
 8008f26:	881b      	ldrh	r3, [r3, #0]
 8008f28:	461a      	mov	r2, r3
 8008f2a:	4b91      	ldr	r3, [pc, #580]	; (8009170 <tcp_receive+0xb08>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	441a      	add	r2, r3
 8008f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f38:	8909      	ldrh	r1, [r1, #8]
 8008f3a:	440b      	add	r3, r1
 8008f3c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	da9a      	bge.n	8008e78 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d059      	beq.n	8008ffc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8008f48:	4b88      	ldr	r3, [pc, #544]	; (800916c <tcp_receive+0xb04>)
 8008f4a:	881b      	ldrh	r3, [r3, #0]
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	4b88      	ldr	r3, [pc, #544]	; (8009170 <tcp_receive+0xb08>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	441a      	add	r2, r3
 8008f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	dd4d      	ble.n	8008ffc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	4b81      	ldr	r3, [pc, #516]	; (8009170 <tcp_receive+0xb08>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	4b80      	ldr	r3, [pc, #512]	; (8009174 <tcp_receive+0xb0c>)
 8008f74:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008f76:	4b7f      	ldr	r3, [pc, #508]	; (8009174 <tcp_receive+0xb0c>)
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	899b      	ldrh	r3, [r3, #12]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fa ff3e 	bl	8003e00 <lwip_htons>
 8008f84:	4603      	mov	r3, r0
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	f003 0302 	and.w	r3, r3, #2
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d005      	beq.n	8008f9c <tcp_receive+0x934>
                inseg.len -= 1;
 8008f90:	4b78      	ldr	r3, [pc, #480]	; (8009174 <tcp_receive+0xb0c>)
 8008f92:	891b      	ldrh	r3, [r3, #8]
 8008f94:	3b01      	subs	r3, #1
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	4b76      	ldr	r3, [pc, #472]	; (8009174 <tcp_receive+0xb0c>)
 8008f9a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008f9c:	4b75      	ldr	r3, [pc, #468]	; (8009174 <tcp_receive+0xb0c>)
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	4a74      	ldr	r2, [pc, #464]	; (8009174 <tcp_receive+0xb0c>)
 8008fa2:	8912      	ldrh	r2, [r2, #8]
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fc f858 	bl	800505c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008fac:	4b71      	ldr	r3, [pc, #452]	; (8009174 <tcp_receive+0xb0c>)
 8008fae:	891c      	ldrh	r4, [r3, #8]
 8008fb0:	4b70      	ldr	r3, [pc, #448]	; (8009174 <tcp_receive+0xb0c>)
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	899b      	ldrh	r3, [r3, #12]
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fa ff21 	bl	8003e00 <lwip_htons>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	f003 0303 	and.w	r3, r3, #3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <tcp_receive+0x966>
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e000      	b.n	8008fd0 <tcp_receive+0x968>
 8008fce:	2300      	movs	r3, #0
 8008fd0:	4423      	add	r3, r4
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	4b65      	ldr	r3, [pc, #404]	; (800916c <tcp_receive+0xb04>)
 8008fd6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008fd8:	4b64      	ldr	r3, [pc, #400]	; (800916c <tcp_receive+0xb04>)
 8008fda:	881b      	ldrh	r3, [r3, #0]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	4b64      	ldr	r3, [pc, #400]	; (8009170 <tcp_receive+0xb08>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	441a      	add	r2, r3
 8008fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d006      	beq.n	8008ffc <tcp_receive+0x994>
 8008fee:	4b62      	ldr	r3, [pc, #392]	; (8009178 <tcp_receive+0xb10>)
 8008ff0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8008ff4:	4961      	ldr	r1, [pc, #388]	; (800917c <tcp_receive+0xb14>)
 8008ff6:	4862      	ldr	r0, [pc, #392]	; (8009180 <tcp_receive+0xb18>)
 8008ff8:	f004 ffb4 	bl	800df64 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009000:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009002:	4b5a      	ldr	r3, [pc, #360]	; (800916c <tcp_receive+0xb04>)
 8009004:	881b      	ldrh	r3, [r3, #0]
 8009006:	461a      	mov	r2, r3
 8009008:	4b59      	ldr	r3, [pc, #356]	; (8009170 <tcp_receive+0xb08>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	441a      	add	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009016:	4b55      	ldr	r3, [pc, #340]	; (800916c <tcp_receive+0xb04>)
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	429a      	cmp	r2, r3
 800901c:	d206      	bcs.n	800902c <tcp_receive+0x9c4>
 800901e:	4b56      	ldr	r3, [pc, #344]	; (8009178 <tcp_receive+0xb10>)
 8009020:	f240 6207 	movw	r2, #1543	; 0x607
 8009024:	4957      	ldr	r1, [pc, #348]	; (8009184 <tcp_receive+0xb1c>)
 8009026:	4856      	ldr	r0, [pc, #344]	; (8009180 <tcp_receive+0xb18>)
 8009028:	f004 ff9c 	bl	800df64 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009030:	4b4e      	ldr	r3, [pc, #312]	; (800916c <tcp_receive+0xb04>)
 8009032:	881b      	ldrh	r3, [r3, #0]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	b29a      	uxth	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f7fc ffc9 	bl	8005fd4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009042:	4b4c      	ldr	r3, [pc, #304]	; (8009174 <tcp_receive+0xb0c>)
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	891b      	ldrh	r3, [r3, #8]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d006      	beq.n	800905a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800904c:	4b49      	ldr	r3, [pc, #292]	; (8009174 <tcp_receive+0xb0c>)
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	4a4d      	ldr	r2, [pc, #308]	; (8009188 <tcp_receive+0xb20>)
 8009052:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009054:	4b47      	ldr	r3, [pc, #284]	; (8009174 <tcp_receive+0xb0c>)
 8009056:	2200      	movs	r2, #0
 8009058:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800905a:	4b46      	ldr	r3, [pc, #280]	; (8009174 <tcp_receive+0xb0c>)
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	899b      	ldrh	r3, [r3, #12]
 8009060:	b29b      	uxth	r3, r3
 8009062:	4618      	mov	r0, r3
 8009064:	f7fa fecc 	bl	8003e00 <lwip_htons>
 8009068:	4603      	mov	r3, r0
 800906a:	b2db      	uxtb	r3, r3
 800906c:	f003 0301 	and.w	r3, r3, #1
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 80b8 	beq.w	80091e6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009076:	4b45      	ldr	r3, [pc, #276]	; (800918c <tcp_receive+0xb24>)
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	f043 0320 	orr.w	r3, r3, #32
 800907e:	b2da      	uxtb	r2, r3
 8009080:	4b42      	ldr	r3, [pc, #264]	; (800918c <tcp_receive+0xb24>)
 8009082:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009084:	e0af      	b.n	80091e6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800908a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	4a36      	ldr	r2, [pc, #216]	; (8009170 <tcp_receive+0xb08>)
 8009096:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	891b      	ldrh	r3, [r3, #8]
 800909c:	461c      	mov	r4, r3
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	899b      	ldrh	r3, [r3, #12]
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fa feaa 	bl	8003e00 <lwip_htons>
 80090ac:	4603      	mov	r3, r0
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	f003 0303 	and.w	r3, r3, #3
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <tcp_receive+0xa54>
 80090b8:	2301      	movs	r3, #1
 80090ba:	e000      	b.n	80090be <tcp_receive+0xa56>
 80090bc:	2300      	movs	r3, #0
 80090be:	191a      	adds	r2, r3, r4
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c4:	441a      	add	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ce:	461c      	mov	r4, r3
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	891b      	ldrh	r3, [r3, #8]
 80090d4:	461d      	mov	r5, r3
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	899b      	ldrh	r3, [r3, #12]
 80090dc:	b29b      	uxth	r3, r3
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fa fe8e 	bl	8003e00 <lwip_htons>
 80090e4:	4603      	mov	r3, r0
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	f003 0303 	and.w	r3, r3, #3
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <tcp_receive+0xa8c>
 80090f0:	2301      	movs	r3, #1
 80090f2:	e000      	b.n	80090f6 <tcp_receive+0xa8e>
 80090f4:	2300      	movs	r3, #0
 80090f6:	442b      	add	r3, r5
 80090f8:	429c      	cmp	r4, r3
 80090fa:	d206      	bcs.n	800910a <tcp_receive+0xaa2>
 80090fc:	4b1e      	ldr	r3, [pc, #120]	; (8009178 <tcp_receive+0xb10>)
 80090fe:	f240 622b 	movw	r2, #1579	; 0x62b
 8009102:	4923      	ldr	r1, [pc, #140]	; (8009190 <tcp_receive+0xb28>)
 8009104:	481e      	ldr	r0, [pc, #120]	; (8009180 <tcp_receive+0xb18>)
 8009106:	f004 ff2d 	bl	800df64 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	891b      	ldrh	r3, [r3, #8]
 800910e:	461c      	mov	r4, r3
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	899b      	ldrh	r3, [r3, #12]
 8009116:	b29b      	uxth	r3, r3
 8009118:	4618      	mov	r0, r3
 800911a:	f7fa fe71 	bl	8003e00 <lwip_htons>
 800911e:	4603      	mov	r3, r0
 8009120:	b2db      	uxtb	r3, r3
 8009122:	f003 0303 	and.w	r3, r3, #3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <tcp_receive+0xac6>
 800912a:	2301      	movs	r3, #1
 800912c:	e000      	b.n	8009130 <tcp_receive+0xac8>
 800912e:	2300      	movs	r3, #0
 8009130:	1919      	adds	r1, r3, r4
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009136:	b28b      	uxth	r3, r1
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	b29a      	uxth	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7fc ff47 	bl	8005fd4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	891b      	ldrh	r3, [r3, #8]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d028      	beq.n	80091a2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009150:	4b0d      	ldr	r3, [pc, #52]	; (8009188 <tcp_receive+0xb20>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d01d      	beq.n	8009194 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8009158:	4b0b      	ldr	r3, [pc, #44]	; (8009188 <tcp_receive+0xb20>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	4619      	mov	r1, r3
 8009162:	4610      	mov	r0, r2
 8009164:	f7fc f9c2 	bl	80054ec <pbuf_cat>
 8009168:	e018      	b.n	800919c <tcp_receive+0xb34>
 800916a:	bf00      	nop
 800916c:	200000f6 	.word	0x200000f6
 8009170:	200000ec 	.word	0x200000ec
 8009174:	200000cc 	.word	0x200000cc
 8009178:	08010648 	.word	0x08010648
 800917c:	08010a28 	.word	0x08010a28
 8009180:	08010694 	.word	0x08010694
 8009184:	08010a64 	.word	0x08010a64
 8009188:	200000fc 	.word	0x200000fc
 800918c:	200000f9 	.word	0x200000f9
 8009190:	08010a84 	.word	0x08010a84
            } else {
              recv_data = cseg->p;
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	4a70      	ldr	r2, [pc, #448]	; (800935c <tcp_receive+0xcf4>)
 800919a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	2200      	movs	r2, #0
 80091a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	899b      	ldrh	r3, [r3, #12]
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fa fe28 	bl	8003e00 <lwip_htons>
 80091b0:	4603      	mov	r3, r0
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f003 0301 	and.w	r3, r3, #1
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00d      	beq.n	80091d8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80091bc:	4b68      	ldr	r3, [pc, #416]	; (8009360 <tcp_receive+0xcf8>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	f043 0320 	orr.w	r3, r3, #32
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	4b66      	ldr	r3, [pc, #408]	; (8009360 <tcp_receive+0xcf8>)
 80091c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	7d1b      	ldrb	r3, [r3, #20]
 80091ce:	2b04      	cmp	r3, #4
 80091d0:	d102      	bne.n	80091d8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2207      	movs	r2, #7
 80091d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80091e0:	68b8      	ldr	r0, [r7, #8]
 80091e2:	f7fd fbd6 	bl	8006992 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d008      	beq.n	8009200 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	685a      	ldr	r2, [r3, #4]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80091fa:	429a      	cmp	r2, r3
 80091fc:	f43f af43 	beq.w	8009086 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	8b5b      	ldrh	r3, [r3, #26]
 8009204:	f003 0301 	and.w	r3, r3, #1
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00e      	beq.n	800922a <tcp_receive+0xbc2>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	8b5b      	ldrh	r3, [r3, #26]
 8009210:	f023 0301 	bic.w	r3, r3, #1
 8009214:	b29a      	uxth	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	835a      	strh	r2, [r3, #26]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	8b5b      	ldrh	r3, [r3, #26]
 800921e:	f043 0302 	orr.w	r3, r3, #2
 8009222:	b29a      	uxth	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009228:	e188      	b.n	800953c <tcp_receive+0xed4>
        tcp_ack(pcb);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	8b5b      	ldrh	r3, [r3, #26]
 800922e:	f043 0301 	orr.w	r3, r3, #1
 8009232:	b29a      	uxth	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009238:	e180      	b.n	800953c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800923e:	2b00      	cmp	r3, #0
 8009240:	d106      	bne.n	8009250 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009242:	4848      	ldr	r0, [pc, #288]	; (8009364 <tcp_receive+0xcfc>)
 8009244:	f7fd fbbe 	bl	80069c4 <tcp_seg_copy>
 8009248:	4602      	mov	r2, r0
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	675a      	str	r2, [r3, #116]	; 0x74
 800924e:	e16d      	b.n	800952c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009250:	2300      	movs	r3, #0
 8009252:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009258:	63bb      	str	r3, [r7, #56]	; 0x38
 800925a:	e157      	b.n	800950c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800925c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	685a      	ldr	r2, [r3, #4]
 8009262:	4b41      	ldr	r3, [pc, #260]	; (8009368 <tcp_receive+0xd00>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	429a      	cmp	r2, r3
 8009268:	d11d      	bne.n	80092a6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800926a:	4b3e      	ldr	r3, [pc, #248]	; (8009364 <tcp_receive+0xcfc>)
 800926c:	891a      	ldrh	r2, [r3, #8]
 800926e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009270:	891b      	ldrh	r3, [r3, #8]
 8009272:	429a      	cmp	r2, r3
 8009274:	f240 814f 	bls.w	8009516 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009278:	483a      	ldr	r0, [pc, #232]	; (8009364 <tcp_receive+0xcfc>)
 800927a:	f7fd fba3 	bl	80069c4 <tcp_seg_copy>
 800927e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	2b00      	cmp	r3, #0
 8009284:	f000 8149 	beq.w	800951a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8009288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928a:	2b00      	cmp	r3, #0
 800928c:	d003      	beq.n	8009296 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800928e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	e002      	b.n	800929c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	697a      	ldr	r2, [r7, #20]
 800929a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800929c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800929e:	6978      	ldr	r0, [r7, #20]
 80092a0:	f7ff f8de 	bl	8008460 <tcp_oos_insert_segment>
                }
                break;
 80092a4:	e139      	b.n	800951a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80092a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d117      	bne.n	80092dc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80092ac:	4b2e      	ldr	r3, [pc, #184]	; (8009368 <tcp_receive+0xd00>)
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	da57      	bge.n	800936c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80092bc:	4829      	ldr	r0, [pc, #164]	; (8009364 <tcp_receive+0xcfc>)
 80092be:	f7fd fb81 	bl	80069c4 <tcp_seg_copy>
 80092c2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f000 8129 	beq.w	800951e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	69ba      	ldr	r2, [r7, #24]
 80092d0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80092d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092d4:	69b8      	ldr	r0, [r7, #24]
 80092d6:	f7ff f8c3 	bl	8008460 <tcp_oos_insert_segment>
                  }
                  break;
 80092da:	e120      	b.n	800951e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80092dc:	4b22      	ldr	r3, [pc, #136]	; (8009368 <tcp_receive+0xd00>)
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	3b01      	subs	r3, #1
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	db3e      	blt.n	800936c <tcp_receive+0xd04>
 80092ee:	4b1e      	ldr	r3, [pc, #120]	; (8009368 <tcp_receive+0xd00>)
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	3301      	adds	r3, #1
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	dc35      	bgt.n	800936c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009300:	4818      	ldr	r0, [pc, #96]	; (8009364 <tcp_receive+0xcfc>)
 8009302:	f7fd fb5f 	bl	80069c4 <tcp_seg_copy>
 8009306:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 8109 	beq.w	8009522 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009318:	8912      	ldrh	r2, [r2, #8]
 800931a:	441a      	add	r2, r3
 800931c:	4b12      	ldr	r3, [pc, #72]	; (8009368 <tcp_receive+0xd00>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	dd12      	ble.n	800934c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009326:	4b10      	ldr	r3, [pc, #64]	; (8009368 <tcp_receive+0xd00>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	b29a      	uxth	r2, r3
 800932c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	b29b      	uxth	r3, r3
 8009334:	1ad3      	subs	r3, r2, r3
 8009336:	b29a      	uxth	r2, r3
 8009338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800933a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800933c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009342:	891b      	ldrh	r3, [r3, #8]
 8009344:	4619      	mov	r1, r3
 8009346:	4610      	mov	r0, r2
 8009348:	f7fb fe88 	bl	800505c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800934c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934e:	69fa      	ldr	r2, [r7, #28]
 8009350:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009352:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009354:	69f8      	ldr	r0, [r7, #28]
 8009356:	f7ff f883 	bl	8008460 <tcp_oos_insert_segment>
                  }
                  break;
 800935a:	e0e2      	b.n	8009522 <tcp_receive+0xeba>
 800935c:	200000fc 	.word	0x200000fc
 8009360:	200000f9 	.word	0x200000f9
 8009364:	200000cc 	.word	0x200000cc
 8009368:	200000ec 	.word	0x200000ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800936c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	f040 80c6 	bne.w	8009506 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800937a:	4b80      	ldr	r3, [pc, #512]	; (800957c <tcp_receive+0xf14>)
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009386:	2b00      	cmp	r3, #0
 8009388:	f340 80bd 	ble.w	8009506 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	899b      	ldrh	r3, [r3, #12]
 8009392:	b29b      	uxth	r3, r3
 8009394:	4618      	mov	r0, r3
 8009396:	f7fa fd33 	bl	8003e00 <lwip_htons>
 800939a:	4603      	mov	r3, r0
 800939c:	b2db      	uxtb	r3, r3
 800939e:	f003 0301 	and.w	r3, r3, #1
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f040 80bf 	bne.w	8009526 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80093a8:	4875      	ldr	r0, [pc, #468]	; (8009580 <tcp_receive+0xf18>)
 80093aa:	f7fd fb0b 	bl	80069c4 <tcp_seg_copy>
 80093ae:	4602      	mov	r2, r0
 80093b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80093b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 80b6 	beq.w	800952a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80093be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093c6:	8912      	ldrh	r2, [r2, #8]
 80093c8:	441a      	add	r2, r3
 80093ca:	4b6c      	ldr	r3, [pc, #432]	; (800957c <tcp_receive+0xf14>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	dd12      	ble.n	80093fa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80093d4:	4b69      	ldr	r3, [pc, #420]	; (800957c <tcp_receive+0xf14>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	b29a      	uxth	r2, r3
 80093da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80093ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f0:	891b      	ldrh	r3, [r3, #8]
 80093f2:	4619      	mov	r1, r3
 80093f4:	4610      	mov	r0, r2
 80093f6:	f7fb fe31 	bl	800505c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80093fa:	4b62      	ldr	r3, [pc, #392]	; (8009584 <tcp_receive+0xf1c>)
 80093fc:	881b      	ldrh	r3, [r3, #0]
 80093fe:	461a      	mov	r2, r3
 8009400:	4b5e      	ldr	r3, [pc, #376]	; (800957c <tcp_receive+0xf14>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	441a      	add	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800940e:	440b      	add	r3, r1
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	2b00      	cmp	r3, #0
 8009414:	f340 8089 	ble.w	800952a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	899b      	ldrh	r3, [r3, #12]
 8009420:	b29b      	uxth	r3, r3
 8009422:	4618      	mov	r0, r3
 8009424:	f7fa fcec 	bl	8003e00 <lwip_htons>
 8009428:	4603      	mov	r3, r0
 800942a:	b2db      	uxtb	r3, r3
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	2b00      	cmp	r3, #0
 8009432:	d022      	beq.n	800947a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	899b      	ldrh	r3, [r3, #12]
 800943c:	b29b      	uxth	r3, r3
 800943e:	b21b      	sxth	r3, r3
 8009440:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009444:	b21c      	sxth	r4, r3
 8009446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	899b      	ldrh	r3, [r3, #12]
 800944e:	b29b      	uxth	r3, r3
 8009450:	4618      	mov	r0, r3
 8009452:	f7fa fcd5 	bl	8003e00 <lwip_htons>
 8009456:	4603      	mov	r3, r0
 8009458:	b2db      	uxtb	r3, r3
 800945a:	b29b      	uxth	r3, r3
 800945c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009460:	b29b      	uxth	r3, r3
 8009462:	4618      	mov	r0, r3
 8009464:	f7fa fccc 	bl	8003e00 <lwip_htons>
 8009468:	4603      	mov	r3, r0
 800946a:	b21b      	sxth	r3, r3
 800946c:	4323      	orrs	r3, r4
 800946e:	b21a      	sxth	r2, r3
 8009470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	b292      	uxth	r2, r2
 8009478:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947e:	b29a      	uxth	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009484:	4413      	add	r3, r2
 8009486:	b299      	uxth	r1, r3
 8009488:	4b3c      	ldr	r3, [pc, #240]	; (800957c <tcp_receive+0xf14>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	b29a      	uxth	r2, r3
 800948e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	1a8a      	subs	r2, r1, r2
 8009494:	b292      	uxth	r2, r2
 8009496:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	685a      	ldr	r2, [r3, #4]
 800949e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	891b      	ldrh	r3, [r3, #8]
 80094a4:	4619      	mov	r1, r3
 80094a6:	4610      	mov	r0, r2
 80094a8:	f7fb fdd8 	bl	800505c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80094ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	891c      	ldrh	r4, [r3, #8]
 80094b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	899b      	ldrh	r3, [r3, #12]
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fa fc9f 	bl	8003e00 <lwip_htons>
 80094c2:	4603      	mov	r3, r0
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	f003 0303 	and.w	r3, r3, #3
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <tcp_receive+0xe6a>
 80094ce:	2301      	movs	r3, #1
 80094d0:	e000      	b.n	80094d4 <tcp_receive+0xe6c>
 80094d2:	2300      	movs	r3, #0
 80094d4:	4423      	add	r3, r4
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	4b2a      	ldr	r3, [pc, #168]	; (8009584 <tcp_receive+0xf1c>)
 80094da:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80094dc:	4b29      	ldr	r3, [pc, #164]	; (8009584 <tcp_receive+0xf1c>)
 80094de:	881b      	ldrh	r3, [r3, #0]
 80094e0:	461a      	mov	r2, r3
 80094e2:	4b26      	ldr	r3, [pc, #152]	; (800957c <tcp_receive+0xf14>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	441a      	add	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ec:	6879      	ldr	r1, [r7, #4]
 80094ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80094f0:	440b      	add	r3, r1
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d019      	beq.n	800952a <tcp_receive+0xec2>
 80094f6:	4b24      	ldr	r3, [pc, #144]	; (8009588 <tcp_receive+0xf20>)
 80094f8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80094fc:	4923      	ldr	r1, [pc, #140]	; (800958c <tcp_receive+0xf24>)
 80094fe:	4824      	ldr	r0, [pc, #144]	; (8009590 <tcp_receive+0xf28>)
 8009500:	f004 fd30 	bl	800df64 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009504:	e011      	b.n	800952a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	63bb      	str	r3, [r7, #56]	; 0x38
 800950c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950e:	2b00      	cmp	r3, #0
 8009510:	f47f aea4 	bne.w	800925c <tcp_receive+0xbf4>
 8009514:	e00a      	b.n	800952c <tcp_receive+0xec4>
                break;
 8009516:	bf00      	nop
 8009518:	e008      	b.n	800952c <tcp_receive+0xec4>
                break;
 800951a:	bf00      	nop
 800951c:	e006      	b.n	800952c <tcp_receive+0xec4>
                  break;
 800951e:	bf00      	nop
 8009520:	e004      	b.n	800952c <tcp_receive+0xec4>
                  break;
 8009522:	bf00      	nop
 8009524:	e002      	b.n	800952c <tcp_receive+0xec4>
                  break;
 8009526:	bf00      	nop
 8009528:	e000      	b.n	800952c <tcp_receive+0xec4>
                break;
 800952a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f001 fa33 	bl	800a998 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009532:	e003      	b.n	800953c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f001 fa2f 	bl	800a998 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800953a:	e01a      	b.n	8009572 <tcp_receive+0xf0a>
 800953c:	e019      	b.n	8009572 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800953e:	4b0f      	ldr	r3, [pc, #60]	; (800957c <tcp_receive+0xf14>)
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	2b00      	cmp	r3, #0
 800954a:	db0a      	blt.n	8009562 <tcp_receive+0xefa>
 800954c:	4b0b      	ldr	r3, [pc, #44]	; (800957c <tcp_receive+0xf14>)
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009554:	6879      	ldr	r1, [r7, #4]
 8009556:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009558:	440b      	add	r3, r1
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	3301      	adds	r3, #1
 800955e:	2b00      	cmp	r3, #0
 8009560:	dd07      	ble.n	8009572 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	8b5b      	ldrh	r3, [r3, #26]
 8009566:	f043 0302 	orr.w	r3, r3, #2
 800956a:	b29a      	uxth	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009570:	e7ff      	b.n	8009572 <tcp_receive+0xf0a>
 8009572:	bf00      	nop
 8009574:	3750      	adds	r7, #80	; 0x50
 8009576:	46bd      	mov	sp, r7
 8009578:	bdb0      	pop	{r4, r5, r7, pc}
 800957a:	bf00      	nop
 800957c:	200000ec 	.word	0x200000ec
 8009580:	200000cc 	.word	0x200000cc
 8009584:	200000f6 	.word	0x200000f6
 8009588:	08010648 	.word	0x08010648
 800958c:	080109f0 	.word	0x080109f0
 8009590:	08010694 	.word	0x08010694

08009594 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800959a:	4b15      	ldr	r3, [pc, #84]	; (80095f0 <tcp_get_next_optbyte+0x5c>)
 800959c:	881b      	ldrh	r3, [r3, #0]
 800959e:	1c5a      	adds	r2, r3, #1
 80095a0:	b291      	uxth	r1, r2
 80095a2:	4a13      	ldr	r2, [pc, #76]	; (80095f0 <tcp_get_next_optbyte+0x5c>)
 80095a4:	8011      	strh	r1, [r2, #0]
 80095a6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80095a8:	4b12      	ldr	r3, [pc, #72]	; (80095f4 <tcp_get_next_optbyte+0x60>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d004      	beq.n	80095ba <tcp_get_next_optbyte+0x26>
 80095b0:	4b11      	ldr	r3, [pc, #68]	; (80095f8 <tcp_get_next_optbyte+0x64>)
 80095b2:	881b      	ldrh	r3, [r3, #0]
 80095b4:	88fa      	ldrh	r2, [r7, #6]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d208      	bcs.n	80095cc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80095ba:	4b10      	ldr	r3, [pc, #64]	; (80095fc <tcp_get_next_optbyte+0x68>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	3314      	adds	r3, #20
 80095c0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80095c2:	88fb      	ldrh	r3, [r7, #6]
 80095c4:	683a      	ldr	r2, [r7, #0]
 80095c6:	4413      	add	r3, r2
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	e00b      	b.n	80095e4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80095cc:	88fb      	ldrh	r3, [r7, #6]
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	4b09      	ldr	r3, [pc, #36]	; (80095f8 <tcp_get_next_optbyte+0x64>)
 80095d2:	881b      	ldrh	r3, [r3, #0]
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	1ad3      	subs	r3, r2, r3
 80095d8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80095da:	4b06      	ldr	r3, [pc, #24]	; (80095f4 <tcp_get_next_optbyte+0x60>)
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	797b      	ldrb	r3, [r7, #5]
 80095e0:	4413      	add	r3, r2
 80095e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr
 80095f0:	200000e8 	.word	0x200000e8
 80095f4:	200000e4 	.word	0x200000e4
 80095f8:	200000e2 	.word	0x200000e2
 80095fc:	200000dc 	.word	0x200000dc

08009600 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d106      	bne.n	800961c <tcp_parseopt+0x1c>
 800960e:	4b32      	ldr	r3, [pc, #200]	; (80096d8 <tcp_parseopt+0xd8>)
 8009610:	f240 727d 	movw	r2, #1917	; 0x77d
 8009614:	4931      	ldr	r1, [pc, #196]	; (80096dc <tcp_parseopt+0xdc>)
 8009616:	4832      	ldr	r0, [pc, #200]	; (80096e0 <tcp_parseopt+0xe0>)
 8009618:	f004 fca4 	bl	800df64 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800961c:	4b31      	ldr	r3, [pc, #196]	; (80096e4 <tcp_parseopt+0xe4>)
 800961e:	881b      	ldrh	r3, [r3, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d055      	beq.n	80096d0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009624:	4b30      	ldr	r3, [pc, #192]	; (80096e8 <tcp_parseopt+0xe8>)
 8009626:	2200      	movs	r2, #0
 8009628:	801a      	strh	r2, [r3, #0]
 800962a:	e045      	b.n	80096b8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800962c:	f7ff ffb2 	bl	8009594 <tcp_get_next_optbyte>
 8009630:	4603      	mov	r3, r0
 8009632:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009634:	7bfb      	ldrb	r3, [r7, #15]
 8009636:	2b02      	cmp	r3, #2
 8009638:	d006      	beq.n	8009648 <tcp_parseopt+0x48>
 800963a:	2b02      	cmp	r3, #2
 800963c:	dc2b      	bgt.n	8009696 <tcp_parseopt+0x96>
 800963e:	2b00      	cmp	r3, #0
 8009640:	d041      	beq.n	80096c6 <tcp_parseopt+0xc6>
 8009642:	2b01      	cmp	r3, #1
 8009644:	d127      	bne.n	8009696 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8009646:	e037      	b.n	80096b8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009648:	f7ff ffa4 	bl	8009594 <tcp_get_next_optbyte>
 800964c:	4603      	mov	r3, r0
 800964e:	2b04      	cmp	r3, #4
 8009650:	d13b      	bne.n	80096ca <tcp_parseopt+0xca>
 8009652:	4b25      	ldr	r3, [pc, #148]	; (80096e8 <tcp_parseopt+0xe8>)
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	3301      	adds	r3, #1
 8009658:	4a22      	ldr	r2, [pc, #136]	; (80096e4 <tcp_parseopt+0xe4>)
 800965a:	8812      	ldrh	r2, [r2, #0]
 800965c:	4293      	cmp	r3, r2
 800965e:	da34      	bge.n	80096ca <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009660:	f7ff ff98 	bl	8009594 <tcp_get_next_optbyte>
 8009664:	4603      	mov	r3, r0
 8009666:	b29b      	uxth	r3, r3
 8009668:	021b      	lsls	r3, r3, #8
 800966a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800966c:	f7ff ff92 	bl	8009594 <tcp_get_next_optbyte>
 8009670:	4603      	mov	r3, r0
 8009672:	b29a      	uxth	r2, r3
 8009674:	89bb      	ldrh	r3, [r7, #12]
 8009676:	4313      	orrs	r3, r2
 8009678:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800967a:	89bb      	ldrh	r3, [r7, #12]
 800967c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009680:	d804      	bhi.n	800968c <tcp_parseopt+0x8c>
 8009682:	89bb      	ldrh	r3, [r7, #12]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d001      	beq.n	800968c <tcp_parseopt+0x8c>
 8009688:	89ba      	ldrh	r2, [r7, #12]
 800968a:	e001      	b.n	8009690 <tcp_parseopt+0x90>
 800968c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009694:	e010      	b.n	80096b8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009696:	f7ff ff7d 	bl	8009594 <tcp_get_next_optbyte>
 800969a:	4603      	mov	r3, r0
 800969c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800969e:	7afb      	ldrb	r3, [r7, #11]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d914      	bls.n	80096ce <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80096a4:	7afb      	ldrb	r3, [r7, #11]
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	4b0f      	ldr	r3, [pc, #60]	; (80096e8 <tcp_parseopt+0xe8>)
 80096aa:	881b      	ldrh	r3, [r3, #0]
 80096ac:	4413      	add	r3, r2
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	3b02      	subs	r3, #2
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	4b0c      	ldr	r3, [pc, #48]	; (80096e8 <tcp_parseopt+0xe8>)
 80096b6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80096b8:	4b0b      	ldr	r3, [pc, #44]	; (80096e8 <tcp_parseopt+0xe8>)
 80096ba:	881a      	ldrh	r2, [r3, #0]
 80096bc:	4b09      	ldr	r3, [pc, #36]	; (80096e4 <tcp_parseopt+0xe4>)
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d3b3      	bcc.n	800962c <tcp_parseopt+0x2c>
 80096c4:	e004      	b.n	80096d0 <tcp_parseopt+0xd0>
          return;
 80096c6:	bf00      	nop
 80096c8:	e002      	b.n	80096d0 <tcp_parseopt+0xd0>
            return;
 80096ca:	bf00      	nop
 80096cc:	e000      	b.n	80096d0 <tcp_parseopt+0xd0>
            return;
 80096ce:	bf00      	nop
      }
    }
  }
}
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	08010648 	.word	0x08010648
 80096dc:	08010aac 	.word	0x08010aac
 80096e0:	08010694 	.word	0x08010694
 80096e4:	200000e0 	.word	0x200000e0
 80096e8:	200000e8 	.word	0x200000e8

080096ec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80096ec:	b480      	push	{r7}
 80096ee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80096f0:	4b05      	ldr	r3, [pc, #20]	; (8009708 <tcp_trigger_input_pcb_close+0x1c>)
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	f043 0310 	orr.w	r3, r3, #16
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	4b03      	ldr	r3, [pc, #12]	; (8009708 <tcp_trigger_input_pcb_close+0x1c>)
 80096fc:	701a      	strb	r2, [r3, #0]
}
 80096fe:	bf00      	nop
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	200000f9 	.word	0x200000f9

0800970c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00a      	beq.n	8009734 <tcp_route+0x28>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	7a1b      	ldrb	r3, [r3, #8]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d006      	beq.n	8009734 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	7a1b      	ldrb	r3, [r3, #8]
 800972a:	4618      	mov	r0, r3
 800972c:	f7fb fabc 	bl	8004ca8 <netif_get_by_index>
 8009730:	4603      	mov	r3, r0
 8009732:	e003      	b.n	800973c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f003 f9cd 	bl	800cad4 <ip4_route>
 800973a:	4603      	mov	r3, r0
  }
}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009744:	b590      	push	{r4, r7, lr}
 8009746:	b087      	sub	sp, #28
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	603b      	str	r3, [r7, #0]
 8009750:	4613      	mov	r3, r2
 8009752:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d105      	bne.n	8009766 <tcp_create_segment+0x22>
 800975a:	4b44      	ldr	r3, [pc, #272]	; (800986c <tcp_create_segment+0x128>)
 800975c:	22a3      	movs	r2, #163	; 0xa3
 800975e:	4944      	ldr	r1, [pc, #272]	; (8009870 <tcp_create_segment+0x12c>)
 8009760:	4844      	ldr	r0, [pc, #272]	; (8009874 <tcp_create_segment+0x130>)
 8009762:	f004 fbff 	bl	800df64 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d105      	bne.n	8009778 <tcp_create_segment+0x34>
 800976c:	4b3f      	ldr	r3, [pc, #252]	; (800986c <tcp_create_segment+0x128>)
 800976e:	22a4      	movs	r2, #164	; 0xa4
 8009770:	4941      	ldr	r1, [pc, #260]	; (8009878 <tcp_create_segment+0x134>)
 8009772:	4840      	ldr	r0, [pc, #256]	; (8009874 <tcp_create_segment+0x130>)
 8009774:	f004 fbf6 	bl	800df64 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009778:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	b2db      	uxtb	r3, r3
 8009780:	f003 0304 	and.w	r3, r3, #4
 8009784:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009786:	2003      	movs	r0, #3
 8009788:	f7fa ff90 	bl	80046ac <memp_malloc>
 800978c:	6138      	str	r0, [r7, #16]
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d104      	bne.n	800979e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009794:	68b8      	ldr	r0, [r7, #8]
 8009796:	f7fb fde7 	bl	8005368 <pbuf_free>
    return NULL;
 800979a:	2300      	movs	r3, #0
 800979c:	e061      	b.n	8009862 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80097a4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	2200      	movs	r2, #0
 80097aa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	891a      	ldrh	r2, [r3, #8]
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d205      	bcs.n	80097ca <tcp_create_segment+0x86>
 80097be:	4b2b      	ldr	r3, [pc, #172]	; (800986c <tcp_create_segment+0x128>)
 80097c0:	22b0      	movs	r2, #176	; 0xb0
 80097c2:	492e      	ldr	r1, [pc, #184]	; (800987c <tcp_create_segment+0x138>)
 80097c4:	482b      	ldr	r0, [pc, #172]	; (8009874 <tcp_create_segment+0x130>)
 80097c6:	f004 fbcd 	bl	800df64 <iprintf>
  seg->len = p->tot_len - optlen;
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	891a      	ldrh	r2, [r3, #8]
 80097ce:	7dfb      	ldrb	r3, [r7, #23]
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	1ad3      	subs	r3, r2, r3
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80097da:	2114      	movs	r1, #20
 80097dc:	68b8      	ldr	r0, [r7, #8]
 80097de:	f7fb fd2d 	bl	800523c <pbuf_add_header>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d004      	beq.n	80097f2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80097e8:	6938      	ldr	r0, [r7, #16]
 80097ea:	f7fd f8d2 	bl	8006992 <tcp_seg_free>
    return NULL;
 80097ee:	2300      	movs	r3, #0
 80097f0:	e037      	b.n	8009862 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	685a      	ldr	r2, [r3, #4]
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	8ada      	ldrh	r2, [r3, #22]
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	68dc      	ldr	r4, [r3, #12]
 8009804:	4610      	mov	r0, r2
 8009806:	f7fa fafb 	bl	8003e00 <lwip_htons>
 800980a:	4603      	mov	r3, r0
 800980c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	8b1a      	ldrh	r2, [r3, #24]
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	68dc      	ldr	r4, [r3, #12]
 8009816:	4610      	mov	r0, r2
 8009818:	f7fa faf2 	bl	8003e00 <lwip_htons>
 800981c:	4603      	mov	r3, r0
 800981e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	68dc      	ldr	r4, [r3, #12]
 8009824:	6838      	ldr	r0, [r7, #0]
 8009826:	f7fa fb00 	bl	8003e2a <lwip_htonl>
 800982a:	4603      	mov	r3, r0
 800982c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800982e:	7dfb      	ldrb	r3, [r7, #23]
 8009830:	089b      	lsrs	r3, r3, #2
 8009832:	b2db      	uxtb	r3, r3
 8009834:	b29b      	uxth	r3, r3
 8009836:	3305      	adds	r3, #5
 8009838:	b29b      	uxth	r3, r3
 800983a:	031b      	lsls	r3, r3, #12
 800983c:	b29a      	uxth	r2, r3
 800983e:	79fb      	ldrb	r3, [r7, #7]
 8009840:	b29b      	uxth	r3, r3
 8009842:	4313      	orrs	r3, r2
 8009844:	b29a      	uxth	r2, r3
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	68dc      	ldr	r4, [r3, #12]
 800984a:	4610      	mov	r0, r2
 800984c:	f7fa fad8 	bl	8003e00 <lwip_htons>
 8009850:	4603      	mov	r3, r0
 8009852:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	2200      	movs	r2, #0
 800985a:	749a      	strb	r2, [r3, #18]
 800985c:	2200      	movs	r2, #0
 800985e:	74da      	strb	r2, [r3, #19]
  return seg;
 8009860:	693b      	ldr	r3, [r7, #16]
}
 8009862:	4618      	mov	r0, r3
 8009864:	371c      	adds	r7, #28
 8009866:	46bd      	mov	sp, r7
 8009868:	bd90      	pop	{r4, r7, pc}
 800986a:	bf00      	nop
 800986c:	08010ac8 	.word	0x08010ac8
 8009870:	08010afc 	.word	0x08010afc
 8009874:	08010b1c 	.word	0x08010b1c
 8009878:	08010b44 	.word	0x08010b44
 800987c:	08010b68 	.word	0x08010b68

08009880 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009880:	b590      	push	{r4, r7, lr}
 8009882:	b08b      	sub	sp, #44	; 0x2c
 8009884:	af02      	add	r7, sp, #8
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	460b      	mov	r3, r1
 800988a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800988c:	2300      	movs	r3, #0
 800988e:	61fb      	str	r3, [r7, #28]
 8009890:	2300      	movs	r3, #0
 8009892:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009894:	2300      	movs	r3, #0
 8009896:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d106      	bne.n	80098ac <tcp_split_unsent_seg+0x2c>
 800989e:	4b95      	ldr	r3, [pc, #596]	; (8009af4 <tcp_split_unsent_seg+0x274>)
 80098a0:	f240 324b 	movw	r2, #843	; 0x34b
 80098a4:	4994      	ldr	r1, [pc, #592]	; (8009af8 <tcp_split_unsent_seg+0x278>)
 80098a6:	4895      	ldr	r0, [pc, #596]	; (8009afc <tcp_split_unsent_seg+0x27c>)
 80098a8:	f004 fb5c 	bl	800df64 <iprintf>

  useg = pcb->unsent;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098b0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d102      	bne.n	80098be <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80098b8:	f04f 33ff 	mov.w	r3, #4294967295
 80098bc:	e116      	b.n	8009aec <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80098be:	887b      	ldrh	r3, [r7, #2]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d109      	bne.n	80098d8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80098c4:	4b8b      	ldr	r3, [pc, #556]	; (8009af4 <tcp_split_unsent_seg+0x274>)
 80098c6:	f240 3253 	movw	r2, #851	; 0x353
 80098ca:	498d      	ldr	r1, [pc, #564]	; (8009b00 <tcp_split_unsent_seg+0x280>)
 80098cc:	488b      	ldr	r0, [pc, #556]	; (8009afc <tcp_split_unsent_seg+0x27c>)
 80098ce:	f004 fb49 	bl	800df64 <iprintf>
    return ERR_VAL;
 80098d2:	f06f 0305 	mvn.w	r3, #5
 80098d6:	e109      	b.n	8009aec <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	891b      	ldrh	r3, [r3, #8]
 80098dc:	887a      	ldrh	r2, [r7, #2]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d301      	bcc.n	80098e6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	e102      	b.n	8009aec <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098ea:	887a      	ldrh	r2, [r7, #2]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d906      	bls.n	80098fe <tcp_split_unsent_seg+0x7e>
 80098f0:	4b80      	ldr	r3, [pc, #512]	; (8009af4 <tcp_split_unsent_seg+0x274>)
 80098f2:	f240 325b 	movw	r2, #859	; 0x35b
 80098f6:	4983      	ldr	r1, [pc, #524]	; (8009b04 <tcp_split_unsent_seg+0x284>)
 80098f8:	4880      	ldr	r0, [pc, #512]	; (8009afc <tcp_split_unsent_seg+0x27c>)
 80098fa:	f004 fb33 	bl	800df64 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	891b      	ldrh	r3, [r3, #8]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d106      	bne.n	8009914 <tcp_split_unsent_seg+0x94>
 8009906:	4b7b      	ldr	r3, [pc, #492]	; (8009af4 <tcp_split_unsent_seg+0x274>)
 8009908:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800990c:	497e      	ldr	r1, [pc, #504]	; (8009b08 <tcp_split_unsent_seg+0x288>)
 800990e:	487b      	ldr	r0, [pc, #492]	; (8009afc <tcp_split_unsent_seg+0x27c>)
 8009910:	f004 fb28 	bl	800df64 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	7a9b      	ldrb	r3, [r3, #10]
 8009918:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800991a:	7bfb      	ldrb	r3, [r7, #15]
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	b2db      	uxtb	r3, r3
 8009920:	f003 0304 	and.w	r3, r3, #4
 8009924:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	891a      	ldrh	r2, [r3, #8]
 800992a:	887b      	ldrh	r3, [r7, #2]
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009930:	7bbb      	ldrb	r3, [r7, #14]
 8009932:	b29a      	uxth	r2, r3
 8009934:	89bb      	ldrh	r3, [r7, #12]
 8009936:	4413      	add	r3, r2
 8009938:	b29b      	uxth	r3, r3
 800993a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800993e:	4619      	mov	r1, r3
 8009940:	2036      	movs	r0, #54	; 0x36
 8009942:	f7fb fa2d 	bl	8004da0 <pbuf_alloc>
 8009946:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 80b7 	beq.w	8009abe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	891a      	ldrh	r2, [r3, #8]
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	891b      	ldrh	r3, [r3, #8]
 800995a:	1ad3      	subs	r3, r2, r3
 800995c:	b29a      	uxth	r2, r3
 800995e:	887b      	ldrh	r3, [r7, #2]
 8009960:	4413      	add	r3, r2
 8009962:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	6858      	ldr	r0, [r3, #4]
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	685a      	ldr	r2, [r3, #4]
 800996c:	7bbb      	ldrb	r3, [r7, #14]
 800996e:	18d1      	adds	r1, r2, r3
 8009970:	897b      	ldrh	r3, [r7, #10]
 8009972:	89ba      	ldrh	r2, [r7, #12]
 8009974:	f7fb fef2 	bl	800575c <pbuf_copy_partial>
 8009978:	4603      	mov	r3, r0
 800997a:	461a      	mov	r2, r3
 800997c:	89bb      	ldrh	r3, [r7, #12]
 800997e:	4293      	cmp	r3, r2
 8009980:	f040 809f 	bne.w	8009ac2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	899b      	ldrh	r3, [r3, #12]
 800998a:	b29b      	uxth	r3, r3
 800998c:	4618      	mov	r0, r3
 800998e:	f7fa fa37 	bl	8003e00 <lwip_htons>
 8009992:	4603      	mov	r3, r0
 8009994:	b2db      	uxtb	r3, r3
 8009996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800999a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800999c:	2300      	movs	r3, #0
 800999e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80099a0:	7efb      	ldrb	r3, [r7, #27]
 80099a2:	f003 0308 	and.w	r3, r3, #8
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d007      	beq.n	80099ba <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80099aa:	7efb      	ldrb	r3, [r7, #27]
 80099ac:	f023 0308 	bic.w	r3, r3, #8
 80099b0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80099b2:	7ebb      	ldrb	r3, [r7, #26]
 80099b4:	f043 0308 	orr.w	r3, r3, #8
 80099b8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80099ba:	7efb      	ldrb	r3, [r7, #27]
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d007      	beq.n	80099d4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80099c4:	7efb      	ldrb	r3, [r7, #27]
 80099c6:	f023 0301 	bic.w	r3, r3, #1
 80099ca:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80099cc:	7ebb      	ldrb	r3, [r7, #26]
 80099ce:	f043 0301 	orr.w	r3, r3, #1
 80099d2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fa fa25 	bl	8003e2a <lwip_htonl>
 80099e0:	4602      	mov	r2, r0
 80099e2:	887b      	ldrh	r3, [r7, #2]
 80099e4:	18d1      	adds	r1, r2, r3
 80099e6:	7eba      	ldrb	r2, [r7, #26]
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	460b      	mov	r3, r1
 80099ee:	6939      	ldr	r1, [r7, #16]
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f7ff fea7 	bl	8009744 <tcp_create_segment>
 80099f6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d063      	beq.n	8009ac6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fb fd38 	bl	8005478 <pbuf_clen>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009a12:	1a9b      	subs	r3, r3, r2
 8009a14:	b29a      	uxth	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	6858      	ldr	r0, [r3, #4]
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	891a      	ldrh	r2, [r3, #8]
 8009a26:	89bb      	ldrh	r3, [r7, #12]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	f7fb fb15 	bl	800505c <pbuf_realloc>
  useg->len -= remainder;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	891a      	ldrh	r2, [r3, #8]
 8009a36:	89bb      	ldrh	r3, [r7, #12]
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	899b      	ldrh	r3, [r3, #12]
 8009a46:	b29c      	uxth	r4, r3
 8009a48:	7efb      	ldrb	r3, [r7, #27]
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fa f9d7 	bl	8003e00 <lwip_htons>
 8009a52:	4603      	mov	r3, r0
 8009a54:	461a      	mov	r2, r3
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	4322      	orrs	r2, r4
 8009a5c:	b292      	uxth	r2, r2
 8009a5e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7fb fd07 	bl	8005478 <pbuf_clen>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009a74:	4413      	add	r3, r2
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fb fcf8 	bl	8005478 <pbuf_clen>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009a92:	4413      	add	r3, r2
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	69fa      	ldr	r2, [r7, #28]
 8009aa8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d103      	bne.n	8009aba <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	e016      	b.n	8009aec <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009abe:	bf00      	nop
 8009ac0:	e002      	b.n	8009ac8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009ac2:	bf00      	nop
 8009ac4:	e000      	b.n	8009ac8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009ac6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d006      	beq.n	8009adc <tcp_split_unsent_seg+0x25c>
 8009ace:	4b09      	ldr	r3, [pc, #36]	; (8009af4 <tcp_split_unsent_seg+0x274>)
 8009ad0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009ad4:	490d      	ldr	r1, [pc, #52]	; (8009b0c <tcp_split_unsent_seg+0x28c>)
 8009ad6:	4809      	ldr	r0, [pc, #36]	; (8009afc <tcp_split_unsent_seg+0x27c>)
 8009ad8:	f004 fa44 	bl	800df64 <iprintf>
  if (p != NULL) {
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d002      	beq.n	8009ae8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8009ae2:	6938      	ldr	r0, [r7, #16]
 8009ae4:	f7fb fc40 	bl	8005368 <pbuf_free>
  }

  return ERR_MEM;
 8009ae8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3724      	adds	r7, #36	; 0x24
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd90      	pop	{r4, r7, pc}
 8009af4:	08010ac8 	.word	0x08010ac8
 8009af8:	08010e5c 	.word	0x08010e5c
 8009afc:	08010b1c 	.word	0x08010b1c
 8009b00:	08010e80 	.word	0x08010e80
 8009b04:	08010ea4 	.word	0x08010ea4
 8009b08:	08010eb4 	.word	0x08010eb4
 8009b0c:	08010ec4 	.word	0x08010ec4

08009b10 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009b10:	b590      	push	{r4, r7, lr}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d106      	bne.n	8009b2c <tcp_send_fin+0x1c>
 8009b1e:	4b21      	ldr	r3, [pc, #132]	; (8009ba4 <tcp_send_fin+0x94>)
 8009b20:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009b24:	4920      	ldr	r1, [pc, #128]	; (8009ba8 <tcp_send_fin+0x98>)
 8009b26:	4821      	ldr	r0, [pc, #132]	; (8009bac <tcp_send_fin+0x9c>)
 8009b28:	f004 fa1c 	bl	800df64 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d02e      	beq.n	8009b92 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b38:	60fb      	str	r3, [r7, #12]
 8009b3a:	e002      	b.n	8009b42 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1f8      	bne.n	8009b3c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	899b      	ldrh	r3, [r3, #12]
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fa f954 	bl	8003e00 <lwip_htons>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	f003 0307 	and.w	r3, r3, #7
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d116      	bne.n	8009b92 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	899b      	ldrh	r3, [r3, #12]
 8009b6a:	b29c      	uxth	r4, r3
 8009b6c:	2001      	movs	r0, #1
 8009b6e:	f7fa f947 	bl	8003e00 <lwip_htons>
 8009b72:	4603      	mov	r3, r0
 8009b74:	461a      	mov	r2, r3
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	4322      	orrs	r2, r4
 8009b7c:	b292      	uxth	r2, r2
 8009b7e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	8b5b      	ldrh	r3, [r3, #26]
 8009b84:	f043 0320 	orr.w	r3, r3, #32
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	e004      	b.n	8009b9c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009b92:	2101      	movs	r1, #1
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f80b 	bl	8009bb0 <tcp_enqueue_flags>
 8009b9a:	4603      	mov	r3, r0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3714      	adds	r7, #20
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd90      	pop	{r4, r7, pc}
 8009ba4:	08010ac8 	.word	0x08010ac8
 8009ba8:	08010ed0 	.word	0x08010ed0
 8009bac:	08010b1c 	.word	0x08010b1c

08009bb0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b08a      	sub	sp, #40	; 0x28
 8009bb4:	af02      	add	r7, sp, #8
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009bc4:	78fb      	ldrb	r3, [r7, #3]
 8009bc6:	f003 0303 	and.w	r3, r3, #3
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d106      	bne.n	8009bdc <tcp_enqueue_flags+0x2c>
 8009bce:	4b67      	ldr	r3, [pc, #412]	; (8009d6c <tcp_enqueue_flags+0x1bc>)
 8009bd0:	f240 4211 	movw	r2, #1041	; 0x411
 8009bd4:	4966      	ldr	r1, [pc, #408]	; (8009d70 <tcp_enqueue_flags+0x1c0>)
 8009bd6:	4867      	ldr	r0, [pc, #412]	; (8009d74 <tcp_enqueue_flags+0x1c4>)
 8009bd8:	f004 f9c4 	bl	800df64 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d106      	bne.n	8009bf0 <tcp_enqueue_flags+0x40>
 8009be2:	4b62      	ldr	r3, [pc, #392]	; (8009d6c <tcp_enqueue_flags+0x1bc>)
 8009be4:	f240 4213 	movw	r2, #1043	; 0x413
 8009be8:	4963      	ldr	r1, [pc, #396]	; (8009d78 <tcp_enqueue_flags+0x1c8>)
 8009bea:	4862      	ldr	r0, [pc, #392]	; (8009d74 <tcp_enqueue_flags+0x1c4>)
 8009bec:	f004 f9ba 	bl	800df64 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009bf0:	78fb      	ldrb	r3, [r7, #3]
 8009bf2:	f003 0302 	and.w	r3, r3, #2
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d001      	beq.n	8009bfe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009bfe:	7ffb      	ldrb	r3, [r7, #31]
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	f003 0304 	and.w	r3, r3, #4
 8009c08:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009c0a:	7dfb      	ldrb	r3, [r7, #23]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009c12:	4619      	mov	r1, r3
 8009c14:	2036      	movs	r0, #54	; 0x36
 8009c16:	f7fb f8c3 	bl	8004da0 <pbuf_alloc>
 8009c1a:	6138      	str	r0, [r7, #16]
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d109      	bne.n	8009c36 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	8b5b      	ldrh	r3, [r3, #26]
 8009c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009c30:	f04f 33ff 	mov.w	r3, #4294967295
 8009c34:	e095      	b.n	8009d62 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	895a      	ldrh	r2, [r3, #10]
 8009c3a:	7dfb      	ldrb	r3, [r7, #23]
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d206      	bcs.n	8009c50 <tcp_enqueue_flags+0xa0>
 8009c42:	4b4a      	ldr	r3, [pc, #296]	; (8009d6c <tcp_enqueue_flags+0x1bc>)
 8009c44:	f240 4239 	movw	r2, #1081	; 0x439
 8009c48:	494c      	ldr	r1, [pc, #304]	; (8009d7c <tcp_enqueue_flags+0x1cc>)
 8009c4a:	484a      	ldr	r0, [pc, #296]	; (8009d74 <tcp_enqueue_flags+0x1c4>)
 8009c4c:	f004 f98a 	bl	800df64 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009c54:	78fa      	ldrb	r2, [r7, #3]
 8009c56:	7ffb      	ldrb	r3, [r7, #31]
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	6939      	ldr	r1, [r7, #16]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff fd70 	bl	8009744 <tcp_create_segment>
 8009c64:	60f8      	str	r0, [r7, #12]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d109      	bne.n	8009c80 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	8b5b      	ldrh	r3, [r3, #26]
 8009c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c7e:	e070      	b.n	8009d62 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	f003 0303 	and.w	r3, r3, #3
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d006      	beq.n	8009c9a <tcp_enqueue_flags+0xea>
 8009c8c:	4b37      	ldr	r3, [pc, #220]	; (8009d6c <tcp_enqueue_flags+0x1bc>)
 8009c8e:	f240 4242 	movw	r2, #1090	; 0x442
 8009c92:	493b      	ldr	r1, [pc, #236]	; (8009d80 <tcp_enqueue_flags+0x1d0>)
 8009c94:	4837      	ldr	r0, [pc, #220]	; (8009d74 <tcp_enqueue_flags+0x1c4>)
 8009c96:	f004 f965 	bl	800df64 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	891b      	ldrh	r3, [r3, #8]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d006      	beq.n	8009cb0 <tcp_enqueue_flags+0x100>
 8009ca2:	4b32      	ldr	r3, [pc, #200]	; (8009d6c <tcp_enqueue_flags+0x1bc>)
 8009ca4:	f240 4243 	movw	r2, #1091	; 0x443
 8009ca8:	4936      	ldr	r1, [pc, #216]	; (8009d84 <tcp_enqueue_flags+0x1d4>)
 8009caa:	4832      	ldr	r0, [pc, #200]	; (8009d74 <tcp_enqueue_flags+0x1c4>)
 8009cac:	f004 f95a 	bl	800df64 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d103      	bne.n	8009cc0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	66da      	str	r2, [r3, #108]	; 0x6c
 8009cbe:	e00d      	b.n	8009cdc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cc4:	61bb      	str	r3, [r7, #24]
 8009cc6:	e002      	b.n	8009cce <tcp_enqueue_flags+0x11e>
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	61bb      	str	r3, [r7, #24]
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d1f8      	bne.n	8009cc8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009ce4:	78fb      	ldrb	r3, [r7, #3]
 8009ce6:	f003 0302 	and.w	r3, r3, #2
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d104      	bne.n	8009cf8 <tcp_enqueue_flags+0x148>
 8009cee:	78fb      	ldrb	r3, [r7, #3]
 8009cf0:	f003 0301 	and.w	r3, r3, #1
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d004      	beq.n	8009d02 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cfc:	1c5a      	adds	r2, r3, #1
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009d02:	78fb      	ldrb	r3, [r7, #3]
 8009d04:	f003 0301 	and.w	r3, r3, #1
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d006      	beq.n	8009d1a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	8b5b      	ldrh	r3, [r3, #26]
 8009d10:	f043 0320 	orr.w	r3, r3, #32
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fb fbaa 	bl	8005478 <pbuf_clen>
 8009d24:	4603      	mov	r3, r0
 8009d26:	461a      	mov	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d2e:	4413      	add	r3, r2
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d00e      	beq.n	8009d60 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10a      	bne.n	8009d60 <tcp_enqueue_flags+0x1b0>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d106      	bne.n	8009d60 <tcp_enqueue_flags+0x1b0>
 8009d52:	4b06      	ldr	r3, [pc, #24]	; (8009d6c <tcp_enqueue_flags+0x1bc>)
 8009d54:	f240 4265 	movw	r2, #1125	; 0x465
 8009d58:	490b      	ldr	r1, [pc, #44]	; (8009d88 <tcp_enqueue_flags+0x1d8>)
 8009d5a:	4806      	ldr	r0, [pc, #24]	; (8009d74 <tcp_enqueue_flags+0x1c4>)
 8009d5c:	f004 f902 	bl	800df64 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3720      	adds	r7, #32
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	08010ac8 	.word	0x08010ac8
 8009d70:	08010eec 	.word	0x08010eec
 8009d74:	08010b1c 	.word	0x08010b1c
 8009d78:	08010f44 	.word	0x08010f44
 8009d7c:	08010f64 	.word	0x08010f64
 8009d80:	08010fa0 	.word	0x08010fa0
 8009d84:	08010fb8 	.word	0x08010fb8
 8009d88:	08010fe4 	.word	0x08010fe4

08009d8c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009d8c:	b5b0      	push	{r4, r5, r7, lr}
 8009d8e:	b08a      	sub	sp, #40	; 0x28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d106      	bne.n	8009da8 <tcp_output+0x1c>
 8009d9a:	4b9e      	ldr	r3, [pc, #632]	; (800a014 <tcp_output+0x288>)
 8009d9c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8009da0:	499d      	ldr	r1, [pc, #628]	; (800a018 <tcp_output+0x28c>)
 8009da2:	489e      	ldr	r0, [pc, #632]	; (800a01c <tcp_output+0x290>)
 8009da4:	f004 f8de 	bl	800df64 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	7d1b      	ldrb	r3, [r3, #20]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d106      	bne.n	8009dbe <tcp_output+0x32>
 8009db0:	4b98      	ldr	r3, [pc, #608]	; (800a014 <tcp_output+0x288>)
 8009db2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8009db6:	499a      	ldr	r1, [pc, #616]	; (800a020 <tcp_output+0x294>)
 8009db8:	4898      	ldr	r0, [pc, #608]	; (800a01c <tcp_output+0x290>)
 8009dba:	f004 f8d3 	bl	800df64 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009dbe:	4b99      	ldr	r3, [pc, #612]	; (800a024 <tcp_output+0x298>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d101      	bne.n	8009dcc <tcp_output+0x40>
    return ERR_OK;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	e1ce      	b.n	800a16a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	bf28      	it	cs
 8009ddc:	4613      	movcs	r3, r2
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009de6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d10b      	bne.n	8009e06 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	8b5b      	ldrh	r3, [r3, #26]
 8009df2:	f003 0302 	and.w	r3, r3, #2
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 81aa 	beq.w	800a150 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fdcb 	bl	800a998 <tcp_send_empty_ack>
 8009e02:	4603      	mov	r3, r0
 8009e04:	e1b1      	b.n	800a16a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8009e06:	6879      	ldr	r1, [r7, #4]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	3304      	adds	r3, #4
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7ff fc7c 	bl	800970c <tcp_route>
 8009e14:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d102      	bne.n	8009e22 <tcp_output+0x96>
    return ERR_RTE;
 8009e1c:	f06f 0303 	mvn.w	r3, #3
 8009e20:	e1a3      	b.n	800a16a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d003      	beq.n	8009e30 <tcp_output+0xa4>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d111      	bne.n	8009e54 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d002      	beq.n	8009e3c <tcp_output+0xb0>
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	3304      	adds	r3, #4
 8009e3a:	e000      	b.n	8009e3e <tcp_output+0xb2>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d102      	bne.n	8009e4c <tcp_output+0xc0>
      return ERR_RTE;
 8009e46:	f06f 0303 	mvn.w	r3, #3
 8009e4a:	e18e      	b.n	800a16a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7f9 ffe5 	bl	8003e2a <lwip_htonl>
 8009e60:	4602      	mov	r2, r0
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e66:	1ad3      	subs	r3, r2, r3
 8009e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e6a:	8912      	ldrh	r2, [r2, #8]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	69ba      	ldr	r2, [r7, #24]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d227      	bcs.n	8009ec4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d114      	bne.n	8009eac <tcp_output+0x120>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d110      	bne.n	8009eac <tcp_output+0x120>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10b      	bne.n	8009eac <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	8b5b      	ldrh	r3, [r3, #26]
 8009eb0:	f003 0302 	and.w	r3, r3, #2
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f000 814d 	beq.w	800a154 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fd6c 	bl	800a998 <tcp_send_empty_ack>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	e152      	b.n	800a16a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ed0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009ed2:	6a3b      	ldr	r3, [r7, #32]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f000 811c 	beq.w	800a112 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8009eda:	e002      	b.n	8009ee2 <tcp_output+0x156>
 8009edc:	6a3b      	ldr	r3, [r7, #32]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	623b      	str	r3, [r7, #32]
 8009ee2:	6a3b      	ldr	r3, [r7, #32]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1f8      	bne.n	8009edc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8009eea:	e112      	b.n	800a112 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	899b      	ldrh	r3, [r3, #12]
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7f9 ff83 	bl	8003e00 <lwip_htons>
 8009efa:	4603      	mov	r3, r0
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	f003 0304 	and.w	r3, r3, #4
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d006      	beq.n	8009f14 <tcp_output+0x188>
 8009f06:	4b43      	ldr	r3, [pc, #268]	; (800a014 <tcp_output+0x288>)
 8009f08:	f240 5236 	movw	r2, #1334	; 0x536
 8009f0c:	4946      	ldr	r1, [pc, #280]	; (800a028 <tcp_output+0x29c>)
 8009f0e:	4843      	ldr	r0, [pc, #268]	; (800a01c <tcp_output+0x290>)
 8009f10:	f004 f828 	bl	800df64 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d01f      	beq.n	8009f5c <tcp_output+0x1d0>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	8b5b      	ldrh	r3, [r3, #26]
 8009f20:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d119      	bne.n	8009f5c <tcp_output+0x1d0>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00b      	beq.n	8009f48 <tcp_output+0x1bc>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d110      	bne.n	8009f5c <tcp_output+0x1d0>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f3e:	891a      	ldrh	r2, [r3, #8]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d209      	bcs.n	8009f5c <tcp_output+0x1d0>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d004      	beq.n	8009f5c <tcp_output+0x1d0>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009f58:	2b08      	cmp	r3, #8
 8009f5a:	d901      	bls.n	8009f60 <tcp_output+0x1d4>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e000      	b.n	8009f62 <tcp_output+0x1d6>
 8009f60:	2300      	movs	r3, #0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d106      	bne.n	8009f74 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	8b5b      	ldrh	r3, [r3, #26]
 8009f6a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f000 80e4 	beq.w	800a13c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	7d1b      	ldrb	r3, [r3, #20]
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d00d      	beq.n	8009f98 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	899b      	ldrh	r3, [r3, #12]
 8009f82:	b29c      	uxth	r4, r3
 8009f84:	2010      	movs	r0, #16
 8009f86:	f7f9 ff3b 	bl	8003e00 <lwip_htons>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	4322      	orrs	r2, r4
 8009f94:	b292      	uxth	r2, r2
 8009f96:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8009f98:	697a      	ldr	r2, [r7, #20]
 8009f9a:	6879      	ldr	r1, [r7, #4]
 8009f9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f9e:	f000 f909 	bl	800a1b4 <tcp_output_segment>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d009      	beq.n	8009fc2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	8b5b      	ldrh	r3, [r3, #26]
 8009fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	835a      	strh	r2, [r3, #26]
      return err;
 8009fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fc0:	e0d3      	b.n	800a16a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	7d1b      	ldrb	r3, [r3, #20]
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d006      	beq.n	8009fe0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	8b5b      	ldrh	r3, [r3, #26]
 8009fd6:	f023 0303 	bic.w	r3, r3, #3
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7f9 ff1f 	bl	8003e2a <lwip_htonl>
 8009fec:	4604      	mov	r4, r0
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	891b      	ldrh	r3, [r3, #8]
 8009ff2:	461d      	mov	r5, r3
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	899b      	ldrh	r3, [r3, #12]
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7f9 feff 	bl	8003e00 <lwip_htons>
 800a002:	4603      	mov	r3, r0
 800a004:	b2db      	uxtb	r3, r3
 800a006:	f003 0303 	and.w	r3, r3, #3
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00e      	beq.n	800a02c <tcp_output+0x2a0>
 800a00e:	2301      	movs	r3, #1
 800a010:	e00d      	b.n	800a02e <tcp_output+0x2a2>
 800a012:	bf00      	nop
 800a014:	08010ac8 	.word	0x08010ac8
 800a018:	0801100c 	.word	0x0801100c
 800a01c:	08010b1c 	.word	0x08010b1c
 800a020:	08011024 	.word	0x08011024
 800a024:	20008b1c 	.word	0x20008b1c
 800a028:	0801104c 	.word	0x0801104c
 800a02c:	2300      	movs	r3, #0
 800a02e:	442b      	add	r3, r5
 800a030:	4423      	add	r3, r4
 800a032:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	da02      	bge.n	800a046 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a048:	891b      	ldrh	r3, [r3, #8]
 800a04a:	461c      	mov	r4, r3
 800a04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	899b      	ldrh	r3, [r3, #12]
 800a052:	b29b      	uxth	r3, r3
 800a054:	4618      	mov	r0, r3
 800a056:	f7f9 fed3 	bl	8003e00 <lwip_htons>
 800a05a:	4603      	mov	r3, r0
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	f003 0303 	and.w	r3, r3, #3
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <tcp_output+0x2de>
 800a066:	2301      	movs	r3, #1
 800a068:	e000      	b.n	800a06c <tcp_output+0x2e0>
 800a06a:	2300      	movs	r3, #0
 800a06c:	4423      	add	r3, r4
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d049      	beq.n	800a106 <tcp_output+0x37a>
      seg->next = NULL;
 800a072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a074:	2200      	movs	r2, #0
 800a076:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d105      	bne.n	800a08c <tcp_output+0x300>
        pcb->unacked = seg;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a084:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800a086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a088:	623b      	str	r3, [r7, #32]
 800a08a:	e03f      	b.n	800a10c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	4618      	mov	r0, r3
 800a094:	f7f9 fec9 	bl	8003e2a <lwip_htonl>
 800a098:	4604      	mov	r4, r0
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7f9 fec2 	bl	8003e2a <lwip_htonl>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	1ae3      	subs	r3, r4, r3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	da24      	bge.n	800a0f8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	3370      	adds	r3, #112	; 0x70
 800a0b2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a0b4:	e002      	b.n	800a0bc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d011      	beq.n	800a0e8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7f9 feac 	bl	8003e2a <lwip_htonl>
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7f9 fea5 	bl	8003e2a <lwip_htonl>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	dbe6      	blt.n	800a0b6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ee:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0f4:	601a      	str	r2, [r3, #0]
 800a0f6:	e009      	b.n	800a10c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a0f8:	6a3b      	ldr	r3, [r7, #32]
 800a0fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0fc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a0fe:	6a3b      	ldr	r3, [r7, #32]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	623b      	str	r3, [r7, #32]
 800a104:	e002      	b.n	800a10c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a106:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a108:	f7fc fc43 	bl	8006992 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a110:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a114:	2b00      	cmp	r3, #0
 800a116:	d012      	beq.n	800a13e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	4618      	mov	r0, r3
 800a120:	f7f9 fe83 	bl	8003e2a <lwip_htonl>
 800a124:	4602      	mov	r2, r0
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a12e:	8912      	ldrh	r2, [r2, #8]
 800a130:	4413      	add	r3, r2
  while (seg != NULL &&
 800a132:	69ba      	ldr	r2, [r7, #24]
 800a134:	429a      	cmp	r2, r3
 800a136:	f4bf aed9 	bcs.w	8009eec <tcp_output+0x160>
 800a13a:	e000      	b.n	800a13e <tcp_output+0x3b2>
      break;
 800a13c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a142:	2b00      	cmp	r3, #0
 800a144:	d108      	bne.n	800a158 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a14e:	e004      	b.n	800a15a <tcp_output+0x3ce>
    goto output_done;
 800a150:	bf00      	nop
 800a152:	e002      	b.n	800a15a <tcp_output+0x3ce>
    goto output_done;
 800a154:	bf00      	nop
 800a156:	e000      	b.n	800a15a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a158:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	8b5b      	ldrh	r3, [r3, #26]
 800a15e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a162:	b29a      	uxth	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3728      	adds	r7, #40	; 0x28
 800a16e:	46bd      	mov	sp, r7
 800a170:	bdb0      	pop	{r4, r5, r7, pc}
 800a172:	bf00      	nop

0800a174 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d106      	bne.n	800a190 <tcp_output_segment_busy+0x1c>
 800a182:	4b09      	ldr	r3, [pc, #36]	; (800a1a8 <tcp_output_segment_busy+0x34>)
 800a184:	f240 529a 	movw	r2, #1434	; 0x59a
 800a188:	4908      	ldr	r1, [pc, #32]	; (800a1ac <tcp_output_segment_busy+0x38>)
 800a18a:	4809      	ldr	r0, [pc, #36]	; (800a1b0 <tcp_output_segment_busy+0x3c>)
 800a18c:	f003 feea 	bl	800df64 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	7b9b      	ldrb	r3, [r3, #14]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d001      	beq.n	800a19e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e000      	b.n	800a1a0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	08010ac8 	.word	0x08010ac8
 800a1ac:	08011064 	.word	0x08011064
 800a1b0:	08010b1c 	.word	0x08010b1c

0800a1b4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a1b4:	b5b0      	push	{r4, r5, r7, lr}
 800a1b6:	b08c      	sub	sp, #48	; 0x30
 800a1b8:	af04      	add	r7, sp, #16
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d106      	bne.n	800a1d4 <tcp_output_segment+0x20>
 800a1c6:	4b63      	ldr	r3, [pc, #396]	; (800a354 <tcp_output_segment+0x1a0>)
 800a1c8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800a1cc:	4962      	ldr	r1, [pc, #392]	; (800a358 <tcp_output_segment+0x1a4>)
 800a1ce:	4863      	ldr	r0, [pc, #396]	; (800a35c <tcp_output_segment+0x1a8>)
 800a1d0:	f003 fec8 	bl	800df64 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d106      	bne.n	800a1e8 <tcp_output_segment+0x34>
 800a1da:	4b5e      	ldr	r3, [pc, #376]	; (800a354 <tcp_output_segment+0x1a0>)
 800a1dc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a1e0:	495f      	ldr	r1, [pc, #380]	; (800a360 <tcp_output_segment+0x1ac>)
 800a1e2:	485e      	ldr	r0, [pc, #376]	; (800a35c <tcp_output_segment+0x1a8>)
 800a1e4:	f003 febe 	bl	800df64 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d106      	bne.n	800a1fc <tcp_output_segment+0x48>
 800a1ee:	4b59      	ldr	r3, [pc, #356]	; (800a354 <tcp_output_segment+0x1a0>)
 800a1f0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800a1f4:	495b      	ldr	r1, [pc, #364]	; (800a364 <tcp_output_segment+0x1b0>)
 800a1f6:	4859      	ldr	r0, [pc, #356]	; (800a35c <tcp_output_segment+0x1a8>)
 800a1f8:	f003 feb4 	bl	800df64 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f7ff ffb9 	bl	800a174 <tcp_output_segment_busy>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	e09f      	b.n	800a34c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	68dc      	ldr	r4, [r3, #12]
 800a214:	4610      	mov	r0, r2
 800a216:	f7f9 fe08 	bl	8003e2a <lwip_htonl>
 800a21a:	4603      	mov	r3, r0
 800a21c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	68dc      	ldr	r4, [r3, #12]
 800a226:	4610      	mov	r0, r2
 800a228:	f7f9 fdea 	bl	8003e00 <lwip_htons>
 800a22c:	4603      	mov	r3, r0
 800a22e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a234:	68ba      	ldr	r2, [r7, #8]
 800a236:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a238:	441a      	add	r2, r3
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	3314      	adds	r3, #20
 800a244:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	7a9b      	ldrb	r3, [r3, #10]
 800a24a:	f003 0301 	and.w	r3, r3, #1
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d015      	beq.n	800a27e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	3304      	adds	r3, #4
 800a256:	461a      	mov	r2, r3
 800a258:	6879      	ldr	r1, [r7, #4]
 800a25a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a25e:	f7fc fe8f 	bl	8006f80 <tcp_eff_send_mss_netif>
 800a262:	4603      	mov	r3, r0
 800a264:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a266:	8b7b      	ldrh	r3, [r7, #26]
 800a268:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7f9 fddc 	bl	8003e2a <lwip_htonl>
 800a272:	4602      	mov	r2, r0
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	3304      	adds	r3, #4
 800a27c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a284:	2b00      	cmp	r3, #0
 800a286:	da02      	bge.n	800a28e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	2200      	movs	r2, #0
 800a28c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10c      	bne.n	800a2b0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a296:	4b34      	ldr	r3, [pc, #208]	; (800a368 <tcp_output_segment+0x1b4>)
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7f9 fdc0 	bl	8003e2a <lwip_htonl>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	68da      	ldr	r2, [r3, #12]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	1ad3      	subs	r3, r2, r3
 800a2bc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	8959      	ldrh	r1, [r3, #10]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	8b3a      	ldrh	r2, [r7, #24]
 800a2ca:	1a8a      	subs	r2, r1, r2
 800a2cc:	b292      	uxth	r2, r2
 800a2ce:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	8919      	ldrh	r1, [r3, #8]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	8b3a      	ldrh	r2, [r7, #24]
 800a2dc:	1a8a      	subs	r2, r1, r2
 800a2de:	b292      	uxth	r2, r2
 800a2e0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	68d2      	ldr	r2, [r2, #12]
 800a2ea:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	741a      	strb	r2, [r3, #16]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	f103 0214 	add.w	r2, r3, #20
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	7a9b      	ldrb	r3, [r3, #10]
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	f003 0304 	and.w	r3, r3, #4
 800a30a:	4413      	add	r3, r2
 800a30c:	69fa      	ldr	r2, [r7, #28]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d006      	beq.n	800a320 <tcp_output_segment+0x16c>
 800a312:	4b10      	ldr	r3, [pc, #64]	; (800a354 <tcp_output_segment+0x1a0>)
 800a314:	f240 621c 	movw	r2, #1564	; 0x61c
 800a318:	4914      	ldr	r1, [pc, #80]	; (800a36c <tcp_output_segment+0x1b8>)
 800a31a:	4810      	ldr	r0, [pc, #64]	; (800a35c <tcp_output_segment+0x1a8>)
 800a31c:	f003 fe22 	bl	800df64 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6858      	ldr	r0, [r3, #4]
 800a324:	68b9      	ldr	r1, [r7, #8]
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	1d1c      	adds	r4, r3, #4
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	7add      	ldrb	r5, [r3, #11]
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	7a9b      	ldrb	r3, [r3, #10]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	9202      	str	r2, [sp, #8]
 800a336:	2206      	movs	r2, #6
 800a338:	9201      	str	r2, [sp, #4]
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	462b      	mov	r3, r5
 800a33e:	4622      	mov	r2, r4
 800a340:	f002 fd86 	bl	800ce50 <ip4_output_if>
 800a344:	4603      	mov	r3, r0
 800a346:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a348:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3720      	adds	r7, #32
 800a350:	46bd      	mov	sp, r7
 800a352:	bdb0      	pop	{r4, r5, r7, pc}
 800a354:	08010ac8 	.word	0x08010ac8
 800a358:	0801108c 	.word	0x0801108c
 800a35c:	08010b1c 	.word	0x08010b1c
 800a360:	080110ac 	.word	0x080110ac
 800a364:	080110cc 	.word	0x080110cc
 800a368:	20008b0c 	.word	0x20008b0c
 800a36c:	080110f0 	.word	0x080110f0

0800a370 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a370:	b5b0      	push	{r4, r5, r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d106      	bne.n	800a38c <tcp_rexmit_rto_prepare+0x1c>
 800a37e:	4b31      	ldr	r3, [pc, #196]	; (800a444 <tcp_rexmit_rto_prepare+0xd4>)
 800a380:	f240 6263 	movw	r2, #1635	; 0x663
 800a384:	4930      	ldr	r1, [pc, #192]	; (800a448 <tcp_rexmit_rto_prepare+0xd8>)
 800a386:	4831      	ldr	r0, [pc, #196]	; (800a44c <tcp_rexmit_rto_prepare+0xdc>)
 800a388:	f003 fdec 	bl	800df64 <iprintf>

  if (pcb->unacked == NULL) {
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a390:	2b00      	cmp	r3, #0
 800a392:	d102      	bne.n	800a39a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a394:	f06f 0305 	mvn.w	r3, #5
 800a398:	e050      	b.n	800a43c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a39e:	60fb      	str	r3, [r7, #12]
 800a3a0:	e00b      	b.n	800a3ba <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f7ff fee6 	bl	800a174 <tcp_output_segment_busy>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d002      	beq.n	800a3b4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a3ae:	f06f 0305 	mvn.w	r3, #5
 800a3b2:	e043      	b.n	800a43c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	60fb      	str	r3, [r7, #12]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1ef      	bne.n	800a3a2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f7ff fed6 	bl	800a174 <tcp_output_segment_busy>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d002      	beq.n	800a3d4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a3ce:	f06f 0305 	mvn.w	r3, #5
 800a3d2:	e033      	b.n	800a43c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	8b5b      	ldrh	r3, [r3, #26]
 800a3ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7f9 fd13 	bl	8003e2a <lwip_htonl>
 800a404:	4604      	mov	r4, r0
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	891b      	ldrh	r3, [r3, #8]
 800a40a:	461d      	mov	r5, r3
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	899b      	ldrh	r3, [r3, #12]
 800a412:	b29b      	uxth	r3, r3
 800a414:	4618      	mov	r0, r3
 800a416:	f7f9 fcf3 	bl	8003e00 <lwip_htons>
 800a41a:	4603      	mov	r3, r0
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	f003 0303 	and.w	r3, r3, #3
 800a422:	2b00      	cmp	r3, #0
 800a424:	d001      	beq.n	800a42a <tcp_rexmit_rto_prepare+0xba>
 800a426:	2301      	movs	r3, #1
 800a428:	e000      	b.n	800a42c <tcp_rexmit_rto_prepare+0xbc>
 800a42a:	2300      	movs	r3, #0
 800a42c:	442b      	add	r3, r5
 800a42e:	18e2      	adds	r2, r4, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bdb0      	pop	{r4, r5, r7, pc}
 800a444:	08010ac8 	.word	0x08010ac8
 800a448:	08011104 	.word	0x08011104
 800a44c:	08010b1c 	.word	0x08010b1c

0800a450 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d106      	bne.n	800a46c <tcp_rexmit_rto_commit+0x1c>
 800a45e:	4b0d      	ldr	r3, [pc, #52]	; (800a494 <tcp_rexmit_rto_commit+0x44>)
 800a460:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a464:	490c      	ldr	r1, [pc, #48]	; (800a498 <tcp_rexmit_rto_commit+0x48>)
 800a466:	480d      	ldr	r0, [pc, #52]	; (800a49c <tcp_rexmit_rto_commit+0x4c>)
 800a468:	f003 fd7c 	bl	800df64 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a472:	2bff      	cmp	r3, #255	; 0xff
 800a474:	d007      	beq.n	800a486 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a47c:	3301      	adds	r3, #1
 800a47e:	b2da      	uxtb	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff fc80 	bl	8009d8c <tcp_output>
}
 800a48c:	bf00      	nop
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	08010ac8 	.word	0x08010ac8
 800a498:	08011128 	.word	0x08011128
 800a49c:	08010b1c 	.word	0x08010b1c

0800a4a0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d106      	bne.n	800a4bc <tcp_rexmit_rto+0x1c>
 800a4ae:	4b0a      	ldr	r3, [pc, #40]	; (800a4d8 <tcp_rexmit_rto+0x38>)
 800a4b0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a4b4:	4909      	ldr	r1, [pc, #36]	; (800a4dc <tcp_rexmit_rto+0x3c>)
 800a4b6:	480a      	ldr	r0, [pc, #40]	; (800a4e0 <tcp_rexmit_rto+0x40>)
 800a4b8:	f003 fd54 	bl	800df64 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7ff ff57 	bl	800a370 <tcp_rexmit_rto_prepare>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d102      	bne.n	800a4ce <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7ff ffc1 	bl	800a450 <tcp_rexmit_rto_commit>
  }
}
 800a4ce:	bf00      	nop
 800a4d0:	3708      	adds	r7, #8
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	08010ac8 	.word	0x08010ac8
 800a4dc:	0801114c 	.word	0x0801114c
 800a4e0:	08010b1c 	.word	0x08010b1c

0800a4e4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a4e4:	b590      	push	{r4, r7, lr}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d106      	bne.n	800a500 <tcp_rexmit+0x1c>
 800a4f2:	4b2f      	ldr	r3, [pc, #188]	; (800a5b0 <tcp_rexmit+0xcc>)
 800a4f4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a4f8:	492e      	ldr	r1, [pc, #184]	; (800a5b4 <tcp_rexmit+0xd0>)
 800a4fa:	482f      	ldr	r0, [pc, #188]	; (800a5b8 <tcp_rexmit+0xd4>)
 800a4fc:	f003 fd32 	bl	800df64 <iprintf>

  if (pcb->unacked == NULL) {
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a504:	2b00      	cmp	r3, #0
 800a506:	d102      	bne.n	800a50e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a508:	f06f 0305 	mvn.w	r3, #5
 800a50c:	e04c      	b.n	800a5a8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a512:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a514:	68b8      	ldr	r0, [r7, #8]
 800a516:	f7ff fe2d 	bl	800a174 <tcp_output_segment_busy>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d002      	beq.n	800a526 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a520:	f06f 0305 	mvn.w	r3, #5
 800a524:	e040      	b.n	800a5a8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	336c      	adds	r3, #108	; 0x6c
 800a532:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a534:	e002      	b.n	800a53c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d011      	beq.n	800a568 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7f9 fc6c 	bl	8003e2a <lwip_htonl>
 800a552:	4604      	mov	r4, r0
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7f9 fc65 	bl	8003e2a <lwip_htonl>
 800a560:	4603      	mov	r3, r0
 800a562:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a564:	2b00      	cmp	r3, #0
 800a566:	dbe6      	blt.n	800a536 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	68ba      	ldr	r2, [r7, #8]
 800a574:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d103      	bne.n	800a586 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a58c:	2bff      	cmp	r3, #255	; 0xff
 800a58e:	d007      	beq.n	800a5a0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a596:	3301      	adds	r3, #1
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd90      	pop	{r4, r7, pc}
 800a5b0:	08010ac8 	.word	0x08010ac8
 800a5b4:	08011168 	.word	0x08011168
 800a5b8:	08010b1c 	.word	0x08010b1c

0800a5bc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d106      	bne.n	800a5d8 <tcp_rexmit_fast+0x1c>
 800a5ca:	4b2a      	ldr	r3, [pc, #168]	; (800a674 <tcp_rexmit_fast+0xb8>)
 800a5cc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a5d0:	4929      	ldr	r1, [pc, #164]	; (800a678 <tcp_rexmit_fast+0xbc>)
 800a5d2:	482a      	ldr	r0, [pc, #168]	; (800a67c <tcp_rexmit_fast+0xc0>)
 800a5d4:	f003 fcc6 	bl	800df64 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d045      	beq.n	800a66c <tcp_rexmit_fast+0xb0>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	8b5b      	ldrh	r3, [r3, #26]
 800a5e4:	f003 0304 	and.w	r3, r3, #4
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d13f      	bne.n	800a66c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7ff ff79 	bl	800a4e4 <tcp_rexmit>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d139      	bne.n	800a66c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a604:	4293      	cmp	r3, r2
 800a606:	bf28      	it	cs
 800a608:	4613      	movcs	r3, r2
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	da00      	bge.n	800a612 <tcp_rexmit_fast+0x56>
 800a610:	3301      	adds	r3, #1
 800a612:	105b      	asrs	r3, r3, #1
 800a614:	b29a      	uxth	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a622:	461a      	mov	r2, r3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a628:	005b      	lsls	r3, r3, #1
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d206      	bcs.n	800a63c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a632:	005b      	lsls	r3, r3, #1
 800a634:	b29a      	uxth	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a646:	4619      	mov	r1, r3
 800a648:	0049      	lsls	r1, r1, #1
 800a64a:	440b      	add	r3, r1
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	4413      	add	r3, r2
 800a650:	b29a      	uxth	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	8b5b      	ldrh	r3, [r3, #26]
 800a65c:	f043 0304 	orr.w	r3, r3, #4
 800a660:	b29a      	uxth	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a66c:	bf00      	nop
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	08010ac8 	.word	0x08010ac8
 800a678:	08011180 	.word	0x08011180
 800a67c:	08010b1c 	.word	0x08010b1c

0800a680 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	607b      	str	r3, [r7, #4]
 800a68a:	460b      	mov	r3, r1
 800a68c:	817b      	strh	r3, [r7, #10]
 800a68e:	4613      	mov	r3, r2
 800a690:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a692:	897a      	ldrh	r2, [r7, #10]
 800a694:	893b      	ldrh	r3, [r7, #8]
 800a696:	4413      	add	r3, r2
 800a698:	b29b      	uxth	r3, r3
 800a69a:	3314      	adds	r3, #20
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	2022      	movs	r0, #34	; 0x22
 800a6a6:	f7fa fb7b 	bl	8004da0 <pbuf_alloc>
 800a6aa:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d04d      	beq.n	800a74e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a6b2:	897b      	ldrh	r3, [r7, #10]
 800a6b4:	3313      	adds	r3, #19
 800a6b6:	697a      	ldr	r2, [r7, #20]
 800a6b8:	8952      	ldrh	r2, [r2, #10]
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	db06      	blt.n	800a6cc <tcp_output_alloc_header_common+0x4c>
 800a6be:	4b26      	ldr	r3, [pc, #152]	; (800a758 <tcp_output_alloc_header_common+0xd8>)
 800a6c0:	f240 7223 	movw	r2, #1827	; 0x723
 800a6c4:	4925      	ldr	r1, [pc, #148]	; (800a75c <tcp_output_alloc_header_common+0xdc>)
 800a6c6:	4826      	ldr	r0, [pc, #152]	; (800a760 <tcp_output_alloc_header_common+0xe0>)
 800a6c8:	f003 fc4c 	bl	800df64 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a6d2:	8c3b      	ldrh	r3, [r7, #32]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7f9 fb93 	bl	8003e00 <lwip_htons>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	461a      	mov	r2, r3
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a6e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7f9 fb8b 	bl	8003e00 <lwip_htons>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f7f9 fb96 	bl	8003e2a <lwip_htonl>
 800a6fe:	4602      	mov	r2, r0
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a704:	897b      	ldrh	r3, [r7, #10]
 800a706:	089b      	lsrs	r3, r3, #2
 800a708:	b29b      	uxth	r3, r3
 800a70a:	3305      	adds	r3, #5
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	031b      	lsls	r3, r3, #12
 800a710:	b29a      	uxth	r2, r3
 800a712:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a716:	b29b      	uxth	r3, r3
 800a718:	4313      	orrs	r3, r2
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7f9 fb6f 	bl	8003e00 <lwip_htons>
 800a722:	4603      	mov	r3, r0
 800a724:	461a      	mov	r2, r3
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a72a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7f9 fb67 	bl	8003e00 <lwip_htons>
 800a732:	4603      	mov	r3, r0
 800a734:	461a      	mov	r2, r3
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	2200      	movs	r2, #0
 800a73e:	741a      	strb	r2, [r3, #16]
 800a740:	2200      	movs	r2, #0
 800a742:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	2200      	movs	r2, #0
 800a748:	749a      	strb	r2, [r3, #18]
 800a74a:	2200      	movs	r2, #0
 800a74c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a74e:	697b      	ldr	r3, [r7, #20]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3718      	adds	r7, #24
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	08010ac8 	.word	0x08010ac8
 800a75c:	080111a0 	.word	0x080111a0
 800a760:	08010b1c 	.word	0x08010b1c

0800a764 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a764:	b5b0      	push	{r4, r5, r7, lr}
 800a766:	b08a      	sub	sp, #40	; 0x28
 800a768:	af04      	add	r7, sp, #16
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	607b      	str	r3, [r7, #4]
 800a76e:	460b      	mov	r3, r1
 800a770:	817b      	strh	r3, [r7, #10]
 800a772:	4613      	mov	r3, r2
 800a774:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d106      	bne.n	800a78a <tcp_output_alloc_header+0x26>
 800a77c:	4b15      	ldr	r3, [pc, #84]	; (800a7d4 <tcp_output_alloc_header+0x70>)
 800a77e:	f240 7242 	movw	r2, #1858	; 0x742
 800a782:	4915      	ldr	r1, [pc, #84]	; (800a7d8 <tcp_output_alloc_header+0x74>)
 800a784:	4815      	ldr	r0, [pc, #84]	; (800a7dc <tcp_output_alloc_header+0x78>)
 800a786:	f003 fbed 	bl	800df64 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	8adb      	ldrh	r3, [r3, #22]
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	8b12      	ldrh	r2, [r2, #24]
 800a796:	68f9      	ldr	r1, [r7, #12]
 800a798:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800a79a:	893d      	ldrh	r5, [r7, #8]
 800a79c:	897c      	ldrh	r4, [r7, #10]
 800a79e:	9103      	str	r1, [sp, #12]
 800a7a0:	2110      	movs	r1, #16
 800a7a2:	9102      	str	r1, [sp, #8]
 800a7a4:	9201      	str	r2, [sp, #4]
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	462a      	mov	r2, r5
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	f7ff ff67 	bl	800a680 <tcp_output_alloc_header_common>
 800a7b2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d006      	beq.n	800a7c8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a7c2:	441a      	add	r2, r3
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a7c8:	697b      	ldr	r3, [r7, #20]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3718      	adds	r7, #24
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bdb0      	pop	{r4, r5, r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	08010ac8 	.word	0x08010ac8
 800a7d8:	080111d0 	.word	0x080111d0
 800a7dc:	08010b1c 	.word	0x08010b1c

0800a7e0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b088      	sub	sp, #32
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	4611      	mov	r1, r2
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	71fb      	strb	r3, [r7, #7]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d106      	bne.n	800a80e <tcp_output_fill_options+0x2e>
 800a800:	4b13      	ldr	r3, [pc, #76]	; (800a850 <tcp_output_fill_options+0x70>)
 800a802:	f240 7256 	movw	r2, #1878	; 0x756
 800a806:	4913      	ldr	r1, [pc, #76]	; (800a854 <tcp_output_fill_options+0x74>)
 800a808:	4813      	ldr	r0, [pc, #76]	; (800a858 <tcp_output_fill_options+0x78>)
 800a80a:	f003 fbab 	bl	800df64 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	3314      	adds	r3, #20
 800a818:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	f103 0214 	add.w	r2, r3, #20
 800a820:	8bfb      	ldrh	r3, [r7, #30]
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	4619      	mov	r1, r3
 800a826:	79fb      	ldrb	r3, [r7, #7]
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	f003 0304 	and.w	r3, r3, #4
 800a82e:	440b      	add	r3, r1
 800a830:	4413      	add	r3, r2
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	429a      	cmp	r2, r3
 800a836:	d006      	beq.n	800a846 <tcp_output_fill_options+0x66>
 800a838:	4b05      	ldr	r3, [pc, #20]	; (800a850 <tcp_output_fill_options+0x70>)
 800a83a:	f240 7275 	movw	r2, #1909	; 0x775
 800a83e:	4907      	ldr	r1, [pc, #28]	; (800a85c <tcp_output_fill_options+0x7c>)
 800a840:	4805      	ldr	r0, [pc, #20]	; (800a858 <tcp_output_fill_options+0x78>)
 800a842:	f003 fb8f 	bl	800df64 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a846:	bf00      	nop
 800a848:	3720      	adds	r7, #32
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	08010ac8 	.word	0x08010ac8
 800a854:	080111f8 	.word	0x080111f8
 800a858:	08010b1c 	.word	0x08010b1c
 800a85c:	080110f0 	.word	0x080110f0

0800a860 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b08a      	sub	sp, #40	; 0x28
 800a864:	af04      	add	r7, sp, #16
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
 800a86c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d106      	bne.n	800a882 <tcp_output_control_segment+0x22>
 800a874:	4b1c      	ldr	r3, [pc, #112]	; (800a8e8 <tcp_output_control_segment+0x88>)
 800a876:	f240 7287 	movw	r2, #1927	; 0x787
 800a87a:	491c      	ldr	r1, [pc, #112]	; (800a8ec <tcp_output_control_segment+0x8c>)
 800a87c:	481c      	ldr	r0, [pc, #112]	; (800a8f0 <tcp_output_control_segment+0x90>)
 800a87e:	f003 fb71 	bl	800df64 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	6879      	ldr	r1, [r7, #4]
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f7fe ff40 	bl	800970c <tcp_route>
 800a88c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d102      	bne.n	800a89a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a894:	23fc      	movs	r3, #252	; 0xfc
 800a896:	75fb      	strb	r3, [r7, #23]
 800a898:	e01c      	b.n	800a8d4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d006      	beq.n	800a8ae <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	7adb      	ldrb	r3, [r3, #11]
 800a8a4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	7a9b      	ldrb	r3, [r3, #10]
 800a8aa:	757b      	strb	r3, [r7, #21]
 800a8ac:	e003      	b.n	800a8b6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a8ae:	23ff      	movs	r3, #255	; 0xff
 800a8b0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a8b6:	7dba      	ldrb	r2, [r7, #22]
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	9302      	str	r3, [sp, #8]
 800a8bc:	2306      	movs	r3, #6
 800a8be:	9301      	str	r3, [sp, #4]
 800a8c0:	7d7b      	ldrb	r3, [r7, #21]
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	683a      	ldr	r2, [r7, #0]
 800a8c8:	6879      	ldr	r1, [r7, #4]
 800a8ca:	68b8      	ldr	r0, [r7, #8]
 800a8cc:	f002 fac0 	bl	800ce50 <ip4_output_if>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a8d4:	68b8      	ldr	r0, [r7, #8]
 800a8d6:	f7fa fd47 	bl	8005368 <pbuf_free>
  return err;
 800a8da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3718      	adds	r7, #24
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	08010ac8 	.word	0x08010ac8
 800a8ec:	08011220 	.word	0x08011220
 800a8f0:	08010b1c 	.word	0x08010b1c

0800a8f4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a8f4:	b590      	push	{r4, r7, lr}
 800a8f6:	b08b      	sub	sp, #44	; 0x2c
 800a8f8:	af04      	add	r7, sp, #16
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]
 800a900:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d106      	bne.n	800a916 <tcp_rst+0x22>
 800a908:	4b1f      	ldr	r3, [pc, #124]	; (800a988 <tcp_rst+0x94>)
 800a90a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a90e:	491f      	ldr	r1, [pc, #124]	; (800a98c <tcp_rst+0x98>)
 800a910:	481f      	ldr	r0, [pc, #124]	; (800a990 <tcp_rst+0x9c>)
 800a912:	f003 fb27 	bl	800df64 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d106      	bne.n	800a92a <tcp_rst+0x36>
 800a91c:	4b1a      	ldr	r3, [pc, #104]	; (800a988 <tcp_rst+0x94>)
 800a91e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a922:	491c      	ldr	r1, [pc, #112]	; (800a994 <tcp_rst+0xa0>)
 800a924:	481a      	ldr	r0, [pc, #104]	; (800a990 <tcp_rst+0x9c>)
 800a926:	f003 fb1d 	bl	800df64 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a92a:	2300      	movs	r3, #0
 800a92c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a92e:	f246 0308 	movw	r3, #24584	; 0x6008
 800a932:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a934:	7dfb      	ldrb	r3, [r7, #23]
 800a936:	b29c      	uxth	r4, r3
 800a938:	68b8      	ldr	r0, [r7, #8]
 800a93a:	f7f9 fa76 	bl	8003e2a <lwip_htonl>
 800a93e:	4602      	mov	r2, r0
 800a940:	8abb      	ldrh	r3, [r7, #20]
 800a942:	9303      	str	r3, [sp, #12]
 800a944:	2314      	movs	r3, #20
 800a946:	9302      	str	r3, [sp, #8]
 800a948:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a94a:	9301      	str	r3, [sp, #4]
 800a94c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a94e:	9300      	str	r3, [sp, #0]
 800a950:	4613      	mov	r3, r2
 800a952:	2200      	movs	r2, #0
 800a954:	4621      	mov	r1, r4
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f7ff fe92 	bl	800a680 <tcp_output_alloc_header_common>
 800a95c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d00c      	beq.n	800a97e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a964:	7dfb      	ldrb	r3, [r7, #23]
 800a966:	2200      	movs	r2, #0
 800a968:	6939      	ldr	r1, [r7, #16]
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f7ff ff38 	bl	800a7e0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a972:	683a      	ldr	r2, [r7, #0]
 800a974:	6939      	ldr	r1, [r7, #16]
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f7ff ff72 	bl	800a860 <tcp_output_control_segment>
 800a97c:	e000      	b.n	800a980 <tcp_rst+0x8c>
    return;
 800a97e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a980:	371c      	adds	r7, #28
 800a982:	46bd      	mov	sp, r7
 800a984:	bd90      	pop	{r4, r7, pc}
 800a986:	bf00      	nop
 800a988:	08010ac8 	.word	0x08010ac8
 800a98c:	0801124c 	.word	0x0801124c
 800a990:	08010b1c 	.word	0x08010b1c
 800a994:	08011268 	.word	0x08011268

0800a998 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a998:	b590      	push	{r4, r7, lr}
 800a99a:	b087      	sub	sp, #28
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d106      	bne.n	800a9bc <tcp_send_empty_ack+0x24>
 800a9ae:	4b28      	ldr	r3, [pc, #160]	; (800aa50 <tcp_send_empty_ack+0xb8>)
 800a9b0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800a9b4:	4927      	ldr	r1, [pc, #156]	; (800aa54 <tcp_send_empty_ack+0xbc>)
 800a9b6:	4828      	ldr	r0, [pc, #160]	; (800aa58 <tcp_send_empty_ack+0xc0>)
 800a9b8:	f003 fad4 	bl	800df64 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a9bc:	7dfb      	ldrb	r3, [r7, #23]
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	f003 0304 	and.w	r3, r3, #4
 800a9c6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a9c8:	7d7b      	ldrb	r3, [r7, #21]
 800a9ca:	b29c      	uxth	r4, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7f9 fa2a 	bl	8003e2a <lwip_htonl>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2200      	movs	r2, #0
 800a9da:	4621      	mov	r1, r4
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f7ff fec1 	bl	800a764 <tcp_output_alloc_header>
 800a9e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d109      	bne.n	800a9fe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	8b5b      	ldrh	r3, [r3, #26]
 800a9ee:	f043 0303 	orr.w	r3, r3, #3
 800a9f2:	b29a      	uxth	r2, r3
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a9f8:	f06f 0301 	mvn.w	r3, #1
 800a9fc:	e023      	b.n	800aa46 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a9fe:	7dbb      	ldrb	r3, [r7, #22]
 800aa00:	7dfa      	ldrb	r2, [r7, #23]
 800aa02:	6939      	ldr	r1, [r7, #16]
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f7ff feeb 	bl	800a7e0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	3304      	adds	r3, #4
 800aa10:	6939      	ldr	r1, [r7, #16]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7ff ff24 	bl	800a860 <tcp_output_control_segment>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800aa1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d007      	beq.n	800aa34 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	8b5b      	ldrh	r3, [r3, #26]
 800aa28:	f043 0303 	orr.w	r3, r3, #3
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	835a      	strh	r2, [r3, #26]
 800aa32:	e006      	b.n	800aa42 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	8b5b      	ldrh	r3, [r3, #26]
 800aa38:	f023 0303 	bic.w	r3, r3, #3
 800aa3c:	b29a      	uxth	r2, r3
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800aa42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	371c      	adds	r7, #28
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd90      	pop	{r4, r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	08010ac8 	.word	0x08010ac8
 800aa54:	08011284 	.word	0x08011284
 800aa58:	08010b1c 	.word	0x08010b1c

0800aa5c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800aa5c:	b590      	push	{r4, r7, lr}
 800aa5e:	b087      	sub	sp, #28
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800aa64:	2300      	movs	r3, #0
 800aa66:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d106      	bne.n	800aa7c <tcp_keepalive+0x20>
 800aa6e:	4b18      	ldr	r3, [pc, #96]	; (800aad0 <tcp_keepalive+0x74>)
 800aa70:	f640 0224 	movw	r2, #2084	; 0x824
 800aa74:	4917      	ldr	r1, [pc, #92]	; (800aad4 <tcp_keepalive+0x78>)
 800aa76:	4818      	ldr	r0, [pc, #96]	; (800aad8 <tcp_keepalive+0x7c>)
 800aa78:	f003 fa74 	bl	800df64 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800aa7c:	7dfb      	ldrb	r3, [r7, #23]
 800aa7e:	b29c      	uxth	r4, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa84:	3b01      	subs	r3, #1
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7f9 f9cf 	bl	8003e2a <lwip_htonl>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2200      	movs	r2, #0
 800aa90:	4621      	mov	r1, r4
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f7ff fe66 	bl	800a764 <tcp_output_alloc_header>
 800aa98:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d102      	bne.n	800aaa6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800aaa0:	f04f 33ff 	mov.w	r3, #4294967295
 800aaa4:	e010      	b.n	800aac8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800aaa6:	7dfb      	ldrb	r3, [r7, #23]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	6939      	ldr	r1, [r7, #16]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f7ff fe97 	bl	800a7e0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	3304      	adds	r3, #4
 800aab8:	6939      	ldr	r1, [r7, #16]
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7ff fed0 	bl	800a860 <tcp_output_control_segment>
 800aac0:	4603      	mov	r3, r0
 800aac2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800aac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	371c      	adds	r7, #28
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd90      	pop	{r4, r7, pc}
 800aad0:	08010ac8 	.word	0x08010ac8
 800aad4:	080112a4 	.word	0x080112a4
 800aad8:	08010b1c 	.word	0x08010b1c

0800aadc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800aadc:	b590      	push	{r4, r7, lr}
 800aade:	b08b      	sub	sp, #44	; 0x2c
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800aae4:	2300      	movs	r3, #0
 800aae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d106      	bne.n	800aafe <tcp_zero_window_probe+0x22>
 800aaf0:	4b4c      	ldr	r3, [pc, #304]	; (800ac24 <tcp_zero_window_probe+0x148>)
 800aaf2:	f640 024f 	movw	r2, #2127	; 0x84f
 800aaf6:	494c      	ldr	r1, [pc, #304]	; (800ac28 <tcp_zero_window_probe+0x14c>)
 800aaf8:	484c      	ldr	r0, [pc, #304]	; (800ac2c <tcp_zero_window_probe+0x150>)
 800aafa:	f003 fa33 	bl	800df64 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab02:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ab04:	6a3b      	ldr	r3, [r7, #32]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d101      	bne.n	800ab0e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	e086      	b.n	800ac1c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ab14:	2bff      	cmp	r3, #255	; 0xff
 800ab16:	d007      	beq.n	800ab28 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ab1e:	3301      	adds	r3, #1
 800ab20:	b2da      	uxtb	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ab28:	6a3b      	ldr	r3, [r7, #32]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	899b      	ldrh	r3, [r3, #12]
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7f9 f965 	bl	8003e00 <lwip_htons>
 800ab36:	4603      	mov	r3, r0
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	f003 0301 	and.w	r3, r3, #1
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d005      	beq.n	800ab4e <tcp_zero_window_probe+0x72>
 800ab42:	6a3b      	ldr	r3, [r7, #32]
 800ab44:	891b      	ldrh	r3, [r3, #8]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d101      	bne.n	800ab4e <tcp_zero_window_probe+0x72>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e000      	b.n	800ab50 <tcp_zero_window_probe+0x74>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ab52:	7ffb      	ldrb	r3, [r7, #31]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	bf0c      	ite	eq
 800ab58:	2301      	moveq	r3, #1
 800ab5a:	2300      	movne	r3, #0
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ab60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab64:	b299      	uxth	r1, r3
 800ab66:	6a3b      	ldr	r3, [r7, #32]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	8bba      	ldrh	r2, [r7, #28]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7ff fdf8 	bl	800a764 <tcp_output_alloc_header>
 800ab74:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d102      	bne.n	800ab82 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ab7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab80:	e04c      	b.n	800ac1c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ab88:	7ffb      	ldrb	r3, [r7, #31]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d011      	beq.n	800abb2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	899b      	ldrh	r3, [r3, #12]
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	b21b      	sxth	r3, r3
 800ab96:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ab9a:	b21c      	sxth	r4, r3
 800ab9c:	2011      	movs	r0, #17
 800ab9e:	f7f9 f92f 	bl	8003e00 <lwip_htons>
 800aba2:	4603      	mov	r3, r0
 800aba4:	b21b      	sxth	r3, r3
 800aba6:	4323      	orrs	r3, r4
 800aba8:	b21b      	sxth	r3, r3
 800abaa:	b29a      	uxth	r2, r3
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	819a      	strh	r2, [r3, #12]
 800abb0:	e010      	b.n	800abd4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	3314      	adds	r3, #20
 800abb8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800abba:	6a3b      	ldr	r3, [r7, #32]
 800abbc:	6858      	ldr	r0, [r3, #4]
 800abbe:	6a3b      	ldr	r3, [r7, #32]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	891a      	ldrh	r2, [r3, #8]
 800abc4:	6a3b      	ldr	r3, [r7, #32]
 800abc6:	891b      	ldrh	r3, [r3, #8]
 800abc8:	1ad3      	subs	r3, r2, r3
 800abca:	b29b      	uxth	r3, r3
 800abcc:	2201      	movs	r2, #1
 800abce:	6939      	ldr	r1, [r7, #16]
 800abd0:	f7fa fdc4 	bl	800575c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800abd4:	6a3b      	ldr	r3, [r7, #32]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	4618      	mov	r0, r3
 800abdc:	f7f9 f925 	bl	8003e2a <lwip_htonl>
 800abe0:	4603      	mov	r3, r0
 800abe2:	3301      	adds	r3, #1
 800abe4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	1ad3      	subs	r3, r2, r3
 800abee:	2b00      	cmp	r3, #0
 800abf0:	da02      	bge.n	800abf8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800abf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abfc:	2200      	movs	r2, #0
 800abfe:	69b9      	ldr	r1, [r7, #24]
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7ff fded 	bl	800a7e0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	3304      	adds	r3, #4
 800ac0c:	69b9      	ldr	r1, [r7, #24]
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7ff fe26 	bl	800a860 <tcp_output_control_segment>
 800ac14:	4603      	mov	r3, r0
 800ac16:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ac18:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	372c      	adds	r7, #44	; 0x2c
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd90      	pop	{r4, r7, pc}
 800ac24:	08010ac8 	.word	0x08010ac8
 800ac28:	080112c0 	.word	0x080112c0
 800ac2c:	08010b1c 	.word	0x08010b1c

0800ac30 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ac38:	f7fa ff10 	bl	8005a5c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ac3c:	4b0a      	ldr	r3, [pc, #40]	; (800ac68 <tcpip_tcp_timer+0x38>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d103      	bne.n	800ac4c <tcpip_tcp_timer+0x1c>
 800ac44:	4b09      	ldr	r3, [pc, #36]	; (800ac6c <tcpip_tcp_timer+0x3c>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d005      	beq.n	800ac58 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	4908      	ldr	r1, [pc, #32]	; (800ac70 <tcpip_tcp_timer+0x40>)
 800ac50:	20fa      	movs	r0, #250	; 0xfa
 800ac52:	f000 f8f3 	bl	800ae3c <sys_timeout>
 800ac56:	e003      	b.n	800ac60 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ac58:	4b06      	ldr	r3, [pc, #24]	; (800ac74 <tcpip_tcp_timer+0x44>)
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	601a      	str	r2, [r3, #0]
  }
}
 800ac5e:	bf00      	nop
 800ac60:	bf00      	nop
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	20008b08 	.word	0x20008b08
 800ac6c:	20008b18 	.word	0x20008b18
 800ac70:	0800ac31 	.word	0x0800ac31
 800ac74:	20000108 	.word	0x20000108

0800ac78 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ac7c:	4b0a      	ldr	r3, [pc, #40]	; (800aca8 <tcp_timer_needed+0x30>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d10f      	bne.n	800aca4 <tcp_timer_needed+0x2c>
 800ac84:	4b09      	ldr	r3, [pc, #36]	; (800acac <tcp_timer_needed+0x34>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d103      	bne.n	800ac94 <tcp_timer_needed+0x1c>
 800ac8c:	4b08      	ldr	r3, [pc, #32]	; (800acb0 <tcp_timer_needed+0x38>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d007      	beq.n	800aca4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ac94:	4b04      	ldr	r3, [pc, #16]	; (800aca8 <tcp_timer_needed+0x30>)
 800ac96:	2201      	movs	r2, #1
 800ac98:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	4905      	ldr	r1, [pc, #20]	; (800acb4 <tcp_timer_needed+0x3c>)
 800ac9e:	20fa      	movs	r0, #250	; 0xfa
 800aca0:	f000 f8cc 	bl	800ae3c <sys_timeout>
  }
}
 800aca4:	bf00      	nop
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	20000108 	.word	0x20000108
 800acac:	20008b08 	.word	0x20008b08
 800acb0:	20008b18 	.word	0x20008b18
 800acb4:	0800ac31 	.word	0x0800ac31

0800acb8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800acc4:	2006      	movs	r0, #6
 800acc6:	f7f9 fcf1 	bl	80046ac <memp_malloc>
 800acca:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d109      	bne.n	800ace6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d151      	bne.n	800ad7c <sys_timeout_abs+0xc4>
 800acd8:	4b2a      	ldr	r3, [pc, #168]	; (800ad84 <sys_timeout_abs+0xcc>)
 800acda:	22be      	movs	r2, #190	; 0xbe
 800acdc:	492a      	ldr	r1, [pc, #168]	; (800ad88 <sys_timeout_abs+0xd0>)
 800acde:	482b      	ldr	r0, [pc, #172]	; (800ad8c <sys_timeout_abs+0xd4>)
 800ace0:	f003 f940 	bl	800df64 <iprintf>
    return;
 800ace4:	e04a      	b.n	800ad7c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	68ba      	ldr	r2, [r7, #8]
 800acf0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	68fa      	ldr	r2, [r7, #12]
 800acfc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800acfe:	4b24      	ldr	r3, [pc, #144]	; (800ad90 <sys_timeout_abs+0xd8>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d103      	bne.n	800ad0e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ad06:	4a22      	ldr	r2, [pc, #136]	; (800ad90 <sys_timeout_abs+0xd8>)
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	6013      	str	r3, [r2, #0]
    return;
 800ad0c:	e037      	b.n	800ad7e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	685a      	ldr	r2, [r3, #4]
 800ad12:	4b1f      	ldr	r3, [pc, #124]	; (800ad90 <sys_timeout_abs+0xd8>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	0fdb      	lsrs	r3, r3, #31
 800ad1c:	f003 0301 	and.w	r3, r3, #1
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d007      	beq.n	800ad36 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ad26:	4b1a      	ldr	r3, [pc, #104]	; (800ad90 <sys_timeout_abs+0xd8>)
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ad2e:	4a18      	ldr	r2, [pc, #96]	; (800ad90 <sys_timeout_abs+0xd8>)
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	6013      	str	r3, [r2, #0]
 800ad34:	e023      	b.n	800ad7e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ad36:	4b16      	ldr	r3, [pc, #88]	; (800ad90 <sys_timeout_abs+0xd8>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	617b      	str	r3, [r7, #20]
 800ad3c:	e01a      	b.n	800ad74 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00b      	beq.n	800ad5e <sys_timeout_abs+0xa6>
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	685a      	ldr	r2, [r3, #4]
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	0fdb      	lsrs	r3, r3, #31
 800ad54:	f003 0301 	and.w	r3, r3, #1
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d007      	beq.n	800ad6e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	601a      	str	r2, [r3, #0]
        break;
 800ad6c:	e007      	b.n	800ad7e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	617b      	str	r3, [r7, #20]
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d1e1      	bne.n	800ad3e <sys_timeout_abs+0x86>
 800ad7a:	e000      	b.n	800ad7e <sys_timeout_abs+0xc6>
    return;
 800ad7c:	bf00      	nop
      }
    }
  }
}
 800ad7e:	3718      	adds	r7, #24
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	080112e4 	.word	0x080112e4
 800ad88:	08011318 	.word	0x08011318
 800ad8c:	08011358 	.word	0x08011358
 800ad90:	20000100 	.word	0x20000100

0800ad94 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b086      	sub	sp, #24
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	4798      	blx	r3

  now = sys_now();
 800ada6:	f7f8 ff9d 	bl	8003ce4 <sys_now>
 800adaa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	4b0f      	ldr	r3, [pc, #60]	; (800adf0 <lwip_cyclic_timer+0x5c>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4413      	add	r3, r2
 800adb6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	1ad3      	subs	r3, r2, r3
 800adbe:	0fdb      	lsrs	r3, r3, #31
 800adc0:	f003 0301 	and.w	r3, r3, #1
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d009      	beq.n	800adde <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	4413      	add	r3, r2
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	4907      	ldr	r1, [pc, #28]	; (800adf4 <lwip_cyclic_timer+0x60>)
 800add6:	4618      	mov	r0, r3
 800add8:	f7ff ff6e 	bl	800acb8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800addc:	e004      	b.n	800ade8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	4904      	ldr	r1, [pc, #16]	; (800adf4 <lwip_cyclic_timer+0x60>)
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f7ff ff68 	bl	800acb8 <sys_timeout_abs>
}
 800ade8:	bf00      	nop
 800adea:	3718      	adds	r7, #24
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	20000104 	.word	0x20000104
 800adf4:	0800ad95 	.word	0x0800ad95

0800adf8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800adfe:	2301      	movs	r3, #1
 800ae00:	607b      	str	r3, [r7, #4]
 800ae02:	e00e      	b.n	800ae22 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ae04:	4a0b      	ldr	r2, [pc, #44]	; (800ae34 <sys_timeouts_init+0x3c>)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	00db      	lsls	r3, r3, #3
 800ae10:	4a08      	ldr	r2, [pc, #32]	; (800ae34 <sys_timeouts_init+0x3c>)
 800ae12:	4413      	add	r3, r2
 800ae14:	461a      	mov	r2, r3
 800ae16:	4908      	ldr	r1, [pc, #32]	; (800ae38 <sys_timeouts_init+0x40>)
 800ae18:	f000 f810 	bl	800ae3c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	607b      	str	r3, [r7, #4]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d9ed      	bls.n	800ae04 <sys_timeouts_init+0xc>
  }
}
 800ae28:	bf00      	nop
 800ae2a:	bf00      	nop
 800ae2c:	3708      	adds	r7, #8
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	08011ebc 	.word	0x08011ebc
 800ae38:	0800ad95 	.word	0x0800ad95

0800ae3c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae4e:	d306      	bcc.n	800ae5e <sys_timeout+0x22>
 800ae50:	4b0a      	ldr	r3, [pc, #40]	; (800ae7c <sys_timeout+0x40>)
 800ae52:	f240 1229 	movw	r2, #297	; 0x129
 800ae56:	490a      	ldr	r1, [pc, #40]	; (800ae80 <sys_timeout+0x44>)
 800ae58:	480a      	ldr	r0, [pc, #40]	; (800ae84 <sys_timeout+0x48>)
 800ae5a:	f003 f883 	bl	800df64 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ae5e:	f7f8 ff41 	bl	8003ce4 <sys_now>
 800ae62:	4602      	mov	r2, r0
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	4413      	add	r3, r2
 800ae68:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	68b9      	ldr	r1, [r7, #8]
 800ae6e:	6978      	ldr	r0, [r7, #20]
 800ae70:	f7ff ff22 	bl	800acb8 <sys_timeout_abs>
#endif
}
 800ae74:	bf00      	nop
 800ae76:	3718      	adds	r7, #24
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	080112e4 	.word	0x080112e4
 800ae80:	08011380 	.word	0x08011380
 800ae84:	08011358 	.word	0x08011358

0800ae88 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ae8e:	f7f8 ff29 	bl	8003ce4 <sys_now>
 800ae92:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800ae94:	4b1a      	ldr	r3, [pc, #104]	; (800af00 <sys_check_timeouts+0x78>)
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d001      	beq.n	800aea2 <sys_check_timeouts+0x1a>
 800ae9e:	f7f9 ff29 	bl	8004cf4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800aea2:	4b18      	ldr	r3, [pc, #96]	; (800af04 <sys_check_timeouts+0x7c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d022      	beq.n	800aef4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	1ad3      	subs	r3, r2, r3
 800aeb6:	0fdb      	lsrs	r3, r3, #31
 800aeb8:	f003 0301 	and.w	r3, r3, #1
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d11a      	bne.n	800aef8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a0f      	ldr	r2, [pc, #60]	; (800af04 <sys_check_timeouts+0x7c>)
 800aec8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	4a0b      	ldr	r2, [pc, #44]	; (800af08 <sys_check_timeouts+0x80>)
 800aedc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800aede:	68b9      	ldr	r1, [r7, #8]
 800aee0:	2006      	movs	r0, #6
 800aee2:	f7f9 fc2f 	bl	8004744 <memp_free>
    if (handler != NULL) {
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d0d3      	beq.n	800ae94 <sys_check_timeouts+0xc>
      handler(arg);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6838      	ldr	r0, [r7, #0]
 800aef0:	4798      	blx	r3
  do {
 800aef2:	e7cf      	b.n	800ae94 <sys_check_timeouts+0xc>
      return;
 800aef4:	bf00      	nop
 800aef6:	e000      	b.n	800aefa <sys_check_timeouts+0x72>
      return;
 800aef8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	20008b00 	.word	0x20008b00
 800af04:	20000100 	.word	0x20000100
 800af08:	20000104 	.word	0x20000104

0800af0c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800af10:	f003 f840 	bl	800df94 <rand>
 800af14:	4603      	mov	r3, r0
 800af16:	b29b      	uxth	r3, r3
 800af18:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800af22:	b29a      	uxth	r2, r3
 800af24:	4b01      	ldr	r3, [pc, #4]	; (800af2c <udp_init+0x20>)
 800af26:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800af28:	bf00      	nop
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	20000010 	.word	0x20000010

0800af30 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800af3a:	4b17      	ldr	r3, [pc, #92]	; (800af98 <udp_new_port+0x68>)
 800af3c:	881b      	ldrh	r3, [r3, #0]
 800af3e:	1c5a      	adds	r2, r3, #1
 800af40:	b291      	uxth	r1, r2
 800af42:	4a15      	ldr	r2, [pc, #84]	; (800af98 <udp_new_port+0x68>)
 800af44:	8011      	strh	r1, [r2, #0]
 800af46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d103      	bne.n	800af56 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800af4e:	4b12      	ldr	r3, [pc, #72]	; (800af98 <udp_new_port+0x68>)
 800af50:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800af54:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800af56:	4b11      	ldr	r3, [pc, #68]	; (800af9c <udp_new_port+0x6c>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	603b      	str	r3, [r7, #0]
 800af5c:	e011      	b.n	800af82 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	8a5a      	ldrh	r2, [r3, #18]
 800af62:	4b0d      	ldr	r3, [pc, #52]	; (800af98 <udp_new_port+0x68>)
 800af64:	881b      	ldrh	r3, [r3, #0]
 800af66:	429a      	cmp	r2, r3
 800af68:	d108      	bne.n	800af7c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800af6a:	88fb      	ldrh	r3, [r7, #6]
 800af6c:	3301      	adds	r3, #1
 800af6e:	80fb      	strh	r3, [r7, #6]
 800af70:	88fb      	ldrh	r3, [r7, #6]
 800af72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af76:	d3e0      	bcc.n	800af3a <udp_new_port+0xa>
        return 0;
 800af78:	2300      	movs	r3, #0
 800af7a:	e007      	b.n	800af8c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	603b      	str	r3, [r7, #0]
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1ea      	bne.n	800af5e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800af88:	4b03      	ldr	r3, [pc, #12]	; (800af98 <udp_new_port+0x68>)
 800af8a:	881b      	ldrh	r3, [r3, #0]
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr
 800af98:	20000010 	.word	0x20000010
 800af9c:	20008b20 	.word	0x20008b20

0800afa0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	4613      	mov	r3, r2
 800afac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d105      	bne.n	800afc0 <udp_input_local_match+0x20>
 800afb4:	4b27      	ldr	r3, [pc, #156]	; (800b054 <udp_input_local_match+0xb4>)
 800afb6:	2287      	movs	r2, #135	; 0x87
 800afb8:	4927      	ldr	r1, [pc, #156]	; (800b058 <udp_input_local_match+0xb8>)
 800afba:	4828      	ldr	r0, [pc, #160]	; (800b05c <udp_input_local_match+0xbc>)
 800afbc:	f002 ffd2 	bl	800df64 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d105      	bne.n	800afd2 <udp_input_local_match+0x32>
 800afc6:	4b23      	ldr	r3, [pc, #140]	; (800b054 <udp_input_local_match+0xb4>)
 800afc8:	2288      	movs	r2, #136	; 0x88
 800afca:	4925      	ldr	r1, [pc, #148]	; (800b060 <udp_input_local_match+0xc0>)
 800afcc:	4823      	ldr	r0, [pc, #140]	; (800b05c <udp_input_local_match+0xbc>)
 800afce:	f002 ffc9 	bl	800df64 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	7a1b      	ldrb	r3, [r3, #8]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00b      	beq.n	800aff2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	7a1a      	ldrb	r2, [r3, #8]
 800afde:	4b21      	ldr	r3, [pc, #132]	; (800b064 <udp_input_local_match+0xc4>)
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800afe6:	3301      	adds	r3, #1
 800afe8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800afea:	429a      	cmp	r2, r3
 800afec:	d001      	beq.n	800aff2 <udp_input_local_match+0x52>
    return 0;
 800afee:	2300      	movs	r3, #0
 800aff0:	e02b      	b.n	800b04a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800aff2:	79fb      	ldrb	r3, [r7, #7]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d018      	beq.n	800b02a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d013      	beq.n	800b026 <udp_input_local_match+0x86>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00f      	beq.n	800b026 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b006:	4b17      	ldr	r3, [pc, #92]	; (800b064 <udp_input_local_match+0xc4>)
 800b008:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b00e:	d00a      	beq.n	800b026 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	4b13      	ldr	r3, [pc, #76]	; (800b064 <udp_input_local_match+0xc4>)
 800b016:	695b      	ldr	r3, [r3, #20]
 800b018:	405a      	eors	r2, r3
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	3308      	adds	r3, #8
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b022:	2b00      	cmp	r3, #0
 800b024:	d110      	bne.n	800b048 <udp_input_local_match+0xa8>
          return 1;
 800b026:	2301      	movs	r3, #1
 800b028:	e00f      	b.n	800b04a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d009      	beq.n	800b044 <udp_input_local_match+0xa4>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d005      	beq.n	800b044 <udp_input_local_match+0xa4>
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	4b09      	ldr	r3, [pc, #36]	; (800b064 <udp_input_local_match+0xc4>)
 800b03e:	695b      	ldr	r3, [r3, #20]
 800b040:	429a      	cmp	r2, r3
 800b042:	d101      	bne.n	800b048 <udp_input_local_match+0xa8>
        return 1;
 800b044:	2301      	movs	r3, #1
 800b046:	e000      	b.n	800b04a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	080113cc 	.word	0x080113cc
 800b058:	080113fc 	.word	0x080113fc
 800b05c:	08011420 	.word	0x08011420
 800b060:	08011448 	.word	0x08011448
 800b064:	20003404 	.word	0x20003404

0800b068 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b068:	b590      	push	{r4, r7, lr}
 800b06a:	b08d      	sub	sp, #52	; 0x34
 800b06c:	af02      	add	r7, sp, #8
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b072:	2300      	movs	r3, #0
 800b074:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d105      	bne.n	800b088 <udp_input+0x20>
 800b07c:	4b7c      	ldr	r3, [pc, #496]	; (800b270 <udp_input+0x208>)
 800b07e:	22cf      	movs	r2, #207	; 0xcf
 800b080:	497c      	ldr	r1, [pc, #496]	; (800b274 <udp_input+0x20c>)
 800b082:	487d      	ldr	r0, [pc, #500]	; (800b278 <udp_input+0x210>)
 800b084:	f002 ff6e 	bl	800df64 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d105      	bne.n	800b09a <udp_input+0x32>
 800b08e:	4b78      	ldr	r3, [pc, #480]	; (800b270 <udp_input+0x208>)
 800b090:	22d0      	movs	r2, #208	; 0xd0
 800b092:	497a      	ldr	r1, [pc, #488]	; (800b27c <udp_input+0x214>)
 800b094:	4878      	ldr	r0, [pc, #480]	; (800b278 <udp_input+0x210>)
 800b096:	f002 ff65 	bl	800df64 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	895b      	ldrh	r3, [r3, #10]
 800b09e:	2b07      	cmp	r3, #7
 800b0a0:	d803      	bhi.n	800b0aa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f7fa f960 	bl	8005368 <pbuf_free>
    goto end;
 800b0a8:	e0de      	b.n	800b268 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b0b0:	4b73      	ldr	r3, [pc, #460]	; (800b280 <udp_input+0x218>)
 800b0b2:	695b      	ldr	r3, [r3, #20]
 800b0b4:	4a72      	ldr	r2, [pc, #456]	; (800b280 <udp_input+0x218>)
 800b0b6:	6812      	ldr	r2, [r2, #0]
 800b0b8:	4611      	mov	r1, r2
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f001 ffa0 	bl	800d000 <ip4_addr_isbroadcast_u32>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	881b      	ldrh	r3, [r3, #0]
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7f8 fe98 	bl	8003e00 <lwip_htons>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	885b      	ldrh	r3, [r3, #2]
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7f8 fe90 	bl	8003e00 <lwip_htons>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b0f0:	4b64      	ldr	r3, [pc, #400]	; (800b284 <udp_input+0x21c>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	627b      	str	r3, [r7, #36]	; 0x24
 800b0f6:	e054      	b.n	800b1a2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fa:	8a5b      	ldrh	r3, [r3, #18]
 800b0fc:	89fa      	ldrh	r2, [r7, #14]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d14a      	bne.n	800b198 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b102:	7cfb      	ldrb	r3, [r7, #19]
 800b104:	461a      	mov	r2, r3
 800b106:	6839      	ldr	r1, [r7, #0]
 800b108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b10a:	f7ff ff49 	bl	800afa0 <udp_input_local_match>
 800b10e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b110:	2b00      	cmp	r3, #0
 800b112:	d041      	beq.n	800b198 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b116:	7c1b      	ldrb	r3, [r3, #16]
 800b118:	f003 0304 	and.w	r3, r3, #4
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d11d      	bne.n	800b15c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d102      	bne.n	800b12c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b128:	61fb      	str	r3, [r7, #28]
 800b12a:	e017      	b.n	800b15c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b12c:	7cfb      	ldrb	r3, [r7, #19]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d014      	beq.n	800b15c <udp_input+0xf4>
 800b132:	4b53      	ldr	r3, [pc, #332]	; (800b280 <udp_input+0x218>)
 800b134:	695b      	ldr	r3, [r3, #20]
 800b136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b13a:	d10f      	bne.n	800b15c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	3304      	adds	r3, #4
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	429a      	cmp	r2, r3
 800b148:	d008      	beq.n	800b15c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	3304      	adds	r3, #4
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	429a      	cmp	r2, r3
 800b156:	d101      	bne.n	800b15c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15e:	8a9b      	ldrh	r3, [r3, #20]
 800b160:	8a3a      	ldrh	r2, [r7, #16]
 800b162:	429a      	cmp	r2, r3
 800b164:	d118      	bne.n	800b198 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b168:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d005      	beq.n	800b17a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b170:	685a      	ldr	r2, [r3, #4]
 800b172:	4b43      	ldr	r3, [pc, #268]	; (800b280 <udp_input+0x218>)
 800b174:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b176:	429a      	cmp	r2, r3
 800b178:	d10e      	bne.n	800b198 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b17a:	6a3b      	ldr	r3, [r7, #32]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d014      	beq.n	800b1aa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b182:	68da      	ldr	r2, [r3, #12]
 800b184:	6a3b      	ldr	r3, [r7, #32]
 800b186:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b188:	4b3e      	ldr	r3, [pc, #248]	; (800b284 <udp_input+0x21c>)
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b190:	4a3c      	ldr	r2, [pc, #240]	; (800b284 <udp_input+0x21c>)
 800b192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b194:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b196:	e008      	b.n	800b1aa <udp_input+0x142>
      }
    }

    prev = pcb;
 800b198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1a7      	bne.n	800b0f8 <udp_input+0x90>
 800b1a8:	e000      	b.n	800b1ac <udp_input+0x144>
        break;
 800b1aa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d101      	bne.n	800b1b6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d002      	beq.n	800b1c2 <udp_input+0x15a>
    for_us = 1;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	76fb      	strb	r3, [r7, #27]
 800b1c0:	e00a      	b.n	800b1d8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	3304      	adds	r3, #4
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	4b2d      	ldr	r3, [pc, #180]	; (800b280 <udp_input+0x218>)
 800b1ca:	695b      	ldr	r3, [r3, #20]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	bf0c      	ite	eq
 800b1d0:	2301      	moveq	r3, #1
 800b1d2:	2300      	movne	r3, #0
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b1d8:	7efb      	ldrb	r3, [r7, #27]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d041      	beq.n	800b262 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b1de:	2108      	movs	r1, #8
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7fa f83b 	bl	800525c <pbuf_remove_header>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00a      	beq.n	800b202 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b1ec:	4b20      	ldr	r3, [pc, #128]	; (800b270 <udp_input+0x208>)
 800b1ee:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b1f2:	4925      	ldr	r1, [pc, #148]	; (800b288 <udp_input+0x220>)
 800b1f4:	4820      	ldr	r0, [pc, #128]	; (800b278 <udp_input+0x210>)
 800b1f6:	f002 feb5 	bl	800df64 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f7fa f8b4 	bl	8005368 <pbuf_free>
      goto end;
 800b200:	e032      	b.n	800b268 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b204:	2b00      	cmp	r3, #0
 800b206:	d012      	beq.n	800b22e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20a:	699b      	ldr	r3, [r3, #24]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d00a      	beq.n	800b226 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b212:	699c      	ldr	r4, [r3, #24]
 800b214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b216:	69d8      	ldr	r0, [r3, #28]
 800b218:	8a3b      	ldrh	r3, [r7, #16]
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	4b1b      	ldr	r3, [pc, #108]	; (800b28c <udp_input+0x224>)
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b222:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b224:	e021      	b.n	800b26a <udp_input+0x202>
        pbuf_free(p);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f7fa f89e 	bl	8005368 <pbuf_free>
        goto end;
 800b22c:	e01c      	b.n	800b268 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b22e:	7cfb      	ldrb	r3, [r7, #19]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d112      	bne.n	800b25a <udp_input+0x1f2>
 800b234:	4b12      	ldr	r3, [pc, #72]	; (800b280 <udp_input+0x218>)
 800b236:	695b      	ldr	r3, [r3, #20]
 800b238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b23c:	2be0      	cmp	r3, #224	; 0xe0
 800b23e:	d00c      	beq.n	800b25a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b240:	4b0f      	ldr	r3, [pc, #60]	; (800b280 <udp_input+0x218>)
 800b242:	899b      	ldrh	r3, [r3, #12]
 800b244:	3308      	adds	r3, #8
 800b246:	b29b      	uxth	r3, r3
 800b248:	b21b      	sxth	r3, r3
 800b24a:	4619      	mov	r1, r3
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f7fa f878 	bl	8005342 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b252:	2103      	movs	r1, #3
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f001 fbb3 	bl	800c9c0 <icmp_dest_unreach>
      pbuf_free(p);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7fa f884 	bl	8005368 <pbuf_free>
  return;
 800b260:	e003      	b.n	800b26a <udp_input+0x202>
    pbuf_free(p);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f7fa f880 	bl	8005368 <pbuf_free>
  return;
 800b268:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b26a:	372c      	adds	r7, #44	; 0x2c
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd90      	pop	{r4, r7, pc}
 800b270:	080113cc 	.word	0x080113cc
 800b274:	08011470 	.word	0x08011470
 800b278:	08011420 	.word	0x08011420
 800b27c:	08011488 	.word	0x08011488
 800b280:	20003404 	.word	0x20003404
 800b284:	20008b20 	.word	0x20008b20
 800b288:	080114a4 	.word	0x080114a4
 800b28c:	20003414 	.word	0x20003414

0800b290 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d109      	bne.n	800b2b4 <udp_send+0x24>
 800b2a0:	4b11      	ldr	r3, [pc, #68]	; (800b2e8 <udp_send+0x58>)
 800b2a2:	f240 12d5 	movw	r2, #469	; 0x1d5
 800b2a6:	4911      	ldr	r1, [pc, #68]	; (800b2ec <udp_send+0x5c>)
 800b2a8:	4811      	ldr	r0, [pc, #68]	; (800b2f0 <udp_send+0x60>)
 800b2aa:	f002 fe5b 	bl	800df64 <iprintf>
 800b2ae:	f06f 030f 	mvn.w	r3, #15
 800b2b2:	e015      	b.n	800b2e0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d109      	bne.n	800b2ce <udp_send+0x3e>
 800b2ba:	4b0b      	ldr	r3, [pc, #44]	; (800b2e8 <udp_send+0x58>)
 800b2bc:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b2c0:	490c      	ldr	r1, [pc, #48]	; (800b2f4 <udp_send+0x64>)
 800b2c2:	480b      	ldr	r0, [pc, #44]	; (800b2f0 <udp_send+0x60>)
 800b2c4:	f002 fe4e 	bl	800df64 <iprintf>
 800b2c8:	f06f 030f 	mvn.w	r3, #15
 800b2cc:	e008      	b.n	800b2e0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	1d1a      	adds	r2, r3, #4
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	8a9b      	ldrh	r3, [r3, #20]
 800b2d6:	6839      	ldr	r1, [r7, #0]
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 f80d 	bl	800b2f8 <udp_sendto>
 800b2de:	4603      	mov	r3, r0
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3708      	adds	r7, #8
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	080113cc 	.word	0x080113cc
 800b2ec:	080114c0 	.word	0x080114c0
 800b2f0:	08011420 	.word	0x08011420
 800b2f4:	080114d8 	.word	0x080114d8

0800b2f8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b088      	sub	sp, #32
 800b2fc:	af02      	add	r7, sp, #8
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	607a      	str	r2, [r7, #4]
 800b304:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d109      	bne.n	800b320 <udp_sendto+0x28>
 800b30c:	4b23      	ldr	r3, [pc, #140]	; (800b39c <udp_sendto+0xa4>)
 800b30e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b312:	4923      	ldr	r1, [pc, #140]	; (800b3a0 <udp_sendto+0xa8>)
 800b314:	4823      	ldr	r0, [pc, #140]	; (800b3a4 <udp_sendto+0xac>)
 800b316:	f002 fe25 	bl	800df64 <iprintf>
 800b31a:	f06f 030f 	mvn.w	r3, #15
 800b31e:	e038      	b.n	800b392 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d109      	bne.n	800b33a <udp_sendto+0x42>
 800b326:	4b1d      	ldr	r3, [pc, #116]	; (800b39c <udp_sendto+0xa4>)
 800b328:	f240 2219 	movw	r2, #537	; 0x219
 800b32c:	491e      	ldr	r1, [pc, #120]	; (800b3a8 <udp_sendto+0xb0>)
 800b32e:	481d      	ldr	r0, [pc, #116]	; (800b3a4 <udp_sendto+0xac>)
 800b330:	f002 fe18 	bl	800df64 <iprintf>
 800b334:	f06f 030f 	mvn.w	r3, #15
 800b338:	e02b      	b.n	800b392 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d109      	bne.n	800b354 <udp_sendto+0x5c>
 800b340:	4b16      	ldr	r3, [pc, #88]	; (800b39c <udp_sendto+0xa4>)
 800b342:	f240 221a 	movw	r2, #538	; 0x21a
 800b346:	4919      	ldr	r1, [pc, #100]	; (800b3ac <udp_sendto+0xb4>)
 800b348:	4816      	ldr	r0, [pc, #88]	; (800b3a4 <udp_sendto+0xac>)
 800b34a:	f002 fe0b 	bl	800df64 <iprintf>
 800b34e:	f06f 030f 	mvn.w	r3, #15
 800b352:	e01e      	b.n	800b392 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	7a1b      	ldrb	r3, [r3, #8]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d006      	beq.n	800b36a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	7a1b      	ldrb	r3, [r3, #8]
 800b360:	4618      	mov	r0, r3
 800b362:	f7f9 fca1 	bl	8004ca8 <netif_get_by_index>
 800b366:	6178      	str	r0, [r7, #20]
 800b368:	e003      	b.n	800b372 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f001 fbb2 	bl	800cad4 <ip4_route>
 800b370:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d102      	bne.n	800b37e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800b378:	f06f 0303 	mvn.w	r3, #3
 800b37c:	e009      	b.n	800b392 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800b37e:	887a      	ldrh	r2, [r7, #2]
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	9300      	str	r3, [sp, #0]
 800b384:	4613      	mov	r3, r2
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	68b9      	ldr	r1, [r7, #8]
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f000 f810 	bl	800b3b0 <udp_sendto_if>
 800b390:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b392:	4618      	mov	r0, r3
 800b394:	3718      	adds	r7, #24
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	080113cc 	.word	0x080113cc
 800b3a0:	080114f0 	.word	0x080114f0
 800b3a4:	08011420 	.word	0x08011420
 800b3a8:	08011508 	.word	0x08011508
 800b3ac:	08011524 	.word	0x08011524

0800b3b0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b088      	sub	sp, #32
 800b3b4:	af02      	add	r7, sp, #8
 800b3b6:	60f8      	str	r0, [r7, #12]
 800b3b8:	60b9      	str	r1, [r7, #8]
 800b3ba:	607a      	str	r2, [r7, #4]
 800b3bc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d109      	bne.n	800b3d8 <udp_sendto_if+0x28>
 800b3c4:	4b2e      	ldr	r3, [pc, #184]	; (800b480 <udp_sendto_if+0xd0>)
 800b3c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b3ca:	492e      	ldr	r1, [pc, #184]	; (800b484 <udp_sendto_if+0xd4>)
 800b3cc:	482e      	ldr	r0, [pc, #184]	; (800b488 <udp_sendto_if+0xd8>)
 800b3ce:	f002 fdc9 	bl	800df64 <iprintf>
 800b3d2:	f06f 030f 	mvn.w	r3, #15
 800b3d6:	e04f      	b.n	800b478 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d109      	bne.n	800b3f2 <udp_sendto_if+0x42>
 800b3de:	4b28      	ldr	r3, [pc, #160]	; (800b480 <udp_sendto_if+0xd0>)
 800b3e0:	f240 2281 	movw	r2, #641	; 0x281
 800b3e4:	4929      	ldr	r1, [pc, #164]	; (800b48c <udp_sendto_if+0xdc>)
 800b3e6:	4828      	ldr	r0, [pc, #160]	; (800b488 <udp_sendto_if+0xd8>)
 800b3e8:	f002 fdbc 	bl	800df64 <iprintf>
 800b3ec:	f06f 030f 	mvn.w	r3, #15
 800b3f0:	e042      	b.n	800b478 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d109      	bne.n	800b40c <udp_sendto_if+0x5c>
 800b3f8:	4b21      	ldr	r3, [pc, #132]	; (800b480 <udp_sendto_if+0xd0>)
 800b3fa:	f240 2282 	movw	r2, #642	; 0x282
 800b3fe:	4924      	ldr	r1, [pc, #144]	; (800b490 <udp_sendto_if+0xe0>)
 800b400:	4821      	ldr	r0, [pc, #132]	; (800b488 <udp_sendto_if+0xd8>)
 800b402:	f002 fdaf 	bl	800df64 <iprintf>
 800b406:	f06f 030f 	mvn.w	r3, #15
 800b40a:	e035      	b.n	800b478 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b40c:	6a3b      	ldr	r3, [r7, #32]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d109      	bne.n	800b426 <udp_sendto_if+0x76>
 800b412:	4b1b      	ldr	r3, [pc, #108]	; (800b480 <udp_sendto_if+0xd0>)
 800b414:	f240 2283 	movw	r2, #643	; 0x283
 800b418:	491e      	ldr	r1, [pc, #120]	; (800b494 <udp_sendto_if+0xe4>)
 800b41a:	481b      	ldr	r0, [pc, #108]	; (800b488 <udp_sendto_if+0xd8>)
 800b41c:	f002 fda2 	bl	800df64 <iprintf>
 800b420:	f06f 030f 	mvn.w	r3, #15
 800b424:	e028      	b.n	800b478 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d009      	beq.n	800b440 <udp_sendto_if+0x90>
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d005      	beq.n	800b440 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b43c:	2be0      	cmp	r3, #224	; 0xe0
 800b43e:	d103      	bne.n	800b448 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800b440:	6a3b      	ldr	r3, [r7, #32]
 800b442:	3304      	adds	r3, #4
 800b444:	617b      	str	r3, [r7, #20]
 800b446:	e00b      	b.n	800b460 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	6a3b      	ldr	r3, [r7, #32]
 800b44e:	3304      	adds	r3, #4
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	429a      	cmp	r2, r3
 800b454:	d002      	beq.n	800b45c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800b456:	f06f 0303 	mvn.w	r3, #3
 800b45a:	e00d      	b.n	800b478 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b460:	887a      	ldrh	r2, [r7, #2]
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	9301      	str	r3, [sp, #4]
 800b466:	6a3b      	ldr	r3, [r7, #32]
 800b468:	9300      	str	r3, [sp, #0]
 800b46a:	4613      	mov	r3, r2
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	68b9      	ldr	r1, [r7, #8]
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	f000 f811 	bl	800b498 <udp_sendto_if_src>
 800b476:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3718      	adds	r7, #24
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	080113cc 	.word	0x080113cc
 800b484:	08011540 	.word	0x08011540
 800b488:	08011420 	.word	0x08011420
 800b48c:	0801155c 	.word	0x0801155c
 800b490:	08011578 	.word	0x08011578
 800b494:	08011598 	.word	0x08011598

0800b498 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b08c      	sub	sp, #48	; 0x30
 800b49c:	af04      	add	r7, sp, #16
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
 800b4a4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d109      	bne.n	800b4c0 <udp_sendto_if_src+0x28>
 800b4ac:	4b65      	ldr	r3, [pc, #404]	; (800b644 <udp_sendto_if_src+0x1ac>)
 800b4ae:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b4b2:	4965      	ldr	r1, [pc, #404]	; (800b648 <udp_sendto_if_src+0x1b0>)
 800b4b4:	4865      	ldr	r0, [pc, #404]	; (800b64c <udp_sendto_if_src+0x1b4>)
 800b4b6:	f002 fd55 	bl	800df64 <iprintf>
 800b4ba:	f06f 030f 	mvn.w	r3, #15
 800b4be:	e0bc      	b.n	800b63a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d109      	bne.n	800b4da <udp_sendto_if_src+0x42>
 800b4c6:	4b5f      	ldr	r3, [pc, #380]	; (800b644 <udp_sendto_if_src+0x1ac>)
 800b4c8:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b4cc:	4960      	ldr	r1, [pc, #384]	; (800b650 <udp_sendto_if_src+0x1b8>)
 800b4ce:	485f      	ldr	r0, [pc, #380]	; (800b64c <udp_sendto_if_src+0x1b4>)
 800b4d0:	f002 fd48 	bl	800df64 <iprintf>
 800b4d4:	f06f 030f 	mvn.w	r3, #15
 800b4d8:	e0af      	b.n	800b63a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d109      	bne.n	800b4f4 <udp_sendto_if_src+0x5c>
 800b4e0:	4b58      	ldr	r3, [pc, #352]	; (800b644 <udp_sendto_if_src+0x1ac>)
 800b4e2:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b4e6:	495b      	ldr	r1, [pc, #364]	; (800b654 <udp_sendto_if_src+0x1bc>)
 800b4e8:	4858      	ldr	r0, [pc, #352]	; (800b64c <udp_sendto_if_src+0x1b4>)
 800b4ea:	f002 fd3b 	bl	800df64 <iprintf>
 800b4ee:	f06f 030f 	mvn.w	r3, #15
 800b4f2:	e0a2      	b.n	800b63a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800b4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d109      	bne.n	800b50e <udp_sendto_if_src+0x76>
 800b4fa:	4b52      	ldr	r3, [pc, #328]	; (800b644 <udp_sendto_if_src+0x1ac>)
 800b4fc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b500:	4955      	ldr	r1, [pc, #340]	; (800b658 <udp_sendto_if_src+0x1c0>)
 800b502:	4852      	ldr	r0, [pc, #328]	; (800b64c <udp_sendto_if_src+0x1b4>)
 800b504:	f002 fd2e 	bl	800df64 <iprintf>
 800b508:	f06f 030f 	mvn.w	r3, #15
 800b50c:	e095      	b.n	800b63a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800b50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b510:	2b00      	cmp	r3, #0
 800b512:	d109      	bne.n	800b528 <udp_sendto_if_src+0x90>
 800b514:	4b4b      	ldr	r3, [pc, #300]	; (800b644 <udp_sendto_if_src+0x1ac>)
 800b516:	f240 22d5 	movw	r2, #725	; 0x2d5
 800b51a:	4950      	ldr	r1, [pc, #320]	; (800b65c <udp_sendto_if_src+0x1c4>)
 800b51c:	484b      	ldr	r0, [pc, #300]	; (800b64c <udp_sendto_if_src+0x1b4>)
 800b51e:	f002 fd21 	bl	800df64 <iprintf>
 800b522:	f06f 030f 	mvn.w	r3, #15
 800b526:	e088      	b.n	800b63a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	8a5b      	ldrh	r3, [r3, #18]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d10f      	bne.n	800b550 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b530:	68f9      	ldr	r1, [r7, #12]
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	8a5b      	ldrh	r3, [r3, #18]
 800b536:	461a      	mov	r2, r3
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	f000 f893 	bl	800b664 <udp_bind>
 800b53e:	4603      	mov	r3, r0
 800b540:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b542:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d002      	beq.n	800b550 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b54a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b54e:	e074      	b.n	800b63a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	891b      	ldrh	r3, [r3, #8]
 800b554:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800b558:	4293      	cmp	r3, r2
 800b55a:	d902      	bls.n	800b562 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800b55c:	f04f 33ff 	mov.w	r3, #4294967295
 800b560:	e06b      	b.n	800b63a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800b562:	2108      	movs	r1, #8
 800b564:	68b8      	ldr	r0, [r7, #8]
 800b566:	f7f9 fe69 	bl	800523c <pbuf_add_header>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d015      	beq.n	800b59c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b570:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b574:	2108      	movs	r1, #8
 800b576:	2022      	movs	r0, #34	; 0x22
 800b578:	f7f9 fc12 	bl	8004da0 <pbuf_alloc>
 800b57c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b57e:	69fb      	ldr	r3, [r7, #28]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d102      	bne.n	800b58a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b584:	f04f 33ff 	mov.w	r3, #4294967295
 800b588:	e057      	b.n	800b63a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	891b      	ldrh	r3, [r3, #8]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d006      	beq.n	800b5a0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b592:	68b9      	ldr	r1, [r7, #8]
 800b594:	69f8      	ldr	r0, [r7, #28]
 800b596:	f7f9 ffff 	bl	8005598 <pbuf_chain>
 800b59a:	e001      	b.n	800b5a0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b5a0:	69fb      	ldr	r3, [r7, #28]
 800b5a2:	895b      	ldrh	r3, [r3, #10]
 800b5a4:	2b07      	cmp	r3, #7
 800b5a6:	d806      	bhi.n	800b5b6 <udp_sendto_if_src+0x11e>
 800b5a8:	4b26      	ldr	r3, [pc, #152]	; (800b644 <udp_sendto_if_src+0x1ac>)
 800b5aa:	f240 320d 	movw	r2, #781	; 0x30d
 800b5ae:	492c      	ldr	r1, [pc, #176]	; (800b660 <udp_sendto_if_src+0x1c8>)
 800b5b0:	4826      	ldr	r0, [pc, #152]	; (800b64c <udp_sendto_if_src+0x1b4>)
 800b5b2:	f002 fcd7 	bl	800df64 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	8a5b      	ldrh	r3, [r3, #18]
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7f8 fc1d 	bl	8003e00 <lwip_htons>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b5ce:	887b      	ldrh	r3, [r7, #2]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7f8 fc15 	bl	8003e00 <lwip_htons>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	461a      	mov	r2, r3
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	719a      	strb	r2, [r3, #6]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	891b      	ldrh	r3, [r3, #8]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7f8 fc07 	bl	8003e00 <lwip_htons>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b5fa:	2311      	movs	r3, #17
 800b5fc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	7adb      	ldrb	r3, [r3, #11]
 800b602:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	7a9b      	ldrb	r3, [r3, #10]
 800b608:	7cb9      	ldrb	r1, [r7, #18]
 800b60a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b60c:	9202      	str	r2, [sp, #8]
 800b60e:	7cfa      	ldrb	r2, [r7, #19]
 800b610:	9201      	str	r2, [sp, #4]
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	460b      	mov	r3, r1
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b61a:	69f8      	ldr	r0, [r7, #28]
 800b61c:	f001 fc42 	bl	800cea4 <ip4_output_if_src>
 800b620:	4603      	mov	r3, r0
 800b622:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800b624:	69fa      	ldr	r2, [r7, #28]
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d004      	beq.n	800b636 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800b62c:	69f8      	ldr	r0, [r7, #28]
 800b62e:	f7f9 fe9b 	bl	8005368 <pbuf_free>
    q = NULL;
 800b632:	2300      	movs	r3, #0
 800b634:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800b636:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3720      	adds	r7, #32
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	080113cc 	.word	0x080113cc
 800b648:	080115b8 	.word	0x080115b8
 800b64c:	08011420 	.word	0x08011420
 800b650:	080115d8 	.word	0x080115d8
 800b654:	080115f8 	.word	0x080115f8
 800b658:	0801161c 	.word	0x0801161c
 800b65c:	08011640 	.word	0x08011640
 800b660:	08011664 	.word	0x08011664

0800b664 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b086      	sub	sp, #24
 800b668:	af00      	add	r7, sp, #0
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	4613      	mov	r3, r2
 800b670:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d101      	bne.n	800b67c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b678:	4b39      	ldr	r3, [pc, #228]	; (800b760 <udp_bind+0xfc>)
 800b67a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d109      	bne.n	800b696 <udp_bind+0x32>
 800b682:	4b38      	ldr	r3, [pc, #224]	; (800b764 <udp_bind+0x100>)
 800b684:	f240 32b7 	movw	r2, #951	; 0x3b7
 800b688:	4937      	ldr	r1, [pc, #220]	; (800b768 <udp_bind+0x104>)
 800b68a:	4838      	ldr	r0, [pc, #224]	; (800b76c <udp_bind+0x108>)
 800b68c:	f002 fc6a 	bl	800df64 <iprintf>
 800b690:	f06f 030f 	mvn.w	r3, #15
 800b694:	e060      	b.n	800b758 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b696:	2300      	movs	r3, #0
 800b698:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b69a:	4b35      	ldr	r3, [pc, #212]	; (800b770 <udp_bind+0x10c>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	617b      	str	r3, [r7, #20]
 800b6a0:	e009      	b.n	800b6b6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d102      	bne.n	800b6b0 <udp_bind+0x4c>
      rebind = 1;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	74fb      	strb	r3, [r7, #19]
      break;
 800b6ae:	e005      	b.n	800b6bc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	617b      	str	r3, [r7, #20]
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1f2      	bne.n	800b6a2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800b6bc:	88fb      	ldrh	r3, [r7, #6]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d109      	bne.n	800b6d6 <udp_bind+0x72>
    port = udp_new_port();
 800b6c2:	f7ff fc35 	bl	800af30 <udp_new_port>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b6ca:	88fb      	ldrh	r3, [r7, #6]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d12c      	bne.n	800b72a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b6d0:	f06f 0307 	mvn.w	r3, #7
 800b6d4:	e040      	b.n	800b758 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b6d6:	4b26      	ldr	r3, [pc, #152]	; (800b770 <udp_bind+0x10c>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	617b      	str	r3, [r7, #20]
 800b6dc:	e022      	b.n	800b724 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d01b      	beq.n	800b71e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	8a5b      	ldrh	r3, [r3, #18]
 800b6ea:	88fa      	ldrh	r2, [r7, #6]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d116      	bne.n	800b71e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d00d      	beq.n	800b718 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d00a      	beq.n	800b718 <udp_bind+0xb4>
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d006      	beq.n	800b718 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b70a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d003      	beq.n	800b718 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d102      	bne.n	800b71e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800b718:	f06f 0307 	mvn.w	r3, #7
 800b71c:	e01c      	b.n	800b758 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	617b      	str	r3, [r7, #20]
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1d9      	bne.n	800b6de <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d002      	beq.n	800b736 <udp_bind+0xd2>
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	e000      	b.n	800b738 <udp_bind+0xd4>
 800b736:	2300      	movs	r3, #0
 800b738:	68fa      	ldr	r2, [r7, #12]
 800b73a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	88fa      	ldrh	r2, [r7, #6]
 800b740:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b742:	7cfb      	ldrb	r3, [r7, #19]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d106      	bne.n	800b756 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b748:	4b09      	ldr	r3, [pc, #36]	; (800b770 <udp_bind+0x10c>)
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800b750:	4a07      	ldr	r2, [pc, #28]	; (800b770 <udp_bind+0x10c>)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3718      	adds	r7, #24
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	08011ed4 	.word	0x08011ed4
 800b764:	080113cc 	.word	0x080113cc
 800b768:	08011694 	.word	0x08011694
 800b76c:	08011420 	.word	0x08011420
 800b770:	20008b20 	.word	0x20008b20

0800b774 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	4613      	mov	r3, r2
 800b780:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d109      	bne.n	800b79c <udp_connect+0x28>
 800b788:	4b2c      	ldr	r3, [pc, #176]	; (800b83c <udp_connect+0xc8>)
 800b78a:	f240 4235 	movw	r2, #1077	; 0x435
 800b78e:	492c      	ldr	r1, [pc, #176]	; (800b840 <udp_connect+0xcc>)
 800b790:	482c      	ldr	r0, [pc, #176]	; (800b844 <udp_connect+0xd0>)
 800b792:	f002 fbe7 	bl	800df64 <iprintf>
 800b796:	f06f 030f 	mvn.w	r3, #15
 800b79a:	e04b      	b.n	800b834 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d109      	bne.n	800b7b6 <udp_connect+0x42>
 800b7a2:	4b26      	ldr	r3, [pc, #152]	; (800b83c <udp_connect+0xc8>)
 800b7a4:	f240 4236 	movw	r2, #1078	; 0x436
 800b7a8:	4927      	ldr	r1, [pc, #156]	; (800b848 <udp_connect+0xd4>)
 800b7aa:	4826      	ldr	r0, [pc, #152]	; (800b844 <udp_connect+0xd0>)
 800b7ac:	f002 fbda 	bl	800df64 <iprintf>
 800b7b0:	f06f 030f 	mvn.w	r3, #15
 800b7b4:	e03e      	b.n	800b834 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	8a5b      	ldrh	r3, [r3, #18]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10f      	bne.n	800b7de <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b7be:	68f9      	ldr	r1, [r7, #12]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	8a5b      	ldrh	r3, [r3, #18]
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	68f8      	ldr	r0, [r7, #12]
 800b7c8:	f7ff ff4c 	bl	800b664 <udp_bind>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b7d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d002      	beq.n	800b7de <udp_connect+0x6a>
      return err;
 800b7d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b7dc:	e02a      	b.n	800b834 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d002      	beq.n	800b7ea <udp_connect+0x76>
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	e000      	b.n	800b7ec <udp_connect+0x78>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	88fa      	ldrh	r2, [r7, #6]
 800b7f4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	7c1b      	ldrb	r3, [r3, #16]
 800b7fa:	f043 0304 	orr.w	r3, r3, #4
 800b7fe:	b2da      	uxtb	r2, r3
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b804:	4b11      	ldr	r3, [pc, #68]	; (800b84c <udp_connect+0xd8>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	617b      	str	r3, [r7, #20]
 800b80a:	e008      	b.n	800b81e <udp_connect+0xaa>
    if (pcb == ipcb) {
 800b80c:	68fa      	ldr	r2, [r7, #12]
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	429a      	cmp	r2, r3
 800b812:	d101      	bne.n	800b818 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800b814:	2300      	movs	r3, #0
 800b816:	e00d      	b.n	800b834 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	617b      	str	r3, [r7, #20]
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1f3      	bne.n	800b80c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800b824:	4b09      	ldr	r3, [pc, #36]	; (800b84c <udp_connect+0xd8>)
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800b82c:	4a07      	ldr	r2, [pc, #28]	; (800b84c <udp_connect+0xd8>)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800b832:	2300      	movs	r3, #0
}
 800b834:	4618      	mov	r0, r3
 800b836:	3718      	adds	r7, #24
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	080113cc 	.word	0x080113cc
 800b840:	080116ac 	.word	0x080116ac
 800b844:	08011420 	.word	0x08011420
 800b848:	080116c8 	.word	0x080116c8
 800b84c:	20008b20 	.word	0x20008b20

0800b850 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	60b9      	str	r1, [r7, #8]
 800b85a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d107      	bne.n	800b872 <udp_recv+0x22>
 800b862:	4b08      	ldr	r3, [pc, #32]	; (800b884 <udp_recv+0x34>)
 800b864:	f240 428a 	movw	r2, #1162	; 0x48a
 800b868:	4907      	ldr	r1, [pc, #28]	; (800b888 <udp_recv+0x38>)
 800b86a:	4808      	ldr	r0, [pc, #32]	; (800b88c <udp_recv+0x3c>)
 800b86c:	f002 fb7a 	bl	800df64 <iprintf>
 800b870:	e005      	b.n	800b87e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	68ba      	ldr	r2, [r7, #8]
 800b876:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	61da      	str	r2, [r3, #28]
}
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	080113cc 	.word	0x080113cc
 800b888:	08011700 	.word	0x08011700
 800b88c:	08011420 	.word	0x08011420

0800b890 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b896:	2000      	movs	r0, #0
 800b898:	f7f8 ff08 	bl	80046ac <memp_malloc>
 800b89c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d007      	beq.n	800b8b4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b8a4:	2220      	movs	r2, #32
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f002 fb53 	bl	800df54 <memset>
    pcb->ttl = UDP_TTL;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	22ff      	movs	r2, #255	; 0xff
 800b8b2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800b8b4:	687b      	ldr	r3, [r7, #4]
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3708      	adds	r7, #8
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
	...

0800b8c0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d01e      	beq.n	800b90e <udp_netif_ip_addr_changed+0x4e>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d01a      	beq.n	800b90e <udp_netif_ip_addr_changed+0x4e>
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d017      	beq.n	800b90e <udp_netif_ip_addr_changed+0x4e>
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d013      	beq.n	800b90e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b8e6:	4b0d      	ldr	r3, [pc, #52]	; (800b91c <udp_netif_ip_addr_changed+0x5c>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	60fb      	str	r3, [r7, #12]
 800b8ec:	e00c      	b.n	800b908 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d103      	bne.n	800b902 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	60fb      	str	r3, [r7, #12]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d1ef      	bne.n	800b8ee <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b90e:	bf00      	nop
 800b910:	3714      	adds	r7, #20
 800b912:	46bd      	mov	sp, r7
 800b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b918:	4770      	bx	lr
 800b91a:	bf00      	nop
 800b91c:	20008b20 	.word	0x20008b20

0800b920 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b928:	4915      	ldr	r1, [pc, #84]	; (800b980 <etharp_free_entry+0x60>)
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	4613      	mov	r3, r2
 800b92e:	005b      	lsls	r3, r3, #1
 800b930:	4413      	add	r3, r2
 800b932:	00db      	lsls	r3, r3, #3
 800b934:	440b      	add	r3, r1
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d013      	beq.n	800b964 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b93c:	4910      	ldr	r1, [pc, #64]	; (800b980 <etharp_free_entry+0x60>)
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	4613      	mov	r3, r2
 800b942:	005b      	lsls	r3, r3, #1
 800b944:	4413      	add	r3, r2
 800b946:	00db      	lsls	r3, r3, #3
 800b948:	440b      	add	r3, r1
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7f9 fd0b 	bl	8005368 <pbuf_free>
    arp_table[i].q = NULL;
 800b952:	490b      	ldr	r1, [pc, #44]	; (800b980 <etharp_free_entry+0x60>)
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	4613      	mov	r3, r2
 800b958:	005b      	lsls	r3, r3, #1
 800b95a:	4413      	add	r3, r2
 800b95c:	00db      	lsls	r3, r3, #3
 800b95e:	440b      	add	r3, r1
 800b960:	2200      	movs	r2, #0
 800b962:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b964:	4906      	ldr	r1, [pc, #24]	; (800b980 <etharp_free_entry+0x60>)
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	4613      	mov	r3, r2
 800b96a:	005b      	lsls	r3, r3, #1
 800b96c:	4413      	add	r3, r2
 800b96e:	00db      	lsls	r3, r3, #3
 800b970:	440b      	add	r3, r1
 800b972:	3314      	adds	r3, #20
 800b974:	2200      	movs	r2, #0
 800b976:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b978:	bf00      	nop
 800b97a:	3708      	adds	r7, #8
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	2000010c 	.word	0x2000010c

0800b984 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b98a:	2300      	movs	r3, #0
 800b98c:	607b      	str	r3, [r7, #4]
 800b98e:	e096      	b.n	800babe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b990:	494f      	ldr	r1, [pc, #316]	; (800bad0 <etharp_tmr+0x14c>)
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	4613      	mov	r3, r2
 800b996:	005b      	lsls	r3, r3, #1
 800b998:	4413      	add	r3, r2
 800b99a:	00db      	lsls	r3, r3, #3
 800b99c:	440b      	add	r3, r1
 800b99e:	3314      	adds	r3, #20
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800b9a4:	78fb      	ldrb	r3, [r7, #3]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f000 8086 	beq.w	800bab8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800b9ac:	4948      	ldr	r1, [pc, #288]	; (800bad0 <etharp_tmr+0x14c>)
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	005b      	lsls	r3, r3, #1
 800b9b4:	4413      	add	r3, r2
 800b9b6:	00db      	lsls	r3, r3, #3
 800b9b8:	440b      	add	r3, r1
 800b9ba:	3312      	adds	r3, #18
 800b9bc:	881b      	ldrh	r3, [r3, #0]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	b298      	uxth	r0, r3
 800b9c2:	4943      	ldr	r1, [pc, #268]	; (800bad0 <etharp_tmr+0x14c>)
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	005b      	lsls	r3, r3, #1
 800b9ca:	4413      	add	r3, r2
 800b9cc:	00db      	lsls	r3, r3, #3
 800b9ce:	440b      	add	r3, r1
 800b9d0:	3312      	adds	r3, #18
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b9d6:	493e      	ldr	r1, [pc, #248]	; (800bad0 <etharp_tmr+0x14c>)
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	4613      	mov	r3, r2
 800b9dc:	005b      	lsls	r3, r3, #1
 800b9de:	4413      	add	r3, r2
 800b9e0:	00db      	lsls	r3, r3, #3
 800b9e2:	440b      	add	r3, r1
 800b9e4:	3312      	adds	r3, #18
 800b9e6:	881b      	ldrh	r3, [r3, #0]
 800b9e8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800b9ec:	d215      	bcs.n	800ba1a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b9ee:	4938      	ldr	r1, [pc, #224]	; (800bad0 <etharp_tmr+0x14c>)
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	005b      	lsls	r3, r3, #1
 800b9f6:	4413      	add	r3, r2
 800b9f8:	00db      	lsls	r3, r3, #3
 800b9fa:	440b      	add	r3, r1
 800b9fc:	3314      	adds	r3, #20
 800b9fe:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d10e      	bne.n	800ba22 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ba04:	4932      	ldr	r1, [pc, #200]	; (800bad0 <etharp_tmr+0x14c>)
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	4613      	mov	r3, r2
 800ba0a:	005b      	lsls	r3, r3, #1
 800ba0c:	4413      	add	r3, r2
 800ba0e:	00db      	lsls	r3, r3, #3
 800ba10:	440b      	add	r3, r1
 800ba12:	3312      	adds	r3, #18
 800ba14:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ba16:	2b04      	cmp	r3, #4
 800ba18:	d903      	bls.n	800ba22 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f7ff ff80 	bl	800b920 <etharp_free_entry>
 800ba20:	e04a      	b.n	800bab8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ba22:	492b      	ldr	r1, [pc, #172]	; (800bad0 <etharp_tmr+0x14c>)
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	4613      	mov	r3, r2
 800ba28:	005b      	lsls	r3, r3, #1
 800ba2a:	4413      	add	r3, r2
 800ba2c:	00db      	lsls	r3, r3, #3
 800ba2e:	440b      	add	r3, r1
 800ba30:	3314      	adds	r3, #20
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	2b03      	cmp	r3, #3
 800ba36:	d10a      	bne.n	800ba4e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ba38:	4925      	ldr	r1, [pc, #148]	; (800bad0 <etharp_tmr+0x14c>)
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	005b      	lsls	r3, r3, #1
 800ba40:	4413      	add	r3, r2
 800ba42:	00db      	lsls	r3, r3, #3
 800ba44:	440b      	add	r3, r1
 800ba46:	3314      	adds	r3, #20
 800ba48:	2204      	movs	r2, #4
 800ba4a:	701a      	strb	r2, [r3, #0]
 800ba4c:	e034      	b.n	800bab8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ba4e:	4920      	ldr	r1, [pc, #128]	; (800bad0 <etharp_tmr+0x14c>)
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	4613      	mov	r3, r2
 800ba54:	005b      	lsls	r3, r3, #1
 800ba56:	4413      	add	r3, r2
 800ba58:	00db      	lsls	r3, r3, #3
 800ba5a:	440b      	add	r3, r1
 800ba5c:	3314      	adds	r3, #20
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	2b04      	cmp	r3, #4
 800ba62:	d10a      	bne.n	800ba7a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ba64:	491a      	ldr	r1, [pc, #104]	; (800bad0 <etharp_tmr+0x14c>)
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	4613      	mov	r3, r2
 800ba6a:	005b      	lsls	r3, r3, #1
 800ba6c:	4413      	add	r3, r2
 800ba6e:	00db      	lsls	r3, r3, #3
 800ba70:	440b      	add	r3, r1
 800ba72:	3314      	adds	r3, #20
 800ba74:	2202      	movs	r2, #2
 800ba76:	701a      	strb	r2, [r3, #0]
 800ba78:	e01e      	b.n	800bab8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ba7a:	4915      	ldr	r1, [pc, #84]	; (800bad0 <etharp_tmr+0x14c>)
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	4613      	mov	r3, r2
 800ba80:	005b      	lsls	r3, r3, #1
 800ba82:	4413      	add	r3, r2
 800ba84:	00db      	lsls	r3, r3, #3
 800ba86:	440b      	add	r3, r1
 800ba88:	3314      	adds	r3, #20
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d113      	bne.n	800bab8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ba90:	490f      	ldr	r1, [pc, #60]	; (800bad0 <etharp_tmr+0x14c>)
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	4613      	mov	r3, r2
 800ba96:	005b      	lsls	r3, r3, #1
 800ba98:	4413      	add	r3, r2
 800ba9a:	00db      	lsls	r3, r3, #3
 800ba9c:	440b      	add	r3, r1
 800ba9e:	3308      	adds	r3, #8
 800baa0:	6818      	ldr	r0, [r3, #0]
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	4613      	mov	r3, r2
 800baa6:	005b      	lsls	r3, r3, #1
 800baa8:	4413      	add	r3, r2
 800baaa:	00db      	lsls	r3, r3, #3
 800baac:	4a08      	ldr	r2, [pc, #32]	; (800bad0 <etharp_tmr+0x14c>)
 800baae:	4413      	add	r3, r2
 800bab0:	3304      	adds	r3, #4
 800bab2:	4619      	mov	r1, r3
 800bab4:	f000 fe6e 	bl	800c794 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	3301      	adds	r3, #1
 800babc:	607b      	str	r3, [r7, #4]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2b09      	cmp	r3, #9
 800bac2:	f77f af65 	ble.w	800b990 <etharp_tmr+0xc>
      }
    }
  }
}
 800bac6:	bf00      	nop
 800bac8:	bf00      	nop
 800baca:	3708      	adds	r7, #8
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	2000010c 	.word	0x2000010c

0800bad4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b08a      	sub	sp, #40	; 0x28
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	460b      	mov	r3, r1
 800bade:	607a      	str	r2, [r7, #4]
 800bae0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bae2:	230a      	movs	r3, #10
 800bae4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bae6:	230a      	movs	r3, #10
 800bae8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800baea:	230a      	movs	r3, #10
 800baec:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800baee:	2300      	movs	r3, #0
 800baf0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800baf2:	230a      	movs	r3, #10
 800baf4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800baf6:	2300      	movs	r3, #0
 800baf8:	83bb      	strh	r3, [r7, #28]
 800bafa:	2300      	movs	r3, #0
 800bafc:	837b      	strh	r3, [r7, #26]
 800bafe:	2300      	movs	r3, #0
 800bb00:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bb02:	2300      	movs	r3, #0
 800bb04:	843b      	strh	r3, [r7, #32]
 800bb06:	e0ae      	b.n	800bc66 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800bb08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bb0c:	49a6      	ldr	r1, [pc, #664]	; (800bda8 <etharp_find_entry+0x2d4>)
 800bb0e:	4613      	mov	r3, r2
 800bb10:	005b      	lsls	r3, r3, #1
 800bb12:	4413      	add	r3, r2
 800bb14:	00db      	lsls	r3, r3, #3
 800bb16:	440b      	add	r3, r1
 800bb18:	3314      	adds	r3, #20
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bb1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bb22:	2b0a      	cmp	r3, #10
 800bb24:	d105      	bne.n	800bb32 <etharp_find_entry+0x5e>
 800bb26:	7dfb      	ldrb	r3, [r7, #23]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d102      	bne.n	800bb32 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800bb2c:	8c3b      	ldrh	r3, [r7, #32]
 800bb2e:	847b      	strh	r3, [r7, #34]	; 0x22
 800bb30:	e095      	b.n	800bc5e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800bb32:	7dfb      	ldrb	r3, [r7, #23]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	f000 8092 	beq.w	800bc5e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bb3a:	7dfb      	ldrb	r3, [r7, #23]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d009      	beq.n	800bb54 <etharp_find_entry+0x80>
 800bb40:	7dfb      	ldrb	r3, [r7, #23]
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d806      	bhi.n	800bb54 <etharp_find_entry+0x80>
 800bb46:	4b99      	ldr	r3, [pc, #612]	; (800bdac <etharp_find_entry+0x2d8>)
 800bb48:	f240 1223 	movw	r2, #291	; 0x123
 800bb4c:	4998      	ldr	r1, [pc, #608]	; (800bdb0 <etharp_find_entry+0x2dc>)
 800bb4e:	4899      	ldr	r0, [pc, #612]	; (800bdb4 <etharp_find_entry+0x2e0>)
 800bb50:	f002 fa08 	bl	800df64 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d020      	beq.n	800bb9c <etharp_find_entry+0xc8>
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6819      	ldr	r1, [r3, #0]
 800bb5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bb62:	4891      	ldr	r0, [pc, #580]	; (800bda8 <etharp_find_entry+0x2d4>)
 800bb64:	4613      	mov	r3, r2
 800bb66:	005b      	lsls	r3, r3, #1
 800bb68:	4413      	add	r3, r2
 800bb6a:	00db      	lsls	r3, r3, #3
 800bb6c:	4403      	add	r3, r0
 800bb6e:	3304      	adds	r3, #4
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4299      	cmp	r1, r3
 800bb74:	d112      	bne.n	800bb9c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d00c      	beq.n	800bb96 <etharp_find_entry+0xc2>
 800bb7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bb80:	4989      	ldr	r1, [pc, #548]	; (800bda8 <etharp_find_entry+0x2d4>)
 800bb82:	4613      	mov	r3, r2
 800bb84:	005b      	lsls	r3, r3, #1
 800bb86:	4413      	add	r3, r2
 800bb88:	00db      	lsls	r3, r3, #3
 800bb8a:	440b      	add	r3, r1
 800bb8c:	3308      	adds	r3, #8
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d102      	bne.n	800bb9c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800bb96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bb9a:	e100      	b.n	800bd9e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800bb9c:	7dfb      	ldrb	r3, [r7, #23]
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d140      	bne.n	800bc24 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800bba2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bba6:	4980      	ldr	r1, [pc, #512]	; (800bda8 <etharp_find_entry+0x2d4>)
 800bba8:	4613      	mov	r3, r2
 800bbaa:	005b      	lsls	r3, r3, #1
 800bbac:	4413      	add	r3, r2
 800bbae:	00db      	lsls	r3, r3, #3
 800bbb0:	440b      	add	r3, r1
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d01a      	beq.n	800bbee <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800bbb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bbbc:	497a      	ldr	r1, [pc, #488]	; (800bda8 <etharp_find_entry+0x2d4>)
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	005b      	lsls	r3, r3, #1
 800bbc2:	4413      	add	r3, r2
 800bbc4:	00db      	lsls	r3, r3, #3
 800bbc6:	440b      	add	r3, r1
 800bbc8:	3312      	adds	r3, #18
 800bbca:	881b      	ldrh	r3, [r3, #0]
 800bbcc:	8bba      	ldrh	r2, [r7, #28]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d845      	bhi.n	800bc5e <etharp_find_entry+0x18a>
            old_queue = i;
 800bbd2:	8c3b      	ldrh	r3, [r7, #32]
 800bbd4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800bbd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bbda:	4973      	ldr	r1, [pc, #460]	; (800bda8 <etharp_find_entry+0x2d4>)
 800bbdc:	4613      	mov	r3, r2
 800bbde:	005b      	lsls	r3, r3, #1
 800bbe0:	4413      	add	r3, r2
 800bbe2:	00db      	lsls	r3, r3, #3
 800bbe4:	440b      	add	r3, r1
 800bbe6:	3312      	adds	r3, #18
 800bbe8:	881b      	ldrh	r3, [r3, #0]
 800bbea:	83bb      	strh	r3, [r7, #28]
 800bbec:	e037      	b.n	800bc5e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800bbee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bbf2:	496d      	ldr	r1, [pc, #436]	; (800bda8 <etharp_find_entry+0x2d4>)
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	005b      	lsls	r3, r3, #1
 800bbf8:	4413      	add	r3, r2
 800bbfa:	00db      	lsls	r3, r3, #3
 800bbfc:	440b      	add	r3, r1
 800bbfe:	3312      	adds	r3, #18
 800bc00:	881b      	ldrh	r3, [r3, #0]
 800bc02:	8b7a      	ldrh	r2, [r7, #26]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d82a      	bhi.n	800bc5e <etharp_find_entry+0x18a>
            old_pending = i;
 800bc08:	8c3b      	ldrh	r3, [r7, #32]
 800bc0a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800bc0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc10:	4965      	ldr	r1, [pc, #404]	; (800bda8 <etharp_find_entry+0x2d4>)
 800bc12:	4613      	mov	r3, r2
 800bc14:	005b      	lsls	r3, r3, #1
 800bc16:	4413      	add	r3, r2
 800bc18:	00db      	lsls	r3, r3, #3
 800bc1a:	440b      	add	r3, r1
 800bc1c:	3312      	adds	r3, #18
 800bc1e:	881b      	ldrh	r3, [r3, #0]
 800bc20:	837b      	strh	r3, [r7, #26]
 800bc22:	e01c      	b.n	800bc5e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800bc24:	7dfb      	ldrb	r3, [r7, #23]
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d919      	bls.n	800bc5e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800bc2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc2e:	495e      	ldr	r1, [pc, #376]	; (800bda8 <etharp_find_entry+0x2d4>)
 800bc30:	4613      	mov	r3, r2
 800bc32:	005b      	lsls	r3, r3, #1
 800bc34:	4413      	add	r3, r2
 800bc36:	00db      	lsls	r3, r3, #3
 800bc38:	440b      	add	r3, r1
 800bc3a:	3312      	adds	r3, #18
 800bc3c:	881b      	ldrh	r3, [r3, #0]
 800bc3e:	8b3a      	ldrh	r2, [r7, #24]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d80c      	bhi.n	800bc5e <etharp_find_entry+0x18a>
            old_stable = i;
 800bc44:	8c3b      	ldrh	r3, [r7, #32]
 800bc46:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800bc48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc4c:	4956      	ldr	r1, [pc, #344]	; (800bda8 <etharp_find_entry+0x2d4>)
 800bc4e:	4613      	mov	r3, r2
 800bc50:	005b      	lsls	r3, r3, #1
 800bc52:	4413      	add	r3, r2
 800bc54:	00db      	lsls	r3, r3, #3
 800bc56:	440b      	add	r3, r1
 800bc58:	3312      	adds	r3, #18
 800bc5a:	881b      	ldrh	r3, [r3, #0]
 800bc5c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bc5e:	8c3b      	ldrh	r3, [r7, #32]
 800bc60:	3301      	adds	r3, #1
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	843b      	strh	r3, [r7, #32]
 800bc66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bc6a:	2b09      	cmp	r3, #9
 800bc6c:	f77f af4c 	ble.w	800bb08 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800bc70:	7afb      	ldrb	r3, [r7, #11]
 800bc72:	f003 0302 	and.w	r3, r3, #2
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d108      	bne.n	800bc8c <etharp_find_entry+0x1b8>
 800bc7a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bc7e:	2b0a      	cmp	r3, #10
 800bc80:	d107      	bne.n	800bc92 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800bc82:	7afb      	ldrb	r3, [r7, #11]
 800bc84:	f003 0301 	and.w	r3, r3, #1
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d102      	bne.n	800bc92 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800bc8c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc90:	e085      	b.n	800bd9e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800bc92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bc96:	2b09      	cmp	r3, #9
 800bc98:	dc02      	bgt.n	800bca0 <etharp_find_entry+0x1cc>
    i = empty;
 800bc9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc9c:	843b      	strh	r3, [r7, #32]
 800bc9e:	e039      	b.n	800bd14 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800bca0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bca4:	2b09      	cmp	r3, #9
 800bca6:	dc14      	bgt.n	800bcd2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800bca8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcaa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800bcac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bcb0:	493d      	ldr	r1, [pc, #244]	; (800bda8 <etharp_find_entry+0x2d4>)
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	005b      	lsls	r3, r3, #1
 800bcb6:	4413      	add	r3, r2
 800bcb8:	00db      	lsls	r3, r3, #3
 800bcba:	440b      	add	r3, r1
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d018      	beq.n	800bcf4 <etharp_find_entry+0x220>
 800bcc2:	4b3a      	ldr	r3, [pc, #232]	; (800bdac <etharp_find_entry+0x2d8>)
 800bcc4:	f240 126d 	movw	r2, #365	; 0x16d
 800bcc8:	493b      	ldr	r1, [pc, #236]	; (800bdb8 <etharp_find_entry+0x2e4>)
 800bcca:	483a      	ldr	r0, [pc, #232]	; (800bdb4 <etharp_find_entry+0x2e0>)
 800bccc:	f002 f94a 	bl	800df64 <iprintf>
 800bcd0:	e010      	b.n	800bcf4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800bcd2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bcd6:	2b09      	cmp	r3, #9
 800bcd8:	dc02      	bgt.n	800bce0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800bcda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bcdc:	843b      	strh	r3, [r7, #32]
 800bcde:	e009      	b.n	800bcf4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800bce0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bce4:	2b09      	cmp	r3, #9
 800bce6:	dc02      	bgt.n	800bcee <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800bce8:	8bfb      	ldrh	r3, [r7, #30]
 800bcea:	843b      	strh	r3, [r7, #32]
 800bcec:	e002      	b.n	800bcf4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800bcee:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf2:	e054      	b.n	800bd9e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bcf4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bcf8:	2b09      	cmp	r3, #9
 800bcfa:	dd06      	ble.n	800bd0a <etharp_find_entry+0x236>
 800bcfc:	4b2b      	ldr	r3, [pc, #172]	; (800bdac <etharp_find_entry+0x2d8>)
 800bcfe:	f240 127f 	movw	r2, #383	; 0x17f
 800bd02:	492e      	ldr	r1, [pc, #184]	; (800bdbc <etharp_find_entry+0x2e8>)
 800bd04:	482b      	ldr	r0, [pc, #172]	; (800bdb4 <etharp_find_entry+0x2e0>)
 800bd06:	f002 f92d 	bl	800df64 <iprintf>
    etharp_free_entry(i);
 800bd0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7ff fe06 	bl	800b920 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bd14:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bd18:	2b09      	cmp	r3, #9
 800bd1a:	dd06      	ble.n	800bd2a <etharp_find_entry+0x256>
 800bd1c:	4b23      	ldr	r3, [pc, #140]	; (800bdac <etharp_find_entry+0x2d8>)
 800bd1e:	f240 1283 	movw	r2, #387	; 0x183
 800bd22:	4926      	ldr	r1, [pc, #152]	; (800bdbc <etharp_find_entry+0x2e8>)
 800bd24:	4823      	ldr	r0, [pc, #140]	; (800bdb4 <etharp_find_entry+0x2e0>)
 800bd26:	f002 f91d 	bl	800df64 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800bd2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd2e:	491e      	ldr	r1, [pc, #120]	; (800bda8 <etharp_find_entry+0x2d4>)
 800bd30:	4613      	mov	r3, r2
 800bd32:	005b      	lsls	r3, r3, #1
 800bd34:	4413      	add	r3, r2
 800bd36:	00db      	lsls	r3, r3, #3
 800bd38:	440b      	add	r3, r1
 800bd3a:	3314      	adds	r3, #20
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d006      	beq.n	800bd50 <etharp_find_entry+0x27c>
 800bd42:	4b1a      	ldr	r3, [pc, #104]	; (800bdac <etharp_find_entry+0x2d8>)
 800bd44:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800bd48:	491d      	ldr	r1, [pc, #116]	; (800bdc0 <etharp_find_entry+0x2ec>)
 800bd4a:	481a      	ldr	r0, [pc, #104]	; (800bdb4 <etharp_find_entry+0x2e0>)
 800bd4c:	f002 f90a 	bl	800df64 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00b      	beq.n	800bd6e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800bd56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6819      	ldr	r1, [r3, #0]
 800bd5e:	4812      	ldr	r0, [pc, #72]	; (800bda8 <etharp_find_entry+0x2d4>)
 800bd60:	4613      	mov	r3, r2
 800bd62:	005b      	lsls	r3, r3, #1
 800bd64:	4413      	add	r3, r2
 800bd66:	00db      	lsls	r3, r3, #3
 800bd68:	4403      	add	r3, r0
 800bd6a:	3304      	adds	r3, #4
 800bd6c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800bd6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd72:	490d      	ldr	r1, [pc, #52]	; (800bda8 <etharp_find_entry+0x2d4>)
 800bd74:	4613      	mov	r3, r2
 800bd76:	005b      	lsls	r3, r3, #1
 800bd78:	4413      	add	r3, r2
 800bd7a:	00db      	lsls	r3, r3, #3
 800bd7c:	440b      	add	r3, r1
 800bd7e:	3312      	adds	r3, #18
 800bd80:	2200      	movs	r2, #0
 800bd82:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800bd84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd88:	4907      	ldr	r1, [pc, #28]	; (800bda8 <etharp_find_entry+0x2d4>)
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	005b      	lsls	r3, r3, #1
 800bd8e:	4413      	add	r3, r2
 800bd90:	00db      	lsls	r3, r3, #3
 800bd92:	440b      	add	r3, r1
 800bd94:	3308      	adds	r3, #8
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800bd9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3728      	adds	r7, #40	; 0x28
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	2000010c 	.word	0x2000010c
 800bdac:	08011730 	.word	0x08011730
 800bdb0:	08011768 	.word	0x08011768
 800bdb4:	080117a8 	.word	0x080117a8
 800bdb8:	080117d0 	.word	0x080117d0
 800bdbc:	080117e8 	.word	0x080117e8
 800bdc0:	080117fc 	.word	0x080117fc

0800bdc4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b088      	sub	sp, #32
 800bdc8:	af02      	add	r7, sp, #8
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	607a      	str	r2, [r7, #4]
 800bdd0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bdd8:	2b06      	cmp	r3, #6
 800bdda:	d006      	beq.n	800bdea <etharp_update_arp_entry+0x26>
 800bddc:	4b48      	ldr	r3, [pc, #288]	; (800bf00 <etharp_update_arp_entry+0x13c>)
 800bdde:	f240 12a9 	movw	r2, #425	; 0x1a9
 800bde2:	4948      	ldr	r1, [pc, #288]	; (800bf04 <etharp_update_arp_entry+0x140>)
 800bde4:	4848      	ldr	r0, [pc, #288]	; (800bf08 <etharp_update_arp_entry+0x144>)
 800bde6:	f002 f8bd 	bl	800df64 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d012      	beq.n	800be16 <etharp_update_arp_entry+0x52>
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00e      	beq.n	800be16 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	68f9      	ldr	r1, [r7, #12]
 800bdfe:	4618      	mov	r0, r3
 800be00:	f001 f8fe 	bl	800d000 <ip4_addr_isbroadcast_u32>
 800be04:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800be06:	2b00      	cmp	r3, #0
 800be08:	d105      	bne.n	800be16 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800be12:	2be0      	cmp	r3, #224	; 0xe0
 800be14:	d102      	bne.n	800be1c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800be16:	f06f 030f 	mvn.w	r3, #15
 800be1a:	e06c      	b.n	800bef6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800be1c:	78fb      	ldrb	r3, [r7, #3]
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	4619      	mov	r1, r3
 800be22:	68b8      	ldr	r0, [r7, #8]
 800be24:	f7ff fe56 	bl	800bad4 <etharp_find_entry>
 800be28:	4603      	mov	r3, r0
 800be2a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800be2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800be30:	2b00      	cmp	r3, #0
 800be32:	da02      	bge.n	800be3a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800be34:	8afb      	ldrh	r3, [r7, #22]
 800be36:	b25b      	sxtb	r3, r3
 800be38:	e05d      	b.n	800bef6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800be3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800be3e:	4933      	ldr	r1, [pc, #204]	; (800bf0c <etharp_update_arp_entry+0x148>)
 800be40:	4613      	mov	r3, r2
 800be42:	005b      	lsls	r3, r3, #1
 800be44:	4413      	add	r3, r2
 800be46:	00db      	lsls	r3, r3, #3
 800be48:	440b      	add	r3, r1
 800be4a:	3314      	adds	r3, #20
 800be4c:	2202      	movs	r2, #2
 800be4e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800be50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800be54:	492d      	ldr	r1, [pc, #180]	; (800bf0c <etharp_update_arp_entry+0x148>)
 800be56:	4613      	mov	r3, r2
 800be58:	005b      	lsls	r3, r3, #1
 800be5a:	4413      	add	r3, r2
 800be5c:	00db      	lsls	r3, r3, #3
 800be5e:	440b      	add	r3, r1
 800be60:	3308      	adds	r3, #8
 800be62:	68fa      	ldr	r2, [r7, #12]
 800be64:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800be66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800be6a:	4613      	mov	r3, r2
 800be6c:	005b      	lsls	r3, r3, #1
 800be6e:	4413      	add	r3, r2
 800be70:	00db      	lsls	r3, r3, #3
 800be72:	3308      	adds	r3, #8
 800be74:	4a25      	ldr	r2, [pc, #148]	; (800bf0c <etharp_update_arp_entry+0x148>)
 800be76:	4413      	add	r3, r2
 800be78:	3304      	adds	r3, #4
 800be7a:	2206      	movs	r2, #6
 800be7c:	6879      	ldr	r1, [r7, #4]
 800be7e:	4618      	mov	r0, r3
 800be80:	f002 f840 	bl	800df04 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800be84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800be88:	4920      	ldr	r1, [pc, #128]	; (800bf0c <etharp_update_arp_entry+0x148>)
 800be8a:	4613      	mov	r3, r2
 800be8c:	005b      	lsls	r3, r3, #1
 800be8e:	4413      	add	r3, r2
 800be90:	00db      	lsls	r3, r3, #3
 800be92:	440b      	add	r3, r1
 800be94:	3312      	adds	r3, #18
 800be96:	2200      	movs	r2, #0
 800be98:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800be9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800be9e:	491b      	ldr	r1, [pc, #108]	; (800bf0c <etharp_update_arp_entry+0x148>)
 800bea0:	4613      	mov	r3, r2
 800bea2:	005b      	lsls	r3, r3, #1
 800bea4:	4413      	add	r3, r2
 800bea6:	00db      	lsls	r3, r3, #3
 800bea8:	440b      	add	r3, r1
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d021      	beq.n	800bef4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800beb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800beb4:	4915      	ldr	r1, [pc, #84]	; (800bf0c <etharp_update_arp_entry+0x148>)
 800beb6:	4613      	mov	r3, r2
 800beb8:	005b      	lsls	r3, r3, #1
 800beba:	4413      	add	r3, r2
 800bebc:	00db      	lsls	r3, r3, #3
 800bebe:	440b      	add	r3, r1
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800bec4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bec8:	4910      	ldr	r1, [pc, #64]	; (800bf0c <etharp_update_arp_entry+0x148>)
 800beca:	4613      	mov	r3, r2
 800becc:	005b      	lsls	r3, r3, #1
 800bece:	4413      	add	r3, r2
 800bed0:	00db      	lsls	r3, r3, #3
 800bed2:	440b      	add	r3, r1
 800bed4:	2200      	movs	r2, #0
 800bed6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800bede:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bee2:	9300      	str	r3, [sp, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6939      	ldr	r1, [r7, #16]
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f001 ff91 	bl	800de10 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800beee:	6938      	ldr	r0, [r7, #16]
 800bef0:	f7f9 fa3a 	bl	8005368 <pbuf_free>
  }
  return ERR_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3718      	adds	r7, #24
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	08011730 	.word	0x08011730
 800bf04:	08011828 	.word	0x08011828
 800bf08:	080117a8 	.word	0x080117a8
 800bf0c:	2000010c 	.word	0x2000010c

0800bf10 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bf18:	2300      	movs	r3, #0
 800bf1a:	60fb      	str	r3, [r7, #12]
 800bf1c:	e01e      	b.n	800bf5c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800bf1e:	4913      	ldr	r1, [pc, #76]	; (800bf6c <etharp_cleanup_netif+0x5c>)
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	4613      	mov	r3, r2
 800bf24:	005b      	lsls	r3, r3, #1
 800bf26:	4413      	add	r3, r2
 800bf28:	00db      	lsls	r3, r3, #3
 800bf2a:	440b      	add	r3, r1
 800bf2c:	3314      	adds	r3, #20
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800bf32:	7afb      	ldrb	r3, [r7, #11]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00e      	beq.n	800bf56 <etharp_cleanup_netif+0x46>
 800bf38:	490c      	ldr	r1, [pc, #48]	; (800bf6c <etharp_cleanup_netif+0x5c>)
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	005b      	lsls	r3, r3, #1
 800bf40:	4413      	add	r3, r2
 800bf42:	00db      	lsls	r3, r3, #3
 800bf44:	440b      	add	r3, r1
 800bf46:	3308      	adds	r3, #8
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	687a      	ldr	r2, [r7, #4]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d102      	bne.n	800bf56 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800bf50:	68f8      	ldr	r0, [r7, #12]
 800bf52:	f7ff fce5 	bl	800b920 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	3301      	adds	r3, #1
 800bf5a:	60fb      	str	r3, [r7, #12]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2b09      	cmp	r3, #9
 800bf60:	dddd      	ble.n	800bf1e <etharp_cleanup_netif+0xe>
    }
  }
}
 800bf62:	bf00      	nop
 800bf64:	bf00      	nop
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	2000010c 	.word	0x2000010c

0800bf70 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800bf70:	b5b0      	push	{r4, r5, r7, lr}
 800bf72:	b08a      	sub	sp, #40	; 0x28
 800bf74:	af04      	add	r7, sp, #16
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d107      	bne.n	800bf90 <etharp_input+0x20>
 800bf80:	4b3d      	ldr	r3, [pc, #244]	; (800c078 <etharp_input+0x108>)
 800bf82:	f240 228a 	movw	r2, #650	; 0x28a
 800bf86:	493d      	ldr	r1, [pc, #244]	; (800c07c <etharp_input+0x10c>)
 800bf88:	483d      	ldr	r0, [pc, #244]	; (800c080 <etharp_input+0x110>)
 800bf8a:	f001 ffeb 	bl	800df64 <iprintf>
 800bf8e:	e06f      	b.n	800c070 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	881b      	ldrh	r3, [r3, #0]
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfa0:	d10c      	bne.n	800bfbc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800bfa6:	2b06      	cmp	r3, #6
 800bfa8:	d108      	bne.n	800bfbc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bfae:	2b04      	cmp	r3, #4
 800bfb0:	d104      	bne.n	800bfbc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	885b      	ldrh	r3, [r3, #2]
 800bfb6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bfb8:	2b08      	cmp	r3, #8
 800bfba:	d003      	beq.n	800bfc4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f7f9 f9d3 	bl	8005368 <pbuf_free>
    return;
 800bfc2:	e055      	b.n	800c070 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	330e      	adds	r3, #14
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	3318      	adds	r3, #24
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d102      	bne.n	800bfe4 <etharp_input+0x74>
    for_us = 0;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	75fb      	strb	r3, [r7, #23]
 800bfe2:	e009      	b.n	800bff8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800bfe4:	68ba      	ldr	r2, [r7, #8]
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	3304      	adds	r3, #4
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	bf0c      	ite	eq
 800bff0:	2301      	moveq	r3, #1
 800bff2:	2300      	movne	r3, #0
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	f103 0208 	add.w	r2, r3, #8
 800bffe:	7dfb      	ldrb	r3, [r7, #23]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d001      	beq.n	800c008 <etharp_input+0x98>
 800c004:	2301      	movs	r3, #1
 800c006:	e000      	b.n	800c00a <etharp_input+0x9a>
 800c008:	2302      	movs	r3, #2
 800c00a:	f107 010c 	add.w	r1, r7, #12
 800c00e:	6838      	ldr	r0, [r7, #0]
 800c010:	f7ff fed8 	bl	800bdc4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	88db      	ldrh	r3, [r3, #6]
 800c018:	b29b      	uxth	r3, r3
 800c01a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c01e:	d003      	beq.n	800c028 <etharp_input+0xb8>
 800c020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c024:	d01e      	beq.n	800c064 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c026:	e020      	b.n	800c06a <etharp_input+0xfa>
      if (for_us) {
 800c028:	7dfb      	ldrb	r3, [r7, #23]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d01c      	beq.n	800c068 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c044:	693a      	ldr	r2, [r7, #16]
 800c046:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c048:	2102      	movs	r1, #2
 800c04a:	9103      	str	r1, [sp, #12]
 800c04c:	f107 010c 	add.w	r1, r7, #12
 800c050:	9102      	str	r1, [sp, #8]
 800c052:	9201      	str	r2, [sp, #4]
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	462b      	mov	r3, r5
 800c058:	4622      	mov	r2, r4
 800c05a:	4601      	mov	r1, r0
 800c05c:	6838      	ldr	r0, [r7, #0]
 800c05e:	f000 faeb 	bl	800c638 <etharp_raw>
      break;
 800c062:	e001      	b.n	800c068 <etharp_input+0xf8>
      break;
 800c064:	bf00      	nop
 800c066:	e000      	b.n	800c06a <etharp_input+0xfa>
      break;
 800c068:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f7f9 f97c 	bl	8005368 <pbuf_free>
}
 800c070:	3718      	adds	r7, #24
 800c072:	46bd      	mov	sp, r7
 800c074:	bdb0      	pop	{r4, r5, r7, pc}
 800c076:	bf00      	nop
 800c078:	08011730 	.word	0x08011730
 800c07c:	08011880 	.word	0x08011880
 800c080:	080117a8 	.word	0x080117a8

0800c084 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b086      	sub	sp, #24
 800c088:	af02      	add	r7, sp, #8
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	4613      	mov	r3, r2
 800c090:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c092:	79fa      	ldrb	r2, [r7, #7]
 800c094:	4944      	ldr	r1, [pc, #272]	; (800c1a8 <etharp_output_to_arp_index+0x124>)
 800c096:	4613      	mov	r3, r2
 800c098:	005b      	lsls	r3, r3, #1
 800c09a:	4413      	add	r3, r2
 800c09c:	00db      	lsls	r3, r3, #3
 800c09e:	440b      	add	r3, r1
 800c0a0:	3314      	adds	r3, #20
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d806      	bhi.n	800c0b6 <etharp_output_to_arp_index+0x32>
 800c0a8:	4b40      	ldr	r3, [pc, #256]	; (800c1ac <etharp_output_to_arp_index+0x128>)
 800c0aa:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c0ae:	4940      	ldr	r1, [pc, #256]	; (800c1b0 <etharp_output_to_arp_index+0x12c>)
 800c0b0:	4840      	ldr	r0, [pc, #256]	; (800c1b4 <etharp_output_to_arp_index+0x130>)
 800c0b2:	f001 ff57 	bl	800df64 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c0b6:	79fa      	ldrb	r2, [r7, #7]
 800c0b8:	493b      	ldr	r1, [pc, #236]	; (800c1a8 <etharp_output_to_arp_index+0x124>)
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	005b      	lsls	r3, r3, #1
 800c0be:	4413      	add	r3, r2
 800c0c0:	00db      	lsls	r3, r3, #3
 800c0c2:	440b      	add	r3, r1
 800c0c4:	3314      	adds	r3, #20
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	2b02      	cmp	r3, #2
 800c0ca:	d153      	bne.n	800c174 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c0cc:	79fa      	ldrb	r2, [r7, #7]
 800c0ce:	4936      	ldr	r1, [pc, #216]	; (800c1a8 <etharp_output_to_arp_index+0x124>)
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	005b      	lsls	r3, r3, #1
 800c0d4:	4413      	add	r3, r2
 800c0d6:	00db      	lsls	r3, r3, #3
 800c0d8:	440b      	add	r3, r1
 800c0da:	3312      	adds	r3, #18
 800c0dc:	881b      	ldrh	r3, [r3, #0]
 800c0de:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c0e2:	d919      	bls.n	800c118 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c0e4:	79fa      	ldrb	r2, [r7, #7]
 800c0e6:	4613      	mov	r3, r2
 800c0e8:	005b      	lsls	r3, r3, #1
 800c0ea:	4413      	add	r3, r2
 800c0ec:	00db      	lsls	r3, r3, #3
 800c0ee:	4a2e      	ldr	r2, [pc, #184]	; (800c1a8 <etharp_output_to_arp_index+0x124>)
 800c0f0:	4413      	add	r3, r2
 800c0f2:	3304      	adds	r3, #4
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	68f8      	ldr	r0, [r7, #12]
 800c0f8:	f000 fb4c 	bl	800c794 <etharp_request>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d138      	bne.n	800c174 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c102:	79fa      	ldrb	r2, [r7, #7]
 800c104:	4928      	ldr	r1, [pc, #160]	; (800c1a8 <etharp_output_to_arp_index+0x124>)
 800c106:	4613      	mov	r3, r2
 800c108:	005b      	lsls	r3, r3, #1
 800c10a:	4413      	add	r3, r2
 800c10c:	00db      	lsls	r3, r3, #3
 800c10e:	440b      	add	r3, r1
 800c110:	3314      	adds	r3, #20
 800c112:	2203      	movs	r2, #3
 800c114:	701a      	strb	r2, [r3, #0]
 800c116:	e02d      	b.n	800c174 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c118:	79fa      	ldrb	r2, [r7, #7]
 800c11a:	4923      	ldr	r1, [pc, #140]	; (800c1a8 <etharp_output_to_arp_index+0x124>)
 800c11c:	4613      	mov	r3, r2
 800c11e:	005b      	lsls	r3, r3, #1
 800c120:	4413      	add	r3, r2
 800c122:	00db      	lsls	r3, r3, #3
 800c124:	440b      	add	r3, r1
 800c126:	3312      	adds	r3, #18
 800c128:	881b      	ldrh	r3, [r3, #0]
 800c12a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c12e:	d321      	bcc.n	800c174 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c130:	79fa      	ldrb	r2, [r7, #7]
 800c132:	4613      	mov	r3, r2
 800c134:	005b      	lsls	r3, r3, #1
 800c136:	4413      	add	r3, r2
 800c138:	00db      	lsls	r3, r3, #3
 800c13a:	4a1b      	ldr	r2, [pc, #108]	; (800c1a8 <etharp_output_to_arp_index+0x124>)
 800c13c:	4413      	add	r3, r2
 800c13e:	1d19      	adds	r1, r3, #4
 800c140:	79fa      	ldrb	r2, [r7, #7]
 800c142:	4613      	mov	r3, r2
 800c144:	005b      	lsls	r3, r3, #1
 800c146:	4413      	add	r3, r2
 800c148:	00db      	lsls	r3, r3, #3
 800c14a:	3308      	adds	r3, #8
 800c14c:	4a16      	ldr	r2, [pc, #88]	; (800c1a8 <etharp_output_to_arp_index+0x124>)
 800c14e:	4413      	add	r3, r2
 800c150:	3304      	adds	r3, #4
 800c152:	461a      	mov	r2, r3
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f000 fafb 	bl	800c750 <etharp_request_dst>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d109      	bne.n	800c174 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c160:	79fa      	ldrb	r2, [r7, #7]
 800c162:	4911      	ldr	r1, [pc, #68]	; (800c1a8 <etharp_output_to_arp_index+0x124>)
 800c164:	4613      	mov	r3, r2
 800c166:	005b      	lsls	r3, r3, #1
 800c168:	4413      	add	r3, r2
 800c16a:	00db      	lsls	r3, r3, #3
 800c16c:	440b      	add	r3, r1
 800c16e:	3314      	adds	r3, #20
 800c170:	2203      	movs	r2, #3
 800c172:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c17a:	79fa      	ldrb	r2, [r7, #7]
 800c17c:	4613      	mov	r3, r2
 800c17e:	005b      	lsls	r3, r3, #1
 800c180:	4413      	add	r3, r2
 800c182:	00db      	lsls	r3, r3, #3
 800c184:	3308      	adds	r3, #8
 800c186:	4a08      	ldr	r2, [pc, #32]	; (800c1a8 <etharp_output_to_arp_index+0x124>)
 800c188:	4413      	add	r3, r2
 800c18a:	3304      	adds	r3, #4
 800c18c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c190:	9200      	str	r2, [sp, #0]
 800c192:	460a      	mov	r2, r1
 800c194:	68b9      	ldr	r1, [r7, #8]
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	f001 fe3a 	bl	800de10 <ethernet_output>
 800c19c:	4603      	mov	r3, r0
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	2000010c 	.word	0x2000010c
 800c1ac:	08011730 	.word	0x08011730
 800c1b0:	080118a0 	.word	0x080118a0
 800c1b4:	080117a8 	.word	0x080117a8

0800c1b8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b08a      	sub	sp, #40	; 0x28
 800c1bc:	af02      	add	r7, sp, #8
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d106      	bne.n	800c1dc <etharp_output+0x24>
 800c1ce:	4b73      	ldr	r3, [pc, #460]	; (800c39c <etharp_output+0x1e4>)
 800c1d0:	f240 321e 	movw	r2, #798	; 0x31e
 800c1d4:	4972      	ldr	r1, [pc, #456]	; (800c3a0 <etharp_output+0x1e8>)
 800c1d6:	4873      	ldr	r0, [pc, #460]	; (800c3a4 <etharp_output+0x1ec>)
 800c1d8:	f001 fec4 	bl	800df64 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d106      	bne.n	800c1f0 <etharp_output+0x38>
 800c1e2:	4b6e      	ldr	r3, [pc, #440]	; (800c39c <etharp_output+0x1e4>)
 800c1e4:	f240 321f 	movw	r2, #799	; 0x31f
 800c1e8:	496f      	ldr	r1, [pc, #444]	; (800c3a8 <etharp_output+0x1f0>)
 800c1ea:	486e      	ldr	r0, [pc, #440]	; (800c3a4 <etharp_output+0x1ec>)
 800c1ec:	f001 feba 	bl	800df64 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d106      	bne.n	800c204 <etharp_output+0x4c>
 800c1f6:	4b69      	ldr	r3, [pc, #420]	; (800c39c <etharp_output+0x1e4>)
 800c1f8:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c1fc:	496b      	ldr	r1, [pc, #428]	; (800c3ac <etharp_output+0x1f4>)
 800c1fe:	4869      	ldr	r0, [pc, #420]	; (800c3a4 <etharp_output+0x1ec>)
 800c200:	f001 feb0 	bl	800df64 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	68f9      	ldr	r1, [r7, #12]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f000 fef8 	bl	800d000 <ip4_addr_isbroadcast_u32>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d002      	beq.n	800c21c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c216:	4b66      	ldr	r3, [pc, #408]	; (800c3b0 <etharp_output+0x1f8>)
 800c218:	61fb      	str	r3, [r7, #28]
 800c21a:	e0af      	b.n	800c37c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c224:	2be0      	cmp	r3, #224	; 0xe0
 800c226:	d118      	bne.n	800c25a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c228:	2301      	movs	r3, #1
 800c22a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c22c:	2300      	movs	r3, #0
 800c22e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c230:	235e      	movs	r3, #94	; 0x5e
 800c232:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	3301      	adds	r3, #1
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	3302      	adds	r3, #2
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	3303      	adds	r3, #3
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c252:	f107 0310 	add.w	r3, r7, #16
 800c256:	61fb      	str	r3, [r7, #28]
 800c258:	e090      	b.n	800c37c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	3304      	adds	r3, #4
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	405a      	eors	r2, r3
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	3308      	adds	r3, #8
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4013      	ands	r3, r2
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d012      	beq.n	800c298 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c278:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d00b      	beq.n	800c298 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	330c      	adds	r3, #12
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d003      	beq.n	800c292 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	330c      	adds	r3, #12
 800c28e:	61bb      	str	r3, [r7, #24]
 800c290:	e002      	b.n	800c298 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c292:	f06f 0303 	mvn.w	r3, #3
 800c296:	e07d      	b.n	800c394 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c298:	4b46      	ldr	r3, [pc, #280]	; (800c3b4 <etharp_output+0x1fc>)
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	4619      	mov	r1, r3
 800c29e:	4a46      	ldr	r2, [pc, #280]	; (800c3b8 <etharp_output+0x200>)
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	005b      	lsls	r3, r3, #1
 800c2a4:	440b      	add	r3, r1
 800c2a6:	00db      	lsls	r3, r3, #3
 800c2a8:	4413      	add	r3, r2
 800c2aa:	3314      	adds	r3, #20
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d925      	bls.n	800c2fe <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c2b2:	4b40      	ldr	r3, [pc, #256]	; (800c3b4 <etharp_output+0x1fc>)
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	4a3f      	ldr	r2, [pc, #252]	; (800c3b8 <etharp_output+0x200>)
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	005b      	lsls	r3, r3, #1
 800c2be:	440b      	add	r3, r1
 800c2c0:	00db      	lsls	r3, r3, #3
 800c2c2:	4413      	add	r3, r2
 800c2c4:	3308      	adds	r3, #8
 800c2c6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c2c8:	68fa      	ldr	r2, [r7, #12]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d117      	bne.n	800c2fe <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	4b38      	ldr	r3, [pc, #224]	; (800c3b4 <etharp_output+0x1fc>)
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	4937      	ldr	r1, [pc, #220]	; (800c3b8 <etharp_output+0x200>)
 800c2da:	4603      	mov	r3, r0
 800c2dc:	005b      	lsls	r3, r3, #1
 800c2de:	4403      	add	r3, r0
 800c2e0:	00db      	lsls	r3, r3, #3
 800c2e2:	440b      	add	r3, r1
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d108      	bne.n	800c2fe <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c2ec:	4b31      	ldr	r3, [pc, #196]	; (800c3b4 <etharp_output+0x1fc>)
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	68b9      	ldr	r1, [r7, #8]
 800c2f4:	68f8      	ldr	r0, [r7, #12]
 800c2f6:	f7ff fec5 	bl	800c084 <etharp_output_to_arp_index>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	e04a      	b.n	800c394 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c2fe:	2300      	movs	r3, #0
 800c300:	75fb      	strb	r3, [r7, #23]
 800c302:	e031      	b.n	800c368 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c304:	7dfa      	ldrb	r2, [r7, #23]
 800c306:	492c      	ldr	r1, [pc, #176]	; (800c3b8 <etharp_output+0x200>)
 800c308:	4613      	mov	r3, r2
 800c30a:	005b      	lsls	r3, r3, #1
 800c30c:	4413      	add	r3, r2
 800c30e:	00db      	lsls	r3, r3, #3
 800c310:	440b      	add	r3, r1
 800c312:	3314      	adds	r3, #20
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	2b01      	cmp	r3, #1
 800c318:	d923      	bls.n	800c362 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c31a:	7dfa      	ldrb	r2, [r7, #23]
 800c31c:	4926      	ldr	r1, [pc, #152]	; (800c3b8 <etharp_output+0x200>)
 800c31e:	4613      	mov	r3, r2
 800c320:	005b      	lsls	r3, r3, #1
 800c322:	4413      	add	r3, r2
 800c324:	00db      	lsls	r3, r3, #3
 800c326:	440b      	add	r3, r1
 800c328:	3308      	adds	r3, #8
 800c32a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d117      	bne.n	800c362 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	6819      	ldr	r1, [r3, #0]
 800c336:	7dfa      	ldrb	r2, [r7, #23]
 800c338:	481f      	ldr	r0, [pc, #124]	; (800c3b8 <etharp_output+0x200>)
 800c33a:	4613      	mov	r3, r2
 800c33c:	005b      	lsls	r3, r3, #1
 800c33e:	4413      	add	r3, r2
 800c340:	00db      	lsls	r3, r3, #3
 800c342:	4403      	add	r3, r0
 800c344:	3304      	adds	r3, #4
 800c346:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c348:	4299      	cmp	r1, r3
 800c34a:	d10a      	bne.n	800c362 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c34c:	4a19      	ldr	r2, [pc, #100]	; (800c3b4 <etharp_output+0x1fc>)
 800c34e:	7dfb      	ldrb	r3, [r7, #23]
 800c350:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c352:	7dfb      	ldrb	r3, [r7, #23]
 800c354:	461a      	mov	r2, r3
 800c356:	68b9      	ldr	r1, [r7, #8]
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	f7ff fe93 	bl	800c084 <etharp_output_to_arp_index>
 800c35e:	4603      	mov	r3, r0
 800c360:	e018      	b.n	800c394 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c362:	7dfb      	ldrb	r3, [r7, #23]
 800c364:	3301      	adds	r3, #1
 800c366:	75fb      	strb	r3, [r7, #23]
 800c368:	7dfb      	ldrb	r3, [r7, #23]
 800c36a:	2b09      	cmp	r3, #9
 800c36c:	d9ca      	bls.n	800c304 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c36e:	68ba      	ldr	r2, [r7, #8]
 800c370:	69b9      	ldr	r1, [r7, #24]
 800c372:	68f8      	ldr	r0, [r7, #12]
 800c374:	f000 f822 	bl	800c3bc <etharp_query>
 800c378:	4603      	mov	r3, r0
 800c37a:	e00b      	b.n	800c394 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c382:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	68b9      	ldr	r1, [r7, #8]
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f001 fd3f 	bl	800de10 <ethernet_output>
 800c392:	4603      	mov	r3, r0
}
 800c394:	4618      	mov	r0, r3
 800c396:	3720      	adds	r7, #32
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	08011730 	.word	0x08011730
 800c3a0:	08011880 	.word	0x08011880
 800c3a4:	080117a8 	.word	0x080117a8
 800c3a8:	080118d0 	.word	0x080118d0
 800c3ac:	08011870 	.word	0x08011870
 800c3b0:	08011ed8 	.word	0x08011ed8
 800c3b4:	200001fc 	.word	0x200001fc
 800c3b8:	2000010c 	.word	0x2000010c

0800c3bc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b08c      	sub	sp, #48	; 0x30
 800c3c0:	af02      	add	r7, sp, #8
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	60b9      	str	r1, [r7, #8]
 800c3c6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	3326      	adds	r3, #38	; 0x26
 800c3cc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c3ce:	23ff      	movs	r3, #255	; 0xff
 800c3d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	68f9      	ldr	r1, [r7, #12]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f000 fe0e 	bl	800d000 <ip4_addr_isbroadcast_u32>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d10c      	bne.n	800c404 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c3f2:	2be0      	cmp	r3, #224	; 0xe0
 800c3f4:	d006      	beq.n	800c404 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d003      	beq.n	800c404 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d102      	bne.n	800c40a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c404:	f06f 030f 	mvn.w	r3, #15
 800c408:	e101      	b.n	800c60e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c40a:	68fa      	ldr	r2, [r7, #12]
 800c40c:	2101      	movs	r1, #1
 800c40e:	68b8      	ldr	r0, [r7, #8]
 800c410:	f7ff fb60 	bl	800bad4 <etharp_find_entry>
 800c414:	4603      	mov	r3, r0
 800c416:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c418:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	da02      	bge.n	800c426 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c420:	8a7b      	ldrh	r3, [r7, #18]
 800c422:	b25b      	sxtb	r3, r3
 800c424:	e0f3      	b.n	800c60e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c426:	8a7b      	ldrh	r3, [r7, #18]
 800c428:	2b7e      	cmp	r3, #126	; 0x7e
 800c42a:	d906      	bls.n	800c43a <etharp_query+0x7e>
 800c42c:	4b7a      	ldr	r3, [pc, #488]	; (800c618 <etharp_query+0x25c>)
 800c42e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800c432:	497a      	ldr	r1, [pc, #488]	; (800c61c <etharp_query+0x260>)
 800c434:	487a      	ldr	r0, [pc, #488]	; (800c620 <etharp_query+0x264>)
 800c436:	f001 fd95 	bl	800df64 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c43a:	8a7b      	ldrh	r3, [r7, #18]
 800c43c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c43e:	7c7a      	ldrb	r2, [r7, #17]
 800c440:	4978      	ldr	r1, [pc, #480]	; (800c624 <etharp_query+0x268>)
 800c442:	4613      	mov	r3, r2
 800c444:	005b      	lsls	r3, r3, #1
 800c446:	4413      	add	r3, r2
 800c448:	00db      	lsls	r3, r3, #3
 800c44a:	440b      	add	r3, r1
 800c44c:	3314      	adds	r3, #20
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d115      	bne.n	800c480 <etharp_query+0xc4>
    is_new_entry = 1;
 800c454:	2301      	movs	r3, #1
 800c456:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c458:	7c7a      	ldrb	r2, [r7, #17]
 800c45a:	4972      	ldr	r1, [pc, #456]	; (800c624 <etharp_query+0x268>)
 800c45c:	4613      	mov	r3, r2
 800c45e:	005b      	lsls	r3, r3, #1
 800c460:	4413      	add	r3, r2
 800c462:	00db      	lsls	r3, r3, #3
 800c464:	440b      	add	r3, r1
 800c466:	3314      	adds	r3, #20
 800c468:	2201      	movs	r2, #1
 800c46a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c46c:	7c7a      	ldrb	r2, [r7, #17]
 800c46e:	496d      	ldr	r1, [pc, #436]	; (800c624 <etharp_query+0x268>)
 800c470:	4613      	mov	r3, r2
 800c472:	005b      	lsls	r3, r3, #1
 800c474:	4413      	add	r3, r2
 800c476:	00db      	lsls	r3, r3, #3
 800c478:	440b      	add	r3, r1
 800c47a:	3308      	adds	r3, #8
 800c47c:	68fa      	ldr	r2, [r7, #12]
 800c47e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c480:	7c7a      	ldrb	r2, [r7, #17]
 800c482:	4968      	ldr	r1, [pc, #416]	; (800c624 <etharp_query+0x268>)
 800c484:	4613      	mov	r3, r2
 800c486:	005b      	lsls	r3, r3, #1
 800c488:	4413      	add	r3, r2
 800c48a:	00db      	lsls	r3, r3, #3
 800c48c:	440b      	add	r3, r1
 800c48e:	3314      	adds	r3, #20
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	2b01      	cmp	r3, #1
 800c494:	d011      	beq.n	800c4ba <etharp_query+0xfe>
 800c496:	7c7a      	ldrb	r2, [r7, #17]
 800c498:	4962      	ldr	r1, [pc, #392]	; (800c624 <etharp_query+0x268>)
 800c49a:	4613      	mov	r3, r2
 800c49c:	005b      	lsls	r3, r3, #1
 800c49e:	4413      	add	r3, r2
 800c4a0:	00db      	lsls	r3, r3, #3
 800c4a2:	440b      	add	r3, r1
 800c4a4:	3314      	adds	r3, #20
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	d806      	bhi.n	800c4ba <etharp_query+0xfe>
 800c4ac:	4b5a      	ldr	r3, [pc, #360]	; (800c618 <etharp_query+0x25c>)
 800c4ae:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c4b2:	495d      	ldr	r1, [pc, #372]	; (800c628 <etharp_query+0x26c>)
 800c4b4:	485a      	ldr	r0, [pc, #360]	; (800c620 <etharp_query+0x264>)
 800c4b6:	f001 fd55 	bl	800df64 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c4ba:	6a3b      	ldr	r3, [r7, #32]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d102      	bne.n	800c4c6 <etharp_query+0x10a>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d10c      	bne.n	800c4e0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c4c6:	68b9      	ldr	r1, [r7, #8]
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f000 f963 	bl	800c794 <etharp_request>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d102      	bne.n	800c4e0 <etharp_query+0x124>
      return result;
 800c4da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c4de:	e096      	b.n	800c60e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d106      	bne.n	800c4f4 <etharp_query+0x138>
 800c4e6:	4b4c      	ldr	r3, [pc, #304]	; (800c618 <etharp_query+0x25c>)
 800c4e8:	f240 32e1 	movw	r2, #993	; 0x3e1
 800c4ec:	494f      	ldr	r1, [pc, #316]	; (800c62c <etharp_query+0x270>)
 800c4ee:	484c      	ldr	r0, [pc, #304]	; (800c620 <etharp_query+0x264>)
 800c4f0:	f001 fd38 	bl	800df64 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c4f4:	7c7a      	ldrb	r2, [r7, #17]
 800c4f6:	494b      	ldr	r1, [pc, #300]	; (800c624 <etharp_query+0x268>)
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	005b      	lsls	r3, r3, #1
 800c4fc:	4413      	add	r3, r2
 800c4fe:	00db      	lsls	r3, r3, #3
 800c500:	440b      	add	r3, r1
 800c502:	3314      	adds	r3, #20
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	2b01      	cmp	r3, #1
 800c508:	d917      	bls.n	800c53a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c50a:	4a49      	ldr	r2, [pc, #292]	; (800c630 <etharp_query+0x274>)
 800c50c:	7c7b      	ldrb	r3, [r7, #17]
 800c50e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c510:	7c7a      	ldrb	r2, [r7, #17]
 800c512:	4613      	mov	r3, r2
 800c514:	005b      	lsls	r3, r3, #1
 800c516:	4413      	add	r3, r2
 800c518:	00db      	lsls	r3, r3, #3
 800c51a:	3308      	adds	r3, #8
 800c51c:	4a41      	ldr	r2, [pc, #260]	; (800c624 <etharp_query+0x268>)
 800c51e:	4413      	add	r3, r2
 800c520:	3304      	adds	r3, #4
 800c522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c526:	9200      	str	r2, [sp, #0]
 800c528:	697a      	ldr	r2, [r7, #20]
 800c52a:	6879      	ldr	r1, [r7, #4]
 800c52c:	68f8      	ldr	r0, [r7, #12]
 800c52e:	f001 fc6f 	bl	800de10 <ethernet_output>
 800c532:	4603      	mov	r3, r0
 800c534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c538:	e067      	b.n	800c60a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c53a:	7c7a      	ldrb	r2, [r7, #17]
 800c53c:	4939      	ldr	r1, [pc, #228]	; (800c624 <etharp_query+0x268>)
 800c53e:	4613      	mov	r3, r2
 800c540:	005b      	lsls	r3, r3, #1
 800c542:	4413      	add	r3, r2
 800c544:	00db      	lsls	r3, r3, #3
 800c546:	440b      	add	r3, r1
 800c548:	3314      	adds	r3, #20
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d15c      	bne.n	800c60a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c550:	2300      	movs	r3, #0
 800c552:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c558:	e01c      	b.n	800c594 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	895a      	ldrh	r2, [r3, #10]
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	891b      	ldrh	r3, [r3, #8]
 800c562:	429a      	cmp	r2, r3
 800c564:	d10a      	bne.n	800c57c <etharp_query+0x1c0>
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d006      	beq.n	800c57c <etharp_query+0x1c0>
 800c56e:	4b2a      	ldr	r3, [pc, #168]	; (800c618 <etharp_query+0x25c>)
 800c570:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800c574:	492f      	ldr	r1, [pc, #188]	; (800c634 <etharp_query+0x278>)
 800c576:	482a      	ldr	r0, [pc, #168]	; (800c620 <etharp_query+0x264>)
 800c578:	f001 fcf4 	bl	800df64 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c57c:	69fb      	ldr	r3, [r7, #28]
 800c57e:	7b1b      	ldrb	r3, [r3, #12]
 800c580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c584:	2b00      	cmp	r3, #0
 800c586:	d002      	beq.n	800c58e <etharp_query+0x1d2>
        copy_needed = 1;
 800c588:	2301      	movs	r3, #1
 800c58a:	61bb      	str	r3, [r7, #24]
        break;
 800c58c:	e005      	b.n	800c59a <etharp_query+0x1de>
      }
      p = p->next;
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c594:	69fb      	ldr	r3, [r7, #28]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d1df      	bne.n	800c55a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800c59a:	69bb      	ldr	r3, [r7, #24]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d007      	beq.n	800c5b0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	f44f 7120 	mov.w	r1, #640	; 0x280
 800c5a6:	200e      	movs	r0, #14
 800c5a8:	f7f9 f9dc 	bl	8005964 <pbuf_clone>
 800c5ac:	61f8      	str	r0, [r7, #28]
 800c5ae:	e004      	b.n	800c5ba <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c5b4:	69f8      	ldr	r0, [r7, #28]
 800c5b6:	f7f8 ff77 	bl	80054a8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d021      	beq.n	800c604 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c5c0:	7c7a      	ldrb	r2, [r7, #17]
 800c5c2:	4918      	ldr	r1, [pc, #96]	; (800c624 <etharp_query+0x268>)
 800c5c4:	4613      	mov	r3, r2
 800c5c6:	005b      	lsls	r3, r3, #1
 800c5c8:	4413      	add	r3, r2
 800c5ca:	00db      	lsls	r3, r3, #3
 800c5cc:	440b      	add	r3, r1
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d00a      	beq.n	800c5ea <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c5d4:	7c7a      	ldrb	r2, [r7, #17]
 800c5d6:	4913      	ldr	r1, [pc, #76]	; (800c624 <etharp_query+0x268>)
 800c5d8:	4613      	mov	r3, r2
 800c5da:	005b      	lsls	r3, r3, #1
 800c5dc:	4413      	add	r3, r2
 800c5de:	00db      	lsls	r3, r3, #3
 800c5e0:	440b      	add	r3, r1
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7f8 febf 	bl	8005368 <pbuf_free>
      }
      arp_table[i].q = p;
 800c5ea:	7c7a      	ldrb	r2, [r7, #17]
 800c5ec:	490d      	ldr	r1, [pc, #52]	; (800c624 <etharp_query+0x268>)
 800c5ee:	4613      	mov	r3, r2
 800c5f0:	005b      	lsls	r3, r3, #1
 800c5f2:	4413      	add	r3, r2
 800c5f4:	00db      	lsls	r3, r3, #3
 800c5f6:	440b      	add	r3, r1
 800c5f8:	69fa      	ldr	r2, [r7, #28]
 800c5fa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c602:	e002      	b.n	800c60a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c604:	23ff      	movs	r3, #255	; 0xff
 800c606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c60a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3728      	adds	r7, #40	; 0x28
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	08011730 	.word	0x08011730
 800c61c:	080118dc 	.word	0x080118dc
 800c620:	080117a8 	.word	0x080117a8
 800c624:	2000010c 	.word	0x2000010c
 800c628:	080118ec 	.word	0x080118ec
 800c62c:	080118d0 	.word	0x080118d0
 800c630:	200001fc 	.word	0x200001fc
 800c634:	08011914 	.word	0x08011914

0800c638 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b08a      	sub	sp, #40	; 0x28
 800c63c:	af02      	add	r7, sp, #8
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	60b9      	str	r1, [r7, #8]
 800c642:	607a      	str	r2, [r7, #4]
 800c644:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c646:	2300      	movs	r3, #0
 800c648:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d106      	bne.n	800c65e <etharp_raw+0x26>
 800c650:	4b3a      	ldr	r3, [pc, #232]	; (800c73c <etharp_raw+0x104>)
 800c652:	f240 4257 	movw	r2, #1111	; 0x457
 800c656:	493a      	ldr	r1, [pc, #232]	; (800c740 <etharp_raw+0x108>)
 800c658:	483a      	ldr	r0, [pc, #232]	; (800c744 <etharp_raw+0x10c>)
 800c65a:	f001 fc83 	bl	800df64 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c65e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c662:	211c      	movs	r1, #28
 800c664:	200e      	movs	r0, #14
 800c666:	f7f8 fb9b 	bl	8004da0 <pbuf_alloc>
 800c66a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c66c:	69bb      	ldr	r3, [r7, #24]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d102      	bne.n	800c678 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c672:	f04f 33ff 	mov.w	r3, #4294967295
 800c676:	e05d      	b.n	800c734 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	895b      	ldrh	r3, [r3, #10]
 800c67c:	2b1b      	cmp	r3, #27
 800c67e:	d806      	bhi.n	800c68e <etharp_raw+0x56>
 800c680:	4b2e      	ldr	r3, [pc, #184]	; (800c73c <etharp_raw+0x104>)
 800c682:	f240 4262 	movw	r2, #1122	; 0x462
 800c686:	4930      	ldr	r1, [pc, #192]	; (800c748 <etharp_raw+0x110>)
 800c688:	482e      	ldr	r0, [pc, #184]	; (800c744 <etharp_raw+0x10c>)
 800c68a:	f001 fc6b 	bl	800df64 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c694:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c696:	4618      	mov	r0, r3
 800c698:	f7f7 fbb2 	bl	8003e00 <lwip_htons>
 800c69c:	4603      	mov	r3, r0
 800c69e:	461a      	mov	r2, r3
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c6aa:	2b06      	cmp	r3, #6
 800c6ac:	d006      	beq.n	800c6bc <etharp_raw+0x84>
 800c6ae:	4b23      	ldr	r3, [pc, #140]	; (800c73c <etharp_raw+0x104>)
 800c6b0:	f240 4269 	movw	r2, #1129	; 0x469
 800c6b4:	4925      	ldr	r1, [pc, #148]	; (800c74c <etharp_raw+0x114>)
 800c6b6:	4823      	ldr	r0, [pc, #140]	; (800c744 <etharp_raw+0x10c>)
 800c6b8:	f001 fc54 	bl	800df64 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	3308      	adds	r3, #8
 800c6c0:	2206      	movs	r2, #6
 800c6c2:	6839      	ldr	r1, [r7, #0]
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f001 fc1d 	bl	800df04 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	3312      	adds	r3, #18
 800c6ce:	2206      	movs	r2, #6
 800c6d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f001 fc16 	bl	800df04 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	330e      	adds	r3, #14
 800c6dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6de:	6812      	ldr	r2, [r2, #0]
 800c6e0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	3318      	adds	r3, #24
 800c6e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6e8:	6812      	ldr	r2, [r2, #0]
 800c6ea:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	701a      	strb	r2, [r3, #0]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f042 0201 	orr.w	r2, r2, #1
 800c6f8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f042 0208 	orr.w	r2, r2, #8
 800c702:	709a      	strb	r2, [r3, #2]
 800c704:	2200      	movs	r2, #0
 800c706:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	2206      	movs	r2, #6
 800c70c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	2204      	movs	r2, #4
 800c712:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c714:	f640 0306 	movw	r3, #2054	; 0x806
 800c718:	9300      	str	r3, [sp, #0]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	68ba      	ldr	r2, [r7, #8]
 800c71e:	69b9      	ldr	r1, [r7, #24]
 800c720:	68f8      	ldr	r0, [r7, #12]
 800c722:	f001 fb75 	bl	800de10 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c726:	69b8      	ldr	r0, [r7, #24]
 800c728:	f7f8 fe1e 	bl	8005368 <pbuf_free>
  p = NULL;
 800c72c:	2300      	movs	r3, #0
 800c72e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c730:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c734:	4618      	mov	r0, r3
 800c736:	3720      	adds	r7, #32
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	08011730 	.word	0x08011730
 800c740:	08011880 	.word	0x08011880
 800c744:	080117a8 	.word	0x080117a8
 800c748:	08011930 	.word	0x08011930
 800c74c:	08011964 	.word	0x08011964

0800c750 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b088      	sub	sp, #32
 800c754:	af04      	add	r7, sp, #16
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c76c:	2201      	movs	r2, #1
 800c76e:	9203      	str	r2, [sp, #12]
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	9202      	str	r2, [sp, #8]
 800c774:	4a06      	ldr	r2, [pc, #24]	; (800c790 <etharp_request_dst+0x40>)
 800c776:	9201      	str	r2, [sp, #4]
 800c778:	9300      	str	r3, [sp, #0]
 800c77a:	4603      	mov	r3, r0
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	68f8      	ldr	r0, [r7, #12]
 800c780:	f7ff ff5a 	bl	800c638 <etharp_raw>
 800c784:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	08011ee0 	.word	0x08011ee0

0800c794 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c79e:	4a05      	ldr	r2, [pc, #20]	; (800c7b4 <etharp_request+0x20>)
 800c7a0:	6839      	ldr	r1, [r7, #0]
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f7ff ffd4 	bl	800c750 <etharp_request_dst>
 800c7a8:	4603      	mov	r3, r0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3708      	adds	r7, #8
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	08011ed8 	.word	0x08011ed8

0800c7b8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b08e      	sub	sp, #56	; 0x38
 800c7bc:	af04      	add	r7, sp, #16
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c7c2:	4b79      	ldr	r3, [pc, #484]	; (800c9a8 <icmp_input+0x1f0>)
 800c7c4:	689b      	ldr	r3, [r3, #8]
 800c7c6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	f003 030f 	and.w	r3, r3, #15
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	009b      	lsls	r3, r3, #2
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800c7d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7da:	2b13      	cmp	r3, #19
 800c7dc:	f240 80cd 	bls.w	800c97a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	895b      	ldrh	r3, [r3, #10]
 800c7e4:	2b03      	cmp	r3, #3
 800c7e6:	f240 80ca 	bls.w	800c97e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c7f4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	f000 80b7 	beq.w	800c96c <icmp_input+0x1b4>
 800c7fe:	2b08      	cmp	r3, #8
 800c800:	f040 80b7 	bne.w	800c972 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800c804:	4b69      	ldr	r3, [pc, #420]	; (800c9ac <icmp_input+0x1f4>)
 800c806:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c808:	4b67      	ldr	r3, [pc, #412]	; (800c9a8 <icmp_input+0x1f0>)
 800c80a:	695b      	ldr	r3, [r3, #20]
 800c80c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c810:	2be0      	cmp	r3, #224	; 0xe0
 800c812:	f000 80bb 	beq.w	800c98c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c816:	4b64      	ldr	r3, [pc, #400]	; (800c9a8 <icmp_input+0x1f0>)
 800c818:	695b      	ldr	r3, [r3, #20]
 800c81a:	4a63      	ldr	r2, [pc, #396]	; (800c9a8 <icmp_input+0x1f0>)
 800c81c:	6812      	ldr	r2, [r2, #0]
 800c81e:	4611      	mov	r1, r2
 800c820:	4618      	mov	r0, r3
 800c822:	f000 fbed 	bl	800d000 <ip4_addr_isbroadcast_u32>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	f040 80b1 	bne.w	800c990 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	891b      	ldrh	r3, [r3, #8]
 800c832:	2b07      	cmp	r3, #7
 800c834:	f240 80a5 	bls.w	800c982 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c838:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c83a:	330e      	adds	r3, #14
 800c83c:	4619      	mov	r1, r3
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f7f8 fcfc 	bl	800523c <pbuf_add_header>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	d04b      	beq.n	800c8e2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	891a      	ldrh	r2, [r3, #8]
 800c84e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c850:	4413      	add	r3, r2
 800c852:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	891b      	ldrh	r3, [r3, #8]
 800c858:	8b7a      	ldrh	r2, [r7, #26]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	f0c0 809a 	bcc.w	800c994 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800c860:	8b7b      	ldrh	r3, [r7, #26]
 800c862:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c866:	4619      	mov	r1, r3
 800c868:	200e      	movs	r0, #14
 800c86a:	f7f8 fa99 	bl	8004da0 <pbuf_alloc>
 800c86e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	2b00      	cmp	r3, #0
 800c874:	f000 8090 	beq.w	800c998 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	895b      	ldrh	r3, [r3, #10]
 800c87c:	461a      	mov	r2, r3
 800c87e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c880:	3308      	adds	r3, #8
 800c882:	429a      	cmp	r2, r3
 800c884:	d203      	bcs.n	800c88e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800c886:	6978      	ldr	r0, [r7, #20]
 800c888:	f7f8 fd6e 	bl	8005368 <pbuf_free>
          goto icmperr;
 800c88c:	e085      	b.n	800c99a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c896:	4618      	mov	r0, r3
 800c898:	f001 fb34 	bl	800df04 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800c89c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c89e:	4619      	mov	r1, r3
 800c8a0:	6978      	ldr	r0, [r7, #20]
 800c8a2:	f7f8 fcdb 	bl	800525c <pbuf_remove_header>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d009      	beq.n	800c8c0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c8ac:	4b40      	ldr	r3, [pc, #256]	; (800c9b0 <icmp_input+0x1f8>)
 800c8ae:	22b6      	movs	r2, #182	; 0xb6
 800c8b0:	4940      	ldr	r1, [pc, #256]	; (800c9b4 <icmp_input+0x1fc>)
 800c8b2:	4841      	ldr	r0, [pc, #260]	; (800c9b8 <icmp_input+0x200>)
 800c8b4:	f001 fb56 	bl	800df64 <iprintf>
          pbuf_free(r);
 800c8b8:	6978      	ldr	r0, [r7, #20]
 800c8ba:	f7f8 fd55 	bl	8005368 <pbuf_free>
          goto icmperr;
 800c8be:	e06c      	b.n	800c99a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800c8c0:	6879      	ldr	r1, [r7, #4]
 800c8c2:	6978      	ldr	r0, [r7, #20]
 800c8c4:	f7f8 fe78 	bl	80055b8 <pbuf_copy>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d003      	beq.n	800c8d6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800c8ce:	6978      	ldr	r0, [r7, #20]
 800c8d0:	f7f8 fd4a 	bl	8005368 <pbuf_free>
          goto icmperr;
 800c8d4:	e061      	b.n	800c99a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f7f8 fd46 	bl	8005368 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	607b      	str	r3, [r7, #4]
 800c8e0:	e00f      	b.n	800c902 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c8e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8e4:	330e      	adds	r3, #14
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f7f8 fcb7 	bl	800525c <pbuf_remove_header>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d006      	beq.n	800c902 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c8f4:	4b2e      	ldr	r3, [pc, #184]	; (800c9b0 <icmp_input+0x1f8>)
 800c8f6:	22c7      	movs	r2, #199	; 0xc7
 800c8f8:	4930      	ldr	r1, [pc, #192]	; (800c9bc <icmp_input+0x204>)
 800c8fa:	482f      	ldr	r0, [pc, #188]	; (800c9b8 <icmp_input+0x200>)
 800c8fc:	f001 fb32 	bl	800df64 <iprintf>
          goto icmperr;
 800c900:	e04b      	b.n	800c99a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800c908:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c90a:	4619      	mov	r1, r3
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f7f8 fc95 	bl	800523c <pbuf_add_header>
 800c912:	4603      	mov	r3, r0
 800c914:	2b00      	cmp	r3, #0
 800c916:	d12b      	bne.n	800c970 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	681a      	ldr	r2, [r3, #0]
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c926:	4b20      	ldr	r3, [pc, #128]	; (800c9a8 <icmp_input+0x1f0>)
 800c928:	691a      	ldr	r2, [r3, #16]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	2200      	movs	r2, #0
 800c932:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	2200      	movs	r2, #0
 800c938:	709a      	strb	r2, [r3, #2]
 800c93a:	2200      	movs	r2, #0
 800c93c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	22ff      	movs	r2, #255	; 0xff
 800c942:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2200      	movs	r2, #0
 800c948:	729a      	strb	r2, [r3, #10]
 800c94a:	2200      	movs	r2, #0
 800c94c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	9302      	str	r3, [sp, #8]
 800c952:	2301      	movs	r3, #1
 800c954:	9301      	str	r3, [sp, #4]
 800c956:	2300      	movs	r3, #0
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	23ff      	movs	r3, #255	; 0xff
 800c95c:	2200      	movs	r2, #0
 800c95e:	69f9      	ldr	r1, [r7, #28]
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fa75 	bl	800ce50 <ip4_output_if>
 800c966:	4603      	mov	r3, r0
 800c968:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800c96a:	e001      	b.n	800c970 <icmp_input+0x1b8>
      break;
 800c96c:	bf00      	nop
 800c96e:	e000      	b.n	800c972 <icmp_input+0x1ba>
      break;
 800c970:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f7f8 fcf8 	bl	8005368 <pbuf_free>
  return;
 800c978:	e013      	b.n	800c9a2 <icmp_input+0x1ea>
    goto lenerr;
 800c97a:	bf00      	nop
 800c97c:	e002      	b.n	800c984 <icmp_input+0x1cc>
    goto lenerr;
 800c97e:	bf00      	nop
 800c980:	e000      	b.n	800c984 <icmp_input+0x1cc>
        goto lenerr;
 800c982:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f7f8 fcef 	bl	8005368 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c98a:	e00a      	b.n	800c9a2 <icmp_input+0x1ea>
        goto icmperr;
 800c98c:	bf00      	nop
 800c98e:	e004      	b.n	800c99a <icmp_input+0x1e2>
        goto icmperr;
 800c990:	bf00      	nop
 800c992:	e002      	b.n	800c99a <icmp_input+0x1e2>
          goto icmperr;
 800c994:	bf00      	nop
 800c996:	e000      	b.n	800c99a <icmp_input+0x1e2>
          goto icmperr;
 800c998:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f7f8 fce4 	bl	8005368 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c9a0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c9a2:	3728      	adds	r7, #40	; 0x28
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	20003404 	.word	0x20003404
 800c9ac:	20003418 	.word	0x20003418
 800c9b0:	080119a8 	.word	0x080119a8
 800c9b4:	080119e0 	.word	0x080119e0
 800c9b8:	08011a18 	.word	0x08011a18
 800c9bc:	08011a40 	.word	0x08011a40

0800c9c0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c9cc:	78fb      	ldrb	r3, [r7, #3]
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	2103      	movs	r1, #3
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 f814 	bl	800ca00 <icmp_send_response>
}
 800c9d8:	bf00      	nop
 800c9da:	3708      	adds	r7, #8
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c9ec:	78fb      	ldrb	r3, [r7, #3]
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	210b      	movs	r1, #11
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 f804 	bl	800ca00 <icmp_send_response>
}
 800c9f8:	bf00      	nop
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b08c      	sub	sp, #48	; 0x30
 800ca04:	af04      	add	r7, sp, #16
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	460b      	mov	r3, r1
 800ca0a:	70fb      	strb	r3, [r7, #3]
 800ca0c:	4613      	mov	r3, r2
 800ca0e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ca10:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ca14:	2124      	movs	r1, #36	; 0x24
 800ca16:	2022      	movs	r0, #34	; 0x22
 800ca18:	f7f8 f9c2 	bl	8004da0 <pbuf_alloc>
 800ca1c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ca1e:	69fb      	ldr	r3, [r7, #28]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d04c      	beq.n	800cabe <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	895b      	ldrh	r3, [r3, #10]
 800ca28:	2b23      	cmp	r3, #35	; 0x23
 800ca2a:	d806      	bhi.n	800ca3a <icmp_send_response+0x3a>
 800ca2c:	4b26      	ldr	r3, [pc, #152]	; (800cac8 <icmp_send_response+0xc8>)
 800ca2e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ca32:	4926      	ldr	r1, [pc, #152]	; (800cacc <icmp_send_response+0xcc>)
 800ca34:	4826      	ldr	r0, [pc, #152]	; (800cad0 <icmp_send_response+0xd0>)
 800ca36:	f001 fa95 	bl	800df64 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	685b      	ldr	r3, [r3, #4]
 800ca44:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	78fa      	ldrb	r2, [r7, #3]
 800ca4a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	78ba      	ldrb	r2, [r7, #2]
 800ca50:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	2200      	movs	r2, #0
 800ca56:	711a      	strb	r2, [r3, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	719a      	strb	r2, [r3, #6]
 800ca62:	2200      	movs	r2, #0
 800ca64:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ca66:	69fb      	ldr	r3, [r7, #28]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	f103 0008 	add.w	r0, r3, #8
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	221c      	movs	r2, #28
 800ca74:	4619      	mov	r1, r3
 800ca76:	f001 fa45 	bl	800df04 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	68db      	ldr	r3, [r3, #12]
 800ca7e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ca80:	f107 030c 	add.w	r3, r7, #12
 800ca84:	4618      	mov	r0, r3
 800ca86:	f000 f825 	bl	800cad4 <ip4_route>
 800ca8a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d011      	beq.n	800cab6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	2200      	movs	r2, #0
 800ca96:	709a      	strb	r2, [r3, #2]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ca9c:	f107 020c 	add.w	r2, r7, #12
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	9302      	str	r3, [sp, #8]
 800caa4:	2301      	movs	r3, #1
 800caa6:	9301      	str	r3, [sp, #4]
 800caa8:	2300      	movs	r3, #0
 800caaa:	9300      	str	r3, [sp, #0]
 800caac:	23ff      	movs	r3, #255	; 0xff
 800caae:	2100      	movs	r1, #0
 800cab0:	69f8      	ldr	r0, [r7, #28]
 800cab2:	f000 f9cd 	bl	800ce50 <ip4_output_if>
  }
  pbuf_free(q);
 800cab6:	69f8      	ldr	r0, [r7, #28]
 800cab8:	f7f8 fc56 	bl	8005368 <pbuf_free>
 800cabc:	e000      	b.n	800cac0 <icmp_send_response+0xc0>
    return;
 800cabe:	bf00      	nop
}
 800cac0:	3720      	adds	r7, #32
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	080119a8 	.word	0x080119a8
 800cacc:	08011a74 	.word	0x08011a74
 800cad0:	08011a18 	.word	0x08011a18

0800cad4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b085      	sub	sp, #20
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800cadc:	4b33      	ldr	r3, [pc, #204]	; (800cbac <ip4_route+0xd8>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	60fb      	str	r3, [r7, #12]
 800cae2:	e036      	b.n	800cb52 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800caea:	f003 0301 	and.w	r3, r3, #1
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d02b      	beq.n	800cb4c <ip4_route+0x78>
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cafa:	089b      	lsrs	r3, r3, #2
 800cafc:	f003 0301 	and.w	r3, r3, #1
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d022      	beq.n	800cb4c <ip4_route+0x78>
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	3304      	adds	r3, #4
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d01d      	beq.n	800cb4c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	3304      	adds	r3, #4
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	405a      	eors	r2, r3
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	3308      	adds	r3, #8
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	4013      	ands	r3, r2
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d101      	bne.n	800cb2c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	e038      	b.n	800cb9e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb32:	f003 0302 	and.w	r3, r3, #2
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d108      	bne.n	800cb4c <ip4_route+0x78>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	330c      	adds	r3, #12
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d101      	bne.n	800cb4c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	e028      	b.n	800cb9e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	60fb      	str	r3, [r7, #12]
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d1c5      	bne.n	800cae4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cb58:	4b15      	ldr	r3, [pc, #84]	; (800cbb0 <ip4_route+0xdc>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d01a      	beq.n	800cb96 <ip4_route+0xc2>
 800cb60:	4b13      	ldr	r3, [pc, #76]	; (800cbb0 <ip4_route+0xdc>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb68:	f003 0301 	and.w	r3, r3, #1
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d012      	beq.n	800cb96 <ip4_route+0xc2>
 800cb70:	4b0f      	ldr	r3, [pc, #60]	; (800cbb0 <ip4_route+0xdc>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb78:	f003 0304 	and.w	r3, r3, #4
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d00a      	beq.n	800cb96 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cb80:	4b0b      	ldr	r3, [pc, #44]	; (800cbb0 <ip4_route+0xdc>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	3304      	adds	r3, #4
 800cb86:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d004      	beq.n	800cb96 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	2b7f      	cmp	r3, #127	; 0x7f
 800cb94:	d101      	bne.n	800cb9a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800cb96:	2300      	movs	r3, #0
 800cb98:	e001      	b.n	800cb9e <ip4_route+0xca>
  }

  return netif_default;
 800cb9a:	4b05      	ldr	r3, [pc, #20]	; (800cbb0 <ip4_route+0xdc>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3714      	adds	r7, #20
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr
 800cbaa:	bf00      	nop
 800cbac:	20008af8 	.word	0x20008af8
 800cbb0:	20008afc 	.word	0x20008afc

0800cbb4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cbc2:	f003 0301 	and.w	r3, r3, #1
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d016      	beq.n	800cbfa <ip4_input_accept+0x46>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	3304      	adds	r3, #4
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d011      	beq.n	800cbfa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cbd6:	4b0b      	ldr	r3, [pc, #44]	; (800cc04 <ip4_input_accept+0x50>)
 800cbd8:	695a      	ldr	r2, [r3, #20]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	3304      	adds	r3, #4
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d008      	beq.n	800cbf6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800cbe4:	4b07      	ldr	r3, [pc, #28]	; (800cc04 <ip4_input_accept+0x50>)
 800cbe6:	695b      	ldr	r3, [r3, #20]
 800cbe8:	6879      	ldr	r1, [r7, #4]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f000 fa08 	bl	800d000 <ip4_addr_isbroadcast_u32>
 800cbf0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d001      	beq.n	800cbfa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	e000      	b.n	800cbfc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3708      	adds	r7, #8
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	20003404 	.word	0x20003404

0800cc08 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b086      	sub	sp, #24
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	091b      	lsrs	r3, r3, #4
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	2b04      	cmp	r3, #4
 800cc22:	d004      	beq.n	800cc2e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f7f8 fb9f 	bl	8005368 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	e107      	b.n	800ce3e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	f003 030f 	and.w	r3, r3, #15
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	885b      	ldrh	r3, [r3, #2]
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7f7 f8db 	bl	8003e00 <lwip_htons>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	891b      	ldrh	r3, [r3, #8]
 800cc52:	89ba      	ldrh	r2, [r7, #12]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d204      	bcs.n	800cc62 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800cc58:	89bb      	ldrh	r3, [r7, #12]
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7f8 f9fd 	bl	800505c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	895b      	ldrh	r3, [r3, #10]
 800cc66:	89fa      	ldrh	r2, [r7, #14]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d807      	bhi.n	800cc7c <ip4_input+0x74>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	891b      	ldrh	r3, [r3, #8]
 800cc70:	89ba      	ldrh	r2, [r7, #12]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d802      	bhi.n	800cc7c <ip4_input+0x74>
 800cc76:	89fb      	ldrh	r3, [r7, #14]
 800cc78:	2b13      	cmp	r3, #19
 800cc7a:	d804      	bhi.n	800cc86 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f7f8 fb73 	bl	8005368 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800cc82:	2300      	movs	r3, #0
 800cc84:	e0db      	b.n	800ce3e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	691b      	ldr	r3, [r3, #16]
 800cc8a:	4a6f      	ldr	r2, [pc, #444]	; (800ce48 <ip4_input+0x240>)
 800cc8c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	4a6d      	ldr	r2, [pc, #436]	; (800ce48 <ip4_input+0x240>)
 800cc94:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cc96:	4b6c      	ldr	r3, [pc, #432]	; (800ce48 <ip4_input+0x240>)
 800cc98:	695b      	ldr	r3, [r3, #20]
 800cc9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc9e:	2be0      	cmp	r3, #224	; 0xe0
 800cca0:	d112      	bne.n	800ccc8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cca8:	f003 0301 	and.w	r3, r3, #1
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d007      	beq.n	800ccc2 <ip4_input+0xba>
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	3304      	adds	r3, #4
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d002      	beq.n	800ccc2 <ip4_input+0xba>
      netif = inp;
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	613b      	str	r3, [r7, #16]
 800ccc0:	e02a      	b.n	800cd18 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	613b      	str	r3, [r7, #16]
 800ccc6:	e027      	b.n	800cd18 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ccc8:	6838      	ldr	r0, [r7, #0]
 800ccca:	f7ff ff73 	bl	800cbb4 <ip4_input_accept>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d002      	beq.n	800ccda <ip4_input+0xd2>
      netif = inp;
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	613b      	str	r3, [r7, #16]
 800ccd8:	e01e      	b.n	800cd18 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ccde:	4b5a      	ldr	r3, [pc, #360]	; (800ce48 <ip4_input+0x240>)
 800cce0:	695b      	ldr	r3, [r3, #20]
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	2b7f      	cmp	r3, #127	; 0x7f
 800cce6:	d017      	beq.n	800cd18 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800cce8:	4b58      	ldr	r3, [pc, #352]	; (800ce4c <ip4_input+0x244>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	613b      	str	r3, [r7, #16]
 800ccee:	e00e      	b.n	800cd0e <ip4_input+0x106>
          if (netif == inp) {
 800ccf0:	693a      	ldr	r2, [r7, #16]
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d006      	beq.n	800cd06 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ccf8:	6938      	ldr	r0, [r7, #16]
 800ccfa:	f7ff ff5b 	bl	800cbb4 <ip4_input_accept>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d108      	bne.n	800cd16 <ip4_input+0x10e>
 800cd04:	e000      	b.n	800cd08 <ip4_input+0x100>
            continue;
 800cd06:	bf00      	nop
        NETIF_FOREACH(netif) {
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	613b      	str	r3, [r7, #16]
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d1ed      	bne.n	800ccf0 <ip4_input+0xe8>
 800cd14:	e000      	b.n	800cd18 <ip4_input+0x110>
            break;
 800cd16:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cd18:	4b4b      	ldr	r3, [pc, #300]	; (800ce48 <ip4_input+0x240>)
 800cd1a:	691b      	ldr	r3, [r3, #16]
 800cd1c:	6839      	ldr	r1, [r7, #0]
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f000 f96e 	bl	800d000 <ip4_addr_isbroadcast_u32>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d105      	bne.n	800cd36 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800cd2a:	4b47      	ldr	r3, [pc, #284]	; (800ce48 <ip4_input+0x240>)
 800cd2c:	691b      	ldr	r3, [r3, #16]
 800cd2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cd32:	2be0      	cmp	r3, #224	; 0xe0
 800cd34:	d104      	bne.n	800cd40 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f7f8 fb16 	bl	8005368 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	e07e      	b.n	800ce3e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d104      	bne.n	800cd50 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f7f8 fb0e 	bl	8005368 <pbuf_free>
    return ERR_OK;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	e076      	b.n	800ce3e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	88db      	ldrh	r3, [r3, #6]
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	461a      	mov	r2, r3
 800cd58:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800cd5c:	4013      	ands	r3, r2
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d00b      	beq.n	800cd7a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 fc92 	bl	800d68c <ip4_reass>
 800cd68:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d101      	bne.n	800cd74 <ip4_input+0x16c>
      return ERR_OK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	e064      	b.n	800ce3e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800cd7a:	4a33      	ldr	r2, [pc, #204]	; (800ce48 <ip4_input+0x240>)
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800cd80:	4a31      	ldr	r2, [pc, #196]	; (800ce48 <ip4_input+0x240>)
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800cd86:	4a30      	ldr	r2, [pc, #192]	; (800ce48 <ip4_input+0x240>)
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	f003 030f 	and.w	r3, r3, #15
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	b29a      	uxth	r2, r3
 800cd9c:	4b2a      	ldr	r3, [pc, #168]	; (800ce48 <ip4_input+0x240>)
 800cd9e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800cda0:	89fb      	ldrh	r3, [r7, #14]
 800cda2:	4619      	mov	r1, r3
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f7f8 fa59 	bl	800525c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	7a5b      	ldrb	r3, [r3, #9]
 800cdae:	2b11      	cmp	r3, #17
 800cdb0:	d006      	beq.n	800cdc0 <ip4_input+0x1b8>
 800cdb2:	2b11      	cmp	r3, #17
 800cdb4:	dc13      	bgt.n	800cdde <ip4_input+0x1d6>
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d00c      	beq.n	800cdd4 <ip4_input+0x1cc>
 800cdba:	2b06      	cmp	r3, #6
 800cdbc:	d005      	beq.n	800cdca <ip4_input+0x1c2>
 800cdbe:	e00e      	b.n	800cdde <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800cdc0:	6839      	ldr	r1, [r7, #0]
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f7fe f950 	bl	800b068 <udp_input>
        break;
 800cdc8:	e026      	b.n	800ce18 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800cdca:	6839      	ldr	r1, [r7, #0]
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f7fa f995 	bl	80070fc <tcp_input>
        break;
 800cdd2:	e021      	b.n	800ce18 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800cdd4:	6839      	ldr	r1, [r7, #0]
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f7ff fcee 	bl	800c7b8 <icmp_input>
        break;
 800cddc:	e01c      	b.n	800ce18 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cdde:	4b1a      	ldr	r3, [pc, #104]	; (800ce48 <ip4_input+0x240>)
 800cde0:	695b      	ldr	r3, [r3, #20]
 800cde2:	6939      	ldr	r1, [r7, #16]
 800cde4:	4618      	mov	r0, r3
 800cde6:	f000 f90b 	bl	800d000 <ip4_addr_isbroadcast_u32>
 800cdea:	4603      	mov	r3, r0
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d10f      	bne.n	800ce10 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cdf0:	4b15      	ldr	r3, [pc, #84]	; (800ce48 <ip4_input+0x240>)
 800cdf2:	695b      	ldr	r3, [r3, #20]
 800cdf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cdf8:	2be0      	cmp	r3, #224	; 0xe0
 800cdfa:	d009      	beq.n	800ce10 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800cdfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ce00:	4619      	mov	r1, r3
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f7f8 fa9d 	bl	8005342 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ce08:	2102      	movs	r1, #2
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f7ff fdd8 	bl	800c9c0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f7f8 faa9 	bl	8005368 <pbuf_free>
        break;
 800ce16:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ce18:	4b0b      	ldr	r3, [pc, #44]	; (800ce48 <ip4_input+0x240>)
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ce1e:	4b0a      	ldr	r3, [pc, #40]	; (800ce48 <ip4_input+0x240>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ce24:	4b08      	ldr	r3, [pc, #32]	; (800ce48 <ip4_input+0x240>)
 800ce26:	2200      	movs	r2, #0
 800ce28:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ce2a:	4b07      	ldr	r3, [pc, #28]	; (800ce48 <ip4_input+0x240>)
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ce30:	4b05      	ldr	r3, [pc, #20]	; (800ce48 <ip4_input+0x240>)
 800ce32:	2200      	movs	r2, #0
 800ce34:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ce36:	4b04      	ldr	r3, [pc, #16]	; (800ce48 <ip4_input+0x240>)
 800ce38:	2200      	movs	r2, #0
 800ce3a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ce3c:	2300      	movs	r3, #0
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3718      	adds	r7, #24
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
 800ce46:	bf00      	nop
 800ce48:	20003404 	.word	0x20003404
 800ce4c:	20008af8 	.word	0x20008af8

0800ce50 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b08a      	sub	sp, #40	; 0x28
 800ce54:	af04      	add	r7, sp, #16
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	607a      	str	r2, [r7, #4]
 800ce5c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d009      	beq.n	800ce7c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d003      	beq.n	800ce76 <ip4_output_if+0x26>
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d102      	bne.n	800ce7c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800ce76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce78:	3304      	adds	r3, #4
 800ce7a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ce7c:	78fa      	ldrb	r2, [r7, #3]
 800ce7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce80:	9302      	str	r3, [sp, #8]
 800ce82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ce86:	9301      	str	r3, [sp, #4]
 800ce88:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce8c:	9300      	str	r3, [sp, #0]
 800ce8e:	4613      	mov	r3, r2
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	6979      	ldr	r1, [r7, #20]
 800ce94:	68f8      	ldr	r0, [r7, #12]
 800ce96:	f000 f805 	bl	800cea4 <ip4_output_if_src>
 800ce9a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3718      	adds	r7, #24
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b088      	sub	sp, #32
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	607a      	str	r2, [r7, #4]
 800ceb0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	7b9b      	ldrb	r3, [r3, #14]
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d006      	beq.n	800cec8 <ip4_output_if_src+0x24>
 800ceba:	4b4b      	ldr	r3, [pc, #300]	; (800cfe8 <ip4_output_if_src+0x144>)
 800cebc:	f44f 7255 	mov.w	r2, #852	; 0x354
 800cec0:	494a      	ldr	r1, [pc, #296]	; (800cfec <ip4_output_if_src+0x148>)
 800cec2:	484b      	ldr	r0, [pc, #300]	; (800cff0 <ip4_output_if_src+0x14c>)
 800cec4:	f001 f84e 	bl	800df64 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d060      	beq.n	800cf90 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800cece:	2314      	movs	r3, #20
 800ced0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ced2:	2114      	movs	r1, #20
 800ced4:	68f8      	ldr	r0, [r7, #12]
 800ced6:	f7f8 f9b1 	bl	800523c <pbuf_add_header>
 800ceda:	4603      	mov	r3, r0
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d002      	beq.n	800cee6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cee0:	f06f 0301 	mvn.w	r3, #1
 800cee4:	e07c      	b.n	800cfe0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	895b      	ldrh	r3, [r3, #10]
 800cef0:	2b13      	cmp	r3, #19
 800cef2:	d806      	bhi.n	800cf02 <ip4_output_if_src+0x5e>
 800cef4:	4b3c      	ldr	r3, [pc, #240]	; (800cfe8 <ip4_output_if_src+0x144>)
 800cef6:	f44f 7262 	mov.w	r2, #904	; 0x388
 800cefa:	493e      	ldr	r1, [pc, #248]	; (800cff4 <ip4_output_if_src+0x150>)
 800cefc:	483c      	ldr	r0, [pc, #240]	; (800cff0 <ip4_output_if_src+0x14c>)
 800cefe:	f001 f831 	bl	800df64 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800cf02:	69fb      	ldr	r3, [r7, #28]
 800cf04:	78fa      	ldrb	r2, [r7, #3]
 800cf06:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800cf0e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800cf18:	8b7b      	ldrh	r3, [r7, #26]
 800cf1a:	089b      	lsrs	r3, r3, #2
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf24:	b2da      	uxtb	r2, r3
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800cf2a:	69fb      	ldr	r3, [r7, #28]
 800cf2c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cf30:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	891b      	ldrh	r3, [r3, #8]
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7f6 ff62 	bl	8003e00 <lwip_htons>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	461a      	mov	r2, r3
 800cf40:	69fb      	ldr	r3, [r7, #28]
 800cf42:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800cf44:	69fb      	ldr	r3, [r7, #28]
 800cf46:	2200      	movs	r2, #0
 800cf48:	719a      	strb	r2, [r3, #6]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800cf4e:	4b2a      	ldr	r3, [pc, #168]	; (800cff8 <ip4_output_if_src+0x154>)
 800cf50:	881b      	ldrh	r3, [r3, #0]
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7f6 ff54 	bl	8003e00 <lwip_htons>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	69fb      	ldr	r3, [r7, #28]
 800cf5e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800cf60:	4b25      	ldr	r3, [pc, #148]	; (800cff8 <ip4_output_if_src+0x154>)
 800cf62:	881b      	ldrh	r3, [r3, #0]
 800cf64:	3301      	adds	r3, #1
 800cf66:	b29a      	uxth	r2, r3
 800cf68:	4b23      	ldr	r3, [pc, #140]	; (800cff8 <ip4_output_if_src+0x154>)
 800cf6a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d104      	bne.n	800cf7c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800cf72:	4b22      	ldr	r3, [pc, #136]	; (800cffc <ip4_output_if_src+0x158>)
 800cf74:	681a      	ldr	r2, [r3, #0]
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	60da      	str	r2, [r3, #12]
 800cf7a:	e003      	b.n	800cf84 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800cf84:	69fb      	ldr	r3, [r7, #28]
 800cf86:	2200      	movs	r2, #0
 800cf88:	729a      	strb	r2, [r3, #10]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	72da      	strb	r2, [r3, #11]
 800cf8e:	e00f      	b.n	800cfb0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	895b      	ldrh	r3, [r3, #10]
 800cf94:	2b13      	cmp	r3, #19
 800cf96:	d802      	bhi.n	800cf9e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cf98:	f06f 0301 	mvn.w	r3, #1
 800cf9c:	e020      	b.n	800cfe0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800cfa4:	69fb      	ldr	r3, [r7, #28]
 800cfa6:	691b      	ldr	r3, [r3, #16]
 800cfa8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800cfaa:	f107 0314 	add.w	r3, r7, #20
 800cfae:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800cfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d00c      	beq.n	800cfd2 <ip4_output_if_src+0x12e>
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	891a      	ldrh	r2, [r3, #8]
 800cfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfbe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d906      	bls.n	800cfd2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cfc8:	68f8      	ldr	r0, [r7, #12]
 800cfca:	f000 fd4d 	bl	800da68 <ip4_frag>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	e006      	b.n	800cfe0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800cfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd4:	695b      	ldr	r3, [r3, #20]
 800cfd6:	687a      	ldr	r2, [r7, #4]
 800cfd8:	68f9      	ldr	r1, [r7, #12]
 800cfda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfdc:	4798      	blx	r3
 800cfde:	4603      	mov	r3, r0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3720      	adds	r7, #32
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}
 800cfe8:	08011aa0 	.word	0x08011aa0
 800cfec:	08011ad4 	.word	0x08011ad4
 800cff0:	08011ae0 	.word	0x08011ae0
 800cff4:	08011b08 	.word	0x08011b08
 800cff8:	200001fe 	.word	0x200001fe
 800cffc:	08011ed4 	.word	0x08011ed4

0800d000 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d000:	b480      	push	{r7}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d014:	d002      	beq.n	800d01c <ip4_addr_isbroadcast_u32+0x1c>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d101      	bne.n	800d020 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d01c:	2301      	movs	r3, #1
 800d01e:	e02a      	b.n	800d076 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d026:	f003 0302 	and.w	r3, r3, #2
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d101      	bne.n	800d032 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d02e:	2300      	movs	r3, #0
 800d030:	e021      	b.n	800d076 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	3304      	adds	r3, #4
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d101      	bne.n	800d042 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d03e:	2300      	movs	r3, #0
 800d040:	e019      	b.n	800d076 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d042:	68fa      	ldr	r2, [r7, #12]
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	3304      	adds	r3, #4
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	405a      	eors	r2, r3
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	3308      	adds	r3, #8
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4013      	ands	r3, r2
 800d054:	2b00      	cmp	r3, #0
 800d056:	d10d      	bne.n	800d074 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	3308      	adds	r3, #8
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	43da      	mvns	r2, r3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	3308      	adds	r3, #8
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d101      	bne.n	800d074 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d070:	2301      	movs	r3, #1
 800d072:	e000      	b.n	800d076 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d074:	2300      	movs	r3, #0
  }
}
 800d076:	4618      	mov	r0, r3
 800d078:	3714      	adds	r7, #20
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr
	...

0800d084 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d08a:	2300      	movs	r3, #0
 800d08c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d08e:	4b12      	ldr	r3, [pc, #72]	; (800d0d8 <ip_reass_tmr+0x54>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d094:	e018      	b.n	800d0c8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	7fdb      	ldrb	r3, [r3, #31]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00b      	beq.n	800d0b6 <ip_reass_tmr+0x32>
      r->timer--;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	7fdb      	ldrb	r3, [r3, #31]
 800d0a2:	3b01      	subs	r3, #1
 800d0a4:	b2da      	uxtb	r2, r3
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	60fb      	str	r3, [r7, #12]
 800d0b4:	e008      	b.n	800d0c8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d0c0:	68b9      	ldr	r1, [r7, #8]
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 f80a 	bl	800d0dc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d1e3      	bne.n	800d096 <ip_reass_tmr+0x12>
    }
  }
}
 800d0ce:	bf00      	nop
 800d0d0:	bf00      	nop
 800d0d2:	3710      	adds	r7, #16
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	20000200 	.word	0x20000200

0800d0dc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b088      	sub	sp, #32
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d0ea:	683a      	ldr	r2, [r7, #0]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d105      	bne.n	800d0fe <ip_reass_free_complete_datagram+0x22>
 800d0f2:	4b45      	ldr	r3, [pc, #276]	; (800d208 <ip_reass_free_complete_datagram+0x12c>)
 800d0f4:	22ab      	movs	r2, #171	; 0xab
 800d0f6:	4945      	ldr	r1, [pc, #276]	; (800d20c <ip_reass_free_complete_datagram+0x130>)
 800d0f8:	4845      	ldr	r0, [pc, #276]	; (800d210 <ip_reass_free_complete_datagram+0x134>)
 800d0fa:	f000 ff33 	bl	800df64 <iprintf>
  if (prev != NULL) {
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00a      	beq.n	800d11a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d005      	beq.n	800d11a <ip_reass_free_complete_datagram+0x3e>
 800d10e:	4b3e      	ldr	r3, [pc, #248]	; (800d208 <ip_reass_free_complete_datagram+0x12c>)
 800d110:	22ad      	movs	r2, #173	; 0xad
 800d112:	4940      	ldr	r1, [pc, #256]	; (800d214 <ip_reass_free_complete_datagram+0x138>)
 800d114:	483e      	ldr	r0, [pc, #248]	; (800d210 <ip_reass_free_complete_datagram+0x134>)
 800d116:	f000 ff25 	bl	800df64 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	889b      	ldrh	r3, [r3, #4]
 800d126:	b29b      	uxth	r3, r3
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d12a      	bne.n	800d182 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d13a:	69bb      	ldr	r3, [r7, #24]
 800d13c:	6858      	ldr	r0, [r3, #4]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	3308      	adds	r3, #8
 800d142:	2214      	movs	r2, #20
 800d144:	4619      	mov	r1, r3
 800d146:	f000 fedd 	bl	800df04 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d14a:	2101      	movs	r1, #1
 800d14c:	69b8      	ldr	r0, [r7, #24]
 800d14e:	f7ff fc47 	bl	800c9e0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d152:	69b8      	ldr	r0, [r7, #24]
 800d154:	f7f8 f990 	bl	8005478 <pbuf_clen>
 800d158:	4603      	mov	r3, r0
 800d15a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d15c:	8bfa      	ldrh	r2, [r7, #30]
 800d15e:	8a7b      	ldrh	r3, [r7, #18]
 800d160:	4413      	add	r3, r2
 800d162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d166:	db05      	blt.n	800d174 <ip_reass_free_complete_datagram+0x98>
 800d168:	4b27      	ldr	r3, [pc, #156]	; (800d208 <ip_reass_free_complete_datagram+0x12c>)
 800d16a:	22bc      	movs	r2, #188	; 0xbc
 800d16c:	492a      	ldr	r1, [pc, #168]	; (800d218 <ip_reass_free_complete_datagram+0x13c>)
 800d16e:	4828      	ldr	r0, [pc, #160]	; (800d210 <ip_reass_free_complete_datagram+0x134>)
 800d170:	f000 fef8 	bl	800df64 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d174:	8bfa      	ldrh	r2, [r7, #30]
 800d176:	8a7b      	ldrh	r3, [r7, #18]
 800d178:	4413      	add	r3, r2
 800d17a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d17c:	69b8      	ldr	r0, [r7, #24]
 800d17e:	f7f8 f8f3 	bl	8005368 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d188:	e01f      	b.n	800d1ca <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d18a:	69bb      	ldr	r3, [r7, #24]
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	f7f8 f96c 	bl	8005478 <pbuf_clen>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d1a4:	8bfa      	ldrh	r2, [r7, #30]
 800d1a6:	8a7b      	ldrh	r3, [r7, #18]
 800d1a8:	4413      	add	r3, r2
 800d1aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1ae:	db05      	blt.n	800d1bc <ip_reass_free_complete_datagram+0xe0>
 800d1b0:	4b15      	ldr	r3, [pc, #84]	; (800d208 <ip_reass_free_complete_datagram+0x12c>)
 800d1b2:	22cc      	movs	r2, #204	; 0xcc
 800d1b4:	4918      	ldr	r1, [pc, #96]	; (800d218 <ip_reass_free_complete_datagram+0x13c>)
 800d1b6:	4816      	ldr	r0, [pc, #88]	; (800d210 <ip_reass_free_complete_datagram+0x134>)
 800d1b8:	f000 fed4 	bl	800df64 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d1bc:	8bfa      	ldrh	r2, [r7, #30]
 800d1be:	8a7b      	ldrh	r3, [r7, #18]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d1c4:	68f8      	ldr	r0, [r7, #12]
 800d1c6:	f7f8 f8cf 	bl	8005368 <pbuf_free>
  while (p != NULL) {
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d1dc      	bne.n	800d18a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d1d0:	6839      	ldr	r1, [r7, #0]
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f000 f8c2 	bl	800d35c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d1d8:	4b10      	ldr	r3, [pc, #64]	; (800d21c <ip_reass_free_complete_datagram+0x140>)
 800d1da:	881b      	ldrh	r3, [r3, #0]
 800d1dc:	8bfa      	ldrh	r2, [r7, #30]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d905      	bls.n	800d1ee <ip_reass_free_complete_datagram+0x112>
 800d1e2:	4b09      	ldr	r3, [pc, #36]	; (800d208 <ip_reass_free_complete_datagram+0x12c>)
 800d1e4:	22d2      	movs	r2, #210	; 0xd2
 800d1e6:	490e      	ldr	r1, [pc, #56]	; (800d220 <ip_reass_free_complete_datagram+0x144>)
 800d1e8:	4809      	ldr	r0, [pc, #36]	; (800d210 <ip_reass_free_complete_datagram+0x134>)
 800d1ea:	f000 febb 	bl	800df64 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d1ee:	4b0b      	ldr	r3, [pc, #44]	; (800d21c <ip_reass_free_complete_datagram+0x140>)
 800d1f0:	881a      	ldrh	r2, [r3, #0]
 800d1f2:	8bfb      	ldrh	r3, [r7, #30]
 800d1f4:	1ad3      	subs	r3, r2, r3
 800d1f6:	b29a      	uxth	r2, r3
 800d1f8:	4b08      	ldr	r3, [pc, #32]	; (800d21c <ip_reass_free_complete_datagram+0x140>)
 800d1fa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d1fc:	8bfb      	ldrh	r3, [r7, #30]
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3720      	adds	r7, #32
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	08011b38 	.word	0x08011b38
 800d20c:	08011b74 	.word	0x08011b74
 800d210:	08011b80 	.word	0x08011b80
 800d214:	08011ba8 	.word	0x08011ba8
 800d218:	08011bbc 	.word	0x08011bbc
 800d21c:	20000204 	.word	0x20000204
 800d220:	08011bdc 	.word	0x08011bdc

0800d224 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b08a      	sub	sp, #40	; 0x28
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d22e:	2300      	movs	r3, #0
 800d230:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d232:	2300      	movs	r3, #0
 800d234:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d236:	2300      	movs	r3, #0
 800d238:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d23a:	2300      	movs	r3, #0
 800d23c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d23e:	2300      	movs	r3, #0
 800d240:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d242:	4b28      	ldr	r3, [pc, #160]	; (800d2e4 <ip_reass_remove_oldest_datagram+0xc0>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d248:	e030      	b.n	800d2ac <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24c:	695a      	ldr	r2, [r3, #20]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	68db      	ldr	r3, [r3, #12]
 800d252:	429a      	cmp	r2, r3
 800d254:	d10c      	bne.n	800d270 <ip_reass_remove_oldest_datagram+0x4c>
 800d256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d258:	699a      	ldr	r2, [r3, #24]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	691b      	ldr	r3, [r3, #16]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d106      	bne.n	800d270 <ip_reass_remove_oldest_datagram+0x4c>
 800d262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d264:	899a      	ldrh	r2, [r3, #12]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	889b      	ldrh	r3, [r3, #4]
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d014      	beq.n	800d29a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	3301      	adds	r3, #1
 800d274:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d276:	6a3b      	ldr	r3, [r7, #32]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d104      	bne.n	800d286 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	61bb      	str	r3, [r7, #24]
 800d284:	e009      	b.n	800d29a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d288:	7fda      	ldrb	r2, [r3, #31]
 800d28a:	6a3b      	ldr	r3, [r7, #32]
 800d28c:	7fdb      	ldrb	r3, [r3, #31]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d803      	bhi.n	800d29a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d294:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d296:	69fb      	ldr	r3, [r7, #28]
 800d298:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d001      	beq.n	800d2a6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d1cb      	bne.n	800d24a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d2b2:	6a3b      	ldr	r3, [r7, #32]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d008      	beq.n	800d2ca <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d2b8:	69b9      	ldr	r1, [r7, #24]
 800d2ba:	6a38      	ldr	r0, [r7, #32]
 800d2bc:	f7ff ff0e 	bl	800d0dc <ip_reass_free_complete_datagram>
 800d2c0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d2c2:	697a      	ldr	r2, [r7, #20]
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	4413      	add	r3, r2
 800d2c8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d2ca:	697a      	ldr	r2, [r7, #20]
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	da02      	bge.n	800d2d8 <ip_reass_remove_oldest_datagram+0xb4>
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	dcac      	bgt.n	800d232 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d2d8:	697b      	ldr	r3, [r7, #20]
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3728      	adds	r7, #40	; 0x28
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	20000200 	.word	0x20000200

0800d2e8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d2f2:	2004      	movs	r0, #4
 800d2f4:	f7f7 f9da 	bl	80046ac <memp_malloc>
 800d2f8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d110      	bne.n	800d322 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d300:	6839      	ldr	r1, [r7, #0]
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f7ff ff8e 	bl	800d224 <ip_reass_remove_oldest_datagram>
 800d308:	4602      	mov	r2, r0
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	4293      	cmp	r3, r2
 800d30e:	dc03      	bgt.n	800d318 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d310:	2004      	movs	r0, #4
 800d312:	f7f7 f9cb 	bl	80046ac <memp_malloc>
 800d316:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d101      	bne.n	800d322 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d31e:	2300      	movs	r3, #0
 800d320:	e016      	b.n	800d350 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d322:	2220      	movs	r2, #32
 800d324:	2100      	movs	r1, #0
 800d326:	68f8      	ldr	r0, [r7, #12]
 800d328:	f000 fe14 	bl	800df54 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	220f      	movs	r2, #15
 800d330:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d332:	4b09      	ldr	r3, [pc, #36]	; (800d358 <ip_reass_enqueue_new_datagram+0x70>)
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d33a:	4a07      	ldr	r2, [pc, #28]	; (800d358 <ip_reass_enqueue_new_datagram+0x70>)
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	3308      	adds	r3, #8
 800d344:	2214      	movs	r2, #20
 800d346:	6879      	ldr	r1, [r7, #4]
 800d348:	4618      	mov	r0, r3
 800d34a:	f000 fddb 	bl	800df04 <memcpy>
  return ipr;
 800d34e:	68fb      	ldr	r3, [r7, #12]
}
 800d350:	4618      	mov	r0, r3
 800d352:	3710      	adds	r7, #16
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}
 800d358:	20000200 	.word	0x20000200

0800d35c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d366:	4b10      	ldr	r3, [pc, #64]	; (800d3a8 <ip_reass_dequeue_datagram+0x4c>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d104      	bne.n	800d37a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	4a0c      	ldr	r2, [pc, #48]	; (800d3a8 <ip_reass_dequeue_datagram+0x4c>)
 800d376:	6013      	str	r3, [r2, #0]
 800d378:	e00d      	b.n	800d396 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d106      	bne.n	800d38e <ip_reass_dequeue_datagram+0x32>
 800d380:	4b0a      	ldr	r3, [pc, #40]	; (800d3ac <ip_reass_dequeue_datagram+0x50>)
 800d382:	f240 1245 	movw	r2, #325	; 0x145
 800d386:	490a      	ldr	r1, [pc, #40]	; (800d3b0 <ip_reass_dequeue_datagram+0x54>)
 800d388:	480a      	ldr	r0, [pc, #40]	; (800d3b4 <ip_reass_dequeue_datagram+0x58>)
 800d38a:	f000 fdeb 	bl	800df64 <iprintf>
    prev->next = ipr->next;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681a      	ldr	r2, [r3, #0]
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d396:	6879      	ldr	r1, [r7, #4]
 800d398:	2004      	movs	r0, #4
 800d39a:	f7f7 f9d3 	bl	8004744 <memp_free>
}
 800d39e:	bf00      	nop
 800d3a0:	3708      	adds	r7, #8
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	20000200 	.word	0x20000200
 800d3ac:	08011b38 	.word	0x08011b38
 800d3b0:	08011c00 	.word	0x08011c00
 800d3b4:	08011b80 	.word	0x08011b80

0800d3b8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b08c      	sub	sp, #48	; 0x30
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	885b      	ldrh	r3, [r3, #2]
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7f6 fd11 	bl	8003e00 <lwip_htons>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	f003 030f 	and.w	r3, r3, #15
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	009b      	lsls	r3, r3, #2
 800d3ee:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d3f0:	7e7b      	ldrb	r3, [r7, #25]
 800d3f2:	b29b      	uxth	r3, r3
 800d3f4:	8b7a      	ldrh	r2, [r7, #26]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d202      	bcs.n	800d400 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d3fa:	f04f 33ff 	mov.w	r3, #4294967295
 800d3fe:	e135      	b.n	800d66c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d400:	7e7b      	ldrb	r3, [r7, #25]
 800d402:	b29b      	uxth	r3, r3
 800d404:	8b7a      	ldrh	r2, [r7, #26]
 800d406:	1ad3      	subs	r3, r2, r3
 800d408:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	88db      	ldrh	r3, [r3, #6]
 800d40e:	b29b      	uxth	r3, r3
 800d410:	4618      	mov	r0, r3
 800d412:	f7f6 fcf5 	bl	8003e00 <lwip_htons>
 800d416:	4603      	mov	r3, r0
 800d418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	00db      	lsls	r3, r3, #3
 800d420:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42a:	2200      	movs	r2, #0
 800d42c:	701a      	strb	r2, [r3, #0]
 800d42e:	2200      	movs	r2, #0
 800d430:	705a      	strb	r2, [r3, #1]
 800d432:	2200      	movs	r2, #0
 800d434:	709a      	strb	r2, [r3, #2]
 800d436:	2200      	movs	r2, #0
 800d438:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43c:	8afa      	ldrh	r2, [r7, #22]
 800d43e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d440:	8afa      	ldrh	r2, [r7, #22]
 800d442:	8b7b      	ldrh	r3, [r7, #26]
 800d444:	4413      	add	r3, r2
 800d446:	b29a      	uxth	r2, r3
 800d448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44e:	88db      	ldrh	r3, [r3, #6]
 800d450:	b29b      	uxth	r3, r3
 800d452:	8afa      	ldrh	r2, [r7, #22]
 800d454:	429a      	cmp	r2, r3
 800d456:	d902      	bls.n	800d45e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d458:	f04f 33ff 	mov.w	r3, #4294967295
 800d45c:	e106      	b.n	800d66c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	627b      	str	r3, [r7, #36]	; 0x24
 800d464:	e068      	b.n	800d538 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46e:	889b      	ldrh	r3, [r3, #4]
 800d470:	b29a      	uxth	r2, r3
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	889b      	ldrh	r3, [r3, #4]
 800d476:	b29b      	uxth	r3, r3
 800d478:	429a      	cmp	r2, r3
 800d47a:	d235      	bcs.n	800d4e8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d480:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d484:	2b00      	cmp	r3, #0
 800d486:	d020      	beq.n	800d4ca <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48a:	889b      	ldrh	r3, [r3, #4]
 800d48c:	b29a      	uxth	r2, r3
 800d48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d490:	88db      	ldrh	r3, [r3, #6]
 800d492:	b29b      	uxth	r3, r3
 800d494:	429a      	cmp	r2, r3
 800d496:	d307      	bcc.n	800d4a8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49a:	88db      	ldrh	r3, [r3, #6]
 800d49c:	b29a      	uxth	r2, r3
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	889b      	ldrh	r3, [r3, #4]
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d902      	bls.n	800d4ae <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d4a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4ac:	e0de      	b.n	800d66c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b0:	68ba      	ldr	r2, [r7, #8]
 800d4b2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b6:	88db      	ldrh	r3, [r3, #6]
 800d4b8:	b29a      	uxth	r2, r3
 800d4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4bc:	889b      	ldrh	r3, [r3, #4]
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d03d      	beq.n	800d540 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d4c8:	e03a      	b.n	800d540 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4cc:	88db      	ldrh	r3, [r3, #6]
 800d4ce:	b29a      	uxth	r2, r3
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	889b      	ldrh	r3, [r3, #4]
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d902      	bls.n	800d4e0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d4da:	f04f 33ff 	mov.w	r3, #4294967295
 800d4de:	e0c5      	b.n	800d66c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	68ba      	ldr	r2, [r7, #8]
 800d4e4:	605a      	str	r2, [r3, #4]
      break;
 800d4e6:	e02b      	b.n	800d540 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ea:	889b      	ldrh	r3, [r3, #4]
 800d4ec:	b29a      	uxth	r2, r3
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	889b      	ldrh	r3, [r3, #4]
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d102      	bne.n	800d4fe <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4fc:	e0b6      	b.n	800d66c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d500:	889b      	ldrh	r3, [r3, #4]
 800d502:	b29a      	uxth	r2, r3
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	88db      	ldrh	r3, [r3, #6]
 800d508:	b29b      	uxth	r3, r3
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d202      	bcs.n	800d514 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d50e:	f04f 33ff 	mov.w	r3, #4294967295
 800d512:	e0ab      	b.n	800d66c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d516:	2b00      	cmp	r3, #0
 800d518:	d009      	beq.n	800d52e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51c:	88db      	ldrh	r3, [r3, #6]
 800d51e:	b29a      	uxth	r2, r3
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	889b      	ldrh	r3, [r3, #4]
 800d524:	b29b      	uxth	r3, r3
 800d526:	429a      	cmp	r2, r3
 800d528:	d001      	beq.n	800d52e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d52a:	2300      	movs	r3, #0
 800d52c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d193      	bne.n	800d466 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d53e:	e000      	b.n	800d542 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d540:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d544:	2b00      	cmp	r3, #0
 800d546:	d12d      	bne.n	800d5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d01c      	beq.n	800d588 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d550:	88db      	ldrh	r3, [r3, #6]
 800d552:	b29a      	uxth	r2, r3
 800d554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d556:	889b      	ldrh	r3, [r3, #4]
 800d558:	b29b      	uxth	r3, r3
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d906      	bls.n	800d56c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d55e:	4b45      	ldr	r3, [pc, #276]	; (800d674 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d560:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800d564:	4944      	ldr	r1, [pc, #272]	; (800d678 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d566:	4845      	ldr	r0, [pc, #276]	; (800d67c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d568:	f000 fcfc 	bl	800df64 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d56e:	68ba      	ldr	r2, [r7, #8]
 800d570:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d574:	88db      	ldrh	r3, [r3, #6]
 800d576:	b29a      	uxth	r2, r3
 800d578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d57a:	889b      	ldrh	r3, [r3, #4]
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	429a      	cmp	r2, r3
 800d580:	d010      	beq.n	800d5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d582:	2300      	movs	r3, #0
 800d584:	623b      	str	r3, [r7, #32]
 800d586:	e00d      	b.n	800d5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d006      	beq.n	800d59e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d590:	4b38      	ldr	r3, [pc, #224]	; (800d674 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d592:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800d596:	493a      	ldr	r1, [pc, #232]	; (800d680 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d598:	4838      	ldr	r0, [pc, #224]	; (800d67c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d59a:	f000 fce3 	bl	800df64 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	68ba      	ldr	r2, [r7, #8]
 800d5a2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d105      	bne.n	800d5b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	7f9b      	ldrb	r3, [r3, #30]
 800d5ae:	f003 0301 	and.w	r3, r3, #1
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d059      	beq.n	800d66a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d5b6:	6a3b      	ldr	r3, [r7, #32]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d04f      	beq.n	800d65c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d006      	beq.n	800d5d2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	685b      	ldr	r3, [r3, #4]
 800d5ca:	889b      	ldrh	r3, [r3, #4]
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d002      	beq.n	800d5d8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	623b      	str	r3, [r7, #32]
 800d5d6:	e041      	b.n	800d65c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5da:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d5e2:	e012      	b.n	800d60a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e6:	685b      	ldr	r3, [r3, #4]
 800d5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ec:	88db      	ldrh	r3, [r3, #6]
 800d5ee:	b29a      	uxth	r2, r3
 800d5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f2:	889b      	ldrh	r3, [r3, #4]
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d002      	beq.n	800d600 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	623b      	str	r3, [r7, #32]
            break;
 800d5fe:	e007      	b.n	800d610 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800d600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d602:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d1e9      	bne.n	800d5e4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d610:	6a3b      	ldr	r3, [r7, #32]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d022      	beq.n	800d65c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d106      	bne.n	800d62c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800d61e:	4b15      	ldr	r3, [pc, #84]	; (800d674 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d620:	f240 12df 	movw	r2, #479	; 0x1df
 800d624:	4917      	ldr	r1, [pc, #92]	; (800d684 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d626:	4815      	ldr	r0, [pc, #84]	; (800d67c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d628:	f000 fc9c 	bl	800df64 <iprintf>
          LWIP_ASSERT("sanity check",
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d634:	429a      	cmp	r2, r3
 800d636:	d106      	bne.n	800d646 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800d638:	4b0e      	ldr	r3, [pc, #56]	; (800d674 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d63a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d63e:	4911      	ldr	r1, [pc, #68]	; (800d684 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d640:	480e      	ldr	r0, [pc, #56]	; (800d67c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d642:	f000 fc8f 	bl	800df64 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d006      	beq.n	800d65c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800d64e:	4b09      	ldr	r3, [pc, #36]	; (800d674 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d650:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800d654:	490c      	ldr	r1, [pc, #48]	; (800d688 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d656:	4809      	ldr	r0, [pc, #36]	; (800d67c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d658:	f000 fc84 	bl	800df64 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d65c:	6a3b      	ldr	r3, [r7, #32]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	bf14      	ite	ne
 800d662:	2301      	movne	r3, #1
 800d664:	2300      	moveq	r3, #0
 800d666:	b2db      	uxtb	r3, r3
 800d668:	e000      	b.n	800d66c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d66a:	2300      	movs	r3, #0
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3730      	adds	r7, #48	; 0x30
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	08011b38 	.word	0x08011b38
 800d678:	08011c1c 	.word	0x08011c1c
 800d67c:	08011b80 	.word	0x08011b80
 800d680:	08011c3c 	.word	0x08011c3c
 800d684:	08011c74 	.word	0x08011c74
 800d688:	08011c84 	.word	0x08011c84

0800d68c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b08e      	sub	sp, #56	; 0x38
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	f003 030f 	and.w	r3, r3, #15
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	2b14      	cmp	r3, #20
 800d6aa:	f040 8167 	bne.w	800d97c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800d6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b0:	88db      	ldrh	r3, [r3, #6]
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7f6 fba3 	bl	8003e00 <lwip_htons>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	00db      	lsls	r3, r3, #3
 800d6c4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c8:	885b      	ldrh	r3, [r3, #2]
 800d6ca:	b29b      	uxth	r3, r3
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7f6 fb97 	bl	8003e00 <lwip_htons>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800d6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	f003 030f 	and.w	r3, r3, #15
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800d6e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	f0c0 8146 	bcc.w	800d980 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800d6f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d6fc:	1ad3      	subs	r3, r2, r3
 800d6fe:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f7f7 feb9 	bl	8005478 <pbuf_clen>
 800d706:	4603      	mov	r3, r0
 800d708:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d70a:	4b9f      	ldr	r3, [pc, #636]	; (800d988 <ip4_reass+0x2fc>)
 800d70c:	881b      	ldrh	r3, [r3, #0]
 800d70e:	461a      	mov	r2, r3
 800d710:	8c3b      	ldrh	r3, [r7, #32]
 800d712:	4413      	add	r3, r2
 800d714:	2b0a      	cmp	r3, #10
 800d716:	dd10      	ble.n	800d73a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d718:	8c3b      	ldrh	r3, [r7, #32]
 800d71a:	4619      	mov	r1, r3
 800d71c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d71e:	f7ff fd81 	bl	800d224 <ip_reass_remove_oldest_datagram>
 800d722:	4603      	mov	r3, r0
 800d724:	2b00      	cmp	r3, #0
 800d726:	f000 812d 	beq.w	800d984 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d72a:	4b97      	ldr	r3, [pc, #604]	; (800d988 <ip4_reass+0x2fc>)
 800d72c:	881b      	ldrh	r3, [r3, #0]
 800d72e:	461a      	mov	r2, r3
 800d730:	8c3b      	ldrh	r3, [r7, #32]
 800d732:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d734:	2b0a      	cmp	r3, #10
 800d736:	f300 8125 	bgt.w	800d984 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d73a:	4b94      	ldr	r3, [pc, #592]	; (800d98c <ip4_reass+0x300>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	633b      	str	r3, [r7, #48]	; 0x30
 800d740:	e015      	b.n	800d76e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d744:	695a      	ldr	r2, [r3, #20]
 800d746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d748:	68db      	ldr	r3, [r3, #12]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d10c      	bne.n	800d768 <ip4_reass+0xdc>
 800d74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d750:	699a      	ldr	r2, [r3, #24]
 800d752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d754:	691b      	ldr	r3, [r3, #16]
 800d756:	429a      	cmp	r2, r3
 800d758:	d106      	bne.n	800d768 <ip4_reass+0xdc>
 800d75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75c:	899a      	ldrh	r2, [r3, #12]
 800d75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d760:	889b      	ldrh	r3, [r3, #4]
 800d762:	b29b      	uxth	r3, r3
 800d764:	429a      	cmp	r2, r3
 800d766:	d006      	beq.n	800d776 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	633b      	str	r3, [r7, #48]	; 0x30
 800d76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d770:	2b00      	cmp	r3, #0
 800d772:	d1e6      	bne.n	800d742 <ip4_reass+0xb6>
 800d774:	e000      	b.n	800d778 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d776:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d109      	bne.n	800d792 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d77e:	8c3b      	ldrh	r3, [r7, #32]
 800d780:	4619      	mov	r1, r3
 800d782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d784:	f7ff fdb0 	bl	800d2e8 <ip_reass_enqueue_new_datagram>
 800d788:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d11c      	bne.n	800d7ca <ip4_reass+0x13e>
      goto nullreturn;
 800d790:	e109      	b.n	800d9a6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d794:	88db      	ldrh	r3, [r3, #6]
 800d796:	b29b      	uxth	r3, r3
 800d798:	4618      	mov	r0, r3
 800d79a:	f7f6 fb31 	bl	8003e00 <lwip_htons>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d110      	bne.n	800d7ca <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7aa:	89db      	ldrh	r3, [r3, #14]
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7f6 fb27 	bl	8003e00 <lwip_htons>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d006      	beq.n	800d7ca <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7be:	3308      	adds	r3, #8
 800d7c0:	2214      	movs	r2, #20
 800d7c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f000 fb9d 	bl	800df04 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7cc:	88db      	ldrh	r3, [r3, #6]
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	f003 0320 	and.w	r3, r3, #32
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	bf0c      	ite	eq
 800d7d8:	2301      	moveq	r3, #1
 800d7da:	2300      	movne	r3, #0
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d00e      	beq.n	800d804 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800d7e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d7e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7ea:	4413      	add	r3, r2
 800d7ec:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d7ee:	8b7a      	ldrh	r2, [r7, #26]
 800d7f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	f0c0 80a0 	bcc.w	800d938 <ip4_reass+0x2ac>
 800d7f8:	8b7b      	ldrh	r3, [r7, #26]
 800d7fa:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d7fe:	4293      	cmp	r3, r2
 800d800:	f200 809a 	bhi.w	800d938 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d804:	69fa      	ldr	r2, [r7, #28]
 800d806:	6879      	ldr	r1, [r7, #4]
 800d808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d80a:	f7ff fdd5 	bl	800d3b8 <ip_reass_chain_frag_into_datagram_and_validate>
 800d80e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d816:	f000 8091 	beq.w	800d93c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d81a:	4b5b      	ldr	r3, [pc, #364]	; (800d988 <ip4_reass+0x2fc>)
 800d81c:	881a      	ldrh	r2, [r3, #0]
 800d81e:	8c3b      	ldrh	r3, [r7, #32]
 800d820:	4413      	add	r3, r2
 800d822:	b29a      	uxth	r2, r3
 800d824:	4b58      	ldr	r3, [pc, #352]	; (800d988 <ip4_reass+0x2fc>)
 800d826:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00d      	beq.n	800d84a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800d82e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d830:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d832:	4413      	add	r3, r2
 800d834:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d838:	8a7a      	ldrh	r2, [r7, #18]
 800d83a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83e:	7f9b      	ldrb	r3, [r3, #30]
 800d840:	f043 0301 	orr.w	r3, r3, #1
 800d844:	b2da      	uxtb	r2, r3
 800d846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d848:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d171      	bne.n	800d934 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d852:	8b9b      	ldrh	r3, [r3, #28]
 800d854:	3314      	adds	r3, #20
 800d856:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d85a:	685b      	ldr	r3, [r3, #4]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800d862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86c:	3308      	adds	r3, #8
 800d86e:	2214      	movs	r2, #20
 800d870:	4619      	mov	r1, r3
 800d872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d874:	f000 fb46 	bl	800df04 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d878:	8a3b      	ldrh	r3, [r7, #16]
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7f6 fac0 	bl	8003e00 <lwip_htons>
 800d880:	4603      	mov	r3, r0
 800d882:	461a      	mov	r2, r3
 800d884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d886:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88a:	2200      	movs	r2, #0
 800d88c:	719a      	strb	r2, [r3, #6]
 800d88e:	2200      	movs	r2, #0
 800d890:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d894:	2200      	movs	r2, #0
 800d896:	729a      	strb	r2, [r3, #10]
 800d898:	2200      	movs	r2, #0
 800d89a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d8a2:	e00d      	b.n	800d8c0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800d8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a6:	685b      	ldr	r3, [r3, #4]
 800d8a8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800d8aa:	2114      	movs	r1, #20
 800d8ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d8ae:	f7f7 fcd5 	bl	800525c <pbuf_remove_header>
      pbuf_cat(p, r);
 800d8b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f7f7 fe19 	bl	80054ec <pbuf_cat>
      r = iprh->next_pbuf;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800d8c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d1ee      	bne.n	800d8a4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d8c6:	4b31      	ldr	r3, [pc, #196]	; (800d98c <ip4_reass+0x300>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d102      	bne.n	800d8d6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8d4:	e010      	b.n	800d8f8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d8d6:	4b2d      	ldr	r3, [pc, #180]	; (800d98c <ip4_reass+0x300>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8dc:	e007      	b.n	800d8ee <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800d8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d006      	beq.n	800d8f6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1f4      	bne.n	800d8de <ip4_reass+0x252>
 800d8f4:	e000      	b.n	800d8f8 <ip4_reass+0x26c>
          break;
 800d8f6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d8f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8fc:	f7ff fd2e 	bl	800d35c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f7f7 fdb9 	bl	8005478 <pbuf_clen>
 800d906:	4603      	mov	r3, r0
 800d908:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d90a:	4b1f      	ldr	r3, [pc, #124]	; (800d988 <ip4_reass+0x2fc>)
 800d90c:	881b      	ldrh	r3, [r3, #0]
 800d90e:	8c3a      	ldrh	r2, [r7, #32]
 800d910:	429a      	cmp	r2, r3
 800d912:	d906      	bls.n	800d922 <ip4_reass+0x296>
 800d914:	4b1e      	ldr	r3, [pc, #120]	; (800d990 <ip4_reass+0x304>)
 800d916:	f240 229b 	movw	r2, #667	; 0x29b
 800d91a:	491e      	ldr	r1, [pc, #120]	; (800d994 <ip4_reass+0x308>)
 800d91c:	481e      	ldr	r0, [pc, #120]	; (800d998 <ip4_reass+0x30c>)
 800d91e:	f000 fb21 	bl	800df64 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800d922:	4b19      	ldr	r3, [pc, #100]	; (800d988 <ip4_reass+0x2fc>)
 800d924:	881a      	ldrh	r2, [r3, #0]
 800d926:	8c3b      	ldrh	r3, [r7, #32]
 800d928:	1ad3      	subs	r3, r2, r3
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	4b16      	ldr	r3, [pc, #88]	; (800d988 <ip4_reass+0x2fc>)
 800d92e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	e03c      	b.n	800d9ae <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d934:	2300      	movs	r3, #0
 800d936:	e03a      	b.n	800d9ae <ip4_reass+0x322>
      goto nullreturn_ipr;
 800d938:	bf00      	nop
 800d93a:	e000      	b.n	800d93e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800d93c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800d93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d940:	2b00      	cmp	r3, #0
 800d942:	d106      	bne.n	800d952 <ip4_reass+0x2c6>
 800d944:	4b12      	ldr	r3, [pc, #72]	; (800d990 <ip4_reass+0x304>)
 800d946:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800d94a:	4914      	ldr	r1, [pc, #80]	; (800d99c <ip4_reass+0x310>)
 800d94c:	4812      	ldr	r0, [pc, #72]	; (800d998 <ip4_reass+0x30c>)
 800d94e:	f000 fb09 	bl	800df64 <iprintf>
  if (ipr->p == NULL) {
 800d952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d124      	bne.n	800d9a4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800d95a:	4b0c      	ldr	r3, [pc, #48]	; (800d98c <ip4_reass+0x300>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d960:	429a      	cmp	r2, r3
 800d962:	d006      	beq.n	800d972 <ip4_reass+0x2e6>
 800d964:	4b0a      	ldr	r3, [pc, #40]	; (800d990 <ip4_reass+0x304>)
 800d966:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d96a:	490d      	ldr	r1, [pc, #52]	; (800d9a0 <ip4_reass+0x314>)
 800d96c:	480a      	ldr	r0, [pc, #40]	; (800d998 <ip4_reass+0x30c>)
 800d96e:	f000 faf9 	bl	800df64 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800d972:	2100      	movs	r1, #0
 800d974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d976:	f7ff fcf1 	bl	800d35c <ip_reass_dequeue_datagram>
 800d97a:	e014      	b.n	800d9a6 <ip4_reass+0x31a>
    goto nullreturn;
 800d97c:	bf00      	nop
 800d97e:	e012      	b.n	800d9a6 <ip4_reass+0x31a>
    goto nullreturn;
 800d980:	bf00      	nop
 800d982:	e010      	b.n	800d9a6 <ip4_reass+0x31a>
      goto nullreturn;
 800d984:	bf00      	nop
 800d986:	e00e      	b.n	800d9a6 <ip4_reass+0x31a>
 800d988:	20000204 	.word	0x20000204
 800d98c:	20000200 	.word	0x20000200
 800d990:	08011b38 	.word	0x08011b38
 800d994:	08011ca8 	.word	0x08011ca8
 800d998:	08011b80 	.word	0x08011b80
 800d99c:	08011cc4 	.word	0x08011cc4
 800d9a0:	08011cd0 	.word	0x08011cd0
  }

nullreturn:
 800d9a4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f7f7 fcde 	bl	8005368 <pbuf_free>
  return NULL;
 800d9ac:	2300      	movs	r3, #0
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3738      	adds	r7, #56	; 0x38
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop

0800d9b8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800d9bc:	2005      	movs	r0, #5
 800d9be:	f7f6 fe75 	bl	80046ac <memp_malloc>
 800d9c2:	4603      	mov	r3, r0
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d106      	bne.n	800d9e4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800d9d6:	4b07      	ldr	r3, [pc, #28]	; (800d9f4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d9d8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800d9dc:	4906      	ldr	r1, [pc, #24]	; (800d9f8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800d9de:	4807      	ldr	r0, [pc, #28]	; (800d9fc <ip_frag_free_pbuf_custom_ref+0x34>)
 800d9e0:	f000 fac0 	bl	800df64 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d9e4:	6879      	ldr	r1, [r7, #4]
 800d9e6:	2005      	movs	r0, #5
 800d9e8:	f7f6 feac 	bl	8004744 <memp_free>
}
 800d9ec:	bf00      	nop
 800d9ee:	3708      	adds	r7, #8
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}
 800d9f4:	08011b38 	.word	0x08011b38
 800d9f8:	08011cf0 	.word	0x08011cf0
 800d9fc:	08011b80 	.word	0x08011b80

0800da00 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b084      	sub	sp, #16
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d106      	bne.n	800da20 <ipfrag_free_pbuf_custom+0x20>
 800da12:	4b11      	ldr	r3, [pc, #68]	; (800da58 <ipfrag_free_pbuf_custom+0x58>)
 800da14:	f240 22ce 	movw	r2, #718	; 0x2ce
 800da18:	4910      	ldr	r1, [pc, #64]	; (800da5c <ipfrag_free_pbuf_custom+0x5c>)
 800da1a:	4811      	ldr	r0, [pc, #68]	; (800da60 <ipfrag_free_pbuf_custom+0x60>)
 800da1c:	f000 faa2 	bl	800df64 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800da20:	68fa      	ldr	r2, [r7, #12]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	429a      	cmp	r2, r3
 800da26:	d006      	beq.n	800da36 <ipfrag_free_pbuf_custom+0x36>
 800da28:	4b0b      	ldr	r3, [pc, #44]	; (800da58 <ipfrag_free_pbuf_custom+0x58>)
 800da2a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800da2e:	490d      	ldr	r1, [pc, #52]	; (800da64 <ipfrag_free_pbuf_custom+0x64>)
 800da30:	480b      	ldr	r0, [pc, #44]	; (800da60 <ipfrag_free_pbuf_custom+0x60>)
 800da32:	f000 fa97 	bl	800df64 <iprintf>
  if (pcr->original != NULL) {
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	695b      	ldr	r3, [r3, #20]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d004      	beq.n	800da48 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	695b      	ldr	r3, [r3, #20]
 800da42:	4618      	mov	r0, r3
 800da44:	f7f7 fc90 	bl	8005368 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800da48:	68f8      	ldr	r0, [r7, #12]
 800da4a:	f7ff ffbd 	bl	800d9c8 <ip_frag_free_pbuf_custom_ref>
}
 800da4e:	bf00      	nop
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	08011b38 	.word	0x08011b38
 800da5c:	08011cfc 	.word	0x08011cfc
 800da60:	08011b80 	.word	0x08011b80
 800da64:	08011d08 	.word	0x08011d08

0800da68 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b094      	sub	sp, #80	; 0x50
 800da6c:	af02      	add	r7, sp, #8
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800da74:	2300      	movs	r3, #0
 800da76:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800da7e:	3b14      	subs	r3, #20
 800da80:	2b00      	cmp	r3, #0
 800da82:	da00      	bge.n	800da86 <ip4_frag+0x1e>
 800da84:	3307      	adds	r3, #7
 800da86:	10db      	asrs	r3, r3, #3
 800da88:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800da8a:	2314      	movs	r3, #20
 800da8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800da94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da96:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800da98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	f003 030f 	and.w	r3, r3, #15
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	2b14      	cmp	r3, #20
 800daa8:	d002      	beq.n	800dab0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800daaa:	f06f 0305 	mvn.w	r3, #5
 800daae:	e110      	b.n	800dcd2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	895b      	ldrh	r3, [r3, #10]
 800dab4:	2b13      	cmp	r3, #19
 800dab6:	d809      	bhi.n	800dacc <ip4_frag+0x64>
 800dab8:	4b88      	ldr	r3, [pc, #544]	; (800dcdc <ip4_frag+0x274>)
 800daba:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800dabe:	4988      	ldr	r1, [pc, #544]	; (800dce0 <ip4_frag+0x278>)
 800dac0:	4888      	ldr	r0, [pc, #544]	; (800dce4 <ip4_frag+0x27c>)
 800dac2:	f000 fa4f 	bl	800df64 <iprintf>
 800dac6:	f06f 0305 	mvn.w	r3, #5
 800daca:	e102      	b.n	800dcd2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800dacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dace:	88db      	ldrh	r3, [r3, #6]
 800dad0:	b29b      	uxth	r3, r3
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7f6 f994 	bl	8003e00 <lwip_htons>
 800dad8:	4603      	mov	r3, r0
 800dada:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800dadc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dade:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dae2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800dae6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800daec:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	891b      	ldrh	r3, [r3, #8]
 800daf2:	3b14      	subs	r3, #20
 800daf4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800daf8:	e0e1      	b.n	800dcbe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800dafa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dafc:	00db      	lsls	r3, r3, #3
 800dafe:	b29b      	uxth	r3, r3
 800db00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800db04:	4293      	cmp	r3, r2
 800db06:	bf28      	it	cs
 800db08:	4613      	movcs	r3, r2
 800db0a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800db0c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800db10:	2114      	movs	r1, #20
 800db12:	200e      	movs	r0, #14
 800db14:	f7f7 f944 	bl	8004da0 <pbuf_alloc>
 800db18:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800db1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	f000 80d5 	beq.w	800dccc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800db22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db24:	895b      	ldrh	r3, [r3, #10]
 800db26:	2b13      	cmp	r3, #19
 800db28:	d806      	bhi.n	800db38 <ip4_frag+0xd0>
 800db2a:	4b6c      	ldr	r3, [pc, #432]	; (800dcdc <ip4_frag+0x274>)
 800db2c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800db30:	496d      	ldr	r1, [pc, #436]	; (800dce8 <ip4_frag+0x280>)
 800db32:	486c      	ldr	r0, [pc, #432]	; (800dce4 <ip4_frag+0x27c>)
 800db34:	f000 fa16 	bl	800df64 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800db38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	2214      	movs	r2, #20
 800db3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800db40:	4618      	mov	r0, r3
 800db42:	f000 f9df 	bl	800df04 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800db46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800db4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800db4e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800db52:	e064      	b.n	800dc1e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	895a      	ldrh	r2, [r3, #10]
 800db58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800db5a:	1ad3      	subs	r3, r2, r3
 800db5c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	895b      	ldrh	r3, [r3, #10]
 800db62:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800db64:	429a      	cmp	r2, r3
 800db66:	d906      	bls.n	800db76 <ip4_frag+0x10e>
 800db68:	4b5c      	ldr	r3, [pc, #368]	; (800dcdc <ip4_frag+0x274>)
 800db6a:	f240 322d 	movw	r2, #813	; 0x32d
 800db6e:	495f      	ldr	r1, [pc, #380]	; (800dcec <ip4_frag+0x284>)
 800db70:	485c      	ldr	r0, [pc, #368]	; (800dce4 <ip4_frag+0x27c>)
 800db72:	f000 f9f7 	bl	800df64 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800db76:	8bfa      	ldrh	r2, [r7, #30]
 800db78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800db7c:	4293      	cmp	r3, r2
 800db7e:	bf28      	it	cs
 800db80:	4613      	movcs	r3, r2
 800db82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800db86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d105      	bne.n	800db9a <ip4_frag+0x132>
        poff = 0;
 800db8e:	2300      	movs	r3, #0
 800db90:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	60fb      	str	r3, [r7, #12]
        continue;
 800db98:	e041      	b.n	800dc1e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800db9a:	f7ff ff0d 	bl	800d9b8 <ip_frag_alloc_pbuf_custom_ref>
 800db9e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800dba0:	69bb      	ldr	r3, [r7, #24]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d103      	bne.n	800dbae <ip4_frag+0x146>
        pbuf_free(rambuf);
 800dba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dba8:	f7f7 fbde 	bl	8005368 <pbuf_free>
        goto memerr;
 800dbac:	e08f      	b.n	800dcce <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dbae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dbb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dbb6:	4413      	add	r3, r2
 800dbb8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800dbbc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800dbc0:	9201      	str	r2, [sp, #4]
 800dbc2:	9300      	str	r3, [sp, #0]
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2241      	movs	r2, #65	; 0x41
 800dbc8:	2000      	movs	r0, #0
 800dbca:	f7f7 fa13 	bl	8004ff4 <pbuf_alloced_custom>
 800dbce:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d106      	bne.n	800dbe4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800dbd6:	69b8      	ldr	r0, [r7, #24]
 800dbd8:	f7ff fef6 	bl	800d9c8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800dbdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbde:	f7f7 fbc3 	bl	8005368 <pbuf_free>
        goto memerr;
 800dbe2:	e074      	b.n	800dcce <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f7f7 fc5f 	bl	80054a8 <pbuf_ref>
      pcr->original = p;
 800dbea:	69bb      	ldr	r3, [r7, #24]
 800dbec:	68fa      	ldr	r2, [r7, #12]
 800dbee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800dbf0:	69bb      	ldr	r3, [r7, #24]
 800dbf2:	4a3f      	ldr	r2, [pc, #252]	; (800dcf0 <ip4_frag+0x288>)
 800dbf4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800dbf6:	6979      	ldr	r1, [r7, #20]
 800dbf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbfa:	f7f7 fc77 	bl	80054ec <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800dbfe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800dc02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dc06:	1ad3      	subs	r3, r2, r3
 800dc08:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800dc0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d004      	beq.n	800dc1e <ip4_frag+0x1b6>
        poff = 0;
 800dc14:	2300      	movs	r3, #0
 800dc16:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800dc1e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d196      	bne.n	800db54 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800dc26:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800dc28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dc2c:	4413      	add	r3, r2
 800dc2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dc34:	f1a3 0213 	sub.w	r2, r3, #19
 800dc38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	bfcc      	ite	gt
 800dc40:	2301      	movgt	r3, #1
 800dc42:	2300      	movle	r3, #0
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800dc48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dc4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc50:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800dc52:	6a3b      	ldr	r3, [r7, #32]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d002      	beq.n	800dc5e <ip4_frag+0x1f6>
 800dc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d003      	beq.n	800dc66 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800dc5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dc60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800dc64:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800dc66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7f6 f8c9 	bl	8003e00 <lwip_htons>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	461a      	mov	r2, r3
 800dc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc74:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800dc76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dc78:	3314      	adds	r3, #20
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7f6 f8bf 	bl	8003e00 <lwip_htons>
 800dc82:	4603      	mov	r3, r0
 800dc84:	461a      	mov	r2, r3
 800dc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc88:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800dc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	729a      	strb	r2, [r3, #10]
 800dc90:	2200      	movs	r2, #0
 800dc92:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	695b      	ldr	r3, [r3, #20]
 800dc98:	687a      	ldr	r2, [r7, #4]
 800dc9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc9c:	68b8      	ldr	r0, [r7, #8]
 800dc9e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800dca0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dca2:	f7f7 fb61 	bl	8005368 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800dca6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dcaa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dcac:	1ad3      	subs	r3, r2, r3
 800dcae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800dcb2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800dcb6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dcb8:	4413      	add	r3, r2
 800dcba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800dcbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	f47f af19 	bne.w	800dafa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	e002      	b.n	800dcd2 <ip4_frag+0x26a>
      goto memerr;
 800dccc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800dcce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3748      	adds	r7, #72	; 0x48
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	08011b38 	.word	0x08011b38
 800dce0:	08011d14 	.word	0x08011d14
 800dce4:	08011b80 	.word	0x08011b80
 800dce8:	08011d30 	.word	0x08011d30
 800dcec:	08011d50 	.word	0x08011d50
 800dcf0:	0800da01 	.word	0x0800da01

0800dcf4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b086      	sub	sp, #24
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800dcfe:	230e      	movs	r3, #14
 800dd00:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	895b      	ldrh	r3, [r3, #10]
 800dd06:	2b0e      	cmp	r3, #14
 800dd08:	d96e      	bls.n	800dde8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	7bdb      	ldrb	r3, [r3, #15]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d106      	bne.n	800dd20 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd18:	3301      	adds	r3, #1
 800dd1a:	b2da      	uxtb	r2, r3
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	7b1a      	ldrb	r2, [r3, #12]
 800dd2a:	7b5b      	ldrb	r3, [r3, #13]
 800dd2c:	021b      	lsls	r3, r3, #8
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	f003 0301 	and.w	r3, r3, #1
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d023      	beq.n	800dd86 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d10f      	bne.n	800dd66 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	785b      	ldrb	r3, [r3, #1]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d11b      	bne.n	800dd86 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800dd52:	2b5e      	cmp	r3, #94	; 0x5e
 800dd54:	d117      	bne.n	800dd86 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	7b5b      	ldrb	r3, [r3, #13]
 800dd5a:	f043 0310 	orr.w	r3, r3, #16
 800dd5e:	b2da      	uxtb	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	735a      	strb	r2, [r3, #13]
 800dd64:	e00f      	b.n	800dd86 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	2206      	movs	r2, #6
 800dd6a:	4928      	ldr	r1, [pc, #160]	; (800de0c <ethernet_input+0x118>)
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f000 f8bb 	bl	800dee8 <memcmp>
 800dd72:	4603      	mov	r3, r0
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d106      	bne.n	800dd86 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	7b5b      	ldrb	r3, [r3, #13]
 800dd7c:	f043 0308 	orr.w	r3, r3, #8
 800dd80:	b2da      	uxtb	r2, r3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800dd86:	89fb      	ldrh	r3, [r7, #14]
 800dd88:	2b08      	cmp	r3, #8
 800dd8a:	d003      	beq.n	800dd94 <ethernet_input+0xa0>
 800dd8c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800dd90:	d014      	beq.n	800ddbc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800dd92:	e032      	b.n	800ddfa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd9a:	f003 0308 	and.w	r3, r3, #8
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d024      	beq.n	800ddec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800dda2:	8afb      	ldrh	r3, [r7, #22]
 800dda4:	4619      	mov	r1, r3
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f7f7 fa58 	bl	800525c <pbuf_remove_header>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d11e      	bne.n	800ddf0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800ddb2:	6839      	ldr	r1, [r7, #0]
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f7fe ff27 	bl	800cc08 <ip4_input>
      break;
 800ddba:	e013      	b.n	800dde4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddc2:	f003 0308 	and.w	r3, r3, #8
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d014      	beq.n	800ddf4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ddca:	8afb      	ldrh	r3, [r7, #22]
 800ddcc:	4619      	mov	r1, r3
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f7f7 fa44 	bl	800525c <pbuf_remove_header>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d10e      	bne.n	800ddf8 <ethernet_input+0x104>
        etharp_input(p, netif);
 800ddda:	6839      	ldr	r1, [r7, #0]
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f7fe f8c7 	bl	800bf70 <etharp_input>
      break;
 800dde2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800dde4:	2300      	movs	r3, #0
 800dde6:	e00c      	b.n	800de02 <ethernet_input+0x10e>
    goto free_and_return;
 800dde8:	bf00      	nop
 800ddea:	e006      	b.n	800ddfa <ethernet_input+0x106>
        goto free_and_return;
 800ddec:	bf00      	nop
 800ddee:	e004      	b.n	800ddfa <ethernet_input+0x106>
        goto free_and_return;
 800ddf0:	bf00      	nop
 800ddf2:	e002      	b.n	800ddfa <ethernet_input+0x106>
        goto free_and_return;
 800ddf4:	bf00      	nop
 800ddf6:	e000      	b.n	800ddfa <ethernet_input+0x106>
        goto free_and_return;
 800ddf8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f7f7 fab4 	bl	8005368 <pbuf_free>
  return ERR_OK;
 800de00:	2300      	movs	r3, #0
}
 800de02:	4618      	mov	r0, r3
 800de04:	3718      	adds	r7, #24
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	08011ed8 	.word	0x08011ed8

0800de10 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800de10:	b580      	push	{r7, lr}
 800de12:	b086      	sub	sp, #24
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	607a      	str	r2, [r7, #4]
 800de1c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800de1e:	8c3b      	ldrh	r3, [r7, #32]
 800de20:	4618      	mov	r0, r3
 800de22:	f7f5 ffed 	bl	8003e00 <lwip_htons>
 800de26:	4603      	mov	r3, r0
 800de28:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800de2a:	210e      	movs	r1, #14
 800de2c:	68b8      	ldr	r0, [r7, #8]
 800de2e:	f7f7 fa05 	bl	800523c <pbuf_add_header>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d125      	bne.n	800de84 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	685b      	ldr	r3, [r3, #4]
 800de3c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	8afa      	ldrh	r2, [r7, #22]
 800de42:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	2206      	movs	r2, #6
 800de48:	6839      	ldr	r1, [r7, #0]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f000 f85a 	bl	800df04 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	3306      	adds	r3, #6
 800de54:	2206      	movs	r2, #6
 800de56:	6879      	ldr	r1, [r7, #4]
 800de58:	4618      	mov	r0, r3
 800de5a:	f000 f853 	bl	800df04 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800de64:	2b06      	cmp	r3, #6
 800de66:	d006      	beq.n	800de76 <ethernet_output+0x66>
 800de68:	4b0a      	ldr	r3, [pc, #40]	; (800de94 <ethernet_output+0x84>)
 800de6a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800de6e:	490a      	ldr	r1, [pc, #40]	; (800de98 <ethernet_output+0x88>)
 800de70:	480a      	ldr	r0, [pc, #40]	; (800de9c <ethernet_output+0x8c>)
 800de72:	f000 f877 	bl	800df64 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	699b      	ldr	r3, [r3, #24]
 800de7a:	68b9      	ldr	r1, [r7, #8]
 800de7c:	68f8      	ldr	r0, [r7, #12]
 800de7e:	4798      	blx	r3
 800de80:	4603      	mov	r3, r0
 800de82:	e002      	b.n	800de8a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800de84:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800de86:	f06f 0301 	mvn.w	r3, #1
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3718      	adds	r7, #24
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	08011d60 	.word	0x08011d60
 800de98:	08011d98 	.word	0x08011d98
 800de9c:	08011dcc 	.word	0x08011dcc

0800dea0 <__libc_init_array>:
 800dea0:	b570      	push	{r4, r5, r6, lr}
 800dea2:	4d0d      	ldr	r5, [pc, #52]	; (800ded8 <__libc_init_array+0x38>)
 800dea4:	4c0d      	ldr	r4, [pc, #52]	; (800dedc <__libc_init_array+0x3c>)
 800dea6:	1b64      	subs	r4, r4, r5
 800dea8:	10a4      	asrs	r4, r4, #2
 800deaa:	2600      	movs	r6, #0
 800deac:	42a6      	cmp	r6, r4
 800deae:	d109      	bne.n	800dec4 <__libc_init_array+0x24>
 800deb0:	4d0b      	ldr	r5, [pc, #44]	; (800dee0 <__libc_init_array+0x40>)
 800deb2:	4c0c      	ldr	r4, [pc, #48]	; (800dee4 <__libc_init_array+0x44>)
 800deb4:	f001 fa8a 	bl	800f3cc <_init>
 800deb8:	1b64      	subs	r4, r4, r5
 800deba:	10a4      	asrs	r4, r4, #2
 800debc:	2600      	movs	r6, #0
 800debe:	42a6      	cmp	r6, r4
 800dec0:	d105      	bne.n	800dece <__libc_init_array+0x2e>
 800dec2:	bd70      	pop	{r4, r5, r6, pc}
 800dec4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dec8:	4798      	blx	r3
 800deca:	3601      	adds	r6, #1
 800decc:	e7ee      	b.n	800deac <__libc_init_array+0xc>
 800dece:	f855 3b04 	ldr.w	r3, [r5], #4
 800ded2:	4798      	blx	r3
 800ded4:	3601      	adds	r6, #1
 800ded6:	e7f2      	b.n	800debe <__libc_init_array+0x1e>
 800ded8:	0801209c 	.word	0x0801209c
 800dedc:	0801209c 	.word	0x0801209c
 800dee0:	0801209c 	.word	0x0801209c
 800dee4:	080120a0 	.word	0x080120a0

0800dee8 <memcmp>:
 800dee8:	b530      	push	{r4, r5, lr}
 800deea:	3901      	subs	r1, #1
 800deec:	2400      	movs	r4, #0
 800deee:	42a2      	cmp	r2, r4
 800def0:	d101      	bne.n	800def6 <memcmp+0xe>
 800def2:	2000      	movs	r0, #0
 800def4:	e005      	b.n	800df02 <memcmp+0x1a>
 800def6:	5d03      	ldrb	r3, [r0, r4]
 800def8:	3401      	adds	r4, #1
 800defa:	5d0d      	ldrb	r5, [r1, r4]
 800defc:	42ab      	cmp	r3, r5
 800defe:	d0f6      	beq.n	800deee <memcmp+0x6>
 800df00:	1b58      	subs	r0, r3, r5
 800df02:	bd30      	pop	{r4, r5, pc}

0800df04 <memcpy>:
 800df04:	440a      	add	r2, r1
 800df06:	4291      	cmp	r1, r2
 800df08:	f100 33ff 	add.w	r3, r0, #4294967295
 800df0c:	d100      	bne.n	800df10 <memcpy+0xc>
 800df0e:	4770      	bx	lr
 800df10:	b510      	push	{r4, lr}
 800df12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df1a:	4291      	cmp	r1, r2
 800df1c:	d1f9      	bne.n	800df12 <memcpy+0xe>
 800df1e:	bd10      	pop	{r4, pc}

0800df20 <memmove>:
 800df20:	4288      	cmp	r0, r1
 800df22:	b510      	push	{r4, lr}
 800df24:	eb01 0402 	add.w	r4, r1, r2
 800df28:	d902      	bls.n	800df30 <memmove+0x10>
 800df2a:	4284      	cmp	r4, r0
 800df2c:	4623      	mov	r3, r4
 800df2e:	d807      	bhi.n	800df40 <memmove+0x20>
 800df30:	1e43      	subs	r3, r0, #1
 800df32:	42a1      	cmp	r1, r4
 800df34:	d008      	beq.n	800df48 <memmove+0x28>
 800df36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df3e:	e7f8      	b.n	800df32 <memmove+0x12>
 800df40:	4402      	add	r2, r0
 800df42:	4601      	mov	r1, r0
 800df44:	428a      	cmp	r2, r1
 800df46:	d100      	bne.n	800df4a <memmove+0x2a>
 800df48:	bd10      	pop	{r4, pc}
 800df4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df52:	e7f7      	b.n	800df44 <memmove+0x24>

0800df54 <memset>:
 800df54:	4402      	add	r2, r0
 800df56:	4603      	mov	r3, r0
 800df58:	4293      	cmp	r3, r2
 800df5a:	d100      	bne.n	800df5e <memset+0xa>
 800df5c:	4770      	bx	lr
 800df5e:	f803 1b01 	strb.w	r1, [r3], #1
 800df62:	e7f9      	b.n	800df58 <memset+0x4>

0800df64 <iprintf>:
 800df64:	b40f      	push	{r0, r1, r2, r3}
 800df66:	4b0a      	ldr	r3, [pc, #40]	; (800df90 <iprintf+0x2c>)
 800df68:	b513      	push	{r0, r1, r4, lr}
 800df6a:	681c      	ldr	r4, [r3, #0]
 800df6c:	b124      	cbz	r4, 800df78 <iprintf+0x14>
 800df6e:	69a3      	ldr	r3, [r4, #24]
 800df70:	b913      	cbnz	r3, 800df78 <iprintf+0x14>
 800df72:	4620      	mov	r0, r4
 800df74:	f000 f954 	bl	800e220 <__sinit>
 800df78:	ab05      	add	r3, sp, #20
 800df7a:	9a04      	ldr	r2, [sp, #16]
 800df7c:	68a1      	ldr	r1, [r4, #8]
 800df7e:	9301      	str	r3, [sp, #4]
 800df80:	4620      	mov	r0, r4
 800df82:	f000 fc37 	bl	800e7f4 <_vfiprintf_r>
 800df86:	b002      	add	sp, #8
 800df88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df8c:	b004      	add	sp, #16
 800df8e:	4770      	bx	lr
 800df90:	20000014 	.word	0x20000014

0800df94 <rand>:
 800df94:	4b17      	ldr	r3, [pc, #92]	; (800dff4 <rand+0x60>)
 800df96:	b510      	push	{r4, lr}
 800df98:	681c      	ldr	r4, [r3, #0]
 800df9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df9c:	b9b3      	cbnz	r3, 800dfcc <rand+0x38>
 800df9e:	2018      	movs	r0, #24
 800dfa0:	f000 f9f0 	bl	800e384 <malloc>
 800dfa4:	63a0      	str	r0, [r4, #56]	; 0x38
 800dfa6:	b928      	cbnz	r0, 800dfb4 <rand+0x20>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	4b13      	ldr	r3, [pc, #76]	; (800dff8 <rand+0x64>)
 800dfac:	4813      	ldr	r0, [pc, #76]	; (800dffc <rand+0x68>)
 800dfae:	214e      	movs	r1, #78	; 0x4e
 800dfb0:	f000 f8c0 	bl	800e134 <__assert_func>
 800dfb4:	4a12      	ldr	r2, [pc, #72]	; (800e000 <rand+0x6c>)
 800dfb6:	4b13      	ldr	r3, [pc, #76]	; (800e004 <rand+0x70>)
 800dfb8:	e9c0 2300 	strd	r2, r3, [r0]
 800dfbc:	4b12      	ldr	r3, [pc, #72]	; (800e008 <rand+0x74>)
 800dfbe:	6083      	str	r3, [r0, #8]
 800dfc0:	230b      	movs	r3, #11
 800dfc2:	8183      	strh	r3, [r0, #12]
 800dfc4:	2201      	movs	r2, #1
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800dfcc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dfce:	480f      	ldr	r0, [pc, #60]	; (800e00c <rand+0x78>)
 800dfd0:	690a      	ldr	r2, [r1, #16]
 800dfd2:	694b      	ldr	r3, [r1, #20]
 800dfd4:	4c0e      	ldr	r4, [pc, #56]	; (800e010 <rand+0x7c>)
 800dfd6:	4350      	muls	r0, r2
 800dfd8:	fb04 0003 	mla	r0, r4, r3, r0
 800dfdc:	fba2 3404 	umull	r3, r4, r2, r4
 800dfe0:	1c5a      	adds	r2, r3, #1
 800dfe2:	4404      	add	r4, r0
 800dfe4:	f144 0000 	adc.w	r0, r4, #0
 800dfe8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800dfec:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800dff0:	bd10      	pop	{r4, pc}
 800dff2:	bf00      	nop
 800dff4:	20000014 	.word	0x20000014
 800dff8:	08011eec 	.word	0x08011eec
 800dffc:	08011f03 	.word	0x08011f03
 800e000:	abcd330e 	.word	0xabcd330e
 800e004:	e66d1234 	.word	0xe66d1234
 800e008:	0005deec 	.word	0x0005deec
 800e00c:	5851f42d 	.word	0x5851f42d
 800e010:	4c957f2d 	.word	0x4c957f2d

0800e014 <siprintf>:
 800e014:	b40e      	push	{r1, r2, r3}
 800e016:	b500      	push	{lr}
 800e018:	b09c      	sub	sp, #112	; 0x70
 800e01a:	ab1d      	add	r3, sp, #116	; 0x74
 800e01c:	9002      	str	r0, [sp, #8]
 800e01e:	9006      	str	r0, [sp, #24]
 800e020:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e024:	4809      	ldr	r0, [pc, #36]	; (800e04c <siprintf+0x38>)
 800e026:	9107      	str	r1, [sp, #28]
 800e028:	9104      	str	r1, [sp, #16]
 800e02a:	4909      	ldr	r1, [pc, #36]	; (800e050 <siprintf+0x3c>)
 800e02c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e030:	9105      	str	r1, [sp, #20]
 800e032:	6800      	ldr	r0, [r0, #0]
 800e034:	9301      	str	r3, [sp, #4]
 800e036:	a902      	add	r1, sp, #8
 800e038:	f000 fab2 	bl	800e5a0 <_svfiprintf_r>
 800e03c:	9b02      	ldr	r3, [sp, #8]
 800e03e:	2200      	movs	r2, #0
 800e040:	701a      	strb	r2, [r3, #0]
 800e042:	b01c      	add	sp, #112	; 0x70
 800e044:	f85d eb04 	ldr.w	lr, [sp], #4
 800e048:	b003      	add	sp, #12
 800e04a:	4770      	bx	lr
 800e04c:	20000014 	.word	0x20000014
 800e050:	ffff0208 	.word	0xffff0208

0800e054 <strncpy>:
 800e054:	b510      	push	{r4, lr}
 800e056:	3901      	subs	r1, #1
 800e058:	4603      	mov	r3, r0
 800e05a:	b132      	cbz	r2, 800e06a <strncpy+0x16>
 800e05c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e060:	f803 4b01 	strb.w	r4, [r3], #1
 800e064:	3a01      	subs	r2, #1
 800e066:	2c00      	cmp	r4, #0
 800e068:	d1f7      	bne.n	800e05a <strncpy+0x6>
 800e06a:	441a      	add	r2, r3
 800e06c:	2100      	movs	r1, #0
 800e06e:	4293      	cmp	r3, r2
 800e070:	d100      	bne.n	800e074 <strncpy+0x20>
 800e072:	bd10      	pop	{r4, pc}
 800e074:	f803 1b01 	strb.w	r1, [r3], #1
 800e078:	e7f9      	b.n	800e06e <strncpy+0x1a>
	...

0800e07c <strtok>:
 800e07c:	4b16      	ldr	r3, [pc, #88]	; (800e0d8 <strtok+0x5c>)
 800e07e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e080:	681e      	ldr	r6, [r3, #0]
 800e082:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800e084:	4605      	mov	r5, r0
 800e086:	b9fc      	cbnz	r4, 800e0c8 <strtok+0x4c>
 800e088:	2050      	movs	r0, #80	; 0x50
 800e08a:	9101      	str	r1, [sp, #4]
 800e08c:	f000 f97a 	bl	800e384 <malloc>
 800e090:	9901      	ldr	r1, [sp, #4]
 800e092:	65b0      	str	r0, [r6, #88]	; 0x58
 800e094:	4602      	mov	r2, r0
 800e096:	b920      	cbnz	r0, 800e0a2 <strtok+0x26>
 800e098:	4b10      	ldr	r3, [pc, #64]	; (800e0dc <strtok+0x60>)
 800e09a:	4811      	ldr	r0, [pc, #68]	; (800e0e0 <strtok+0x64>)
 800e09c:	2157      	movs	r1, #87	; 0x57
 800e09e:	f000 f849 	bl	800e134 <__assert_func>
 800e0a2:	e9c0 4400 	strd	r4, r4, [r0]
 800e0a6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e0aa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e0ae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e0b2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e0b6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e0ba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e0be:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e0c2:	6184      	str	r4, [r0, #24]
 800e0c4:	7704      	strb	r4, [r0, #28]
 800e0c6:	6244      	str	r4, [r0, #36]	; 0x24
 800e0c8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	4628      	mov	r0, r5
 800e0ce:	b002      	add	sp, #8
 800e0d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0d4:	f000 b806 	b.w	800e0e4 <__strtok_r>
 800e0d8:	20000014 	.word	0x20000014
 800e0dc:	08011eec 	.word	0x08011eec
 800e0e0:	08011f62 	.word	0x08011f62

0800e0e4 <__strtok_r>:
 800e0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0e6:	b908      	cbnz	r0, 800e0ec <__strtok_r+0x8>
 800e0e8:	6810      	ldr	r0, [r2, #0]
 800e0ea:	b188      	cbz	r0, 800e110 <__strtok_r+0x2c>
 800e0ec:	4604      	mov	r4, r0
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e0f4:	460f      	mov	r7, r1
 800e0f6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e0fa:	b91e      	cbnz	r6, 800e104 <__strtok_r+0x20>
 800e0fc:	b965      	cbnz	r5, 800e118 <__strtok_r+0x34>
 800e0fe:	6015      	str	r5, [r2, #0]
 800e100:	4628      	mov	r0, r5
 800e102:	e005      	b.n	800e110 <__strtok_r+0x2c>
 800e104:	42b5      	cmp	r5, r6
 800e106:	d1f6      	bne.n	800e0f6 <__strtok_r+0x12>
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d1f0      	bne.n	800e0ee <__strtok_r+0xa>
 800e10c:	6014      	str	r4, [r2, #0]
 800e10e:	7003      	strb	r3, [r0, #0]
 800e110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e112:	461c      	mov	r4, r3
 800e114:	e00c      	b.n	800e130 <__strtok_r+0x4c>
 800e116:	b915      	cbnz	r5, 800e11e <__strtok_r+0x3a>
 800e118:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e11c:	460e      	mov	r6, r1
 800e11e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e122:	42ab      	cmp	r3, r5
 800e124:	d1f7      	bne.n	800e116 <__strtok_r+0x32>
 800e126:	2b00      	cmp	r3, #0
 800e128:	d0f3      	beq.n	800e112 <__strtok_r+0x2e>
 800e12a:	2300      	movs	r3, #0
 800e12c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e130:	6014      	str	r4, [r2, #0]
 800e132:	e7ed      	b.n	800e110 <__strtok_r+0x2c>

0800e134 <__assert_func>:
 800e134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e136:	4614      	mov	r4, r2
 800e138:	461a      	mov	r2, r3
 800e13a:	4b09      	ldr	r3, [pc, #36]	; (800e160 <__assert_func+0x2c>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	4605      	mov	r5, r0
 800e140:	68d8      	ldr	r0, [r3, #12]
 800e142:	b14c      	cbz	r4, 800e158 <__assert_func+0x24>
 800e144:	4b07      	ldr	r3, [pc, #28]	; (800e164 <__assert_func+0x30>)
 800e146:	9100      	str	r1, [sp, #0]
 800e148:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e14c:	4906      	ldr	r1, [pc, #24]	; (800e168 <__assert_func+0x34>)
 800e14e:	462b      	mov	r3, r5
 800e150:	f000 f8e4 	bl	800e31c <fiprintf>
 800e154:	f000 ff38 	bl	800efc8 <abort>
 800e158:	4b04      	ldr	r3, [pc, #16]	; (800e16c <__assert_func+0x38>)
 800e15a:	461c      	mov	r4, r3
 800e15c:	e7f3      	b.n	800e146 <__assert_func+0x12>
 800e15e:	bf00      	nop
 800e160:	20000014 	.word	0x20000014
 800e164:	08011fc3 	.word	0x08011fc3
 800e168:	08011fd0 	.word	0x08011fd0
 800e16c:	08011ffe 	.word	0x08011ffe

0800e170 <std>:
 800e170:	2300      	movs	r3, #0
 800e172:	b510      	push	{r4, lr}
 800e174:	4604      	mov	r4, r0
 800e176:	e9c0 3300 	strd	r3, r3, [r0]
 800e17a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e17e:	6083      	str	r3, [r0, #8]
 800e180:	8181      	strh	r1, [r0, #12]
 800e182:	6643      	str	r3, [r0, #100]	; 0x64
 800e184:	81c2      	strh	r2, [r0, #14]
 800e186:	6183      	str	r3, [r0, #24]
 800e188:	4619      	mov	r1, r3
 800e18a:	2208      	movs	r2, #8
 800e18c:	305c      	adds	r0, #92	; 0x5c
 800e18e:	f7ff fee1 	bl	800df54 <memset>
 800e192:	4b05      	ldr	r3, [pc, #20]	; (800e1a8 <std+0x38>)
 800e194:	6263      	str	r3, [r4, #36]	; 0x24
 800e196:	4b05      	ldr	r3, [pc, #20]	; (800e1ac <std+0x3c>)
 800e198:	62a3      	str	r3, [r4, #40]	; 0x28
 800e19a:	4b05      	ldr	r3, [pc, #20]	; (800e1b0 <std+0x40>)
 800e19c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e19e:	4b05      	ldr	r3, [pc, #20]	; (800e1b4 <std+0x44>)
 800e1a0:	6224      	str	r4, [r4, #32]
 800e1a2:	6323      	str	r3, [r4, #48]	; 0x30
 800e1a4:	bd10      	pop	{r4, pc}
 800e1a6:	bf00      	nop
 800e1a8:	0800ed9d 	.word	0x0800ed9d
 800e1ac:	0800edbf 	.word	0x0800edbf
 800e1b0:	0800edf7 	.word	0x0800edf7
 800e1b4:	0800ee1b 	.word	0x0800ee1b

0800e1b8 <_cleanup_r>:
 800e1b8:	4901      	ldr	r1, [pc, #4]	; (800e1c0 <_cleanup_r+0x8>)
 800e1ba:	f000 b8c1 	b.w	800e340 <_fwalk_reent>
 800e1be:	bf00      	nop
 800e1c0:	0800f105 	.word	0x0800f105

0800e1c4 <__sfmoreglue>:
 800e1c4:	b570      	push	{r4, r5, r6, lr}
 800e1c6:	1e4a      	subs	r2, r1, #1
 800e1c8:	2568      	movs	r5, #104	; 0x68
 800e1ca:	4355      	muls	r5, r2
 800e1cc:	460e      	mov	r6, r1
 800e1ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e1d2:	f000 f92f 	bl	800e434 <_malloc_r>
 800e1d6:	4604      	mov	r4, r0
 800e1d8:	b140      	cbz	r0, 800e1ec <__sfmoreglue+0x28>
 800e1da:	2100      	movs	r1, #0
 800e1dc:	e9c0 1600 	strd	r1, r6, [r0]
 800e1e0:	300c      	adds	r0, #12
 800e1e2:	60a0      	str	r0, [r4, #8]
 800e1e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e1e8:	f7ff feb4 	bl	800df54 <memset>
 800e1ec:	4620      	mov	r0, r4
 800e1ee:	bd70      	pop	{r4, r5, r6, pc}

0800e1f0 <__sfp_lock_acquire>:
 800e1f0:	4801      	ldr	r0, [pc, #4]	; (800e1f8 <__sfp_lock_acquire+0x8>)
 800e1f2:	f000 b8c5 	b.w	800e380 <__retarget_lock_acquire_recursive>
 800e1f6:	bf00      	nop
 800e1f8:	20008b30 	.word	0x20008b30

0800e1fc <__sfp_lock_release>:
 800e1fc:	4801      	ldr	r0, [pc, #4]	; (800e204 <__sfp_lock_release+0x8>)
 800e1fe:	f000 b8c0 	b.w	800e382 <__retarget_lock_release_recursive>
 800e202:	bf00      	nop
 800e204:	20008b30 	.word	0x20008b30

0800e208 <__sinit_lock_acquire>:
 800e208:	4801      	ldr	r0, [pc, #4]	; (800e210 <__sinit_lock_acquire+0x8>)
 800e20a:	f000 b8b9 	b.w	800e380 <__retarget_lock_acquire_recursive>
 800e20e:	bf00      	nop
 800e210:	20008b2b 	.word	0x20008b2b

0800e214 <__sinit_lock_release>:
 800e214:	4801      	ldr	r0, [pc, #4]	; (800e21c <__sinit_lock_release+0x8>)
 800e216:	f000 b8b4 	b.w	800e382 <__retarget_lock_release_recursive>
 800e21a:	bf00      	nop
 800e21c:	20008b2b 	.word	0x20008b2b

0800e220 <__sinit>:
 800e220:	b510      	push	{r4, lr}
 800e222:	4604      	mov	r4, r0
 800e224:	f7ff fff0 	bl	800e208 <__sinit_lock_acquire>
 800e228:	69a3      	ldr	r3, [r4, #24]
 800e22a:	b11b      	cbz	r3, 800e234 <__sinit+0x14>
 800e22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e230:	f7ff bff0 	b.w	800e214 <__sinit_lock_release>
 800e234:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e238:	6523      	str	r3, [r4, #80]	; 0x50
 800e23a:	4b13      	ldr	r3, [pc, #76]	; (800e288 <__sinit+0x68>)
 800e23c:	4a13      	ldr	r2, [pc, #76]	; (800e28c <__sinit+0x6c>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	62a2      	str	r2, [r4, #40]	; 0x28
 800e242:	42a3      	cmp	r3, r4
 800e244:	bf04      	itt	eq
 800e246:	2301      	moveq	r3, #1
 800e248:	61a3      	streq	r3, [r4, #24]
 800e24a:	4620      	mov	r0, r4
 800e24c:	f000 f820 	bl	800e290 <__sfp>
 800e250:	6060      	str	r0, [r4, #4]
 800e252:	4620      	mov	r0, r4
 800e254:	f000 f81c 	bl	800e290 <__sfp>
 800e258:	60a0      	str	r0, [r4, #8]
 800e25a:	4620      	mov	r0, r4
 800e25c:	f000 f818 	bl	800e290 <__sfp>
 800e260:	2200      	movs	r2, #0
 800e262:	60e0      	str	r0, [r4, #12]
 800e264:	2104      	movs	r1, #4
 800e266:	6860      	ldr	r0, [r4, #4]
 800e268:	f7ff ff82 	bl	800e170 <std>
 800e26c:	68a0      	ldr	r0, [r4, #8]
 800e26e:	2201      	movs	r2, #1
 800e270:	2109      	movs	r1, #9
 800e272:	f7ff ff7d 	bl	800e170 <std>
 800e276:	68e0      	ldr	r0, [r4, #12]
 800e278:	2202      	movs	r2, #2
 800e27a:	2112      	movs	r1, #18
 800e27c:	f7ff ff78 	bl	800e170 <std>
 800e280:	2301      	movs	r3, #1
 800e282:	61a3      	str	r3, [r4, #24]
 800e284:	e7d2      	b.n	800e22c <__sinit+0xc>
 800e286:	bf00      	nop
 800e288:	08011ee8 	.word	0x08011ee8
 800e28c:	0800e1b9 	.word	0x0800e1b9

0800e290 <__sfp>:
 800e290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e292:	4607      	mov	r7, r0
 800e294:	f7ff ffac 	bl	800e1f0 <__sfp_lock_acquire>
 800e298:	4b1e      	ldr	r3, [pc, #120]	; (800e314 <__sfp+0x84>)
 800e29a:	681e      	ldr	r6, [r3, #0]
 800e29c:	69b3      	ldr	r3, [r6, #24]
 800e29e:	b913      	cbnz	r3, 800e2a6 <__sfp+0x16>
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	f7ff ffbd 	bl	800e220 <__sinit>
 800e2a6:	3648      	adds	r6, #72	; 0x48
 800e2a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e2ac:	3b01      	subs	r3, #1
 800e2ae:	d503      	bpl.n	800e2b8 <__sfp+0x28>
 800e2b0:	6833      	ldr	r3, [r6, #0]
 800e2b2:	b30b      	cbz	r3, 800e2f8 <__sfp+0x68>
 800e2b4:	6836      	ldr	r6, [r6, #0]
 800e2b6:	e7f7      	b.n	800e2a8 <__sfp+0x18>
 800e2b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e2bc:	b9d5      	cbnz	r5, 800e2f4 <__sfp+0x64>
 800e2be:	4b16      	ldr	r3, [pc, #88]	; (800e318 <__sfp+0x88>)
 800e2c0:	60e3      	str	r3, [r4, #12]
 800e2c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e2c6:	6665      	str	r5, [r4, #100]	; 0x64
 800e2c8:	f000 f859 	bl	800e37e <__retarget_lock_init_recursive>
 800e2cc:	f7ff ff96 	bl	800e1fc <__sfp_lock_release>
 800e2d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e2d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e2d8:	6025      	str	r5, [r4, #0]
 800e2da:	61a5      	str	r5, [r4, #24]
 800e2dc:	2208      	movs	r2, #8
 800e2de:	4629      	mov	r1, r5
 800e2e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e2e4:	f7ff fe36 	bl	800df54 <memset>
 800e2e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e2ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2f4:	3468      	adds	r4, #104	; 0x68
 800e2f6:	e7d9      	b.n	800e2ac <__sfp+0x1c>
 800e2f8:	2104      	movs	r1, #4
 800e2fa:	4638      	mov	r0, r7
 800e2fc:	f7ff ff62 	bl	800e1c4 <__sfmoreglue>
 800e300:	4604      	mov	r4, r0
 800e302:	6030      	str	r0, [r6, #0]
 800e304:	2800      	cmp	r0, #0
 800e306:	d1d5      	bne.n	800e2b4 <__sfp+0x24>
 800e308:	f7ff ff78 	bl	800e1fc <__sfp_lock_release>
 800e30c:	230c      	movs	r3, #12
 800e30e:	603b      	str	r3, [r7, #0]
 800e310:	e7ee      	b.n	800e2f0 <__sfp+0x60>
 800e312:	bf00      	nop
 800e314:	08011ee8 	.word	0x08011ee8
 800e318:	ffff0001 	.word	0xffff0001

0800e31c <fiprintf>:
 800e31c:	b40e      	push	{r1, r2, r3}
 800e31e:	b503      	push	{r0, r1, lr}
 800e320:	4601      	mov	r1, r0
 800e322:	ab03      	add	r3, sp, #12
 800e324:	4805      	ldr	r0, [pc, #20]	; (800e33c <fiprintf+0x20>)
 800e326:	f853 2b04 	ldr.w	r2, [r3], #4
 800e32a:	6800      	ldr	r0, [r0, #0]
 800e32c:	9301      	str	r3, [sp, #4]
 800e32e:	f000 fa61 	bl	800e7f4 <_vfiprintf_r>
 800e332:	b002      	add	sp, #8
 800e334:	f85d eb04 	ldr.w	lr, [sp], #4
 800e338:	b003      	add	sp, #12
 800e33a:	4770      	bx	lr
 800e33c:	20000014 	.word	0x20000014

0800e340 <_fwalk_reent>:
 800e340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e344:	4606      	mov	r6, r0
 800e346:	4688      	mov	r8, r1
 800e348:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e34c:	2700      	movs	r7, #0
 800e34e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e352:	f1b9 0901 	subs.w	r9, r9, #1
 800e356:	d505      	bpl.n	800e364 <_fwalk_reent+0x24>
 800e358:	6824      	ldr	r4, [r4, #0]
 800e35a:	2c00      	cmp	r4, #0
 800e35c:	d1f7      	bne.n	800e34e <_fwalk_reent+0xe>
 800e35e:	4638      	mov	r0, r7
 800e360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e364:	89ab      	ldrh	r3, [r5, #12]
 800e366:	2b01      	cmp	r3, #1
 800e368:	d907      	bls.n	800e37a <_fwalk_reent+0x3a>
 800e36a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e36e:	3301      	adds	r3, #1
 800e370:	d003      	beq.n	800e37a <_fwalk_reent+0x3a>
 800e372:	4629      	mov	r1, r5
 800e374:	4630      	mov	r0, r6
 800e376:	47c0      	blx	r8
 800e378:	4307      	orrs	r7, r0
 800e37a:	3568      	adds	r5, #104	; 0x68
 800e37c:	e7e9      	b.n	800e352 <_fwalk_reent+0x12>

0800e37e <__retarget_lock_init_recursive>:
 800e37e:	4770      	bx	lr

0800e380 <__retarget_lock_acquire_recursive>:
 800e380:	4770      	bx	lr

0800e382 <__retarget_lock_release_recursive>:
 800e382:	4770      	bx	lr

0800e384 <malloc>:
 800e384:	4b02      	ldr	r3, [pc, #8]	; (800e390 <malloc+0xc>)
 800e386:	4601      	mov	r1, r0
 800e388:	6818      	ldr	r0, [r3, #0]
 800e38a:	f000 b853 	b.w	800e434 <_malloc_r>
 800e38e:	bf00      	nop
 800e390:	20000014 	.word	0x20000014

0800e394 <_free_r>:
 800e394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e396:	2900      	cmp	r1, #0
 800e398:	d048      	beq.n	800e42c <_free_r+0x98>
 800e39a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e39e:	9001      	str	r0, [sp, #4]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	f1a1 0404 	sub.w	r4, r1, #4
 800e3a6:	bfb8      	it	lt
 800e3a8:	18e4      	addlt	r4, r4, r3
 800e3aa:	f000 ff5d 	bl	800f268 <__malloc_lock>
 800e3ae:	4a20      	ldr	r2, [pc, #128]	; (800e430 <_free_r+0x9c>)
 800e3b0:	9801      	ldr	r0, [sp, #4]
 800e3b2:	6813      	ldr	r3, [r2, #0]
 800e3b4:	4615      	mov	r5, r2
 800e3b6:	b933      	cbnz	r3, 800e3c6 <_free_r+0x32>
 800e3b8:	6063      	str	r3, [r4, #4]
 800e3ba:	6014      	str	r4, [r2, #0]
 800e3bc:	b003      	add	sp, #12
 800e3be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3c2:	f000 bf57 	b.w	800f274 <__malloc_unlock>
 800e3c6:	42a3      	cmp	r3, r4
 800e3c8:	d90b      	bls.n	800e3e2 <_free_r+0x4e>
 800e3ca:	6821      	ldr	r1, [r4, #0]
 800e3cc:	1862      	adds	r2, r4, r1
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	bf04      	itt	eq
 800e3d2:	681a      	ldreq	r2, [r3, #0]
 800e3d4:	685b      	ldreq	r3, [r3, #4]
 800e3d6:	6063      	str	r3, [r4, #4]
 800e3d8:	bf04      	itt	eq
 800e3da:	1852      	addeq	r2, r2, r1
 800e3dc:	6022      	streq	r2, [r4, #0]
 800e3de:	602c      	str	r4, [r5, #0]
 800e3e0:	e7ec      	b.n	800e3bc <_free_r+0x28>
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	b10b      	cbz	r3, 800e3ec <_free_r+0x58>
 800e3e8:	42a3      	cmp	r3, r4
 800e3ea:	d9fa      	bls.n	800e3e2 <_free_r+0x4e>
 800e3ec:	6811      	ldr	r1, [r2, #0]
 800e3ee:	1855      	adds	r5, r2, r1
 800e3f0:	42a5      	cmp	r5, r4
 800e3f2:	d10b      	bne.n	800e40c <_free_r+0x78>
 800e3f4:	6824      	ldr	r4, [r4, #0]
 800e3f6:	4421      	add	r1, r4
 800e3f8:	1854      	adds	r4, r2, r1
 800e3fa:	42a3      	cmp	r3, r4
 800e3fc:	6011      	str	r1, [r2, #0]
 800e3fe:	d1dd      	bne.n	800e3bc <_free_r+0x28>
 800e400:	681c      	ldr	r4, [r3, #0]
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	6053      	str	r3, [r2, #4]
 800e406:	4421      	add	r1, r4
 800e408:	6011      	str	r1, [r2, #0]
 800e40a:	e7d7      	b.n	800e3bc <_free_r+0x28>
 800e40c:	d902      	bls.n	800e414 <_free_r+0x80>
 800e40e:	230c      	movs	r3, #12
 800e410:	6003      	str	r3, [r0, #0]
 800e412:	e7d3      	b.n	800e3bc <_free_r+0x28>
 800e414:	6825      	ldr	r5, [r4, #0]
 800e416:	1961      	adds	r1, r4, r5
 800e418:	428b      	cmp	r3, r1
 800e41a:	bf04      	itt	eq
 800e41c:	6819      	ldreq	r1, [r3, #0]
 800e41e:	685b      	ldreq	r3, [r3, #4]
 800e420:	6063      	str	r3, [r4, #4]
 800e422:	bf04      	itt	eq
 800e424:	1949      	addeq	r1, r1, r5
 800e426:	6021      	streq	r1, [r4, #0]
 800e428:	6054      	str	r4, [r2, #4]
 800e42a:	e7c7      	b.n	800e3bc <_free_r+0x28>
 800e42c:	b003      	add	sp, #12
 800e42e:	bd30      	pop	{r4, r5, pc}
 800e430:	20000208 	.word	0x20000208

0800e434 <_malloc_r>:
 800e434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e436:	1ccd      	adds	r5, r1, #3
 800e438:	f025 0503 	bic.w	r5, r5, #3
 800e43c:	3508      	adds	r5, #8
 800e43e:	2d0c      	cmp	r5, #12
 800e440:	bf38      	it	cc
 800e442:	250c      	movcc	r5, #12
 800e444:	2d00      	cmp	r5, #0
 800e446:	4606      	mov	r6, r0
 800e448:	db01      	blt.n	800e44e <_malloc_r+0x1a>
 800e44a:	42a9      	cmp	r1, r5
 800e44c:	d903      	bls.n	800e456 <_malloc_r+0x22>
 800e44e:	230c      	movs	r3, #12
 800e450:	6033      	str	r3, [r6, #0]
 800e452:	2000      	movs	r0, #0
 800e454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e456:	f000 ff07 	bl	800f268 <__malloc_lock>
 800e45a:	4921      	ldr	r1, [pc, #132]	; (800e4e0 <_malloc_r+0xac>)
 800e45c:	680a      	ldr	r2, [r1, #0]
 800e45e:	4614      	mov	r4, r2
 800e460:	b99c      	cbnz	r4, 800e48a <_malloc_r+0x56>
 800e462:	4f20      	ldr	r7, [pc, #128]	; (800e4e4 <_malloc_r+0xb0>)
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	b923      	cbnz	r3, 800e472 <_malloc_r+0x3e>
 800e468:	4621      	mov	r1, r4
 800e46a:	4630      	mov	r0, r6
 800e46c:	f000 fc86 	bl	800ed7c <_sbrk_r>
 800e470:	6038      	str	r0, [r7, #0]
 800e472:	4629      	mov	r1, r5
 800e474:	4630      	mov	r0, r6
 800e476:	f000 fc81 	bl	800ed7c <_sbrk_r>
 800e47a:	1c43      	adds	r3, r0, #1
 800e47c:	d123      	bne.n	800e4c6 <_malloc_r+0x92>
 800e47e:	230c      	movs	r3, #12
 800e480:	6033      	str	r3, [r6, #0]
 800e482:	4630      	mov	r0, r6
 800e484:	f000 fef6 	bl	800f274 <__malloc_unlock>
 800e488:	e7e3      	b.n	800e452 <_malloc_r+0x1e>
 800e48a:	6823      	ldr	r3, [r4, #0]
 800e48c:	1b5b      	subs	r3, r3, r5
 800e48e:	d417      	bmi.n	800e4c0 <_malloc_r+0x8c>
 800e490:	2b0b      	cmp	r3, #11
 800e492:	d903      	bls.n	800e49c <_malloc_r+0x68>
 800e494:	6023      	str	r3, [r4, #0]
 800e496:	441c      	add	r4, r3
 800e498:	6025      	str	r5, [r4, #0]
 800e49a:	e004      	b.n	800e4a6 <_malloc_r+0x72>
 800e49c:	6863      	ldr	r3, [r4, #4]
 800e49e:	42a2      	cmp	r2, r4
 800e4a0:	bf0c      	ite	eq
 800e4a2:	600b      	streq	r3, [r1, #0]
 800e4a4:	6053      	strne	r3, [r2, #4]
 800e4a6:	4630      	mov	r0, r6
 800e4a8:	f000 fee4 	bl	800f274 <__malloc_unlock>
 800e4ac:	f104 000b 	add.w	r0, r4, #11
 800e4b0:	1d23      	adds	r3, r4, #4
 800e4b2:	f020 0007 	bic.w	r0, r0, #7
 800e4b6:	1ac2      	subs	r2, r0, r3
 800e4b8:	d0cc      	beq.n	800e454 <_malloc_r+0x20>
 800e4ba:	1a1b      	subs	r3, r3, r0
 800e4bc:	50a3      	str	r3, [r4, r2]
 800e4be:	e7c9      	b.n	800e454 <_malloc_r+0x20>
 800e4c0:	4622      	mov	r2, r4
 800e4c2:	6864      	ldr	r4, [r4, #4]
 800e4c4:	e7cc      	b.n	800e460 <_malloc_r+0x2c>
 800e4c6:	1cc4      	adds	r4, r0, #3
 800e4c8:	f024 0403 	bic.w	r4, r4, #3
 800e4cc:	42a0      	cmp	r0, r4
 800e4ce:	d0e3      	beq.n	800e498 <_malloc_r+0x64>
 800e4d0:	1a21      	subs	r1, r4, r0
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f000 fc52 	bl	800ed7c <_sbrk_r>
 800e4d8:	3001      	adds	r0, #1
 800e4da:	d1dd      	bne.n	800e498 <_malloc_r+0x64>
 800e4dc:	e7cf      	b.n	800e47e <_malloc_r+0x4a>
 800e4de:	bf00      	nop
 800e4e0:	20000208 	.word	0x20000208
 800e4e4:	2000020c 	.word	0x2000020c

0800e4e8 <__ssputs_r>:
 800e4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4ec:	688e      	ldr	r6, [r1, #8]
 800e4ee:	429e      	cmp	r6, r3
 800e4f0:	4682      	mov	sl, r0
 800e4f2:	460c      	mov	r4, r1
 800e4f4:	4690      	mov	r8, r2
 800e4f6:	461f      	mov	r7, r3
 800e4f8:	d838      	bhi.n	800e56c <__ssputs_r+0x84>
 800e4fa:	898a      	ldrh	r2, [r1, #12]
 800e4fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e500:	d032      	beq.n	800e568 <__ssputs_r+0x80>
 800e502:	6825      	ldr	r5, [r4, #0]
 800e504:	6909      	ldr	r1, [r1, #16]
 800e506:	eba5 0901 	sub.w	r9, r5, r1
 800e50a:	6965      	ldr	r5, [r4, #20]
 800e50c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e510:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e514:	3301      	adds	r3, #1
 800e516:	444b      	add	r3, r9
 800e518:	106d      	asrs	r5, r5, #1
 800e51a:	429d      	cmp	r5, r3
 800e51c:	bf38      	it	cc
 800e51e:	461d      	movcc	r5, r3
 800e520:	0553      	lsls	r3, r2, #21
 800e522:	d531      	bpl.n	800e588 <__ssputs_r+0xa0>
 800e524:	4629      	mov	r1, r5
 800e526:	f7ff ff85 	bl	800e434 <_malloc_r>
 800e52a:	4606      	mov	r6, r0
 800e52c:	b950      	cbnz	r0, 800e544 <__ssputs_r+0x5c>
 800e52e:	230c      	movs	r3, #12
 800e530:	f8ca 3000 	str.w	r3, [sl]
 800e534:	89a3      	ldrh	r3, [r4, #12]
 800e536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e53a:	81a3      	strh	r3, [r4, #12]
 800e53c:	f04f 30ff 	mov.w	r0, #4294967295
 800e540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e544:	6921      	ldr	r1, [r4, #16]
 800e546:	464a      	mov	r2, r9
 800e548:	f7ff fcdc 	bl	800df04 <memcpy>
 800e54c:	89a3      	ldrh	r3, [r4, #12]
 800e54e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e556:	81a3      	strh	r3, [r4, #12]
 800e558:	6126      	str	r6, [r4, #16]
 800e55a:	6165      	str	r5, [r4, #20]
 800e55c:	444e      	add	r6, r9
 800e55e:	eba5 0509 	sub.w	r5, r5, r9
 800e562:	6026      	str	r6, [r4, #0]
 800e564:	60a5      	str	r5, [r4, #8]
 800e566:	463e      	mov	r6, r7
 800e568:	42be      	cmp	r6, r7
 800e56a:	d900      	bls.n	800e56e <__ssputs_r+0x86>
 800e56c:	463e      	mov	r6, r7
 800e56e:	4632      	mov	r2, r6
 800e570:	6820      	ldr	r0, [r4, #0]
 800e572:	4641      	mov	r1, r8
 800e574:	f7ff fcd4 	bl	800df20 <memmove>
 800e578:	68a3      	ldr	r3, [r4, #8]
 800e57a:	6822      	ldr	r2, [r4, #0]
 800e57c:	1b9b      	subs	r3, r3, r6
 800e57e:	4432      	add	r2, r6
 800e580:	60a3      	str	r3, [r4, #8]
 800e582:	6022      	str	r2, [r4, #0]
 800e584:	2000      	movs	r0, #0
 800e586:	e7db      	b.n	800e540 <__ssputs_r+0x58>
 800e588:	462a      	mov	r2, r5
 800e58a:	f000 fe79 	bl	800f280 <_realloc_r>
 800e58e:	4606      	mov	r6, r0
 800e590:	2800      	cmp	r0, #0
 800e592:	d1e1      	bne.n	800e558 <__ssputs_r+0x70>
 800e594:	6921      	ldr	r1, [r4, #16]
 800e596:	4650      	mov	r0, sl
 800e598:	f7ff fefc 	bl	800e394 <_free_r>
 800e59c:	e7c7      	b.n	800e52e <__ssputs_r+0x46>
	...

0800e5a0 <_svfiprintf_r>:
 800e5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a4:	4698      	mov	r8, r3
 800e5a6:	898b      	ldrh	r3, [r1, #12]
 800e5a8:	061b      	lsls	r3, r3, #24
 800e5aa:	b09d      	sub	sp, #116	; 0x74
 800e5ac:	4607      	mov	r7, r0
 800e5ae:	460d      	mov	r5, r1
 800e5b0:	4614      	mov	r4, r2
 800e5b2:	d50e      	bpl.n	800e5d2 <_svfiprintf_r+0x32>
 800e5b4:	690b      	ldr	r3, [r1, #16]
 800e5b6:	b963      	cbnz	r3, 800e5d2 <_svfiprintf_r+0x32>
 800e5b8:	2140      	movs	r1, #64	; 0x40
 800e5ba:	f7ff ff3b 	bl	800e434 <_malloc_r>
 800e5be:	6028      	str	r0, [r5, #0]
 800e5c0:	6128      	str	r0, [r5, #16]
 800e5c2:	b920      	cbnz	r0, 800e5ce <_svfiprintf_r+0x2e>
 800e5c4:	230c      	movs	r3, #12
 800e5c6:	603b      	str	r3, [r7, #0]
 800e5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5cc:	e0d1      	b.n	800e772 <_svfiprintf_r+0x1d2>
 800e5ce:	2340      	movs	r3, #64	; 0x40
 800e5d0:	616b      	str	r3, [r5, #20]
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	9309      	str	r3, [sp, #36]	; 0x24
 800e5d6:	2320      	movs	r3, #32
 800e5d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e5dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5e0:	2330      	movs	r3, #48	; 0x30
 800e5e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e78c <_svfiprintf_r+0x1ec>
 800e5e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e5ea:	f04f 0901 	mov.w	r9, #1
 800e5ee:	4623      	mov	r3, r4
 800e5f0:	469a      	mov	sl, r3
 800e5f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5f6:	b10a      	cbz	r2, 800e5fc <_svfiprintf_r+0x5c>
 800e5f8:	2a25      	cmp	r2, #37	; 0x25
 800e5fa:	d1f9      	bne.n	800e5f0 <_svfiprintf_r+0x50>
 800e5fc:	ebba 0b04 	subs.w	fp, sl, r4
 800e600:	d00b      	beq.n	800e61a <_svfiprintf_r+0x7a>
 800e602:	465b      	mov	r3, fp
 800e604:	4622      	mov	r2, r4
 800e606:	4629      	mov	r1, r5
 800e608:	4638      	mov	r0, r7
 800e60a:	f7ff ff6d 	bl	800e4e8 <__ssputs_r>
 800e60e:	3001      	adds	r0, #1
 800e610:	f000 80aa 	beq.w	800e768 <_svfiprintf_r+0x1c8>
 800e614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e616:	445a      	add	r2, fp
 800e618:	9209      	str	r2, [sp, #36]	; 0x24
 800e61a:	f89a 3000 	ldrb.w	r3, [sl]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	f000 80a2 	beq.w	800e768 <_svfiprintf_r+0x1c8>
 800e624:	2300      	movs	r3, #0
 800e626:	f04f 32ff 	mov.w	r2, #4294967295
 800e62a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e62e:	f10a 0a01 	add.w	sl, sl, #1
 800e632:	9304      	str	r3, [sp, #16]
 800e634:	9307      	str	r3, [sp, #28]
 800e636:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e63a:	931a      	str	r3, [sp, #104]	; 0x68
 800e63c:	4654      	mov	r4, sl
 800e63e:	2205      	movs	r2, #5
 800e640:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e644:	4851      	ldr	r0, [pc, #324]	; (800e78c <_svfiprintf_r+0x1ec>)
 800e646:	f7f1 fdfb 	bl	8000240 <memchr>
 800e64a:	9a04      	ldr	r2, [sp, #16]
 800e64c:	b9d8      	cbnz	r0, 800e686 <_svfiprintf_r+0xe6>
 800e64e:	06d0      	lsls	r0, r2, #27
 800e650:	bf44      	itt	mi
 800e652:	2320      	movmi	r3, #32
 800e654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e658:	0711      	lsls	r1, r2, #28
 800e65a:	bf44      	itt	mi
 800e65c:	232b      	movmi	r3, #43	; 0x2b
 800e65e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e662:	f89a 3000 	ldrb.w	r3, [sl]
 800e666:	2b2a      	cmp	r3, #42	; 0x2a
 800e668:	d015      	beq.n	800e696 <_svfiprintf_r+0xf6>
 800e66a:	9a07      	ldr	r2, [sp, #28]
 800e66c:	4654      	mov	r4, sl
 800e66e:	2000      	movs	r0, #0
 800e670:	f04f 0c0a 	mov.w	ip, #10
 800e674:	4621      	mov	r1, r4
 800e676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e67a:	3b30      	subs	r3, #48	; 0x30
 800e67c:	2b09      	cmp	r3, #9
 800e67e:	d94e      	bls.n	800e71e <_svfiprintf_r+0x17e>
 800e680:	b1b0      	cbz	r0, 800e6b0 <_svfiprintf_r+0x110>
 800e682:	9207      	str	r2, [sp, #28]
 800e684:	e014      	b.n	800e6b0 <_svfiprintf_r+0x110>
 800e686:	eba0 0308 	sub.w	r3, r0, r8
 800e68a:	fa09 f303 	lsl.w	r3, r9, r3
 800e68e:	4313      	orrs	r3, r2
 800e690:	9304      	str	r3, [sp, #16]
 800e692:	46a2      	mov	sl, r4
 800e694:	e7d2      	b.n	800e63c <_svfiprintf_r+0x9c>
 800e696:	9b03      	ldr	r3, [sp, #12]
 800e698:	1d19      	adds	r1, r3, #4
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	9103      	str	r1, [sp, #12]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	bfbb      	ittet	lt
 800e6a2:	425b      	neglt	r3, r3
 800e6a4:	f042 0202 	orrlt.w	r2, r2, #2
 800e6a8:	9307      	strge	r3, [sp, #28]
 800e6aa:	9307      	strlt	r3, [sp, #28]
 800e6ac:	bfb8      	it	lt
 800e6ae:	9204      	strlt	r2, [sp, #16]
 800e6b0:	7823      	ldrb	r3, [r4, #0]
 800e6b2:	2b2e      	cmp	r3, #46	; 0x2e
 800e6b4:	d10c      	bne.n	800e6d0 <_svfiprintf_r+0x130>
 800e6b6:	7863      	ldrb	r3, [r4, #1]
 800e6b8:	2b2a      	cmp	r3, #42	; 0x2a
 800e6ba:	d135      	bne.n	800e728 <_svfiprintf_r+0x188>
 800e6bc:	9b03      	ldr	r3, [sp, #12]
 800e6be:	1d1a      	adds	r2, r3, #4
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	9203      	str	r2, [sp, #12]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	bfb8      	it	lt
 800e6c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e6cc:	3402      	adds	r4, #2
 800e6ce:	9305      	str	r3, [sp, #20]
 800e6d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e79c <_svfiprintf_r+0x1fc>
 800e6d4:	7821      	ldrb	r1, [r4, #0]
 800e6d6:	2203      	movs	r2, #3
 800e6d8:	4650      	mov	r0, sl
 800e6da:	f7f1 fdb1 	bl	8000240 <memchr>
 800e6de:	b140      	cbz	r0, 800e6f2 <_svfiprintf_r+0x152>
 800e6e0:	2340      	movs	r3, #64	; 0x40
 800e6e2:	eba0 000a 	sub.w	r0, r0, sl
 800e6e6:	fa03 f000 	lsl.w	r0, r3, r0
 800e6ea:	9b04      	ldr	r3, [sp, #16]
 800e6ec:	4303      	orrs	r3, r0
 800e6ee:	3401      	adds	r4, #1
 800e6f0:	9304      	str	r3, [sp, #16]
 800e6f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6f6:	4826      	ldr	r0, [pc, #152]	; (800e790 <_svfiprintf_r+0x1f0>)
 800e6f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e6fc:	2206      	movs	r2, #6
 800e6fe:	f7f1 fd9f 	bl	8000240 <memchr>
 800e702:	2800      	cmp	r0, #0
 800e704:	d038      	beq.n	800e778 <_svfiprintf_r+0x1d8>
 800e706:	4b23      	ldr	r3, [pc, #140]	; (800e794 <_svfiprintf_r+0x1f4>)
 800e708:	bb1b      	cbnz	r3, 800e752 <_svfiprintf_r+0x1b2>
 800e70a:	9b03      	ldr	r3, [sp, #12]
 800e70c:	3307      	adds	r3, #7
 800e70e:	f023 0307 	bic.w	r3, r3, #7
 800e712:	3308      	adds	r3, #8
 800e714:	9303      	str	r3, [sp, #12]
 800e716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e718:	4433      	add	r3, r6
 800e71a:	9309      	str	r3, [sp, #36]	; 0x24
 800e71c:	e767      	b.n	800e5ee <_svfiprintf_r+0x4e>
 800e71e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e722:	460c      	mov	r4, r1
 800e724:	2001      	movs	r0, #1
 800e726:	e7a5      	b.n	800e674 <_svfiprintf_r+0xd4>
 800e728:	2300      	movs	r3, #0
 800e72a:	3401      	adds	r4, #1
 800e72c:	9305      	str	r3, [sp, #20]
 800e72e:	4619      	mov	r1, r3
 800e730:	f04f 0c0a 	mov.w	ip, #10
 800e734:	4620      	mov	r0, r4
 800e736:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e73a:	3a30      	subs	r2, #48	; 0x30
 800e73c:	2a09      	cmp	r2, #9
 800e73e:	d903      	bls.n	800e748 <_svfiprintf_r+0x1a8>
 800e740:	2b00      	cmp	r3, #0
 800e742:	d0c5      	beq.n	800e6d0 <_svfiprintf_r+0x130>
 800e744:	9105      	str	r1, [sp, #20]
 800e746:	e7c3      	b.n	800e6d0 <_svfiprintf_r+0x130>
 800e748:	fb0c 2101 	mla	r1, ip, r1, r2
 800e74c:	4604      	mov	r4, r0
 800e74e:	2301      	movs	r3, #1
 800e750:	e7f0      	b.n	800e734 <_svfiprintf_r+0x194>
 800e752:	ab03      	add	r3, sp, #12
 800e754:	9300      	str	r3, [sp, #0]
 800e756:	462a      	mov	r2, r5
 800e758:	4b0f      	ldr	r3, [pc, #60]	; (800e798 <_svfiprintf_r+0x1f8>)
 800e75a:	a904      	add	r1, sp, #16
 800e75c:	4638      	mov	r0, r7
 800e75e:	f3af 8000 	nop.w
 800e762:	1c42      	adds	r2, r0, #1
 800e764:	4606      	mov	r6, r0
 800e766:	d1d6      	bne.n	800e716 <_svfiprintf_r+0x176>
 800e768:	89ab      	ldrh	r3, [r5, #12]
 800e76a:	065b      	lsls	r3, r3, #25
 800e76c:	f53f af2c 	bmi.w	800e5c8 <_svfiprintf_r+0x28>
 800e770:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e772:	b01d      	add	sp, #116	; 0x74
 800e774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e778:	ab03      	add	r3, sp, #12
 800e77a:	9300      	str	r3, [sp, #0]
 800e77c:	462a      	mov	r2, r5
 800e77e:	4b06      	ldr	r3, [pc, #24]	; (800e798 <_svfiprintf_r+0x1f8>)
 800e780:	a904      	add	r1, sp, #16
 800e782:	4638      	mov	r0, r7
 800e784:	f000 f9d4 	bl	800eb30 <_printf_i>
 800e788:	e7eb      	b.n	800e762 <_svfiprintf_r+0x1c2>
 800e78a:	bf00      	nop
 800e78c:	08012060 	.word	0x08012060
 800e790:	0801206a 	.word	0x0801206a
 800e794:	00000000 	.word	0x00000000
 800e798:	0800e4e9 	.word	0x0800e4e9
 800e79c:	08012066 	.word	0x08012066

0800e7a0 <__sfputc_r>:
 800e7a0:	6893      	ldr	r3, [r2, #8]
 800e7a2:	3b01      	subs	r3, #1
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	b410      	push	{r4}
 800e7a8:	6093      	str	r3, [r2, #8]
 800e7aa:	da08      	bge.n	800e7be <__sfputc_r+0x1e>
 800e7ac:	6994      	ldr	r4, [r2, #24]
 800e7ae:	42a3      	cmp	r3, r4
 800e7b0:	db01      	blt.n	800e7b6 <__sfputc_r+0x16>
 800e7b2:	290a      	cmp	r1, #10
 800e7b4:	d103      	bne.n	800e7be <__sfputc_r+0x1e>
 800e7b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7ba:	f000 bb33 	b.w	800ee24 <__swbuf_r>
 800e7be:	6813      	ldr	r3, [r2, #0]
 800e7c0:	1c58      	adds	r0, r3, #1
 800e7c2:	6010      	str	r0, [r2, #0]
 800e7c4:	7019      	strb	r1, [r3, #0]
 800e7c6:	4608      	mov	r0, r1
 800e7c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7cc:	4770      	bx	lr

0800e7ce <__sfputs_r>:
 800e7ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d0:	4606      	mov	r6, r0
 800e7d2:	460f      	mov	r7, r1
 800e7d4:	4614      	mov	r4, r2
 800e7d6:	18d5      	adds	r5, r2, r3
 800e7d8:	42ac      	cmp	r4, r5
 800e7da:	d101      	bne.n	800e7e0 <__sfputs_r+0x12>
 800e7dc:	2000      	movs	r0, #0
 800e7de:	e007      	b.n	800e7f0 <__sfputs_r+0x22>
 800e7e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7e4:	463a      	mov	r2, r7
 800e7e6:	4630      	mov	r0, r6
 800e7e8:	f7ff ffda 	bl	800e7a0 <__sfputc_r>
 800e7ec:	1c43      	adds	r3, r0, #1
 800e7ee:	d1f3      	bne.n	800e7d8 <__sfputs_r+0xa>
 800e7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e7f4 <_vfiprintf_r>:
 800e7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f8:	460d      	mov	r5, r1
 800e7fa:	b09d      	sub	sp, #116	; 0x74
 800e7fc:	4614      	mov	r4, r2
 800e7fe:	4698      	mov	r8, r3
 800e800:	4606      	mov	r6, r0
 800e802:	b118      	cbz	r0, 800e80c <_vfiprintf_r+0x18>
 800e804:	6983      	ldr	r3, [r0, #24]
 800e806:	b90b      	cbnz	r3, 800e80c <_vfiprintf_r+0x18>
 800e808:	f7ff fd0a 	bl	800e220 <__sinit>
 800e80c:	4b89      	ldr	r3, [pc, #548]	; (800ea34 <_vfiprintf_r+0x240>)
 800e80e:	429d      	cmp	r5, r3
 800e810:	d11b      	bne.n	800e84a <_vfiprintf_r+0x56>
 800e812:	6875      	ldr	r5, [r6, #4]
 800e814:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e816:	07d9      	lsls	r1, r3, #31
 800e818:	d405      	bmi.n	800e826 <_vfiprintf_r+0x32>
 800e81a:	89ab      	ldrh	r3, [r5, #12]
 800e81c:	059a      	lsls	r2, r3, #22
 800e81e:	d402      	bmi.n	800e826 <_vfiprintf_r+0x32>
 800e820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e822:	f7ff fdad 	bl	800e380 <__retarget_lock_acquire_recursive>
 800e826:	89ab      	ldrh	r3, [r5, #12]
 800e828:	071b      	lsls	r3, r3, #28
 800e82a:	d501      	bpl.n	800e830 <_vfiprintf_r+0x3c>
 800e82c:	692b      	ldr	r3, [r5, #16]
 800e82e:	b9eb      	cbnz	r3, 800e86c <_vfiprintf_r+0x78>
 800e830:	4629      	mov	r1, r5
 800e832:	4630      	mov	r0, r6
 800e834:	f000 fb5a 	bl	800eeec <__swsetup_r>
 800e838:	b1c0      	cbz	r0, 800e86c <_vfiprintf_r+0x78>
 800e83a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e83c:	07dc      	lsls	r4, r3, #31
 800e83e:	d50e      	bpl.n	800e85e <_vfiprintf_r+0x6a>
 800e840:	f04f 30ff 	mov.w	r0, #4294967295
 800e844:	b01d      	add	sp, #116	; 0x74
 800e846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e84a:	4b7b      	ldr	r3, [pc, #492]	; (800ea38 <_vfiprintf_r+0x244>)
 800e84c:	429d      	cmp	r5, r3
 800e84e:	d101      	bne.n	800e854 <_vfiprintf_r+0x60>
 800e850:	68b5      	ldr	r5, [r6, #8]
 800e852:	e7df      	b.n	800e814 <_vfiprintf_r+0x20>
 800e854:	4b79      	ldr	r3, [pc, #484]	; (800ea3c <_vfiprintf_r+0x248>)
 800e856:	429d      	cmp	r5, r3
 800e858:	bf08      	it	eq
 800e85a:	68f5      	ldreq	r5, [r6, #12]
 800e85c:	e7da      	b.n	800e814 <_vfiprintf_r+0x20>
 800e85e:	89ab      	ldrh	r3, [r5, #12]
 800e860:	0598      	lsls	r0, r3, #22
 800e862:	d4ed      	bmi.n	800e840 <_vfiprintf_r+0x4c>
 800e864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e866:	f7ff fd8c 	bl	800e382 <__retarget_lock_release_recursive>
 800e86a:	e7e9      	b.n	800e840 <_vfiprintf_r+0x4c>
 800e86c:	2300      	movs	r3, #0
 800e86e:	9309      	str	r3, [sp, #36]	; 0x24
 800e870:	2320      	movs	r3, #32
 800e872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e876:	f8cd 800c 	str.w	r8, [sp, #12]
 800e87a:	2330      	movs	r3, #48	; 0x30
 800e87c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ea40 <_vfiprintf_r+0x24c>
 800e880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e884:	f04f 0901 	mov.w	r9, #1
 800e888:	4623      	mov	r3, r4
 800e88a:	469a      	mov	sl, r3
 800e88c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e890:	b10a      	cbz	r2, 800e896 <_vfiprintf_r+0xa2>
 800e892:	2a25      	cmp	r2, #37	; 0x25
 800e894:	d1f9      	bne.n	800e88a <_vfiprintf_r+0x96>
 800e896:	ebba 0b04 	subs.w	fp, sl, r4
 800e89a:	d00b      	beq.n	800e8b4 <_vfiprintf_r+0xc0>
 800e89c:	465b      	mov	r3, fp
 800e89e:	4622      	mov	r2, r4
 800e8a0:	4629      	mov	r1, r5
 800e8a2:	4630      	mov	r0, r6
 800e8a4:	f7ff ff93 	bl	800e7ce <__sfputs_r>
 800e8a8:	3001      	adds	r0, #1
 800e8aa:	f000 80aa 	beq.w	800ea02 <_vfiprintf_r+0x20e>
 800e8ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8b0:	445a      	add	r2, fp
 800e8b2:	9209      	str	r2, [sp, #36]	; 0x24
 800e8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	f000 80a2 	beq.w	800ea02 <_vfiprintf_r+0x20e>
 800e8be:	2300      	movs	r3, #0
 800e8c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e8c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8c8:	f10a 0a01 	add.w	sl, sl, #1
 800e8cc:	9304      	str	r3, [sp, #16]
 800e8ce:	9307      	str	r3, [sp, #28]
 800e8d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e8d4:	931a      	str	r3, [sp, #104]	; 0x68
 800e8d6:	4654      	mov	r4, sl
 800e8d8:	2205      	movs	r2, #5
 800e8da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8de:	4858      	ldr	r0, [pc, #352]	; (800ea40 <_vfiprintf_r+0x24c>)
 800e8e0:	f7f1 fcae 	bl	8000240 <memchr>
 800e8e4:	9a04      	ldr	r2, [sp, #16]
 800e8e6:	b9d8      	cbnz	r0, 800e920 <_vfiprintf_r+0x12c>
 800e8e8:	06d1      	lsls	r1, r2, #27
 800e8ea:	bf44      	itt	mi
 800e8ec:	2320      	movmi	r3, #32
 800e8ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8f2:	0713      	lsls	r3, r2, #28
 800e8f4:	bf44      	itt	mi
 800e8f6:	232b      	movmi	r3, #43	; 0x2b
 800e8f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8fc:	f89a 3000 	ldrb.w	r3, [sl]
 800e900:	2b2a      	cmp	r3, #42	; 0x2a
 800e902:	d015      	beq.n	800e930 <_vfiprintf_r+0x13c>
 800e904:	9a07      	ldr	r2, [sp, #28]
 800e906:	4654      	mov	r4, sl
 800e908:	2000      	movs	r0, #0
 800e90a:	f04f 0c0a 	mov.w	ip, #10
 800e90e:	4621      	mov	r1, r4
 800e910:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e914:	3b30      	subs	r3, #48	; 0x30
 800e916:	2b09      	cmp	r3, #9
 800e918:	d94e      	bls.n	800e9b8 <_vfiprintf_r+0x1c4>
 800e91a:	b1b0      	cbz	r0, 800e94a <_vfiprintf_r+0x156>
 800e91c:	9207      	str	r2, [sp, #28]
 800e91e:	e014      	b.n	800e94a <_vfiprintf_r+0x156>
 800e920:	eba0 0308 	sub.w	r3, r0, r8
 800e924:	fa09 f303 	lsl.w	r3, r9, r3
 800e928:	4313      	orrs	r3, r2
 800e92a:	9304      	str	r3, [sp, #16]
 800e92c:	46a2      	mov	sl, r4
 800e92e:	e7d2      	b.n	800e8d6 <_vfiprintf_r+0xe2>
 800e930:	9b03      	ldr	r3, [sp, #12]
 800e932:	1d19      	adds	r1, r3, #4
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	9103      	str	r1, [sp, #12]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	bfbb      	ittet	lt
 800e93c:	425b      	neglt	r3, r3
 800e93e:	f042 0202 	orrlt.w	r2, r2, #2
 800e942:	9307      	strge	r3, [sp, #28]
 800e944:	9307      	strlt	r3, [sp, #28]
 800e946:	bfb8      	it	lt
 800e948:	9204      	strlt	r2, [sp, #16]
 800e94a:	7823      	ldrb	r3, [r4, #0]
 800e94c:	2b2e      	cmp	r3, #46	; 0x2e
 800e94e:	d10c      	bne.n	800e96a <_vfiprintf_r+0x176>
 800e950:	7863      	ldrb	r3, [r4, #1]
 800e952:	2b2a      	cmp	r3, #42	; 0x2a
 800e954:	d135      	bne.n	800e9c2 <_vfiprintf_r+0x1ce>
 800e956:	9b03      	ldr	r3, [sp, #12]
 800e958:	1d1a      	adds	r2, r3, #4
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	9203      	str	r2, [sp, #12]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	bfb8      	it	lt
 800e962:	f04f 33ff 	movlt.w	r3, #4294967295
 800e966:	3402      	adds	r4, #2
 800e968:	9305      	str	r3, [sp, #20]
 800e96a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ea50 <_vfiprintf_r+0x25c>
 800e96e:	7821      	ldrb	r1, [r4, #0]
 800e970:	2203      	movs	r2, #3
 800e972:	4650      	mov	r0, sl
 800e974:	f7f1 fc64 	bl	8000240 <memchr>
 800e978:	b140      	cbz	r0, 800e98c <_vfiprintf_r+0x198>
 800e97a:	2340      	movs	r3, #64	; 0x40
 800e97c:	eba0 000a 	sub.w	r0, r0, sl
 800e980:	fa03 f000 	lsl.w	r0, r3, r0
 800e984:	9b04      	ldr	r3, [sp, #16]
 800e986:	4303      	orrs	r3, r0
 800e988:	3401      	adds	r4, #1
 800e98a:	9304      	str	r3, [sp, #16]
 800e98c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e990:	482c      	ldr	r0, [pc, #176]	; (800ea44 <_vfiprintf_r+0x250>)
 800e992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e996:	2206      	movs	r2, #6
 800e998:	f7f1 fc52 	bl	8000240 <memchr>
 800e99c:	2800      	cmp	r0, #0
 800e99e:	d03f      	beq.n	800ea20 <_vfiprintf_r+0x22c>
 800e9a0:	4b29      	ldr	r3, [pc, #164]	; (800ea48 <_vfiprintf_r+0x254>)
 800e9a2:	bb1b      	cbnz	r3, 800e9ec <_vfiprintf_r+0x1f8>
 800e9a4:	9b03      	ldr	r3, [sp, #12]
 800e9a6:	3307      	adds	r3, #7
 800e9a8:	f023 0307 	bic.w	r3, r3, #7
 800e9ac:	3308      	adds	r3, #8
 800e9ae:	9303      	str	r3, [sp, #12]
 800e9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9b2:	443b      	add	r3, r7
 800e9b4:	9309      	str	r3, [sp, #36]	; 0x24
 800e9b6:	e767      	b.n	800e888 <_vfiprintf_r+0x94>
 800e9b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9bc:	460c      	mov	r4, r1
 800e9be:	2001      	movs	r0, #1
 800e9c0:	e7a5      	b.n	800e90e <_vfiprintf_r+0x11a>
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	3401      	adds	r4, #1
 800e9c6:	9305      	str	r3, [sp, #20]
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	f04f 0c0a 	mov.w	ip, #10
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9d4:	3a30      	subs	r2, #48	; 0x30
 800e9d6:	2a09      	cmp	r2, #9
 800e9d8:	d903      	bls.n	800e9e2 <_vfiprintf_r+0x1ee>
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d0c5      	beq.n	800e96a <_vfiprintf_r+0x176>
 800e9de:	9105      	str	r1, [sp, #20]
 800e9e0:	e7c3      	b.n	800e96a <_vfiprintf_r+0x176>
 800e9e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	e7f0      	b.n	800e9ce <_vfiprintf_r+0x1da>
 800e9ec:	ab03      	add	r3, sp, #12
 800e9ee:	9300      	str	r3, [sp, #0]
 800e9f0:	462a      	mov	r2, r5
 800e9f2:	4b16      	ldr	r3, [pc, #88]	; (800ea4c <_vfiprintf_r+0x258>)
 800e9f4:	a904      	add	r1, sp, #16
 800e9f6:	4630      	mov	r0, r6
 800e9f8:	f3af 8000 	nop.w
 800e9fc:	4607      	mov	r7, r0
 800e9fe:	1c78      	adds	r0, r7, #1
 800ea00:	d1d6      	bne.n	800e9b0 <_vfiprintf_r+0x1bc>
 800ea02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea04:	07d9      	lsls	r1, r3, #31
 800ea06:	d405      	bmi.n	800ea14 <_vfiprintf_r+0x220>
 800ea08:	89ab      	ldrh	r3, [r5, #12]
 800ea0a:	059a      	lsls	r2, r3, #22
 800ea0c:	d402      	bmi.n	800ea14 <_vfiprintf_r+0x220>
 800ea0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea10:	f7ff fcb7 	bl	800e382 <__retarget_lock_release_recursive>
 800ea14:	89ab      	ldrh	r3, [r5, #12]
 800ea16:	065b      	lsls	r3, r3, #25
 800ea18:	f53f af12 	bmi.w	800e840 <_vfiprintf_r+0x4c>
 800ea1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea1e:	e711      	b.n	800e844 <_vfiprintf_r+0x50>
 800ea20:	ab03      	add	r3, sp, #12
 800ea22:	9300      	str	r3, [sp, #0]
 800ea24:	462a      	mov	r2, r5
 800ea26:	4b09      	ldr	r3, [pc, #36]	; (800ea4c <_vfiprintf_r+0x258>)
 800ea28:	a904      	add	r1, sp, #16
 800ea2a:	4630      	mov	r0, r6
 800ea2c:	f000 f880 	bl	800eb30 <_printf_i>
 800ea30:	e7e4      	b.n	800e9fc <_vfiprintf_r+0x208>
 800ea32:	bf00      	nop
 800ea34:	08012020 	.word	0x08012020
 800ea38:	08012040 	.word	0x08012040
 800ea3c:	08012000 	.word	0x08012000
 800ea40:	08012060 	.word	0x08012060
 800ea44:	0801206a 	.word	0x0801206a
 800ea48:	00000000 	.word	0x00000000
 800ea4c:	0800e7cf 	.word	0x0800e7cf
 800ea50:	08012066 	.word	0x08012066

0800ea54 <_printf_common>:
 800ea54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea58:	4616      	mov	r6, r2
 800ea5a:	4699      	mov	r9, r3
 800ea5c:	688a      	ldr	r2, [r1, #8]
 800ea5e:	690b      	ldr	r3, [r1, #16]
 800ea60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea64:	4293      	cmp	r3, r2
 800ea66:	bfb8      	it	lt
 800ea68:	4613      	movlt	r3, r2
 800ea6a:	6033      	str	r3, [r6, #0]
 800ea6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ea70:	4607      	mov	r7, r0
 800ea72:	460c      	mov	r4, r1
 800ea74:	b10a      	cbz	r2, 800ea7a <_printf_common+0x26>
 800ea76:	3301      	adds	r3, #1
 800ea78:	6033      	str	r3, [r6, #0]
 800ea7a:	6823      	ldr	r3, [r4, #0]
 800ea7c:	0699      	lsls	r1, r3, #26
 800ea7e:	bf42      	ittt	mi
 800ea80:	6833      	ldrmi	r3, [r6, #0]
 800ea82:	3302      	addmi	r3, #2
 800ea84:	6033      	strmi	r3, [r6, #0]
 800ea86:	6825      	ldr	r5, [r4, #0]
 800ea88:	f015 0506 	ands.w	r5, r5, #6
 800ea8c:	d106      	bne.n	800ea9c <_printf_common+0x48>
 800ea8e:	f104 0a19 	add.w	sl, r4, #25
 800ea92:	68e3      	ldr	r3, [r4, #12]
 800ea94:	6832      	ldr	r2, [r6, #0]
 800ea96:	1a9b      	subs	r3, r3, r2
 800ea98:	42ab      	cmp	r3, r5
 800ea9a:	dc26      	bgt.n	800eaea <_printf_common+0x96>
 800ea9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eaa0:	1e13      	subs	r3, r2, #0
 800eaa2:	6822      	ldr	r2, [r4, #0]
 800eaa4:	bf18      	it	ne
 800eaa6:	2301      	movne	r3, #1
 800eaa8:	0692      	lsls	r2, r2, #26
 800eaaa:	d42b      	bmi.n	800eb04 <_printf_common+0xb0>
 800eaac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eab0:	4649      	mov	r1, r9
 800eab2:	4638      	mov	r0, r7
 800eab4:	47c0      	blx	r8
 800eab6:	3001      	adds	r0, #1
 800eab8:	d01e      	beq.n	800eaf8 <_printf_common+0xa4>
 800eaba:	6823      	ldr	r3, [r4, #0]
 800eabc:	68e5      	ldr	r5, [r4, #12]
 800eabe:	6832      	ldr	r2, [r6, #0]
 800eac0:	f003 0306 	and.w	r3, r3, #6
 800eac4:	2b04      	cmp	r3, #4
 800eac6:	bf08      	it	eq
 800eac8:	1aad      	subeq	r5, r5, r2
 800eaca:	68a3      	ldr	r3, [r4, #8]
 800eacc:	6922      	ldr	r2, [r4, #16]
 800eace:	bf0c      	ite	eq
 800ead0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ead4:	2500      	movne	r5, #0
 800ead6:	4293      	cmp	r3, r2
 800ead8:	bfc4      	itt	gt
 800eada:	1a9b      	subgt	r3, r3, r2
 800eadc:	18ed      	addgt	r5, r5, r3
 800eade:	2600      	movs	r6, #0
 800eae0:	341a      	adds	r4, #26
 800eae2:	42b5      	cmp	r5, r6
 800eae4:	d11a      	bne.n	800eb1c <_printf_common+0xc8>
 800eae6:	2000      	movs	r0, #0
 800eae8:	e008      	b.n	800eafc <_printf_common+0xa8>
 800eaea:	2301      	movs	r3, #1
 800eaec:	4652      	mov	r2, sl
 800eaee:	4649      	mov	r1, r9
 800eaf0:	4638      	mov	r0, r7
 800eaf2:	47c0      	blx	r8
 800eaf4:	3001      	adds	r0, #1
 800eaf6:	d103      	bne.n	800eb00 <_printf_common+0xac>
 800eaf8:	f04f 30ff 	mov.w	r0, #4294967295
 800eafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb00:	3501      	adds	r5, #1
 800eb02:	e7c6      	b.n	800ea92 <_printf_common+0x3e>
 800eb04:	18e1      	adds	r1, r4, r3
 800eb06:	1c5a      	adds	r2, r3, #1
 800eb08:	2030      	movs	r0, #48	; 0x30
 800eb0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eb0e:	4422      	add	r2, r4
 800eb10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eb14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eb18:	3302      	adds	r3, #2
 800eb1a:	e7c7      	b.n	800eaac <_printf_common+0x58>
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	4622      	mov	r2, r4
 800eb20:	4649      	mov	r1, r9
 800eb22:	4638      	mov	r0, r7
 800eb24:	47c0      	blx	r8
 800eb26:	3001      	adds	r0, #1
 800eb28:	d0e6      	beq.n	800eaf8 <_printf_common+0xa4>
 800eb2a:	3601      	adds	r6, #1
 800eb2c:	e7d9      	b.n	800eae2 <_printf_common+0x8e>
	...

0800eb30 <_printf_i>:
 800eb30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb34:	460c      	mov	r4, r1
 800eb36:	4691      	mov	r9, r2
 800eb38:	7e27      	ldrb	r7, [r4, #24]
 800eb3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eb3c:	2f78      	cmp	r7, #120	; 0x78
 800eb3e:	4680      	mov	r8, r0
 800eb40:	469a      	mov	sl, r3
 800eb42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb46:	d807      	bhi.n	800eb58 <_printf_i+0x28>
 800eb48:	2f62      	cmp	r7, #98	; 0x62
 800eb4a:	d80a      	bhi.n	800eb62 <_printf_i+0x32>
 800eb4c:	2f00      	cmp	r7, #0
 800eb4e:	f000 80d8 	beq.w	800ed02 <_printf_i+0x1d2>
 800eb52:	2f58      	cmp	r7, #88	; 0x58
 800eb54:	f000 80a3 	beq.w	800ec9e <_printf_i+0x16e>
 800eb58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eb5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eb60:	e03a      	b.n	800ebd8 <_printf_i+0xa8>
 800eb62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eb66:	2b15      	cmp	r3, #21
 800eb68:	d8f6      	bhi.n	800eb58 <_printf_i+0x28>
 800eb6a:	a001      	add	r0, pc, #4	; (adr r0, 800eb70 <_printf_i+0x40>)
 800eb6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800eb70:	0800ebc9 	.word	0x0800ebc9
 800eb74:	0800ebdd 	.word	0x0800ebdd
 800eb78:	0800eb59 	.word	0x0800eb59
 800eb7c:	0800eb59 	.word	0x0800eb59
 800eb80:	0800eb59 	.word	0x0800eb59
 800eb84:	0800eb59 	.word	0x0800eb59
 800eb88:	0800ebdd 	.word	0x0800ebdd
 800eb8c:	0800eb59 	.word	0x0800eb59
 800eb90:	0800eb59 	.word	0x0800eb59
 800eb94:	0800eb59 	.word	0x0800eb59
 800eb98:	0800eb59 	.word	0x0800eb59
 800eb9c:	0800ece9 	.word	0x0800ece9
 800eba0:	0800ec0d 	.word	0x0800ec0d
 800eba4:	0800eccb 	.word	0x0800eccb
 800eba8:	0800eb59 	.word	0x0800eb59
 800ebac:	0800eb59 	.word	0x0800eb59
 800ebb0:	0800ed0b 	.word	0x0800ed0b
 800ebb4:	0800eb59 	.word	0x0800eb59
 800ebb8:	0800ec0d 	.word	0x0800ec0d
 800ebbc:	0800eb59 	.word	0x0800eb59
 800ebc0:	0800eb59 	.word	0x0800eb59
 800ebc4:	0800ecd3 	.word	0x0800ecd3
 800ebc8:	680b      	ldr	r3, [r1, #0]
 800ebca:	1d1a      	adds	r2, r3, #4
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	600a      	str	r2, [r1, #0]
 800ebd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ebd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ebd8:	2301      	movs	r3, #1
 800ebda:	e0a3      	b.n	800ed24 <_printf_i+0x1f4>
 800ebdc:	6825      	ldr	r5, [r4, #0]
 800ebde:	6808      	ldr	r0, [r1, #0]
 800ebe0:	062e      	lsls	r6, r5, #24
 800ebe2:	f100 0304 	add.w	r3, r0, #4
 800ebe6:	d50a      	bpl.n	800ebfe <_printf_i+0xce>
 800ebe8:	6805      	ldr	r5, [r0, #0]
 800ebea:	600b      	str	r3, [r1, #0]
 800ebec:	2d00      	cmp	r5, #0
 800ebee:	da03      	bge.n	800ebf8 <_printf_i+0xc8>
 800ebf0:	232d      	movs	r3, #45	; 0x2d
 800ebf2:	426d      	negs	r5, r5
 800ebf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebf8:	485e      	ldr	r0, [pc, #376]	; (800ed74 <_printf_i+0x244>)
 800ebfa:	230a      	movs	r3, #10
 800ebfc:	e019      	b.n	800ec32 <_printf_i+0x102>
 800ebfe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ec02:	6805      	ldr	r5, [r0, #0]
 800ec04:	600b      	str	r3, [r1, #0]
 800ec06:	bf18      	it	ne
 800ec08:	b22d      	sxthne	r5, r5
 800ec0a:	e7ef      	b.n	800ebec <_printf_i+0xbc>
 800ec0c:	680b      	ldr	r3, [r1, #0]
 800ec0e:	6825      	ldr	r5, [r4, #0]
 800ec10:	1d18      	adds	r0, r3, #4
 800ec12:	6008      	str	r0, [r1, #0]
 800ec14:	0628      	lsls	r0, r5, #24
 800ec16:	d501      	bpl.n	800ec1c <_printf_i+0xec>
 800ec18:	681d      	ldr	r5, [r3, #0]
 800ec1a:	e002      	b.n	800ec22 <_printf_i+0xf2>
 800ec1c:	0669      	lsls	r1, r5, #25
 800ec1e:	d5fb      	bpl.n	800ec18 <_printf_i+0xe8>
 800ec20:	881d      	ldrh	r5, [r3, #0]
 800ec22:	4854      	ldr	r0, [pc, #336]	; (800ed74 <_printf_i+0x244>)
 800ec24:	2f6f      	cmp	r7, #111	; 0x6f
 800ec26:	bf0c      	ite	eq
 800ec28:	2308      	moveq	r3, #8
 800ec2a:	230a      	movne	r3, #10
 800ec2c:	2100      	movs	r1, #0
 800ec2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec32:	6866      	ldr	r6, [r4, #4]
 800ec34:	60a6      	str	r6, [r4, #8]
 800ec36:	2e00      	cmp	r6, #0
 800ec38:	bfa2      	ittt	ge
 800ec3a:	6821      	ldrge	r1, [r4, #0]
 800ec3c:	f021 0104 	bicge.w	r1, r1, #4
 800ec40:	6021      	strge	r1, [r4, #0]
 800ec42:	b90d      	cbnz	r5, 800ec48 <_printf_i+0x118>
 800ec44:	2e00      	cmp	r6, #0
 800ec46:	d04d      	beq.n	800ece4 <_printf_i+0x1b4>
 800ec48:	4616      	mov	r6, r2
 800ec4a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec4e:	fb03 5711 	mls	r7, r3, r1, r5
 800ec52:	5dc7      	ldrb	r7, [r0, r7]
 800ec54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ec58:	462f      	mov	r7, r5
 800ec5a:	42bb      	cmp	r3, r7
 800ec5c:	460d      	mov	r5, r1
 800ec5e:	d9f4      	bls.n	800ec4a <_printf_i+0x11a>
 800ec60:	2b08      	cmp	r3, #8
 800ec62:	d10b      	bne.n	800ec7c <_printf_i+0x14c>
 800ec64:	6823      	ldr	r3, [r4, #0]
 800ec66:	07df      	lsls	r7, r3, #31
 800ec68:	d508      	bpl.n	800ec7c <_printf_i+0x14c>
 800ec6a:	6923      	ldr	r3, [r4, #16]
 800ec6c:	6861      	ldr	r1, [r4, #4]
 800ec6e:	4299      	cmp	r1, r3
 800ec70:	bfde      	ittt	le
 800ec72:	2330      	movle	r3, #48	; 0x30
 800ec74:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec78:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ec7c:	1b92      	subs	r2, r2, r6
 800ec7e:	6122      	str	r2, [r4, #16]
 800ec80:	f8cd a000 	str.w	sl, [sp]
 800ec84:	464b      	mov	r3, r9
 800ec86:	aa03      	add	r2, sp, #12
 800ec88:	4621      	mov	r1, r4
 800ec8a:	4640      	mov	r0, r8
 800ec8c:	f7ff fee2 	bl	800ea54 <_printf_common>
 800ec90:	3001      	adds	r0, #1
 800ec92:	d14c      	bne.n	800ed2e <_printf_i+0x1fe>
 800ec94:	f04f 30ff 	mov.w	r0, #4294967295
 800ec98:	b004      	add	sp, #16
 800ec9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec9e:	4835      	ldr	r0, [pc, #212]	; (800ed74 <_printf_i+0x244>)
 800eca0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eca4:	6823      	ldr	r3, [r4, #0]
 800eca6:	680e      	ldr	r6, [r1, #0]
 800eca8:	061f      	lsls	r7, r3, #24
 800ecaa:	f856 5b04 	ldr.w	r5, [r6], #4
 800ecae:	600e      	str	r6, [r1, #0]
 800ecb0:	d514      	bpl.n	800ecdc <_printf_i+0x1ac>
 800ecb2:	07d9      	lsls	r1, r3, #31
 800ecb4:	bf44      	itt	mi
 800ecb6:	f043 0320 	orrmi.w	r3, r3, #32
 800ecba:	6023      	strmi	r3, [r4, #0]
 800ecbc:	b91d      	cbnz	r5, 800ecc6 <_printf_i+0x196>
 800ecbe:	6823      	ldr	r3, [r4, #0]
 800ecc0:	f023 0320 	bic.w	r3, r3, #32
 800ecc4:	6023      	str	r3, [r4, #0]
 800ecc6:	2310      	movs	r3, #16
 800ecc8:	e7b0      	b.n	800ec2c <_printf_i+0xfc>
 800ecca:	6823      	ldr	r3, [r4, #0]
 800eccc:	f043 0320 	orr.w	r3, r3, #32
 800ecd0:	6023      	str	r3, [r4, #0]
 800ecd2:	2378      	movs	r3, #120	; 0x78
 800ecd4:	4828      	ldr	r0, [pc, #160]	; (800ed78 <_printf_i+0x248>)
 800ecd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ecda:	e7e3      	b.n	800eca4 <_printf_i+0x174>
 800ecdc:	065e      	lsls	r6, r3, #25
 800ecde:	bf48      	it	mi
 800ece0:	b2ad      	uxthmi	r5, r5
 800ece2:	e7e6      	b.n	800ecb2 <_printf_i+0x182>
 800ece4:	4616      	mov	r6, r2
 800ece6:	e7bb      	b.n	800ec60 <_printf_i+0x130>
 800ece8:	680b      	ldr	r3, [r1, #0]
 800ecea:	6826      	ldr	r6, [r4, #0]
 800ecec:	6960      	ldr	r0, [r4, #20]
 800ecee:	1d1d      	adds	r5, r3, #4
 800ecf0:	600d      	str	r5, [r1, #0]
 800ecf2:	0635      	lsls	r5, r6, #24
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	d501      	bpl.n	800ecfc <_printf_i+0x1cc>
 800ecf8:	6018      	str	r0, [r3, #0]
 800ecfa:	e002      	b.n	800ed02 <_printf_i+0x1d2>
 800ecfc:	0671      	lsls	r1, r6, #25
 800ecfe:	d5fb      	bpl.n	800ecf8 <_printf_i+0x1c8>
 800ed00:	8018      	strh	r0, [r3, #0]
 800ed02:	2300      	movs	r3, #0
 800ed04:	6123      	str	r3, [r4, #16]
 800ed06:	4616      	mov	r6, r2
 800ed08:	e7ba      	b.n	800ec80 <_printf_i+0x150>
 800ed0a:	680b      	ldr	r3, [r1, #0]
 800ed0c:	1d1a      	adds	r2, r3, #4
 800ed0e:	600a      	str	r2, [r1, #0]
 800ed10:	681e      	ldr	r6, [r3, #0]
 800ed12:	6862      	ldr	r2, [r4, #4]
 800ed14:	2100      	movs	r1, #0
 800ed16:	4630      	mov	r0, r6
 800ed18:	f7f1 fa92 	bl	8000240 <memchr>
 800ed1c:	b108      	cbz	r0, 800ed22 <_printf_i+0x1f2>
 800ed1e:	1b80      	subs	r0, r0, r6
 800ed20:	6060      	str	r0, [r4, #4]
 800ed22:	6863      	ldr	r3, [r4, #4]
 800ed24:	6123      	str	r3, [r4, #16]
 800ed26:	2300      	movs	r3, #0
 800ed28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed2c:	e7a8      	b.n	800ec80 <_printf_i+0x150>
 800ed2e:	6923      	ldr	r3, [r4, #16]
 800ed30:	4632      	mov	r2, r6
 800ed32:	4649      	mov	r1, r9
 800ed34:	4640      	mov	r0, r8
 800ed36:	47d0      	blx	sl
 800ed38:	3001      	adds	r0, #1
 800ed3a:	d0ab      	beq.n	800ec94 <_printf_i+0x164>
 800ed3c:	6823      	ldr	r3, [r4, #0]
 800ed3e:	079b      	lsls	r3, r3, #30
 800ed40:	d413      	bmi.n	800ed6a <_printf_i+0x23a>
 800ed42:	68e0      	ldr	r0, [r4, #12]
 800ed44:	9b03      	ldr	r3, [sp, #12]
 800ed46:	4298      	cmp	r0, r3
 800ed48:	bfb8      	it	lt
 800ed4a:	4618      	movlt	r0, r3
 800ed4c:	e7a4      	b.n	800ec98 <_printf_i+0x168>
 800ed4e:	2301      	movs	r3, #1
 800ed50:	4632      	mov	r2, r6
 800ed52:	4649      	mov	r1, r9
 800ed54:	4640      	mov	r0, r8
 800ed56:	47d0      	blx	sl
 800ed58:	3001      	adds	r0, #1
 800ed5a:	d09b      	beq.n	800ec94 <_printf_i+0x164>
 800ed5c:	3501      	adds	r5, #1
 800ed5e:	68e3      	ldr	r3, [r4, #12]
 800ed60:	9903      	ldr	r1, [sp, #12]
 800ed62:	1a5b      	subs	r3, r3, r1
 800ed64:	42ab      	cmp	r3, r5
 800ed66:	dcf2      	bgt.n	800ed4e <_printf_i+0x21e>
 800ed68:	e7eb      	b.n	800ed42 <_printf_i+0x212>
 800ed6a:	2500      	movs	r5, #0
 800ed6c:	f104 0619 	add.w	r6, r4, #25
 800ed70:	e7f5      	b.n	800ed5e <_printf_i+0x22e>
 800ed72:	bf00      	nop
 800ed74:	08012071 	.word	0x08012071
 800ed78:	08012082 	.word	0x08012082

0800ed7c <_sbrk_r>:
 800ed7c:	b538      	push	{r3, r4, r5, lr}
 800ed7e:	4d06      	ldr	r5, [pc, #24]	; (800ed98 <_sbrk_r+0x1c>)
 800ed80:	2300      	movs	r3, #0
 800ed82:	4604      	mov	r4, r0
 800ed84:	4608      	mov	r0, r1
 800ed86:	602b      	str	r3, [r5, #0]
 800ed88:	f7f1 ff12 	bl	8000bb0 <_sbrk>
 800ed8c:	1c43      	adds	r3, r0, #1
 800ed8e:	d102      	bne.n	800ed96 <_sbrk_r+0x1a>
 800ed90:	682b      	ldr	r3, [r5, #0]
 800ed92:	b103      	cbz	r3, 800ed96 <_sbrk_r+0x1a>
 800ed94:	6023      	str	r3, [r4, #0]
 800ed96:	bd38      	pop	{r3, r4, r5, pc}
 800ed98:	20008b24 	.word	0x20008b24

0800ed9c <__sread>:
 800ed9c:	b510      	push	{r4, lr}
 800ed9e:	460c      	mov	r4, r1
 800eda0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eda4:	f000 fa92 	bl	800f2cc <_read_r>
 800eda8:	2800      	cmp	r0, #0
 800edaa:	bfab      	itete	ge
 800edac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800edae:	89a3      	ldrhlt	r3, [r4, #12]
 800edb0:	181b      	addge	r3, r3, r0
 800edb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800edb6:	bfac      	ite	ge
 800edb8:	6563      	strge	r3, [r4, #84]	; 0x54
 800edba:	81a3      	strhlt	r3, [r4, #12]
 800edbc:	bd10      	pop	{r4, pc}

0800edbe <__swrite>:
 800edbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edc2:	461f      	mov	r7, r3
 800edc4:	898b      	ldrh	r3, [r1, #12]
 800edc6:	05db      	lsls	r3, r3, #23
 800edc8:	4605      	mov	r5, r0
 800edca:	460c      	mov	r4, r1
 800edcc:	4616      	mov	r6, r2
 800edce:	d505      	bpl.n	800eddc <__swrite+0x1e>
 800edd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edd4:	2302      	movs	r3, #2
 800edd6:	2200      	movs	r2, #0
 800edd8:	f000 f9d0 	bl	800f17c <_lseek_r>
 800eddc:	89a3      	ldrh	r3, [r4, #12]
 800edde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ede2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ede6:	81a3      	strh	r3, [r4, #12]
 800ede8:	4632      	mov	r2, r6
 800edea:	463b      	mov	r3, r7
 800edec:	4628      	mov	r0, r5
 800edee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edf2:	f000 b869 	b.w	800eec8 <_write_r>

0800edf6 <__sseek>:
 800edf6:	b510      	push	{r4, lr}
 800edf8:	460c      	mov	r4, r1
 800edfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edfe:	f000 f9bd 	bl	800f17c <_lseek_r>
 800ee02:	1c43      	adds	r3, r0, #1
 800ee04:	89a3      	ldrh	r3, [r4, #12]
 800ee06:	bf15      	itete	ne
 800ee08:	6560      	strne	r0, [r4, #84]	; 0x54
 800ee0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ee0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ee12:	81a3      	strheq	r3, [r4, #12]
 800ee14:	bf18      	it	ne
 800ee16:	81a3      	strhne	r3, [r4, #12]
 800ee18:	bd10      	pop	{r4, pc}

0800ee1a <__sclose>:
 800ee1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee1e:	f000 b8db 	b.w	800efd8 <_close_r>
	...

0800ee24 <__swbuf_r>:
 800ee24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee26:	460e      	mov	r6, r1
 800ee28:	4614      	mov	r4, r2
 800ee2a:	4605      	mov	r5, r0
 800ee2c:	b118      	cbz	r0, 800ee36 <__swbuf_r+0x12>
 800ee2e:	6983      	ldr	r3, [r0, #24]
 800ee30:	b90b      	cbnz	r3, 800ee36 <__swbuf_r+0x12>
 800ee32:	f7ff f9f5 	bl	800e220 <__sinit>
 800ee36:	4b21      	ldr	r3, [pc, #132]	; (800eebc <__swbuf_r+0x98>)
 800ee38:	429c      	cmp	r4, r3
 800ee3a:	d12b      	bne.n	800ee94 <__swbuf_r+0x70>
 800ee3c:	686c      	ldr	r4, [r5, #4]
 800ee3e:	69a3      	ldr	r3, [r4, #24]
 800ee40:	60a3      	str	r3, [r4, #8]
 800ee42:	89a3      	ldrh	r3, [r4, #12]
 800ee44:	071a      	lsls	r2, r3, #28
 800ee46:	d52f      	bpl.n	800eea8 <__swbuf_r+0x84>
 800ee48:	6923      	ldr	r3, [r4, #16]
 800ee4a:	b36b      	cbz	r3, 800eea8 <__swbuf_r+0x84>
 800ee4c:	6923      	ldr	r3, [r4, #16]
 800ee4e:	6820      	ldr	r0, [r4, #0]
 800ee50:	1ac0      	subs	r0, r0, r3
 800ee52:	6963      	ldr	r3, [r4, #20]
 800ee54:	b2f6      	uxtb	r6, r6
 800ee56:	4283      	cmp	r3, r0
 800ee58:	4637      	mov	r7, r6
 800ee5a:	dc04      	bgt.n	800ee66 <__swbuf_r+0x42>
 800ee5c:	4621      	mov	r1, r4
 800ee5e:	4628      	mov	r0, r5
 800ee60:	f000 f950 	bl	800f104 <_fflush_r>
 800ee64:	bb30      	cbnz	r0, 800eeb4 <__swbuf_r+0x90>
 800ee66:	68a3      	ldr	r3, [r4, #8]
 800ee68:	3b01      	subs	r3, #1
 800ee6a:	60a3      	str	r3, [r4, #8]
 800ee6c:	6823      	ldr	r3, [r4, #0]
 800ee6e:	1c5a      	adds	r2, r3, #1
 800ee70:	6022      	str	r2, [r4, #0]
 800ee72:	701e      	strb	r6, [r3, #0]
 800ee74:	6963      	ldr	r3, [r4, #20]
 800ee76:	3001      	adds	r0, #1
 800ee78:	4283      	cmp	r3, r0
 800ee7a:	d004      	beq.n	800ee86 <__swbuf_r+0x62>
 800ee7c:	89a3      	ldrh	r3, [r4, #12]
 800ee7e:	07db      	lsls	r3, r3, #31
 800ee80:	d506      	bpl.n	800ee90 <__swbuf_r+0x6c>
 800ee82:	2e0a      	cmp	r6, #10
 800ee84:	d104      	bne.n	800ee90 <__swbuf_r+0x6c>
 800ee86:	4621      	mov	r1, r4
 800ee88:	4628      	mov	r0, r5
 800ee8a:	f000 f93b 	bl	800f104 <_fflush_r>
 800ee8e:	b988      	cbnz	r0, 800eeb4 <__swbuf_r+0x90>
 800ee90:	4638      	mov	r0, r7
 800ee92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee94:	4b0a      	ldr	r3, [pc, #40]	; (800eec0 <__swbuf_r+0x9c>)
 800ee96:	429c      	cmp	r4, r3
 800ee98:	d101      	bne.n	800ee9e <__swbuf_r+0x7a>
 800ee9a:	68ac      	ldr	r4, [r5, #8]
 800ee9c:	e7cf      	b.n	800ee3e <__swbuf_r+0x1a>
 800ee9e:	4b09      	ldr	r3, [pc, #36]	; (800eec4 <__swbuf_r+0xa0>)
 800eea0:	429c      	cmp	r4, r3
 800eea2:	bf08      	it	eq
 800eea4:	68ec      	ldreq	r4, [r5, #12]
 800eea6:	e7ca      	b.n	800ee3e <__swbuf_r+0x1a>
 800eea8:	4621      	mov	r1, r4
 800eeaa:	4628      	mov	r0, r5
 800eeac:	f000 f81e 	bl	800eeec <__swsetup_r>
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	d0cb      	beq.n	800ee4c <__swbuf_r+0x28>
 800eeb4:	f04f 37ff 	mov.w	r7, #4294967295
 800eeb8:	e7ea      	b.n	800ee90 <__swbuf_r+0x6c>
 800eeba:	bf00      	nop
 800eebc:	08012020 	.word	0x08012020
 800eec0:	08012040 	.word	0x08012040
 800eec4:	08012000 	.word	0x08012000

0800eec8 <_write_r>:
 800eec8:	b538      	push	{r3, r4, r5, lr}
 800eeca:	4d07      	ldr	r5, [pc, #28]	; (800eee8 <_write_r+0x20>)
 800eecc:	4604      	mov	r4, r0
 800eece:	4608      	mov	r0, r1
 800eed0:	4611      	mov	r1, r2
 800eed2:	2200      	movs	r2, #0
 800eed4:	602a      	str	r2, [r5, #0]
 800eed6:	461a      	mov	r2, r3
 800eed8:	f7f1 fe19 	bl	8000b0e <_write>
 800eedc:	1c43      	adds	r3, r0, #1
 800eede:	d102      	bne.n	800eee6 <_write_r+0x1e>
 800eee0:	682b      	ldr	r3, [r5, #0]
 800eee2:	b103      	cbz	r3, 800eee6 <_write_r+0x1e>
 800eee4:	6023      	str	r3, [r4, #0]
 800eee6:	bd38      	pop	{r3, r4, r5, pc}
 800eee8:	20008b24 	.word	0x20008b24

0800eeec <__swsetup_r>:
 800eeec:	4b32      	ldr	r3, [pc, #200]	; (800efb8 <__swsetup_r+0xcc>)
 800eeee:	b570      	push	{r4, r5, r6, lr}
 800eef0:	681d      	ldr	r5, [r3, #0]
 800eef2:	4606      	mov	r6, r0
 800eef4:	460c      	mov	r4, r1
 800eef6:	b125      	cbz	r5, 800ef02 <__swsetup_r+0x16>
 800eef8:	69ab      	ldr	r3, [r5, #24]
 800eefa:	b913      	cbnz	r3, 800ef02 <__swsetup_r+0x16>
 800eefc:	4628      	mov	r0, r5
 800eefe:	f7ff f98f 	bl	800e220 <__sinit>
 800ef02:	4b2e      	ldr	r3, [pc, #184]	; (800efbc <__swsetup_r+0xd0>)
 800ef04:	429c      	cmp	r4, r3
 800ef06:	d10f      	bne.n	800ef28 <__swsetup_r+0x3c>
 800ef08:	686c      	ldr	r4, [r5, #4]
 800ef0a:	89a3      	ldrh	r3, [r4, #12]
 800ef0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef10:	0719      	lsls	r1, r3, #28
 800ef12:	d42c      	bmi.n	800ef6e <__swsetup_r+0x82>
 800ef14:	06dd      	lsls	r5, r3, #27
 800ef16:	d411      	bmi.n	800ef3c <__swsetup_r+0x50>
 800ef18:	2309      	movs	r3, #9
 800ef1a:	6033      	str	r3, [r6, #0]
 800ef1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ef20:	81a3      	strh	r3, [r4, #12]
 800ef22:	f04f 30ff 	mov.w	r0, #4294967295
 800ef26:	e03e      	b.n	800efa6 <__swsetup_r+0xba>
 800ef28:	4b25      	ldr	r3, [pc, #148]	; (800efc0 <__swsetup_r+0xd4>)
 800ef2a:	429c      	cmp	r4, r3
 800ef2c:	d101      	bne.n	800ef32 <__swsetup_r+0x46>
 800ef2e:	68ac      	ldr	r4, [r5, #8]
 800ef30:	e7eb      	b.n	800ef0a <__swsetup_r+0x1e>
 800ef32:	4b24      	ldr	r3, [pc, #144]	; (800efc4 <__swsetup_r+0xd8>)
 800ef34:	429c      	cmp	r4, r3
 800ef36:	bf08      	it	eq
 800ef38:	68ec      	ldreq	r4, [r5, #12]
 800ef3a:	e7e6      	b.n	800ef0a <__swsetup_r+0x1e>
 800ef3c:	0758      	lsls	r0, r3, #29
 800ef3e:	d512      	bpl.n	800ef66 <__swsetup_r+0x7a>
 800ef40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef42:	b141      	cbz	r1, 800ef56 <__swsetup_r+0x6a>
 800ef44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef48:	4299      	cmp	r1, r3
 800ef4a:	d002      	beq.n	800ef52 <__swsetup_r+0x66>
 800ef4c:	4630      	mov	r0, r6
 800ef4e:	f7ff fa21 	bl	800e394 <_free_r>
 800ef52:	2300      	movs	r3, #0
 800ef54:	6363      	str	r3, [r4, #52]	; 0x34
 800ef56:	89a3      	ldrh	r3, [r4, #12]
 800ef58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef5c:	81a3      	strh	r3, [r4, #12]
 800ef5e:	2300      	movs	r3, #0
 800ef60:	6063      	str	r3, [r4, #4]
 800ef62:	6923      	ldr	r3, [r4, #16]
 800ef64:	6023      	str	r3, [r4, #0]
 800ef66:	89a3      	ldrh	r3, [r4, #12]
 800ef68:	f043 0308 	orr.w	r3, r3, #8
 800ef6c:	81a3      	strh	r3, [r4, #12]
 800ef6e:	6923      	ldr	r3, [r4, #16]
 800ef70:	b94b      	cbnz	r3, 800ef86 <__swsetup_r+0x9a>
 800ef72:	89a3      	ldrh	r3, [r4, #12]
 800ef74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef7c:	d003      	beq.n	800ef86 <__swsetup_r+0x9a>
 800ef7e:	4621      	mov	r1, r4
 800ef80:	4630      	mov	r0, r6
 800ef82:	f000 f931 	bl	800f1e8 <__smakebuf_r>
 800ef86:	89a0      	ldrh	r0, [r4, #12]
 800ef88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef8c:	f010 0301 	ands.w	r3, r0, #1
 800ef90:	d00a      	beq.n	800efa8 <__swsetup_r+0xbc>
 800ef92:	2300      	movs	r3, #0
 800ef94:	60a3      	str	r3, [r4, #8]
 800ef96:	6963      	ldr	r3, [r4, #20]
 800ef98:	425b      	negs	r3, r3
 800ef9a:	61a3      	str	r3, [r4, #24]
 800ef9c:	6923      	ldr	r3, [r4, #16]
 800ef9e:	b943      	cbnz	r3, 800efb2 <__swsetup_r+0xc6>
 800efa0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800efa4:	d1ba      	bne.n	800ef1c <__swsetup_r+0x30>
 800efa6:	bd70      	pop	{r4, r5, r6, pc}
 800efa8:	0781      	lsls	r1, r0, #30
 800efaa:	bf58      	it	pl
 800efac:	6963      	ldrpl	r3, [r4, #20]
 800efae:	60a3      	str	r3, [r4, #8]
 800efb0:	e7f4      	b.n	800ef9c <__swsetup_r+0xb0>
 800efb2:	2000      	movs	r0, #0
 800efb4:	e7f7      	b.n	800efa6 <__swsetup_r+0xba>
 800efb6:	bf00      	nop
 800efb8:	20000014 	.word	0x20000014
 800efbc:	08012020 	.word	0x08012020
 800efc0:	08012040 	.word	0x08012040
 800efc4:	08012000 	.word	0x08012000

0800efc8 <abort>:
 800efc8:	b508      	push	{r3, lr}
 800efca:	2006      	movs	r0, #6
 800efcc:	f000 f9b8 	bl	800f340 <raise>
 800efd0:	2001      	movs	r0, #1
 800efd2:	f7f1 fd75 	bl	8000ac0 <_exit>
	...

0800efd8 <_close_r>:
 800efd8:	b538      	push	{r3, r4, r5, lr}
 800efda:	4d06      	ldr	r5, [pc, #24]	; (800eff4 <_close_r+0x1c>)
 800efdc:	2300      	movs	r3, #0
 800efde:	4604      	mov	r4, r0
 800efe0:	4608      	mov	r0, r1
 800efe2:	602b      	str	r3, [r5, #0]
 800efe4:	f7f1 fdaf 	bl	8000b46 <_close>
 800efe8:	1c43      	adds	r3, r0, #1
 800efea:	d102      	bne.n	800eff2 <_close_r+0x1a>
 800efec:	682b      	ldr	r3, [r5, #0]
 800efee:	b103      	cbz	r3, 800eff2 <_close_r+0x1a>
 800eff0:	6023      	str	r3, [r4, #0]
 800eff2:	bd38      	pop	{r3, r4, r5, pc}
 800eff4:	20008b24 	.word	0x20008b24

0800eff8 <__sflush_r>:
 800eff8:	898a      	ldrh	r2, [r1, #12]
 800effa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800effe:	4605      	mov	r5, r0
 800f000:	0710      	lsls	r0, r2, #28
 800f002:	460c      	mov	r4, r1
 800f004:	d458      	bmi.n	800f0b8 <__sflush_r+0xc0>
 800f006:	684b      	ldr	r3, [r1, #4]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	dc05      	bgt.n	800f018 <__sflush_r+0x20>
 800f00c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f00e:	2b00      	cmp	r3, #0
 800f010:	dc02      	bgt.n	800f018 <__sflush_r+0x20>
 800f012:	2000      	movs	r0, #0
 800f014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f01a:	2e00      	cmp	r6, #0
 800f01c:	d0f9      	beq.n	800f012 <__sflush_r+0x1a>
 800f01e:	2300      	movs	r3, #0
 800f020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f024:	682f      	ldr	r7, [r5, #0]
 800f026:	602b      	str	r3, [r5, #0]
 800f028:	d032      	beq.n	800f090 <__sflush_r+0x98>
 800f02a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f02c:	89a3      	ldrh	r3, [r4, #12]
 800f02e:	075a      	lsls	r2, r3, #29
 800f030:	d505      	bpl.n	800f03e <__sflush_r+0x46>
 800f032:	6863      	ldr	r3, [r4, #4]
 800f034:	1ac0      	subs	r0, r0, r3
 800f036:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f038:	b10b      	cbz	r3, 800f03e <__sflush_r+0x46>
 800f03a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f03c:	1ac0      	subs	r0, r0, r3
 800f03e:	2300      	movs	r3, #0
 800f040:	4602      	mov	r2, r0
 800f042:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f044:	6a21      	ldr	r1, [r4, #32]
 800f046:	4628      	mov	r0, r5
 800f048:	47b0      	blx	r6
 800f04a:	1c43      	adds	r3, r0, #1
 800f04c:	89a3      	ldrh	r3, [r4, #12]
 800f04e:	d106      	bne.n	800f05e <__sflush_r+0x66>
 800f050:	6829      	ldr	r1, [r5, #0]
 800f052:	291d      	cmp	r1, #29
 800f054:	d82c      	bhi.n	800f0b0 <__sflush_r+0xb8>
 800f056:	4a2a      	ldr	r2, [pc, #168]	; (800f100 <__sflush_r+0x108>)
 800f058:	40ca      	lsrs	r2, r1
 800f05a:	07d6      	lsls	r6, r2, #31
 800f05c:	d528      	bpl.n	800f0b0 <__sflush_r+0xb8>
 800f05e:	2200      	movs	r2, #0
 800f060:	6062      	str	r2, [r4, #4]
 800f062:	04d9      	lsls	r1, r3, #19
 800f064:	6922      	ldr	r2, [r4, #16]
 800f066:	6022      	str	r2, [r4, #0]
 800f068:	d504      	bpl.n	800f074 <__sflush_r+0x7c>
 800f06a:	1c42      	adds	r2, r0, #1
 800f06c:	d101      	bne.n	800f072 <__sflush_r+0x7a>
 800f06e:	682b      	ldr	r3, [r5, #0]
 800f070:	b903      	cbnz	r3, 800f074 <__sflush_r+0x7c>
 800f072:	6560      	str	r0, [r4, #84]	; 0x54
 800f074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f076:	602f      	str	r7, [r5, #0]
 800f078:	2900      	cmp	r1, #0
 800f07a:	d0ca      	beq.n	800f012 <__sflush_r+0x1a>
 800f07c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f080:	4299      	cmp	r1, r3
 800f082:	d002      	beq.n	800f08a <__sflush_r+0x92>
 800f084:	4628      	mov	r0, r5
 800f086:	f7ff f985 	bl	800e394 <_free_r>
 800f08a:	2000      	movs	r0, #0
 800f08c:	6360      	str	r0, [r4, #52]	; 0x34
 800f08e:	e7c1      	b.n	800f014 <__sflush_r+0x1c>
 800f090:	6a21      	ldr	r1, [r4, #32]
 800f092:	2301      	movs	r3, #1
 800f094:	4628      	mov	r0, r5
 800f096:	47b0      	blx	r6
 800f098:	1c41      	adds	r1, r0, #1
 800f09a:	d1c7      	bne.n	800f02c <__sflush_r+0x34>
 800f09c:	682b      	ldr	r3, [r5, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d0c4      	beq.n	800f02c <__sflush_r+0x34>
 800f0a2:	2b1d      	cmp	r3, #29
 800f0a4:	d001      	beq.n	800f0aa <__sflush_r+0xb2>
 800f0a6:	2b16      	cmp	r3, #22
 800f0a8:	d101      	bne.n	800f0ae <__sflush_r+0xb6>
 800f0aa:	602f      	str	r7, [r5, #0]
 800f0ac:	e7b1      	b.n	800f012 <__sflush_r+0x1a>
 800f0ae:	89a3      	ldrh	r3, [r4, #12]
 800f0b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0b4:	81a3      	strh	r3, [r4, #12]
 800f0b6:	e7ad      	b.n	800f014 <__sflush_r+0x1c>
 800f0b8:	690f      	ldr	r7, [r1, #16]
 800f0ba:	2f00      	cmp	r7, #0
 800f0bc:	d0a9      	beq.n	800f012 <__sflush_r+0x1a>
 800f0be:	0793      	lsls	r3, r2, #30
 800f0c0:	680e      	ldr	r6, [r1, #0]
 800f0c2:	bf08      	it	eq
 800f0c4:	694b      	ldreq	r3, [r1, #20]
 800f0c6:	600f      	str	r7, [r1, #0]
 800f0c8:	bf18      	it	ne
 800f0ca:	2300      	movne	r3, #0
 800f0cc:	eba6 0807 	sub.w	r8, r6, r7
 800f0d0:	608b      	str	r3, [r1, #8]
 800f0d2:	f1b8 0f00 	cmp.w	r8, #0
 800f0d6:	dd9c      	ble.n	800f012 <__sflush_r+0x1a>
 800f0d8:	6a21      	ldr	r1, [r4, #32]
 800f0da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f0dc:	4643      	mov	r3, r8
 800f0de:	463a      	mov	r2, r7
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	47b0      	blx	r6
 800f0e4:	2800      	cmp	r0, #0
 800f0e6:	dc06      	bgt.n	800f0f6 <__sflush_r+0xfe>
 800f0e8:	89a3      	ldrh	r3, [r4, #12]
 800f0ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0ee:	81a3      	strh	r3, [r4, #12]
 800f0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f4:	e78e      	b.n	800f014 <__sflush_r+0x1c>
 800f0f6:	4407      	add	r7, r0
 800f0f8:	eba8 0800 	sub.w	r8, r8, r0
 800f0fc:	e7e9      	b.n	800f0d2 <__sflush_r+0xda>
 800f0fe:	bf00      	nop
 800f100:	20400001 	.word	0x20400001

0800f104 <_fflush_r>:
 800f104:	b538      	push	{r3, r4, r5, lr}
 800f106:	690b      	ldr	r3, [r1, #16]
 800f108:	4605      	mov	r5, r0
 800f10a:	460c      	mov	r4, r1
 800f10c:	b913      	cbnz	r3, 800f114 <_fflush_r+0x10>
 800f10e:	2500      	movs	r5, #0
 800f110:	4628      	mov	r0, r5
 800f112:	bd38      	pop	{r3, r4, r5, pc}
 800f114:	b118      	cbz	r0, 800f11e <_fflush_r+0x1a>
 800f116:	6983      	ldr	r3, [r0, #24]
 800f118:	b90b      	cbnz	r3, 800f11e <_fflush_r+0x1a>
 800f11a:	f7ff f881 	bl	800e220 <__sinit>
 800f11e:	4b14      	ldr	r3, [pc, #80]	; (800f170 <_fflush_r+0x6c>)
 800f120:	429c      	cmp	r4, r3
 800f122:	d11b      	bne.n	800f15c <_fflush_r+0x58>
 800f124:	686c      	ldr	r4, [r5, #4]
 800f126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d0ef      	beq.n	800f10e <_fflush_r+0xa>
 800f12e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f130:	07d0      	lsls	r0, r2, #31
 800f132:	d404      	bmi.n	800f13e <_fflush_r+0x3a>
 800f134:	0599      	lsls	r1, r3, #22
 800f136:	d402      	bmi.n	800f13e <_fflush_r+0x3a>
 800f138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f13a:	f7ff f921 	bl	800e380 <__retarget_lock_acquire_recursive>
 800f13e:	4628      	mov	r0, r5
 800f140:	4621      	mov	r1, r4
 800f142:	f7ff ff59 	bl	800eff8 <__sflush_r>
 800f146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f148:	07da      	lsls	r2, r3, #31
 800f14a:	4605      	mov	r5, r0
 800f14c:	d4e0      	bmi.n	800f110 <_fflush_r+0xc>
 800f14e:	89a3      	ldrh	r3, [r4, #12]
 800f150:	059b      	lsls	r3, r3, #22
 800f152:	d4dd      	bmi.n	800f110 <_fflush_r+0xc>
 800f154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f156:	f7ff f914 	bl	800e382 <__retarget_lock_release_recursive>
 800f15a:	e7d9      	b.n	800f110 <_fflush_r+0xc>
 800f15c:	4b05      	ldr	r3, [pc, #20]	; (800f174 <_fflush_r+0x70>)
 800f15e:	429c      	cmp	r4, r3
 800f160:	d101      	bne.n	800f166 <_fflush_r+0x62>
 800f162:	68ac      	ldr	r4, [r5, #8]
 800f164:	e7df      	b.n	800f126 <_fflush_r+0x22>
 800f166:	4b04      	ldr	r3, [pc, #16]	; (800f178 <_fflush_r+0x74>)
 800f168:	429c      	cmp	r4, r3
 800f16a:	bf08      	it	eq
 800f16c:	68ec      	ldreq	r4, [r5, #12]
 800f16e:	e7da      	b.n	800f126 <_fflush_r+0x22>
 800f170:	08012020 	.word	0x08012020
 800f174:	08012040 	.word	0x08012040
 800f178:	08012000 	.word	0x08012000

0800f17c <_lseek_r>:
 800f17c:	b538      	push	{r3, r4, r5, lr}
 800f17e:	4d07      	ldr	r5, [pc, #28]	; (800f19c <_lseek_r+0x20>)
 800f180:	4604      	mov	r4, r0
 800f182:	4608      	mov	r0, r1
 800f184:	4611      	mov	r1, r2
 800f186:	2200      	movs	r2, #0
 800f188:	602a      	str	r2, [r5, #0]
 800f18a:	461a      	mov	r2, r3
 800f18c:	f7f1 fd02 	bl	8000b94 <_lseek>
 800f190:	1c43      	adds	r3, r0, #1
 800f192:	d102      	bne.n	800f19a <_lseek_r+0x1e>
 800f194:	682b      	ldr	r3, [r5, #0]
 800f196:	b103      	cbz	r3, 800f19a <_lseek_r+0x1e>
 800f198:	6023      	str	r3, [r4, #0]
 800f19a:	bd38      	pop	{r3, r4, r5, pc}
 800f19c:	20008b24 	.word	0x20008b24

0800f1a0 <__swhatbuf_r>:
 800f1a0:	b570      	push	{r4, r5, r6, lr}
 800f1a2:	460e      	mov	r6, r1
 800f1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1a8:	2900      	cmp	r1, #0
 800f1aa:	b096      	sub	sp, #88	; 0x58
 800f1ac:	4614      	mov	r4, r2
 800f1ae:	461d      	mov	r5, r3
 800f1b0:	da07      	bge.n	800f1c2 <__swhatbuf_r+0x22>
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	602b      	str	r3, [r5, #0]
 800f1b6:	89b3      	ldrh	r3, [r6, #12]
 800f1b8:	061a      	lsls	r2, r3, #24
 800f1ba:	d410      	bmi.n	800f1de <__swhatbuf_r+0x3e>
 800f1bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1c0:	e00e      	b.n	800f1e0 <__swhatbuf_r+0x40>
 800f1c2:	466a      	mov	r2, sp
 800f1c4:	f000 f8d8 	bl	800f378 <_fstat_r>
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	dbf2      	blt.n	800f1b2 <__swhatbuf_r+0x12>
 800f1cc:	9a01      	ldr	r2, [sp, #4]
 800f1ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f1d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f1d6:	425a      	negs	r2, r3
 800f1d8:	415a      	adcs	r2, r3
 800f1da:	602a      	str	r2, [r5, #0]
 800f1dc:	e7ee      	b.n	800f1bc <__swhatbuf_r+0x1c>
 800f1de:	2340      	movs	r3, #64	; 0x40
 800f1e0:	2000      	movs	r0, #0
 800f1e2:	6023      	str	r3, [r4, #0]
 800f1e4:	b016      	add	sp, #88	; 0x58
 800f1e6:	bd70      	pop	{r4, r5, r6, pc}

0800f1e8 <__smakebuf_r>:
 800f1e8:	898b      	ldrh	r3, [r1, #12]
 800f1ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f1ec:	079d      	lsls	r5, r3, #30
 800f1ee:	4606      	mov	r6, r0
 800f1f0:	460c      	mov	r4, r1
 800f1f2:	d507      	bpl.n	800f204 <__smakebuf_r+0x1c>
 800f1f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f1f8:	6023      	str	r3, [r4, #0]
 800f1fa:	6123      	str	r3, [r4, #16]
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	6163      	str	r3, [r4, #20]
 800f200:	b002      	add	sp, #8
 800f202:	bd70      	pop	{r4, r5, r6, pc}
 800f204:	ab01      	add	r3, sp, #4
 800f206:	466a      	mov	r2, sp
 800f208:	f7ff ffca 	bl	800f1a0 <__swhatbuf_r>
 800f20c:	9900      	ldr	r1, [sp, #0]
 800f20e:	4605      	mov	r5, r0
 800f210:	4630      	mov	r0, r6
 800f212:	f7ff f90f 	bl	800e434 <_malloc_r>
 800f216:	b948      	cbnz	r0, 800f22c <__smakebuf_r+0x44>
 800f218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f21c:	059a      	lsls	r2, r3, #22
 800f21e:	d4ef      	bmi.n	800f200 <__smakebuf_r+0x18>
 800f220:	f023 0303 	bic.w	r3, r3, #3
 800f224:	f043 0302 	orr.w	r3, r3, #2
 800f228:	81a3      	strh	r3, [r4, #12]
 800f22a:	e7e3      	b.n	800f1f4 <__smakebuf_r+0xc>
 800f22c:	4b0d      	ldr	r3, [pc, #52]	; (800f264 <__smakebuf_r+0x7c>)
 800f22e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f230:	89a3      	ldrh	r3, [r4, #12]
 800f232:	6020      	str	r0, [r4, #0]
 800f234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f238:	81a3      	strh	r3, [r4, #12]
 800f23a:	9b00      	ldr	r3, [sp, #0]
 800f23c:	6163      	str	r3, [r4, #20]
 800f23e:	9b01      	ldr	r3, [sp, #4]
 800f240:	6120      	str	r0, [r4, #16]
 800f242:	b15b      	cbz	r3, 800f25c <__smakebuf_r+0x74>
 800f244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f248:	4630      	mov	r0, r6
 800f24a:	f000 f8a7 	bl	800f39c <_isatty_r>
 800f24e:	b128      	cbz	r0, 800f25c <__smakebuf_r+0x74>
 800f250:	89a3      	ldrh	r3, [r4, #12]
 800f252:	f023 0303 	bic.w	r3, r3, #3
 800f256:	f043 0301 	orr.w	r3, r3, #1
 800f25a:	81a3      	strh	r3, [r4, #12]
 800f25c:	89a0      	ldrh	r0, [r4, #12]
 800f25e:	4305      	orrs	r5, r0
 800f260:	81a5      	strh	r5, [r4, #12]
 800f262:	e7cd      	b.n	800f200 <__smakebuf_r+0x18>
 800f264:	0800e1b9 	.word	0x0800e1b9

0800f268 <__malloc_lock>:
 800f268:	4801      	ldr	r0, [pc, #4]	; (800f270 <__malloc_lock+0x8>)
 800f26a:	f7ff b889 	b.w	800e380 <__retarget_lock_acquire_recursive>
 800f26e:	bf00      	nop
 800f270:	20008b2c 	.word	0x20008b2c

0800f274 <__malloc_unlock>:
 800f274:	4801      	ldr	r0, [pc, #4]	; (800f27c <__malloc_unlock+0x8>)
 800f276:	f7ff b884 	b.w	800e382 <__retarget_lock_release_recursive>
 800f27a:	bf00      	nop
 800f27c:	20008b2c 	.word	0x20008b2c

0800f280 <_realloc_r>:
 800f280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f282:	4607      	mov	r7, r0
 800f284:	4614      	mov	r4, r2
 800f286:	460e      	mov	r6, r1
 800f288:	b921      	cbnz	r1, 800f294 <_realloc_r+0x14>
 800f28a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f28e:	4611      	mov	r1, r2
 800f290:	f7ff b8d0 	b.w	800e434 <_malloc_r>
 800f294:	b922      	cbnz	r2, 800f2a0 <_realloc_r+0x20>
 800f296:	f7ff f87d 	bl	800e394 <_free_r>
 800f29a:	4625      	mov	r5, r4
 800f29c:	4628      	mov	r0, r5
 800f29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2a0:	f000 f88c 	bl	800f3bc <_malloc_usable_size_r>
 800f2a4:	42a0      	cmp	r0, r4
 800f2a6:	d20f      	bcs.n	800f2c8 <_realloc_r+0x48>
 800f2a8:	4621      	mov	r1, r4
 800f2aa:	4638      	mov	r0, r7
 800f2ac:	f7ff f8c2 	bl	800e434 <_malloc_r>
 800f2b0:	4605      	mov	r5, r0
 800f2b2:	2800      	cmp	r0, #0
 800f2b4:	d0f2      	beq.n	800f29c <_realloc_r+0x1c>
 800f2b6:	4631      	mov	r1, r6
 800f2b8:	4622      	mov	r2, r4
 800f2ba:	f7fe fe23 	bl	800df04 <memcpy>
 800f2be:	4631      	mov	r1, r6
 800f2c0:	4638      	mov	r0, r7
 800f2c2:	f7ff f867 	bl	800e394 <_free_r>
 800f2c6:	e7e9      	b.n	800f29c <_realloc_r+0x1c>
 800f2c8:	4635      	mov	r5, r6
 800f2ca:	e7e7      	b.n	800f29c <_realloc_r+0x1c>

0800f2cc <_read_r>:
 800f2cc:	b538      	push	{r3, r4, r5, lr}
 800f2ce:	4d07      	ldr	r5, [pc, #28]	; (800f2ec <_read_r+0x20>)
 800f2d0:	4604      	mov	r4, r0
 800f2d2:	4608      	mov	r0, r1
 800f2d4:	4611      	mov	r1, r2
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	602a      	str	r2, [r5, #0]
 800f2da:	461a      	mov	r2, r3
 800f2dc:	f7f1 fbfa 	bl	8000ad4 <_read>
 800f2e0:	1c43      	adds	r3, r0, #1
 800f2e2:	d102      	bne.n	800f2ea <_read_r+0x1e>
 800f2e4:	682b      	ldr	r3, [r5, #0]
 800f2e6:	b103      	cbz	r3, 800f2ea <_read_r+0x1e>
 800f2e8:	6023      	str	r3, [r4, #0]
 800f2ea:	bd38      	pop	{r3, r4, r5, pc}
 800f2ec:	20008b24 	.word	0x20008b24

0800f2f0 <_raise_r>:
 800f2f0:	291f      	cmp	r1, #31
 800f2f2:	b538      	push	{r3, r4, r5, lr}
 800f2f4:	4604      	mov	r4, r0
 800f2f6:	460d      	mov	r5, r1
 800f2f8:	d904      	bls.n	800f304 <_raise_r+0x14>
 800f2fa:	2316      	movs	r3, #22
 800f2fc:	6003      	str	r3, [r0, #0]
 800f2fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f302:	bd38      	pop	{r3, r4, r5, pc}
 800f304:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f306:	b112      	cbz	r2, 800f30e <_raise_r+0x1e>
 800f308:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f30c:	b94b      	cbnz	r3, 800f322 <_raise_r+0x32>
 800f30e:	4620      	mov	r0, r4
 800f310:	f000 f830 	bl	800f374 <_getpid_r>
 800f314:	462a      	mov	r2, r5
 800f316:	4601      	mov	r1, r0
 800f318:	4620      	mov	r0, r4
 800f31a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f31e:	f000 b817 	b.w	800f350 <_kill_r>
 800f322:	2b01      	cmp	r3, #1
 800f324:	d00a      	beq.n	800f33c <_raise_r+0x4c>
 800f326:	1c59      	adds	r1, r3, #1
 800f328:	d103      	bne.n	800f332 <_raise_r+0x42>
 800f32a:	2316      	movs	r3, #22
 800f32c:	6003      	str	r3, [r0, #0]
 800f32e:	2001      	movs	r0, #1
 800f330:	e7e7      	b.n	800f302 <_raise_r+0x12>
 800f332:	2400      	movs	r4, #0
 800f334:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f338:	4628      	mov	r0, r5
 800f33a:	4798      	blx	r3
 800f33c:	2000      	movs	r0, #0
 800f33e:	e7e0      	b.n	800f302 <_raise_r+0x12>

0800f340 <raise>:
 800f340:	4b02      	ldr	r3, [pc, #8]	; (800f34c <raise+0xc>)
 800f342:	4601      	mov	r1, r0
 800f344:	6818      	ldr	r0, [r3, #0]
 800f346:	f7ff bfd3 	b.w	800f2f0 <_raise_r>
 800f34a:	bf00      	nop
 800f34c:	20000014 	.word	0x20000014

0800f350 <_kill_r>:
 800f350:	b538      	push	{r3, r4, r5, lr}
 800f352:	4d07      	ldr	r5, [pc, #28]	; (800f370 <_kill_r+0x20>)
 800f354:	2300      	movs	r3, #0
 800f356:	4604      	mov	r4, r0
 800f358:	4608      	mov	r0, r1
 800f35a:	4611      	mov	r1, r2
 800f35c:	602b      	str	r3, [r5, #0]
 800f35e:	f7f1 fb9d 	bl	8000a9c <_kill>
 800f362:	1c43      	adds	r3, r0, #1
 800f364:	d102      	bne.n	800f36c <_kill_r+0x1c>
 800f366:	682b      	ldr	r3, [r5, #0]
 800f368:	b103      	cbz	r3, 800f36c <_kill_r+0x1c>
 800f36a:	6023      	str	r3, [r4, #0]
 800f36c:	bd38      	pop	{r3, r4, r5, pc}
 800f36e:	bf00      	nop
 800f370:	20008b24 	.word	0x20008b24

0800f374 <_getpid_r>:
 800f374:	f7f1 bb8a 	b.w	8000a8c <_getpid>

0800f378 <_fstat_r>:
 800f378:	b538      	push	{r3, r4, r5, lr}
 800f37a:	4d07      	ldr	r5, [pc, #28]	; (800f398 <_fstat_r+0x20>)
 800f37c:	2300      	movs	r3, #0
 800f37e:	4604      	mov	r4, r0
 800f380:	4608      	mov	r0, r1
 800f382:	4611      	mov	r1, r2
 800f384:	602b      	str	r3, [r5, #0]
 800f386:	f7f1 fbea 	bl	8000b5e <_fstat>
 800f38a:	1c43      	adds	r3, r0, #1
 800f38c:	d102      	bne.n	800f394 <_fstat_r+0x1c>
 800f38e:	682b      	ldr	r3, [r5, #0]
 800f390:	b103      	cbz	r3, 800f394 <_fstat_r+0x1c>
 800f392:	6023      	str	r3, [r4, #0]
 800f394:	bd38      	pop	{r3, r4, r5, pc}
 800f396:	bf00      	nop
 800f398:	20008b24 	.word	0x20008b24

0800f39c <_isatty_r>:
 800f39c:	b538      	push	{r3, r4, r5, lr}
 800f39e:	4d06      	ldr	r5, [pc, #24]	; (800f3b8 <_isatty_r+0x1c>)
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	4608      	mov	r0, r1
 800f3a6:	602b      	str	r3, [r5, #0]
 800f3a8:	f7f1 fbe9 	bl	8000b7e <_isatty>
 800f3ac:	1c43      	adds	r3, r0, #1
 800f3ae:	d102      	bne.n	800f3b6 <_isatty_r+0x1a>
 800f3b0:	682b      	ldr	r3, [r5, #0]
 800f3b2:	b103      	cbz	r3, 800f3b6 <_isatty_r+0x1a>
 800f3b4:	6023      	str	r3, [r4, #0]
 800f3b6:	bd38      	pop	{r3, r4, r5, pc}
 800f3b8:	20008b24 	.word	0x20008b24

0800f3bc <_malloc_usable_size_r>:
 800f3bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3c0:	1f18      	subs	r0, r3, #4
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	bfbc      	itt	lt
 800f3c6:	580b      	ldrlt	r3, [r1, r0]
 800f3c8:	18c0      	addlt	r0, r0, r3
 800f3ca:	4770      	bx	lr

0800f3cc <_init>:
 800f3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ce:	bf00      	nop
 800f3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3d2:	bc08      	pop	{r3}
 800f3d4:	469e      	mov	lr, r3
 800f3d6:	4770      	bx	lr

0800f3d8 <_fini>:
 800f3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3da:	bf00      	nop
 800f3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3de:	bc08      	pop	{r3}
 800f3e0:	469e      	mov	lr, r3
 800f3e2:	4770      	bx	lr
