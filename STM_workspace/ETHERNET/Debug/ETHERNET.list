
ETHERNET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f550  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c44  0800f720  0800f720  0001f720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012364  08012364  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08012364  08012364  00022364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801236c  0801236c  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801236c  0801236c  0002236c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012370  08012370  00022370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08012374  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008aa8  20000078  080123ec  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008b20  080123ec  00038b20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030bbb  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c79  00000000  00000000  00060c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  000668e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001560  00000000  00000000  00067f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003191f  00000000  00000000  00069470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000261bf  00000000  00000000  0009ad8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104178  00000000  00000000  000c0f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c50c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006448  00000000  00000000  001c511c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f708 	.word	0x0800f708

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800f708 	.word	0x0800f708

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005ac:	f3bf 8f4f 	dsb	sy
}
 80005b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005b2:	f3bf 8f6f 	isb	sy
}
 80005b6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <SCB_EnableICache+0x48>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005c0:	f3bf 8f4f 	dsb	sy
}
 80005c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005c6:	f3bf 8f6f 	isb	sy
}
 80005ca:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <SCB_EnableICache+0x48>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <SCB_EnableICache+0x48>)
 80005d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005d8:	f3bf 8f4f 	dsb	sy
}
 80005dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005de:	f3bf 8f6f 	isb	sy
}
 80005e2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <SCB_EnableDCache+0x84>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000602:	f3bf 8f4f 	dsb	sy
}
 8000606:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <SCB_EnableDCache+0x84>)
 800060a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800060e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	0b5b      	lsrs	r3, r3, #13
 8000614:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000618:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	08db      	lsrs	r3, r3, #3
 800061e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000622:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	015a      	lsls	r2, r3, #5
 8000628:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800062c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000632:	4911      	ldr	r1, [pc, #68]	; (8000678 <SCB_EnableDCache+0x84>)
 8000634:	4313      	orrs	r3, r2
 8000636:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	1e5a      	subs	r2, r3, #1
 800063e:	60ba      	str	r2, [r7, #8]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1ef      	bne.n	8000624 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	1e5a      	subs	r2, r3, #1
 8000648:	60fa      	str	r2, [r7, #12]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1e5      	bne.n	800061a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <SCB_EnableDCache+0x84>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <SCB_EnableDCache+0x84>)
 800065a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800065e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000660:	f3bf 8f4f 	dsb	sy
}
 8000664:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000666:	f3bf 8f6f 	isb	sy
}
 800066a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000680:	f000 f912 	bl	80008a8 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000684:	f7ff ff90 	bl	80005a8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000688:	f7ff ffb4 	bl	80005f4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f000 fbaa 	bl	8000de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f816 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 f8a6 	bl	80007e4 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000698:	f002 fffe 	bl	8003698 <MX_LWIP_Init>
  MX_TIM14_Init();
 800069c:	f000 f87e 	bl	800079c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  udpServer_init();
 80006a0:	f000 fb10 	bl	8000cc4 <udpServer_init>

  HAL_TIM_Base_Start_IT(&htim14);
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <main+0x3c>)
 80006a6:	f002 fd79 	bl	800319c <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ethernetif_input(&gnetif);
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <main+0x40>)
 80006ac:	f003 fbde 	bl	8003e6c <ethernetif_input>

	  sys_check_timeouts();
 80006b0:	f00a fcfc 	bl	800b0ac <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80006b4:	e7f9      	b.n	80006aa <main+0x2e>
 80006b6:	bf00      	nop
 80006b8:	20000220 	.word	0x20000220
 80006bc:	200002c0 	.word	0x200002c0

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f00d fe4e 	bl	800e370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <SystemClock_Config+0xd4>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a2a      	ldr	r2, [pc, #168]	; (8000794 <SystemClock_Config+0xd4>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <SystemClock_Config+0xd4>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <SystemClock_Config+0xd8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a25      	ldr	r2, [pc, #148]	; (8000798 <SystemClock_Config+0xd8>)
 8000702:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemClock_Config+0xd8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000714:	2301      	movs	r3, #1
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000722:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000728:	2319      	movs	r3, #25
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 800072c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000730:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000732:	2302      	movs	r3, #2
 8000734:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000736:	2302      	movs	r3, #2
 8000738:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	4618      	mov	r0, r3
 8000740:	f002 f83c 	bl	80027bc <HAL_RCC_OscConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800074a:	f000 f8f7 	bl	800093c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800074e:	f001 ffe5 	bl	800271c <HAL_PWREx_EnableOverDrive>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000758:	f000 f8f0 	bl	800093c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000768:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2107      	movs	r1, #7
 800077a:	4618      	mov	r0, r3
 800077c:	f002 fac2 	bl	8002d04 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000786:	f000 f8d9 	bl	800093c <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	; 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_TIM14_Init+0x40>)
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <MX_TIM14_Init+0x44>)
 80007a4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 21600-1;
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <MX_TIM14_Init+0x40>)
 80007a8:	f245 425f 	movw	r2, #21599	; 0x545f
 80007ac:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_TIM14_Init+0x40>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000 - 1;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_TIM14_Init+0x40>)
 80007b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007ba:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_TIM14_Init+0x40>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_TIM14_Init+0x40>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_TIM14_Init+0x40>)
 80007ca:	f002 fc8f 	bl	80030ec <HAL_TIM_Base_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80007d4:	f000 f8b2 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000220 	.word	0x20000220
 80007e0:	40002000 	.word	0x40002000

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_GPIO_Init+0xbc>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a28      	ldr	r2, [pc, #160]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a22      	ldr	r2, [pc, #136]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <MX_GPIO_Init+0xbc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a16      	ldr	r2, [pc, #88]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_GPIO_Init+0xbc>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2101      	movs	r1, #1
 8000876:	480b      	ldr	r0, [pc, #44]	; (80008a4 <MX_GPIO_Init+0xc0>)
 8000878:	f001 ff1c 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800087c:	2301      	movs	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_GPIO_Init+0xc0>)
 8000894:	f001 fd62 	bl	800235c <HAL_GPIO_Init>

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020400 	.word	0x40020400

080008a8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008ae:	463b      	mov	r3, r7
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008ba:	f000 fbcf 	bl	800105c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008be:	2301      	movs	r3, #1
 80008c0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20010000;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MPU_Config+0x58>)
 80008c8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80008ca:	230d      	movs	r3, #13
 80008cc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80008d6:	2303      	movs	r3, #3
 80008d8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008da:	2301      	movs	r3, #1
 80008dc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008de:	2301      	movs	r3, #1
 80008e0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008ea:	463b      	mov	r3, r7
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fbed 	bl	80010cc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008f2:	2004      	movs	r0, #4
 80008f4:	f000 fbca 	bl	800108c <HAL_MPU_Enable>

}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20010000 	.word	0x20010000

08000904 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000914:	d101      	bne.n	800091a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000916:	f000 fa7b 	bl	8000e10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim == &htim14)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a05      	ldr	r2, [pc, #20]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d103      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0x26>
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000922:	2101      	movs	r1, #1
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000926:	f001 fede 	bl	80026e6 <HAL_GPIO_TogglePin>
  }

  /* USER CODE END Callback 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000220 	.word	0x20000220
 8000938:	40020400 	.word	0x40020400

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_MspInit+0x44>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a0e      	ldr	r2, [pc, #56]	; (800098c <HAL_MspInit+0x44>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_MspInit+0x44>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_MspInit+0x44>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_MspInit+0x44>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_MspInit+0x44>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <HAL_TIM_Base_MspInit+0x44>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d113      	bne.n	80009ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <HAL_TIM_Base_MspInit+0x48>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <HAL_TIM_Base_MspInit+0x48>)
 80009a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <HAL_TIM_Base_MspInit+0x48>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	202d      	movs	r0, #45	; 0x2d
 80009c0:	f000 fb22 	bl	8001008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80009c4:	202d      	movs	r0, #45	; 0x2d
 80009c6:	f000 fb3b 	bl	8001040 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40002000 	.word	0x40002000
 80009d8:	40023800 	.word	0x40023800

080009dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08c      	sub	sp, #48	; 0x30
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	201c      	movs	r0, #28
 80009f2:	f000 fb09 	bl	8001008 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009f6:	201c      	movs	r0, #28
 80009f8:	f000 fb22 	bl	8001040 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80009fc:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <HAL_InitTick+0xa4>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a1f      	ldr	r2, [pc, #124]	; (8000a80 <HAL_InitTick+0xa4>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <HAL_InitTick+0xa4>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a14:	f107 0210 	add.w	r2, r7, #16
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f002 fb32 	bl	8003088 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a24:	f002 fb1c 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a30:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <HAL_InitTick+0xa8>)
 8000a32:	fba2 2303 	umull	r2, r3, r2, r3
 8000a36:	0c9b      	lsrs	r3, r3, #18
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0xac>)
 8000a3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_InitTick+0xac>)
 8000a46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a4a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000a4c:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_InitTick+0xac>)
 8000a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a50:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <HAL_InitTick+0xac>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <HAL_InitTick+0xac>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000a5e:	480a      	ldr	r0, [pc, #40]	; (8000a88 <HAL_InitTick+0xac>)
 8000a60:	f002 fb44 	bl	80030ec <HAL_TIM_Base_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d104      	bne.n	8000a74 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000a6a:	4807      	ldr	r0, [pc, #28]	; (8000a88 <HAL_InitTick+0xac>)
 8000a6c:	f002 fb96 	bl	800319c <HAL_TIM_Base_Start_IT>
 8000a70:	4603      	mov	r3, r0
 8000a72:	e000      	b.n	8000a76 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3730      	adds	r7, #48	; 0x30
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	431bde83 	.word	0x431bde83
 8000a88:	2000026c 	.word	0x2000026c

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <TIM2_IRQHandler+0x10>)
 8000aea:	f002 fbcf 	bl	800328c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000026c 	.word	0x2000026c

08000af8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000afe:	f002 fbc5 	bl	800328c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000220 	.word	0x20000220

08000b0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
	return 1;
 8000b10:	2301      	movs	r3, #1
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <_kill>:

int _kill(int pid, int sig)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <_kill+0x20>)
 8000b28:	2216      	movs	r2, #22
 8000b2a:	601a      	str	r2, [r3, #0]
	return -1;
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	20008b10 	.word	0x20008b10

08000b40 <_exit>:

void _exit (int status)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ffe5 	bl	8000b1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b52:	e7fe      	b.n	8000b52 <_exit+0x12>

08000b54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	e00a      	b.n	8000b7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b66:	f3af 8000 	nop.w
 8000b6a:	4601      	mov	r1, r0
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	60ba      	str	r2, [r7, #8]
 8000b72:	b2ca      	uxtb	r2, r1
 8000b74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	697a      	ldr	r2, [r7, #20]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dbf0      	blt.n	8000b66 <_read+0x12>
	}

return len;
 8000b84:	687b      	ldr	r3, [r7, #4]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	60f8      	str	r0, [r7, #12]
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	e009      	b.n	8000bb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	60ba      	str	r2, [r7, #8]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	dbf1      	blt.n	8000ba0 <_write+0x12>
	}
	return len;
 8000bbc:	687b      	ldr	r3, [r7, #4]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_close>:

int _close(int file)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
	return -1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bee:	605a      	str	r2, [r3, #4]
	return 0;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_isatty>:

int _isatty(int file)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
	return 1;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d205      	bcs.n	8000c6c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <_sbrk+0x6c>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	371c      	adds	r7, #28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	20050000 	.word	0x20050000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	20000094 	.word	0x20000094
 8000c98:	20008b20 	.word	0x20008b20
 8000c9c:	20008b10 	.word	0x20008b10

08000ca0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <SystemInit+0x20>)
 8000ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <SystemInit+0x20>)
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <udpServer_init>:
4. Process the datagram packet and send a reply to client.
5. Go back to Step 3.
*/

void udpServer_init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 8000cca:	f00a ff5d 	bl	800bb88 <udp_new>
 8000cce:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 192, 168, 2, 99);
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <udpServer_init+0x44>)
 8000cd2:	607b      	str	r3, [r7, #4]

   err = udp_bind(upcb, &myIPADDR, 7);  // 7 is the server UDP port
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2207      	movs	r2, #7
 8000cd8:	4619      	mov	r1, r3
 8000cda:	68f8      	ldr	r0, [r7, #12]
 8000cdc:	f00a fdd4 	bl	800b888 <udp_bind>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	72fb      	strb	r3, [r7, #11]

   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 8000ce4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d105      	bne.n	8000cf8 <udpServer_init+0x34>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 8000cec:	2200      	movs	r2, #0
 8000cee:	4907      	ldr	r1, [pc, #28]	; (8000d0c <udpServer_init+0x48>)
 8000cf0:	68f8      	ldr	r0, [r7, #12]
 8000cf2:	f00a fee7 	bl	800bac4 <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 8000cf6:	e002      	b.n	8000cfe <udpServer_init+0x3a>
	   udp_remove(upcb);
 8000cf8:	68f8      	ldr	r0, [r7, #12]
 8000cfa:	f00a ff03 	bl	800bb04 <udp_remove>
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	6302a8c0 	.word	0x6302a8c0
 8000d0c:	08000d11 	.word	0x08000d11

08000d10 <udp_receive_callback>:

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram packet and send a reply to client. */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0a0      	sub	sp, #128	; 0x80
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	603b      	str	r3, [r7, #0]
	struct pbuf *txBuf;

	/* Get the IP of the Client */
	char *remoteIP = ipaddr_ntoa(addr);
 8000d1e:	6838      	ldr	r0, [r7, #0]
 8000d20:	f00c fb2c 	bl	800d37c <ip4addr_ntoa>
 8000d24:	67f8      	str	r0, [r7, #124]	; 0x7c

	char buf[100];

	int len = sprintf (buf,"Hello %s From UDP SERVER\n", (char*)p->payload);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	4917      	ldr	r1, [pc, #92]	; (8000d8c <udp_receive_callback+0x7c>)
 8000d30:	4618      	mov	r0, r3
 8000d32:	f00d fb7d 	bl	800e430 <siprintf>
 8000d36:	67b8      	str	r0, [r7, #120]	; 0x78

	/* allocate pbuf from RAM*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 8000d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000d40:	4619      	mov	r1, r3
 8000d42:	2036      	movs	r0, #54	; 0x36
 8000d44:	f004 f93e 	bl	8004fc4 <pbuf_alloc>
 8000d48:	6778      	str	r0, [r7, #116]	; 0x74

	/* copy the data into the buffer  */
	pbuf_take(txBuf, buf, len);
 8000d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	4619      	mov	r1, r3
 8000d54:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000d56:	f004 fe85 	bl	8005a64 <pbuf_take>

	/* Connect to the remote client */
	udp_connect(upcb, addr, port);
 8000d5a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8000d5e:	461a      	mov	r2, r3
 8000d60:	6839      	ldr	r1, [r7, #0]
 8000d62:	68b8      	ldr	r0, [r7, #8]
 8000d64:	f00a fe18 	bl	800b998 <udp_connect>

	/* Send a Reply to the Client */
	udp_send(upcb, txBuf);
 8000d68:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000d6a:	68b8      	ldr	r0, [r7, #8]
 8000d6c:	f00a fba2 	bl	800b4b4 <udp_send>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb);
 8000d70:	68b8      	ldr	r0, [r7, #8]
 8000d72:	f00a fe7f 	bl	800ba74 <udp_disconnect>

	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 8000d76:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000d78:	f004 fc08 	bl	800558c <pbuf_free>

	/* Free the p buffer */
	pbuf_free(p);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f004 fc05 	bl	800558c <pbuf_free>
}
 8000d82:	bf00      	nop
 8000d84:	3780      	adds	r7, #128	; 0x80
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	0800f720 	.word	0x0800f720

08000d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d94:	480d      	ldr	r0, [pc, #52]	; (8000dcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d96:	490e      	ldr	r1, [pc, #56]	; (8000dd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d98:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dac:	4c0b      	ldr	r4, [pc, #44]	; (8000ddc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dba:	f7ff ff71 	bl	8000ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dbe:	f00d fa7d 	bl	800e2bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc2:	f7ff fc5b 	bl	800067c <main>
  bx  lr    
 8000dc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dc8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000dd4:	08012374 	.word	0x08012374
  ldr r2, =_sbss
 8000dd8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ddc:	20008b20 	.word	0x20008b20

08000de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC_IRQHandler>
	...

08000de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_Init+0x28>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_Init+0x28>)
 8000dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 f8fc 	bl	8000ff2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfa:	200f      	movs	r0, #15
 8000dfc:	f7ff fdee 	bl	80009dc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e00:	f7ff fda2 	bl	8000948 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008
 8000e34:	200002b8 	.word	0x200002b8

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	200002b8 	.word	0x200002b8

08000e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e58:	f7ff ffee 	bl	8000e38 <HAL_GetTick>
 8000e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e68:	d005      	beq.n	8000e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_Delay+0x44>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e76:	bf00      	nop
 8000e78:	f7ff ffde 	bl	8000e38 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d8f7      	bhi.n	8000e78 <HAL_Delay+0x28>
  {
  }
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008

08000e98 <__NVIC_SetPriorityGrouping>:
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x40>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00
 8000edc:	05fa0000 	.word	0x05fa0000

08000ee0 <__NVIC_GetPriorityGrouping>:
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	f003 0307 	and.w	r3, r3, #7
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_EnableIRQ>:
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	db0b      	blt.n	8000f26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f003 021f 	and.w	r2, r3, #31
 8000f14:	4907      	ldr	r1, [pc, #28]	; (8000f34 <__NVIC_EnableIRQ+0x38>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	095b      	lsrs	r3, r3, #5
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000e100 	.word	0xe000e100

08000f38 <__NVIC_SetPriority>:
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	db0a      	blt.n	8000f62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	490c      	ldr	r1, [pc, #48]	; (8000f84 <__NVIC_SetPriority+0x4c>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	0112      	lsls	r2, r2, #4
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f60:	e00a      	b.n	8000f78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4908      	ldr	r1, [pc, #32]	; (8000f88 <__NVIC_SetPriority+0x50>)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	f003 030f 	and.w	r3, r3, #15
 8000f6e:	3b04      	subs	r3, #4
 8000f70:	0112      	lsls	r2, r2, #4
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	440b      	add	r3, r1
 8000f76:	761a      	strb	r2, [r3, #24]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000e100 	.word	0xe000e100
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <NVIC_EncodePriority>:
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b089      	sub	sp, #36	; 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f1c3 0307 	rsb	r3, r3, #7
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	bf28      	it	cs
 8000faa:	2304      	movcs	r3, #4
 8000fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	2b06      	cmp	r3, #6
 8000fb4:	d902      	bls.n	8000fbc <NVIC_EncodePriority+0x30>
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3b03      	subs	r3, #3
 8000fba:	e000      	b.n	8000fbe <NVIC_EncodePriority+0x32>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	401a      	ands	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	43d9      	mvns	r1, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	4313      	orrs	r3, r2
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3724      	adds	r7, #36	; 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ff4c 	bl	8000e98 <__NVIC_SetPriorityGrouping>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800101a:	f7ff ff61 	bl	8000ee0 <__NVIC_GetPriorityGrouping>
 800101e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	6978      	ldr	r0, [r7, #20]
 8001026:	f7ff ffb1 	bl	8000f8c <NVIC_EncodePriority>
 800102a:	4602      	mov	r2, r0
 800102c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001030:	4611      	mov	r1, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ff80 	bl	8000f38 <__NVIC_SetPriority>
}
 8001038:	bf00      	nop
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff54 	bl	8000efc <__NVIC_EnableIRQ>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001060:	f3bf 8f5f 	dmb	sy
}
 8001064:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <HAL_MPU_Disable+0x28>)
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	4a06      	ldr	r2, [pc, #24]	; (8001084 <HAL_MPU_Disable+0x28>)
 800106c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001070:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <HAL_MPU_Disable+0x2c>)
 8001074:	2200      	movs	r2, #0
 8001076:	605a      	str	r2, [r3, #4]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00
 8001088:	e000ed90 	.word	0xe000ed90

0800108c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001094:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <HAL_MPU_Enable+0x38>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_MPU_Enable+0x3c>)
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <HAL_MPU_Enable+0x3c>)
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80010aa:	f3bf 8f4f 	dsb	sy
}
 80010ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010b0:	f3bf 8f6f 	isb	sy
}
 80010b4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000ed90 	.word	0xe000ed90
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	785a      	ldrb	r2, [r3, #1]
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_MPU_ConfigRegion+0x84>)
 80010da:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d029      	beq.n	8001138 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80010e4:	4a1a      	ldr	r2, [pc, #104]	; (8001150 <HAL_MPU_ConfigRegion+0x84>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7b1b      	ldrb	r3, [r3, #12]
 80010f0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7adb      	ldrb	r3, [r3, #11]
 80010f6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7a9b      	ldrb	r3, [r3, #10]
 80010fe:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001100:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7b5b      	ldrb	r3, [r3, #13]
 8001106:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001108:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7b9b      	ldrb	r3, [r3, #14]
 800110e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001110:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7bdb      	ldrb	r3, [r3, #15]
 8001116:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001118:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7a5b      	ldrb	r3, [r3, #9]
 800111e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001120:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7a1b      	ldrb	r3, [r3, #8]
 8001126:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001128:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	7812      	ldrb	r2, [r2, #0]
 800112e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001132:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001134:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001136:	e005      	b.n	8001144 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_MPU_ConfigRegion+0x84>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <HAL_MPU_ConfigRegion+0x84>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed90 	.word	0xe000ed90

08001154 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001164:	4ba9      	ldr	r3, [pc, #676]	; (800140c <HAL_ETH_Init+0x2b8>)
 8001166:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e181      	b.n	800147e <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d106      	bne.n	8001194 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f002 fbb4 	bl	80038fc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001194:	4b9e      	ldr	r3, [pc, #632]	; (8001410 <HAL_ETH_Init+0x2bc>)
 8001196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001198:	4a9d      	ldr	r2, [pc, #628]	; (8001410 <HAL_ETH_Init+0x2bc>)
 800119a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119e:	6453      	str	r3, [r2, #68]	; 0x44
 80011a0:	4b9b      	ldr	r3, [pc, #620]	; (8001410 <HAL_ETH_Init+0x2bc>)
 80011a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011ac:	4b99      	ldr	r3, [pc, #612]	; (8001414 <HAL_ETH_Init+0x2c0>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4a98      	ldr	r2, [pc, #608]	; (8001414 <HAL_ETH_Init+0x2c0>)
 80011b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011b6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011b8:	4b96      	ldr	r3, [pc, #600]	; (8001414 <HAL_ETH_Init+0x2c0>)
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	4994      	ldr	r1, [pc, #592]	; (8001414 <HAL_ETH_Init+0x2c0>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 0201 	orr.w	r2, r2, #1
 80011d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011dc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80011de:	f7ff fe2b 	bl	8000e38 <HAL_GetTick>
 80011e2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011e4:	e011      	b.n	800120a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80011e6:	f7ff fe27 	bl	8000e38 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011f4:	d909      	bls.n	800120a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2203      	movs	r2, #3
 80011fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e139      	b.n	800147e <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1e4      	bne.n	80011e6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f023 031c 	bic.w	r3, r3, #28
 800122a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800122c:	f001 ff0c 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8001230:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	4a78      	ldr	r2, [pc, #480]	; (8001418 <HAL_ETH_Init+0x2c4>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d908      	bls.n	800124c <HAL_ETH_Init+0xf8>
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	4a77      	ldr	r2, [pc, #476]	; (800141c <HAL_ETH_Init+0x2c8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d804      	bhi.n	800124c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	f043 0308 	orr.w	r3, r3, #8
 8001248:	61fb      	str	r3, [r7, #28]
 800124a:	e027      	b.n	800129c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	4a73      	ldr	r2, [pc, #460]	; (800141c <HAL_ETH_Init+0x2c8>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d908      	bls.n	8001266 <HAL_ETH_Init+0x112>
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	4a6d      	ldr	r2, [pc, #436]	; (800140c <HAL_ETH_Init+0x2b8>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d204      	bcs.n	8001266 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f043 030c 	orr.w	r3, r3, #12
 8001262:	61fb      	str	r3, [r7, #28]
 8001264:	e01a      	b.n	800129c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4a68      	ldr	r2, [pc, #416]	; (800140c <HAL_ETH_Init+0x2b8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d303      	bcc.n	8001276 <HAL_ETH_Init+0x122>
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	4a6b      	ldr	r2, [pc, #428]	; (8001420 <HAL_ETH_Init+0x2cc>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d911      	bls.n	800129a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	4a69      	ldr	r2, [pc, #420]	; (8001420 <HAL_ETH_Init+0x2cc>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d908      	bls.n	8001290 <HAL_ETH_Init+0x13c>
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	4a68      	ldr	r2, [pc, #416]	; (8001424 <HAL_ETH_Init+0x2d0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d804      	bhi.n	8001290 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	61fb      	str	r3, [r7, #28]
 800128e:	e005      	b.n	800129c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f043 0310 	orr.w	r3, r3, #16
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	e000      	b.n	800129c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800129a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	69fa      	ldr	r2, [r7, #28]
 80012a2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80012a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012a8:	2100      	movs	r1, #0
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fb98 	bl	80019e0 <HAL_ETH_WritePHYRegister>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00b      	beq.n	80012ce <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80012ba:	6939      	ldr	r1, [r7, #16]
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fd4d 	bl	8001d5c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e0d7      	b.n	800147e <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80012ce:	20ff      	movs	r0, #255	; 0xff
 80012d0:	f7ff fdbe 	bl	8000e50 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80a5 	beq.w	8001428 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80012de:	f7ff fdab 	bl	8000e38 <HAL_GetTick>
 80012e2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	461a      	mov	r2, r3
 80012ea:	2101      	movs	r1, #1
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 fb0f 	bl	8001910 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80012f2:	f7ff fda1 	bl	8000e38 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001300:	4293      	cmp	r3, r2
 8001302:	d90f      	bls.n	8001324 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001308:	6939      	ldr	r1, [r7, #16]
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 fd26 	bl	8001d5c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e0ac      	b.n	800147e <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0da      	beq.n	80012e4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800132e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001332:	2100      	movs	r1, #0
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 fb53 	bl	80019e0 <HAL_ETH_WritePHYRegister>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00b      	beq.n	8001358 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001344:	6939      	ldr	r1, [r7, #16]
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 fd08 	bl	8001d5c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001354:	2301      	movs	r3, #1
 8001356:	e092      	b.n	800147e <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001358:	f7ff fd6e 	bl	8000e38 <HAL_GetTick>
 800135c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	461a      	mov	r2, r3
 8001364:	2101      	movs	r1, #1
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 fad2 	bl	8001910 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800136c:	f7ff fd64 	bl	8000e38 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f241 3288 	movw	r2, #5000	; 0x1388
 800137a:	4293      	cmp	r3, r2
 800137c:	d90f      	bls.n	800139e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001382:	6939      	ldr	r1, [r7, #16]
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 fce9 	bl	8001d5c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e06f      	b.n	800147e <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f003 0320 	and.w	r3, r3, #32
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0da      	beq.n	800135e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	461a      	mov	r2, r3
 80013ae:	2110      	movs	r1, #16
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 faad 	bl	8001910 <HAL_ETH_ReadPHYRegister>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00b      	beq.n	80013d4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013c0:	6939      	ldr	r1, [r7, #16]
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 fcca 	bl	8001d5c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013d0:	2301      	movs	r3, #1
 80013d2:	e054      	b.n	800147e <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d004      	beq.n	80013e8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	e002      	b.n	80013ee <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	e035      	b.n	800146c <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	e030      	b.n	800146c <HAL_ETH_Init+0x318>
 800140a:	bf00      	nop
 800140c:	03938700 	.word	0x03938700
 8001410:	40023800 	.word	0x40023800
 8001414:	40013800 	.word	0x40013800
 8001418:	01312cff 	.word	0x01312cff
 800141c:	02160ebf 	.word	0x02160ebf
 8001420:	05f5e0ff 	.word	0x05f5e0ff
 8001424:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	08db      	lsrs	r3, r3, #3
 800142e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	085b      	lsrs	r3, r3, #1
 8001436:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001438:	4313      	orrs	r3, r2
 800143a:	b29b      	uxth	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	2100      	movs	r1, #0
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 facd 	bl	80019e0 <HAL_ETH_WritePHYRegister>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00b      	beq.n	8001464 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001450:	6939      	ldr	r1, [r7, #16]
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 fc82 	bl	8001d5c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e00c      	b.n	800147e <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001464:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001468:	f7ff fcf2 	bl	8000e50 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800146c:	6939      	ldr	r1, [r7, #16]
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 fc74 	bl	8001d5c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3720      	adds	r7, #32
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop

08001488 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <HAL_ETH_DMATxDescListInit+0x20>
 80014a4:	2302      	movs	r3, #2
 80014a6:	e052      	b.n	800154e <HAL_ETH_DMATxDescListInit+0xc6>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2202      	movs	r2, #2
 80014b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e030      	b.n	8001526 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	015b      	lsls	r3, r3, #5
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	4413      	add	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014d4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014dc:	fb02 f303 	mul.w	r3, r2, r3
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	4413      	add	r3, r2
 80014e4:	461a      	mov	r2, r3
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d105      	bne.n	80014fe <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	3b01      	subs	r3, #1
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	429a      	cmp	r2, r3
 8001506:	d208      	bcs.n	800151a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	3301      	adds	r3, #1
 800150c:	015b      	lsls	r3, r3, #5
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	4413      	add	r3, r2
 8001512:	461a      	mov	r2, r3
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	e002      	b.n	8001520 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3301      	adds	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d3ca      	bcc.n	80014c4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6819      	ldr	r1, [r3, #0]
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f241 0310 	movw	r3, #4112	; 0x1010
 8001538:	440b      	add	r3, r1
 800153a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800155a:	b480      	push	{r7}
 800155c:	b087      	sub	sp, #28
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001572:	2b01      	cmp	r3, #1
 8001574:	d101      	bne.n	800157a <HAL_ETH_DMARxDescListInit+0x20>
 8001576:	2302      	movs	r3, #2
 8001578:	e056      	b.n	8001628 <HAL_ETH_DMARxDescListInit+0xce>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2202      	movs	r2, #2
 8001586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	e034      	b.n	8001600 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	015b      	lsls	r3, r3, #5
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	4413      	add	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015a6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80015ae:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015b6:	fb02 f303 	mul.w	r3, r2, r3
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	461a      	mov	r2, r3
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	3b01      	subs	r3, #1
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d208      	bcs.n	80015f4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3301      	adds	r3, #1
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	4413      	add	r3, r2
 80015ec:	461a      	mov	r2, r3
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	e002      	b.n	80015fa <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	3301      	adds	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d3c6      	bcc.n	8001596 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6819      	ldr	r1, [r3, #0]
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	f241 030c 	movw	r3, #4108	; 0x100c
 8001612:	440b      	add	r3, r1
 8001614:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001634:	b480      	push	{r7}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <HAL_ETH_TransmitFrame+0x24>
 8001654:	2302      	movs	r3, #2
 8001656:	e0cd      	b.n	80017f4 <HAL_ETH_TransmitFrame+0x1c0>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2202      	movs	r2, #2
 8001664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d109      	bne.n	8001682 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800167e:	2301      	movs	r3, #1
 8001680:	e0b8      	b.n	80017f4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	da09      	bge.n	80016a0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2212      	movs	r2, #18
 8001690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0a9      	b.n	80017f4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d915      	bls.n	80016d6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	4a54      	ldr	r2, [pc, #336]	; (8001800 <HAL_ETH_TransmitFrame+0x1cc>)
 80016ae:	fba2 2303 	umull	r2, r3, r2, r3
 80016b2:	0a9b      	lsrs	r3, r3, #10
 80016b4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	4b51      	ldr	r3, [pc, #324]	; (8001800 <HAL_ETH_TransmitFrame+0x1cc>)
 80016ba:	fba3 1302 	umull	r1, r3, r3, r2
 80016be:	0a9b      	lsrs	r3, r3, #10
 80016c0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80016c4:	fb01 f303 	mul.w	r3, r1, r3
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3301      	adds	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	e001      	b.n	80016da <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80016d6:	2301      	movs	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d11c      	bne.n	800171a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80016ee:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80016fa:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800170a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	461a      	mov	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	62da      	str	r2, [r3, #44]	; 0x2c
 8001718:	e04b      	b.n	80017b2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	e044      	b.n	80017aa <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800172e:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d107      	bne.n	8001746 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001744:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800174e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	3b01      	subs	r3, #1
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	429a      	cmp	r2, r3
 8001758:	d116      	bne.n	8001788 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001764:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001768:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	4a25      	ldr	r2, [pc, #148]	; (8001804 <HAL_ETH_TransmitFrame+0x1d0>)
 800176e:	fb02 f203 	mul.w	r2, r2, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	4413      	add	r3, r2
 8001776:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800177a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001786:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001796:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	461a      	mov	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	3301      	adds	r3, #1
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d3b6      	bcc.n	8001720 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f241 0314 	movw	r3, #4116	; 0x1014
 80017ba:	4413      	add	r3, r2
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00d      	beq.n	80017e2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	f241 0314 	movw	r3, #4116	; 0x1014
 80017ce:	4413      	add	r3, r2
 80017d0:	2204      	movs	r2, #4
 80017d2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	f241 0304 	movw	r3, #4100	; 0x1004
 80017dc:	4413      	add	r3, r2
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	371c      	adds	r7, #28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	ac02b00b 	.word	0xac02b00b
 8001804:	fffffa0c 	.word	0xfffffa0c

08001808 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800181a:	2b01      	cmp	r3, #1
 800181c:	d101      	bne.n	8001822 <HAL_ETH_GetReceivedFrame+0x1a>
 800181e:	2302      	movs	r3, #2
 8001820:	e070      	b.n	8001904 <HAL_ETH_GetReceivedFrame+0xfc>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2202      	movs	r2, #2
 800182e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db5a      	blt.n	80018f2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001846:	2b00      	cmp	r3, #0
 8001848:	d030      	beq.n	80018ac <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001858:	2b01      	cmp	r3, #1
 800185a:	d103      	bne.n	8001864 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	0c1b      	lsrs	r3, r3, #16
 8001874:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001878:	3b04      	subs	r3, #4
 800187a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	461a      	mov	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	e02b      	b.n	8001904 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d010      	beq.n	80018dc <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	461a      	mov	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
 80018da:	e00a      	b.n	80018f2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	461a      	mov	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	460b      	mov	r3, r1
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b82      	cmp	r3, #130	; 0x82
 8001930:	d101      	bne.n	8001936 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001932:	2302      	movs	r3, #2
 8001934:	e050      	b.n	80019d8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2282      	movs	r2, #130	; 0x82
 800193a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f003 031c 	and.w	r3, r3, #28
 800194c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8a1b      	ldrh	r3, [r3, #16]
 8001952:	02db      	lsls	r3, r3, #11
 8001954:	b29b      	uxth	r3, r3
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4313      	orrs	r3, r2
 800195a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800195c:	897b      	ldrh	r3, [r7, #10]
 800195e:	019b      	lsls	r3, r3, #6
 8001960:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	4313      	orrs	r3, r2
 8001968:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f023 0302 	bic.w	r3, r3, #2
 8001970:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001982:	f7ff fa59 	bl	8000e38 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001988:	e015      	b.n	80019b6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800198a:	f7ff fa55 	bl	8000e38 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001998:	d309      	bcc.n	80019ae <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e014      	b.n	80019d8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1e4      	bne.n	800198a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	461a      	mov	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	460b      	mov	r3, r1
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b42      	cmp	r3, #66	; 0x42
 8001a00:	d101      	bne.n	8001a06 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a02:	2302      	movs	r3, #2
 8001a04:	e04e      	b.n	8001aa4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2242      	movs	r2, #66	; 0x42
 8001a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 031c 	and.w	r3, r3, #28
 8001a1c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8a1b      	ldrh	r3, [r3, #16]
 8001a22:	02db      	lsls	r3, r3, #11
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001a2c:	897b      	ldrh	r3, [r7, #10]
 8001a2e:	019b      	lsls	r3, r3, #6
 8001a30:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a5c:	f7ff f9ec 	bl	8000e38 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a62:	e015      	b.n	8001a90 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001a64:	f7ff f9e8 	bl	8000e38 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a72:	d309      	bcc.n	8001a88 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e00d      	b.n	8001aa4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1e4      	bne.n	8001a64 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_ETH_Start+0x16>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e01f      	b.n	8001b02 <HAL_ETH_Start+0x56>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2202      	movs	r2, #2
 8001ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 fb44 	bl	8002160 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 fb7b 	bl	80021d4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 fc12 	bl	8002308 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 fbaf 	bl	8002248 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 fbdc 	bl	80022a8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_ETH_Stop+0x16>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e01f      	b.n	8001b60 <HAL_ETH_Stop+0x56>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 fba1 	bl	8002278 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 fbce 	bl	80022d8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 fb66 	bl	800220e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 fbe0 	bl	8002308 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 fb26 	bl	800219a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_ETH_ConfigMAC+0x1c>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e0e4      	b.n	8001d4e <HAL_ETH_ConfigMAC+0x1e6>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 80b1 	beq.w	8001cfe <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4b6c      	ldr	r3, [pc, #432]	; (8001d58 <HAL_ETH_ConfigMAC+0x1f0>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001bb4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001bba:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001bc0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001bc6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001bcc:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001bd2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001bd8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001bde:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001be4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001bea:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001bf0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001bf6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f7ff f91e 	bl	8000e50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c24:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001c2a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001c30:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001c36:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001c3c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001c42:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001c4e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c50:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f7ff f8f8 	bl	8000e50 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c70:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c7a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c92:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001c98:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001c9e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001ca4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001caa:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001cb0:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f7ff f8c1 	bl	8000e50 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f7ff f8ae 	bl	8000e50 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	61da      	str	r2, [r3, #28]
 8001cfc:	e01e      	b.n	8001d3c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001d0c:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f7ff f88e 	bl	8000e50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	ff20810f 	.word	0xff20810f

08001d5c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b0b0      	sub	sp, #192	; 0xc0
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d007      	beq.n	8001d82 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d78:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d80:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d103      	bne.n	8001daa <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da6:	663b      	str	r3, [r7, #96]	; 0x60
 8001da8:	e001      	b.n	8001dae <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001dae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001db2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001db8:	2300      	movs	r3, #0
 8001dba:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001dc8:	2340      	movs	r3, #64	; 0x40
 8001dca:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001e30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e34:	4bab      	ldr	r3, [pc, #684]	; (80020e4 <ETH_MACDMAConfig+0x388>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001e3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001e40:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001e44:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001e48:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001e4e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001e50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001e52:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001e56:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001e5c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001e60:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001e62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001e64:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001e66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001e68:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001e6c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001e70:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001e72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e76:	4313      	orrs	r3, r2
 8001e78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e84:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e90:	2001      	movs	r0, #1
 8001e92:	f7fe ffdd 	bl	8000e50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e9e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ea0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001ea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ea4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001ea6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001ea8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001eaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001eae:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001eb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001eb4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001eb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001eba:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001ec0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001ec4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001ecc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ece:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eda:	2001      	movs	r0, #1
 8001edc:	f7fe ffb8 	bl	8000e50 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ee8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ef2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001efc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001f08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f0c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f10:	4013      	ands	r3, r2
 8001f12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001f16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f1a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001f1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001f20:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001f22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001f26:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001f28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001f2c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001f32:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001f34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001f38:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001f3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f4c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f58:	2001      	movs	r0, #1
 8001f5a:	f7fe ff79 	bl	8000e50 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f66:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f68:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001f6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f82:	2001      	movs	r0, #1
 8001f84:	f7fe ff64 	bl	8000e50 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f90:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f9a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001fa0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fa4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001fba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001fc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fc4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fca:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fd0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fe6:	4413      	add	r3, r2
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001fee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	; (80020e8 <ETH_MACDMAConfig+0x38c>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001ffa:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001ffe:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002000:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002002:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002004:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002006:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002008:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800200a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800200c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800200e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002010:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002012:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002016:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002018:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800201a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800201c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002020:	4313      	orrs	r3, r2
 8002022:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	f241 0318 	movw	r3, #4120	; 0x1018
 800202e:	4413      	add	r3, r2
 8002030:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002034:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	f241 0318 	movw	r3, #4120	; 0x1018
 800203e:	4413      	add	r3, r2
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002046:	2001      	movs	r0, #1
 8002048:	f7fe ff02 	bl	8000e50 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	f241 0318 	movw	r3, #4120	; 0x1018
 8002054:	4413      	add	r3, r2
 8002056:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800205a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800205c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800205e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002060:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002064:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002068:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800206a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800206c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800206e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002070:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002072:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002076:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002084:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002094:	2001      	movs	r0, #1
 8002096:	f7fe fedb 	bl	8000e50 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020a6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d10d      	bne.n	80020cc <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	f241 031c 	movw	r3, #4124	; 0x101c
 80020b8:	4413      	add	r3, r2
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6811      	ldr	r1, [r2, #0]
 80020c0:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <ETH_MACDMAConfig+0x390>)
 80020c2:	431a      	orrs	r2, r3
 80020c4:	f241 031c 	movw	r3, #4124	; 0x101c
 80020c8:	440b      	add	r3, r1
 80020ca:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	461a      	mov	r2, r3
 80020d2:	2100      	movs	r1, #0
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f80b 	bl	80020f0 <ETH_MACAddressConfig>
}
 80020da:	bf00      	nop
 80020dc:	37c0      	adds	r7, #192	; 0xc0
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	ff20810f 	.word	0xff20810f
 80020e8:	f8de3f23 	.word	0xf8de3f23
 80020ec:	00010040 	.word	0x00010040

080020f0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3305      	adds	r3, #5
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	3204      	adds	r2, #4
 8002108:	7812      	ldrb	r2, [r2, #0]
 800210a:	4313      	orrs	r3, r2
 800210c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <ETH_MACAddressConfig+0x68>)
 8002112:	4413      	add	r3, r2
 8002114:	461a      	mov	r2, r3
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3303      	adds	r3, #3
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	061a      	lsls	r2, r3, #24
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3302      	adds	r3, #2
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	041b      	lsls	r3, r3, #16
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3301      	adds	r3, #1
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	4313      	orrs	r3, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	7812      	ldrb	r2, [r2, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <ETH_MACAddressConfig+0x6c>)
 8002142:	4413      	add	r3, r2
 8002144:	461a      	mov	r2, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	6013      	str	r3, [r2, #0]
}
 800214a:	bf00      	nop
 800214c:	371c      	adds	r7, #28
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40028040 	.word	0x40028040
 800215c:	40028044 	.word	0x40028044

08002160 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0208 	orr.w	r2, r2, #8
 800217a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002184:	2001      	movs	r0, #1
 8002186:	f7fe fe63 	bl	8000e50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	601a      	str	r2, [r3, #0]
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0208 	bic.w	r2, r2, #8
 80021b4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021be:	2001      	movs	r0, #1
 80021c0:	f7fe fe46 	bl	8000e50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	601a      	str	r2, [r3, #0]
}
 80021cc:	bf00      	nop
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0204 	orr.w	r2, r2, #4
 80021ee:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021f8:	2001      	movs	r0, #1
 80021fa:	f7fe fe29 	bl	8000e50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	601a      	str	r2, [r3, #0]
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0204 	bic.w	r2, r2, #4
 8002228:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002232:	2001      	movs	r0, #1
 8002234:	f7fe fe0c 	bl	8000e50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	601a      	str	r2, [r3, #0]
}
 8002240:	bf00      	nop
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	f241 0318 	movw	r3, #4120	; 0x1018
 8002258:	4413      	add	r3, r2
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6811      	ldr	r1, [r2, #0]
 8002260:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002264:	f241 0318 	movw	r3, #4120	; 0x1018
 8002268:	440b      	add	r3, r1
 800226a:	601a      	str	r2, [r3, #0]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	f241 0318 	movw	r3, #4120	; 0x1018
 8002288:	4413      	add	r3, r2
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6811      	ldr	r1, [r2, #0]
 8002290:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002294:	f241 0318 	movw	r3, #4120	; 0x1018
 8002298:	440b      	add	r3, r1
 800229a:	601a      	str	r2, [r3, #0]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	f241 0318 	movw	r3, #4120	; 0x1018
 80022b8:	4413      	add	r3, r2
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6811      	ldr	r1, [r2, #0]
 80022c0:	f043 0202 	orr.w	r2, r3, #2
 80022c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80022c8:	440b      	add	r3, r1
 80022ca:	601a      	str	r2, [r3, #0]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	f241 0318 	movw	r3, #4120	; 0x1018
 80022e8:	4413      	add	r3, r2
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6811      	ldr	r1, [r2, #0]
 80022f0:	f023 0202 	bic.w	r2, r3, #2
 80022f4:	f241 0318 	movw	r3, #4120	; 0x1018
 80022f8:	440b      	add	r3, r1
 80022fa:	601a      	str	r2, [r3, #0]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	f241 0318 	movw	r3, #4120	; 0x1018
 800231c:	4413      	add	r3, r2
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6811      	ldr	r1, [r2, #0]
 8002324:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002328:	f241 0318 	movw	r3, #4120	; 0x1018
 800232c:	440b      	add	r3, r1
 800232e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	f241 0318 	movw	r3, #4120	; 0x1018
 8002338:	4413      	add	r3, r2
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800233e:	2001      	movs	r0, #1
 8002340:	f7fe fd86 	bl	8000e50 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6819      	ldr	r1, [r3, #0]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	f241 0318 	movw	r3, #4120	; 0x1018
 800234e:	440b      	add	r3, r1
 8002350:	601a      	str	r2, [r3, #0]
}
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	e175      	b.n	8002668 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800237c:	2201      	movs	r2, #1
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	429a      	cmp	r2, r3
 8002396:	f040 8164 	bne.w	8002662 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d00b      	beq.n	80023ba <HAL_GPIO_Init+0x5e>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d007      	beq.n	80023ba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023ae:	2b11      	cmp	r3, #17
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b12      	cmp	r3, #18
 80023b8:	d130      	bne.n	800241c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	2203      	movs	r2, #3
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023f0:	2201      	movs	r2, #1
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 0201 	and.w	r2, r3, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x100>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b12      	cmp	r3, #18
 800245a:	d123      	bne.n	80024a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	08da      	lsrs	r2, r3, #3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3208      	adds	r2, #8
 8002464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	220f      	movs	r2, #15
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	08da      	lsrs	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3208      	adds	r2, #8
 800249e:	69b9      	ldr	r1, [r7, #24]
 80024a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	2203      	movs	r2, #3
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0203 	and.w	r2, r3, #3
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80be 	beq.w	8002662 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e6:	4b66      	ldr	r3, [pc, #408]	; (8002680 <HAL_GPIO_Init+0x324>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	4a65      	ldr	r2, [pc, #404]	; (8002680 <HAL_GPIO_Init+0x324>)
 80024ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f0:	6453      	str	r3, [r2, #68]	; 0x44
 80024f2:	4b63      	ldr	r3, [pc, #396]	; (8002680 <HAL_GPIO_Init+0x324>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024fe:	4a61      	ldr	r2, [pc, #388]	; (8002684 <HAL_GPIO_Init+0x328>)
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	089b      	lsrs	r3, r3, #2
 8002504:	3302      	adds	r3, #2
 8002506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	220f      	movs	r2, #15
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a58      	ldr	r2, [pc, #352]	; (8002688 <HAL_GPIO_Init+0x32c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d037      	beq.n	800259a <HAL_GPIO_Init+0x23e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a57      	ldr	r2, [pc, #348]	; (800268c <HAL_GPIO_Init+0x330>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d031      	beq.n	8002596 <HAL_GPIO_Init+0x23a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a56      	ldr	r2, [pc, #344]	; (8002690 <HAL_GPIO_Init+0x334>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d02b      	beq.n	8002592 <HAL_GPIO_Init+0x236>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a55      	ldr	r2, [pc, #340]	; (8002694 <HAL_GPIO_Init+0x338>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d025      	beq.n	800258e <HAL_GPIO_Init+0x232>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a54      	ldr	r2, [pc, #336]	; (8002698 <HAL_GPIO_Init+0x33c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d01f      	beq.n	800258a <HAL_GPIO_Init+0x22e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a53      	ldr	r2, [pc, #332]	; (800269c <HAL_GPIO_Init+0x340>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d019      	beq.n	8002586 <HAL_GPIO_Init+0x22a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a52      	ldr	r2, [pc, #328]	; (80026a0 <HAL_GPIO_Init+0x344>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <HAL_GPIO_Init+0x226>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a51      	ldr	r2, [pc, #324]	; (80026a4 <HAL_GPIO_Init+0x348>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00d      	beq.n	800257e <HAL_GPIO_Init+0x222>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a50      	ldr	r2, [pc, #320]	; (80026a8 <HAL_GPIO_Init+0x34c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d007      	beq.n	800257a <HAL_GPIO_Init+0x21e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4f      	ldr	r2, [pc, #316]	; (80026ac <HAL_GPIO_Init+0x350>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d101      	bne.n	8002576 <HAL_GPIO_Init+0x21a>
 8002572:	2309      	movs	r3, #9
 8002574:	e012      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002576:	230a      	movs	r3, #10
 8002578:	e010      	b.n	800259c <HAL_GPIO_Init+0x240>
 800257a:	2308      	movs	r3, #8
 800257c:	e00e      	b.n	800259c <HAL_GPIO_Init+0x240>
 800257e:	2307      	movs	r3, #7
 8002580:	e00c      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002582:	2306      	movs	r3, #6
 8002584:	e00a      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002586:	2305      	movs	r3, #5
 8002588:	e008      	b.n	800259c <HAL_GPIO_Init+0x240>
 800258a:	2304      	movs	r3, #4
 800258c:	e006      	b.n	800259c <HAL_GPIO_Init+0x240>
 800258e:	2303      	movs	r3, #3
 8002590:	e004      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002592:	2302      	movs	r3, #2
 8002594:	e002      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <HAL_GPIO_Init+0x240>
 800259a:	2300      	movs	r3, #0
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	f002 0203 	and.w	r2, r2, #3
 80025a2:	0092      	lsls	r2, r2, #2
 80025a4:	4093      	lsls	r3, r2
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025ac:	4935      	ldr	r1, [pc, #212]	; (8002684 <HAL_GPIO_Init+0x328>)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	089b      	lsrs	r3, r3, #2
 80025b2:	3302      	adds	r3, #2
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ba:	4b3d      	ldr	r3, [pc, #244]	; (80026b0 <HAL_GPIO_Init+0x354>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025de:	4a34      	ldr	r2, [pc, #208]	; (80026b0 <HAL_GPIO_Init+0x354>)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025e4:	4b32      	ldr	r3, [pc, #200]	; (80026b0 <HAL_GPIO_Init+0x354>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002608:	4a29      	ldr	r2, [pc, #164]	; (80026b0 <HAL_GPIO_Init+0x354>)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800260e:	4b28      	ldr	r3, [pc, #160]	; (80026b0 <HAL_GPIO_Init+0x354>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002632:	4a1f      	ldr	r2, [pc, #124]	; (80026b0 <HAL_GPIO_Init+0x354>)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_GPIO_Init+0x354>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800265c:	4a14      	ldr	r2, [pc, #80]	; (80026b0 <HAL_GPIO_Init+0x354>)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3301      	adds	r3, #1
 8002666:	61fb      	str	r3, [r7, #28]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	2b0f      	cmp	r3, #15
 800266c:	f67f ae86 	bls.w	800237c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3724      	adds	r7, #36	; 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	40013800 	.word	0x40013800
 8002688:	40020000 	.word	0x40020000
 800268c:	40020400 	.word	0x40020400
 8002690:	40020800 	.word	0x40020800
 8002694:	40020c00 	.word	0x40020c00
 8002698:	40021000 	.word	0x40021000
 800269c:	40021400 	.word	0x40021400
 80026a0:	40021800 	.word	0x40021800
 80026a4:	40021c00 	.word	0x40021c00
 80026a8:	40022000 	.word	0x40022000
 80026ac:	40022400 	.word	0x40022400
 80026b0:	40013c00 	.word	0x40013c00

080026b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	807b      	strh	r3, [r7, #2]
 80026c0:	4613      	mov	r3, r2
 80026c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026c4:	787b      	ldrb	r3, [r7, #1]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ca:	887a      	ldrh	r2, [r7, #2]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026d0:	e003      	b.n	80026da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026d2:	887b      	ldrh	r3, [r7, #2]
 80026d4:	041a      	lsls	r2, r3, #16
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	619a      	str	r2, [r3, #24]
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b085      	sub	sp, #20
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	460b      	mov	r3, r1
 80026f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026f8:	887a      	ldrh	r2, [r7, #2]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4013      	ands	r3, r2
 80026fe:	041a      	lsls	r2, r3, #16
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	43d9      	mvns	r1, r3
 8002704:	887b      	ldrh	r3, [r7, #2]
 8002706:	400b      	ands	r3, r1
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	619a      	str	r2, [r3, #24]
}
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	4b23      	ldr	r3, [pc, #140]	; (80027b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a22      	ldr	r2, [pc, #136]	; (80027b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800273e:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1d      	ldr	r2, [pc, #116]	; (80027b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800274a:	f7fe fb75 	bl	8000e38 <HAL_GetTick>
 800274e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002750:	e009      	b.n	8002766 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002752:	f7fe fb71 	bl	8000e38 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002760:	d901      	bls.n	8002766 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e022      	b.n	80027ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002766:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002772:	d1ee      	bne.n	8002752 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002774:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0f      	ldr	r2, [pc, #60]	; (80027b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800277a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002780:	f7fe fb5a 	bl	8000e38 <HAL_GetTick>
 8002784:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002786:	e009      	b.n	800279c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002788:	f7fe fb56 	bl	8000e38 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002796:	d901      	bls.n	800279c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e007      	b.n	80027ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027a8:	d1ee      	bne.n	8002788 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40007000 	.word	0x40007000

080027bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80027c4:	2300      	movs	r3, #0
 80027c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e291      	b.n	8002cf6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 8087 	beq.w	80028ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027e0:	4b96      	ldr	r3, [pc, #600]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d00c      	beq.n	8002806 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ec:	4b93      	ldr	r3, [pc, #588]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d112      	bne.n	800281e <HAL_RCC_OscConfig+0x62>
 80027f8:	4b90      	ldr	r3, [pc, #576]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002800:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002804:	d10b      	bne.n	800281e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002806:	4b8d      	ldr	r3, [pc, #564]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d06c      	beq.n	80028ec <HAL_RCC_OscConfig+0x130>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d168      	bne.n	80028ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e26b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x7a>
 8002828:	4b84      	ldr	r3, [pc, #528]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a83      	ldr	r2, [pc, #524]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 800282e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	e02e      	b.n	8002894 <HAL_RCC_OscConfig+0xd8>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x9c>
 800283e:	4b7f      	ldr	r3, [pc, #508]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a7e      	ldr	r2, [pc, #504]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b7c      	ldr	r3, [pc, #496]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a7b      	ldr	r2, [pc, #492]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002850:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e01d      	b.n	8002894 <HAL_RCC_OscConfig+0xd8>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0xc0>
 8002862:	4b76      	ldr	r3, [pc, #472]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a75      	ldr	r2, [pc, #468]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b73      	ldr	r3, [pc, #460]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a72      	ldr	r2, [pc, #456]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e00b      	b.n	8002894 <HAL_RCC_OscConfig+0xd8>
 800287c:	4b6f      	ldr	r3, [pc, #444]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a6e      	ldr	r2, [pc, #440]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b6c      	ldr	r3, [pc, #432]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a6b      	ldr	r2, [pc, #428]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 800288e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d013      	beq.n	80028c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe facc 	bl	8000e38 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7fe fac8 	bl	8000e38 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e21f      	b.n	8002cf6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b61      	ldr	r3, [pc, #388]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0xe8>
 80028c2:	e014      	b.n	80028ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7fe fab8 	bl	8000e38 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028cc:	f7fe fab4 	bl	8000e38 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e20b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	4b57      	ldr	r3, [pc, #348]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x110>
 80028ea:	e000      	b.n	80028ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d069      	beq.n	80029ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028fa:	4b50      	ldr	r3, [pc, #320]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002906:	4b4d      	ldr	r3, [pc, #308]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b08      	cmp	r3, #8
 8002910:	d11c      	bne.n	800294c <HAL_RCC_OscConfig+0x190>
 8002912:	4b4a      	ldr	r3, [pc, #296]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d116      	bne.n	800294c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291e:	4b47      	ldr	r3, [pc, #284]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_RCC_OscConfig+0x17a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d001      	beq.n	8002936 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e1df      	b.n	8002cf6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002936:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	493d      	ldr	r1, [pc, #244]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294a:	e040      	b.n	80029ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d023      	beq.n	800299c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002954:	4b39      	ldr	r3, [pc, #228]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a38      	ldr	r2, [pc, #224]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe fa6a 	bl	8000e38 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002968:	f7fe fa66 	bl	8000e38 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e1bd      	b.n	8002cf6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297a:	4b30      	ldr	r3, [pc, #192]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002986:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4929      	ldr	r1, [pc, #164]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002996:	4313      	orrs	r3, r2
 8002998:	600b      	str	r3, [r1, #0]
 800299a:	e018      	b.n	80029ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800299c:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a26      	ldr	r2, [pc, #152]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 80029a2:	f023 0301 	bic.w	r3, r3, #1
 80029a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe fa46 	bl	8000e38 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b0:	f7fe fa42 	bl	8000e38 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e199      	b.n	8002cf6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c2:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d038      	beq.n	8002a4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d019      	beq.n	8002a16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e2:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 80029e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e6:	4a15      	ldr	r2, [pc, #84]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ee:	f7fe fa23 	bl	8000e38 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f6:	f7fe fa1f 	bl	8000e38 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e176      	b.n	8002cf6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a08:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x23a>
 8002a14:	e01a      	b.n	8002a4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a16:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1a:	4a08      	ldr	r2, [pc, #32]	; (8002a3c <HAL_RCC_OscConfig+0x280>)
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a22:	f7fe fa09 	bl	8000e38 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a28:	e00a      	b.n	8002a40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a2a:	f7fe fa05 	bl	8000e38 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d903      	bls.n	8002a40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e15c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x53a>
 8002a3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a40:	4b91      	ldr	r3, [pc, #580]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1ee      	bne.n	8002a2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80a4 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a5a:	4b8b      	ldr	r3, [pc, #556]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10d      	bne.n	8002a82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a66:	4b88      	ldr	r3, [pc, #544]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	4a87      	ldr	r2, [pc, #540]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a70:	6413      	str	r3, [r2, #64]	; 0x40
 8002a72:	4b85      	ldr	r3, [pc, #532]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a82:	4b82      	ldr	r3, [pc, #520]	; (8002c8c <HAL_RCC_OscConfig+0x4d0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d118      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a8e:	4b7f      	ldr	r3, [pc, #508]	; (8002c8c <HAL_RCC_OscConfig+0x4d0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a7e      	ldr	r2, [pc, #504]	; (8002c8c <HAL_RCC_OscConfig+0x4d0>)
 8002a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9a:	f7fe f9cd 	bl	8000e38 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa2:	f7fe f9c9 	bl	8000e38 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b64      	cmp	r3, #100	; 0x64
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e120      	b.n	8002cf6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab4:	4b75      	ldr	r3, [pc, #468]	; (8002c8c <HAL_RCC_OscConfig+0x4d0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d106      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x31a>
 8002ac8:	4b6f      	ldr	r3, [pc, #444]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	4a6e      	ldr	r2, [pc, #440]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad4:	e02d      	b.n	8002b32 <HAL_RCC_OscConfig+0x376>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x33c>
 8002ade:	4b6a      	ldr	r3, [pc, #424]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	4a69      	ldr	r2, [pc, #420]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aea:	4b67      	ldr	r3, [pc, #412]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	4a66      	ldr	r2, [pc, #408]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002af0:	f023 0304 	bic.w	r3, r3, #4
 8002af4:	6713      	str	r3, [r2, #112]	; 0x70
 8002af6:	e01c      	b.n	8002b32 <HAL_RCC_OscConfig+0x376>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b05      	cmp	r3, #5
 8002afe:	d10c      	bne.n	8002b1a <HAL_RCC_OscConfig+0x35e>
 8002b00:	4b61      	ldr	r3, [pc, #388]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b04:	4a60      	ldr	r2, [pc, #384]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002b06:	f043 0304 	orr.w	r3, r3, #4
 8002b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0c:	4b5e      	ldr	r3, [pc, #376]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	4a5d      	ldr	r2, [pc, #372]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6713      	str	r3, [r2, #112]	; 0x70
 8002b18:	e00b      	b.n	8002b32 <HAL_RCC_OscConfig+0x376>
 8002b1a:	4b5b      	ldr	r3, [pc, #364]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	4a5a      	ldr	r2, [pc, #360]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	6713      	str	r3, [r2, #112]	; 0x70
 8002b26:	4b58      	ldr	r3, [pc, #352]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	4a57      	ldr	r2, [pc, #348]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002b2c:	f023 0304 	bic.w	r3, r3, #4
 8002b30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d015      	beq.n	8002b66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3a:	f7fe f97d 	bl	8000e38 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7fe f979 	bl	8000e38 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e0ce      	b.n	8002cf6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b58:	4b4b      	ldr	r3, [pc, #300]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0ee      	beq.n	8002b42 <HAL_RCC_OscConfig+0x386>
 8002b64:	e014      	b.n	8002b90 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7fe f967 	bl	8000e38 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7fe f963 	bl	8000e38 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e0b8      	b.n	8002cf6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b84:	4b40      	ldr	r3, [pc, #256]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ee      	bne.n	8002b6e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b90:	7dfb      	ldrb	r3, [r7, #23]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d105      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b96:	4b3c      	ldr	r3, [pc, #240]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	4a3b      	ldr	r2, [pc, #236]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 80a4 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bac:	4b36      	ldr	r3, [pc, #216]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 030c 	and.w	r3, r3, #12
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d06b      	beq.n	8002c90 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d149      	bne.n	8002c54 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc0:	4b31      	ldr	r3, [pc, #196]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a30      	ldr	r2, [pc, #192]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7fe f934 	bl	8000e38 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7fe f930 	bl	8000e38 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e087      	b.n	8002cf6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be6:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	019b      	lsls	r3, r3, #6
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	085b      	lsrs	r3, r3, #1
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	4313      	orrs	r3, r2
 8002c18:	4a1b      	ldr	r2, [pc, #108]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002c1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c1e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a18      	ldr	r2, [pc, #96]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe f904 	bl	8000e38 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe f900 	bl	8000e38 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e057      	b.n	8002cf6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x478>
 8002c52:	e04f      	b.n	8002cf4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a0b      	ldr	r2, [pc, #44]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe f8ea 	bl	8000e38 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fe f8e6 	bl	8000e38 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e03d      	b.n	8002cf6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7a:	4b03      	ldr	r3, [pc, #12]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x4ac>
 8002c86:	e035      	b.n	8002cf4 <HAL_RCC_OscConfig+0x538>
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x544>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d028      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d121      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d11a      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cc6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d111      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	085b      	lsrs	r3, r3, #1
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800

08002d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0d0      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d1c:	4b6a      	ldr	r3, [pc, #424]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d910      	bls.n	8002d4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2a:	4b67      	ldr	r3, [pc, #412]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 020f 	bic.w	r2, r3, #15
 8002d32:	4965      	ldr	r1, [pc, #404]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3a:	4b63      	ldr	r3, [pc, #396]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0b8      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d020      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d64:	4b59      	ldr	r3, [pc, #356]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4a58      	ldr	r2, [pc, #352]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002d6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d7c:	4b53      	ldr	r3, [pc, #332]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	4a52      	ldr	r2, [pc, #328]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002d82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d88:	4b50      	ldr	r3, [pc, #320]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	494d      	ldr	r1, [pc, #308]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d040      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	4b47      	ldr	r3, [pc, #284]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d115      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e07f      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc6:	4b41      	ldr	r3, [pc, #260]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e073      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd6:	4b3d      	ldr	r3, [pc, #244]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e06b      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de6:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f023 0203 	bic.w	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4936      	ldr	r1, [pc, #216]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df8:	f7fe f81e 	bl	8000e38 <HAL_GetTick>
 8002dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e00:	f7fe f81a 	bl	8000e38 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e053      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 020c 	and.w	r2, r3, #12
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d1eb      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e28:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d210      	bcs.n	8002e58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 020f 	bic.w	r2, r3, #15
 8002e3e:	4922      	ldr	r1, [pc, #136]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e46:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e032      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4916      	ldr	r1, [pc, #88]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d009      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	490e      	ldr	r1, [pc, #56]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e96:	f000 f821 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	490a      	ldr	r1, [pc, #40]	; (8002ed0 <HAL_RCC_ClockConfig+0x1cc>)
 8002ea8:	5ccb      	ldrb	r3, [r1, r3]
 8002eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002eae:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <HAL_RCC_ClockConfig+0x1d0>)
 8002eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eb2:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <HAL_RCC_ClockConfig+0x1d4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd fd90 	bl	80009dc <HAL_InitTick>

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023c00 	.word	0x40023c00
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	0801211c 	.word	0x0801211c
 8002ed4:	20000000 	.word	0x20000000
 8002ed8:	20000004 	.word	0x20000004

08002edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002edc:	b5b0      	push	{r4, r5, r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	6079      	str	r1, [r7, #4]
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	60f9      	str	r1, [r7, #12]
 8002eea:	2100      	movs	r1, #0
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002eee:	2100      	movs	r1, #0
 8002ef0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ef2:	4952      	ldr	r1, [pc, #328]	; (800303c <HAL_RCC_GetSysClockFreq+0x160>)
 8002ef4:	6889      	ldr	r1, [r1, #8]
 8002ef6:	f001 010c 	and.w	r1, r1, #12
 8002efa:	2908      	cmp	r1, #8
 8002efc:	d00d      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0x3e>
 8002efe:	2908      	cmp	r1, #8
 8002f00:	f200 8094 	bhi.w	800302c <HAL_RCC_GetSysClockFreq+0x150>
 8002f04:	2900      	cmp	r1, #0
 8002f06:	d002      	beq.n	8002f0e <HAL_RCC_GetSysClockFreq+0x32>
 8002f08:	2904      	cmp	r1, #4
 8002f0a:	d003      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0x38>
 8002f0c:	e08e      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f0e:	4b4c      	ldr	r3, [pc, #304]	; (8003040 <HAL_RCC_GetSysClockFreq+0x164>)
 8002f10:	60bb      	str	r3, [r7, #8]
      break;
 8002f12:	e08e      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f14:	4b4b      	ldr	r3, [pc, #300]	; (8003044 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f16:	60bb      	str	r3, [r7, #8]
      break;
 8002f18:	e08b      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f1a:	4948      	ldr	r1, [pc, #288]	; (800303c <HAL_RCC_GetSysClockFreq+0x160>)
 8002f1c:	6849      	ldr	r1, [r1, #4]
 8002f1e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002f22:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f24:	4945      	ldr	r1, [pc, #276]	; (800303c <HAL_RCC_GetSysClockFreq+0x160>)
 8002f26:	6849      	ldr	r1, [r1, #4]
 8002f28:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002f2c:	2900      	cmp	r1, #0
 8002f2e:	d024      	beq.n	8002f7a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f30:	4942      	ldr	r1, [pc, #264]	; (800303c <HAL_RCC_GetSysClockFreq+0x160>)
 8002f32:	6849      	ldr	r1, [r1, #4]
 8002f34:	0989      	lsrs	r1, r1, #6
 8002f36:	4608      	mov	r0, r1
 8002f38:	f04f 0100 	mov.w	r1, #0
 8002f3c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002f40:	f04f 0500 	mov.w	r5, #0
 8002f44:	ea00 0204 	and.w	r2, r0, r4
 8002f48:	ea01 0305 	and.w	r3, r1, r5
 8002f4c:	493d      	ldr	r1, [pc, #244]	; (8003044 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f4e:	fb01 f003 	mul.w	r0, r1, r3
 8002f52:	2100      	movs	r1, #0
 8002f54:	fb01 f102 	mul.w	r1, r1, r2
 8002f58:	1844      	adds	r4, r0, r1
 8002f5a:	493a      	ldr	r1, [pc, #232]	; (8003044 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f5c:	fba2 0101 	umull	r0, r1, r2, r1
 8002f60:	1863      	adds	r3, r4, r1
 8002f62:	4619      	mov	r1, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	461a      	mov	r2, r3
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	f7fd f9a0 	bl	80002b0 <__aeabi_uldivmod>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4613      	mov	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	e04a      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7a:	4b30      	ldr	r3, [pc, #192]	; (800303c <HAL_RCC_GetSysClockFreq+0x160>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	099b      	lsrs	r3, r3, #6
 8002f80:	461a      	mov	r2, r3
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f8a:	f04f 0100 	mov.w	r1, #0
 8002f8e:	ea02 0400 	and.w	r4, r2, r0
 8002f92:	ea03 0501 	and.w	r5, r3, r1
 8002f96:	4620      	mov	r0, r4
 8002f98:	4629      	mov	r1, r5
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	014b      	lsls	r3, r1, #5
 8002fa4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fa8:	0142      	lsls	r2, r0, #5
 8002faa:	4610      	mov	r0, r2
 8002fac:	4619      	mov	r1, r3
 8002fae:	1b00      	subs	r0, r0, r4
 8002fb0:	eb61 0105 	sbc.w	r1, r1, r5
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	018b      	lsls	r3, r1, #6
 8002fbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fc2:	0182      	lsls	r2, r0, #6
 8002fc4:	1a12      	subs	r2, r2, r0
 8002fc6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fca:	f04f 0000 	mov.w	r0, #0
 8002fce:	f04f 0100 	mov.w	r1, #0
 8002fd2:	00d9      	lsls	r1, r3, #3
 8002fd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fd8:	00d0      	lsls	r0, r2, #3
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	1912      	adds	r2, r2, r4
 8002fe0:	eb45 0303 	adc.w	r3, r5, r3
 8002fe4:	f04f 0000 	mov.w	r0, #0
 8002fe8:	f04f 0100 	mov.w	r1, #0
 8002fec:	0299      	lsls	r1, r3, #10
 8002fee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ff2:	0290      	lsls	r0, r2, #10
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	461a      	mov	r2, r3
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	f7fd f954 	bl	80002b0 <__aeabi_uldivmod>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4613      	mov	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_RCC_GetSysClockFreq+0x160>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	0c1b      	lsrs	r3, r3, #16
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	3301      	adds	r3, #1
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
 8003028:	60bb      	str	r3, [r7, #8]
      break;
 800302a:	e002      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <HAL_RCC_GetSysClockFreq+0x164>)
 800302e:	60bb      	str	r3, [r7, #8]
      break;
 8003030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003032:	68bb      	ldr	r3, [r7, #8]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bdb0      	pop	{r4, r5, r7, pc}
 800303c:	40023800 	.word	0x40023800
 8003040:	00f42400 	.word	0x00f42400
 8003044:	017d7840 	.word	0x017d7840

08003048 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_RCC_GetHCLKFreq+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000000 	.word	0x20000000

08003060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003064:	f7ff fff0 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003068:	4602      	mov	r2, r0
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	0a9b      	lsrs	r3, r3, #10
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4903      	ldr	r1, [pc, #12]	; (8003084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40023800 	.word	0x40023800
 8003084:	0801212c 	.word	0x0801212c

08003088 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	220f      	movs	r2, #15
 8003096:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003098:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <HAL_RCC_GetClockConfig+0x5c>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0203 	and.w	r2, r3, #3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030a4:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <HAL_RCC_GetClockConfig+0x5c>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_RCC_GetClockConfig+0x5c>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_GetClockConfig+0x5c>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	08db      	lsrs	r3, r3, #3
 80030c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030ca:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <HAL_RCC_GetClockConfig+0x60>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 020f 	and.w	r2, r3, #15
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	601a      	str	r2, [r3, #0]
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40023c00 	.word	0x40023c00

080030ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e049      	b.n	8003192 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fd fc3c 	bl	8000990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3304      	adds	r3, #4
 8003128:	4619      	mov	r1, r3
 800312a:	4610      	mov	r0, r2
 800312c:	f000 f9f6 	bl	800351c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d001      	beq.n	80031b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e054      	b.n	800325e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a26      	ldr	r2, [pc, #152]	; (800326c <HAL_TIM_Base_Start_IT+0xd0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d022      	beq.n	800321c <HAL_TIM_Base_Start_IT+0x80>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031de:	d01d      	beq.n	800321c <HAL_TIM_Base_Start_IT+0x80>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a22      	ldr	r2, [pc, #136]	; (8003270 <HAL_TIM_Base_Start_IT+0xd4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d018      	beq.n	800321c <HAL_TIM_Base_Start_IT+0x80>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a21      	ldr	r2, [pc, #132]	; (8003274 <HAL_TIM_Base_Start_IT+0xd8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d013      	beq.n	800321c <HAL_TIM_Base_Start_IT+0x80>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1f      	ldr	r2, [pc, #124]	; (8003278 <HAL_TIM_Base_Start_IT+0xdc>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00e      	beq.n	800321c <HAL_TIM_Base_Start_IT+0x80>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1e      	ldr	r2, [pc, #120]	; (800327c <HAL_TIM_Base_Start_IT+0xe0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d009      	beq.n	800321c <HAL_TIM_Base_Start_IT+0x80>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1c      	ldr	r2, [pc, #112]	; (8003280 <HAL_TIM_Base_Start_IT+0xe4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d004      	beq.n	800321c <HAL_TIM_Base_Start_IT+0x80>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1b      	ldr	r2, [pc, #108]	; (8003284 <HAL_TIM_Base_Start_IT+0xe8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d115      	bne.n	8003248 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	4b19      	ldr	r3, [pc, #100]	; (8003288 <HAL_TIM_Base_Start_IT+0xec>)
 8003224:	4013      	ands	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b06      	cmp	r3, #6
 800322c:	d015      	beq.n	800325a <HAL_TIM_Base_Start_IT+0xbe>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003234:	d011      	beq.n	800325a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0201 	orr.w	r2, r2, #1
 8003244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003246:	e008      	b.n	800325a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e000      	b.n	800325c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40010000 	.word	0x40010000
 8003270:	40000400 	.word	0x40000400
 8003274:	40000800 	.word	0x40000800
 8003278:	40000c00 	.word	0x40000c00
 800327c:	40010400 	.word	0x40010400
 8003280:	40014000 	.word	0x40014000
 8003284:	40001800 	.word	0x40001800
 8003288:	00010007 	.word	0x00010007

0800328c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d122      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d11b      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0202 	mvn.w	r2, #2
 80032b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f905 	bl	80034de <HAL_TIM_IC_CaptureCallback>
 80032d4:	e005      	b.n	80032e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f8f7 	bl	80034ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f908 	bl	80034f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d122      	bne.n	800333c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b04      	cmp	r3, #4
 8003302:	d11b      	bne.n	800333c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0204 	mvn.w	r2, #4
 800330c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f8db 	bl	80034de <HAL_TIM_IC_CaptureCallback>
 8003328:	e005      	b.n	8003336 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f8cd 	bl	80034ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f8de 	bl	80034f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b08      	cmp	r3, #8
 8003348:	d122      	bne.n	8003390 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b08      	cmp	r3, #8
 8003356:	d11b      	bne.n	8003390 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0208 	mvn.w	r2, #8
 8003360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2204      	movs	r2, #4
 8003366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f8b1 	bl	80034de <HAL_TIM_IC_CaptureCallback>
 800337c:	e005      	b.n	800338a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f8a3 	bl	80034ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f8b4 	bl	80034f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b10      	cmp	r3, #16
 800339c:	d122      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b10      	cmp	r3, #16
 80033aa:	d11b      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0210 	mvn.w	r2, #16
 80033b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2208      	movs	r2, #8
 80033ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f887 	bl	80034de <HAL_TIM_IC_CaptureCallback>
 80033d0:	e005      	b.n	80033de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f879 	bl	80034ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f88a 	bl	80034f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d10e      	bne.n	8003410 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d107      	bne.n	8003410 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0201 	mvn.w	r2, #1
 8003408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fd fa7a 	bl	8000904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341a:	2b80      	cmp	r3, #128	; 0x80
 800341c:	d10e      	bne.n	800343c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003428:	2b80      	cmp	r3, #128	; 0x80
 800342a:	d107      	bne.n	800343c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f91a 	bl	8003670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344a:	d10e      	bne.n	800346a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003456:	2b80      	cmp	r3, #128	; 0x80
 8003458:	d107      	bne.n	800346a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f90d 	bl	8003684 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003474:	2b40      	cmp	r3, #64	; 0x40
 8003476:	d10e      	bne.n	8003496 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003482:	2b40      	cmp	r3, #64	; 0x40
 8003484:	d107      	bne.n	8003496 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800348e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f838 	bl	8003506 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d10e      	bne.n	80034c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	d107      	bne.n	80034c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f06f 0220 	mvn.w	r2, #32
 80034ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f8cd 	bl	800365c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a40      	ldr	r2, [pc, #256]	; (8003630 <TIM_Base_SetConfig+0x114>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d013      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353a:	d00f      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a3d      	ldr	r2, [pc, #244]	; (8003634 <TIM_Base_SetConfig+0x118>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00b      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a3c      	ldr	r2, [pc, #240]	; (8003638 <TIM_Base_SetConfig+0x11c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d007      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a3b      	ldr	r2, [pc, #236]	; (800363c <TIM_Base_SetConfig+0x120>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d003      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a3a      	ldr	r2, [pc, #232]	; (8003640 <TIM_Base_SetConfig+0x124>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d108      	bne.n	800356e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a2f      	ldr	r2, [pc, #188]	; (8003630 <TIM_Base_SetConfig+0x114>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d02b      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357c:	d027      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a2c      	ldr	r2, [pc, #176]	; (8003634 <TIM_Base_SetConfig+0x118>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d023      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a2b      	ldr	r2, [pc, #172]	; (8003638 <TIM_Base_SetConfig+0x11c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01f      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a2a      	ldr	r2, [pc, #168]	; (800363c <TIM_Base_SetConfig+0x120>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01b      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a29      	ldr	r2, [pc, #164]	; (8003640 <TIM_Base_SetConfig+0x124>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d017      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a28      	ldr	r2, [pc, #160]	; (8003644 <TIM_Base_SetConfig+0x128>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a27      	ldr	r2, [pc, #156]	; (8003648 <TIM_Base_SetConfig+0x12c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00f      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a26      	ldr	r2, [pc, #152]	; (800364c <TIM_Base_SetConfig+0x130>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00b      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a25      	ldr	r2, [pc, #148]	; (8003650 <TIM_Base_SetConfig+0x134>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d007      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a24      	ldr	r2, [pc, #144]	; (8003654 <TIM_Base_SetConfig+0x138>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d003      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a23      	ldr	r2, [pc, #140]	; (8003658 <TIM_Base_SetConfig+0x13c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d108      	bne.n	80035e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <TIM_Base_SetConfig+0x114>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d003      	beq.n	8003614 <TIM_Base_SetConfig+0xf8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a0c      	ldr	r2, [pc, #48]	; (8003640 <TIM_Base_SetConfig+0x124>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d103      	bne.n	800361c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	615a      	str	r2, [r3, #20]
}
 8003622:	bf00      	nop
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40010000 	.word	0x40010000
 8003634:	40000400 	.word	0x40000400
 8003638:	40000800 	.word	0x40000800
 800363c:	40000c00 	.word	0x40000c00
 8003640:	40010400 	.word	0x40010400
 8003644:	40014000 	.word	0x40014000
 8003648:	40014400 	.word	0x40014400
 800364c:	40014800 	.word	0x40014800
 8003650:	40001800 	.word	0x40001800
 8003654:	40001c00 	.word	0x40001c00
 8003658:	40002000 	.word	0x40002000

0800365c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800369e:	4b8d      	ldr	r3, [pc, #564]	; (80038d4 <MX_LWIP_Init+0x23c>)
 80036a0:	22c0      	movs	r2, #192	; 0xc0
 80036a2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80036a4:	4b8b      	ldr	r3, [pc, #556]	; (80038d4 <MX_LWIP_Init+0x23c>)
 80036a6:	22a8      	movs	r2, #168	; 0xa8
 80036a8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 80036aa:	4b8a      	ldr	r3, [pc, #552]	; (80038d4 <MX_LWIP_Init+0x23c>)
 80036ac:	2202      	movs	r2, #2
 80036ae:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 99;
 80036b0:	4b88      	ldr	r3, [pc, #544]	; (80038d4 <MX_LWIP_Init+0x23c>)
 80036b2:	2263      	movs	r2, #99	; 0x63
 80036b4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80036b6:	4b88      	ldr	r3, [pc, #544]	; (80038d8 <MX_LWIP_Init+0x240>)
 80036b8:	22ff      	movs	r2, #255	; 0xff
 80036ba:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80036bc:	4b86      	ldr	r3, [pc, #536]	; (80038d8 <MX_LWIP_Init+0x240>)
 80036be:	22ff      	movs	r2, #255	; 0xff
 80036c0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80036c2:	4b85      	ldr	r3, [pc, #532]	; (80038d8 <MX_LWIP_Init+0x240>)
 80036c4:	22ff      	movs	r2, #255	; 0xff
 80036c6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80036c8:	4b83      	ldr	r3, [pc, #524]	; (80038d8 <MX_LWIP_Init+0x240>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80036ce:	4b83      	ldr	r3, [pc, #524]	; (80038dc <MX_LWIP_Init+0x244>)
 80036d0:	22c0      	movs	r2, #192	; 0xc0
 80036d2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80036d4:	4b81      	ldr	r3, [pc, #516]	; (80038dc <MX_LWIP_Init+0x244>)
 80036d6:	22a8      	movs	r2, #168	; 0xa8
 80036d8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80036da:	4b80      	ldr	r3, [pc, #512]	; (80038dc <MX_LWIP_Init+0x244>)
 80036dc:	2200      	movs	r2, #0
 80036de:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80036e0:	4b7e      	ldr	r3, [pc, #504]	; (80038dc <MX_LWIP_Init+0x244>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80036e6:	f000 fccb 	bl	8004080 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80036ea:	4b7a      	ldr	r3, [pc, #488]	; (80038d4 <MX_LWIP_Init+0x23c>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	061a      	lsls	r2, r3, #24
 80036f0:	4b78      	ldr	r3, [pc, #480]	; (80038d4 <MX_LWIP_Init+0x23c>)
 80036f2:	785b      	ldrb	r3, [r3, #1]
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	431a      	orrs	r2, r3
 80036f8:	4b76      	ldr	r3, [pc, #472]	; (80038d4 <MX_LWIP_Init+0x23c>)
 80036fa:	789b      	ldrb	r3, [r3, #2]
 80036fc:	021b      	lsls	r3, r3, #8
 80036fe:	4313      	orrs	r3, r2
 8003700:	4a74      	ldr	r2, [pc, #464]	; (80038d4 <MX_LWIP_Init+0x23c>)
 8003702:	78d2      	ldrb	r2, [r2, #3]
 8003704:	4313      	orrs	r3, r2
 8003706:	061a      	lsls	r2, r3, #24
 8003708:	4b72      	ldr	r3, [pc, #456]	; (80038d4 <MX_LWIP_Init+0x23c>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	0619      	lsls	r1, r3, #24
 800370e:	4b71      	ldr	r3, [pc, #452]	; (80038d4 <MX_LWIP_Init+0x23c>)
 8003710:	785b      	ldrb	r3, [r3, #1]
 8003712:	041b      	lsls	r3, r3, #16
 8003714:	4319      	orrs	r1, r3
 8003716:	4b6f      	ldr	r3, [pc, #444]	; (80038d4 <MX_LWIP_Init+0x23c>)
 8003718:	789b      	ldrb	r3, [r3, #2]
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	430b      	orrs	r3, r1
 800371e:	496d      	ldr	r1, [pc, #436]	; (80038d4 <MX_LWIP_Init+0x23c>)
 8003720:	78c9      	ldrb	r1, [r1, #3]
 8003722:	430b      	orrs	r3, r1
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800372a:	431a      	orrs	r2, r3
 800372c:	4b69      	ldr	r3, [pc, #420]	; (80038d4 <MX_LWIP_Init+0x23c>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	0619      	lsls	r1, r3, #24
 8003732:	4b68      	ldr	r3, [pc, #416]	; (80038d4 <MX_LWIP_Init+0x23c>)
 8003734:	785b      	ldrb	r3, [r3, #1]
 8003736:	041b      	lsls	r3, r3, #16
 8003738:	4319      	orrs	r1, r3
 800373a:	4b66      	ldr	r3, [pc, #408]	; (80038d4 <MX_LWIP_Init+0x23c>)
 800373c:	789b      	ldrb	r3, [r3, #2]
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	430b      	orrs	r3, r1
 8003742:	4964      	ldr	r1, [pc, #400]	; (80038d4 <MX_LWIP_Init+0x23c>)
 8003744:	78c9      	ldrb	r1, [r1, #3]
 8003746:	430b      	orrs	r3, r1
 8003748:	0a1b      	lsrs	r3, r3, #8
 800374a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800374e:	431a      	orrs	r2, r3
 8003750:	4b60      	ldr	r3, [pc, #384]	; (80038d4 <MX_LWIP_Init+0x23c>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	0619      	lsls	r1, r3, #24
 8003756:	4b5f      	ldr	r3, [pc, #380]	; (80038d4 <MX_LWIP_Init+0x23c>)
 8003758:	785b      	ldrb	r3, [r3, #1]
 800375a:	041b      	lsls	r3, r3, #16
 800375c:	4319      	orrs	r1, r3
 800375e:	4b5d      	ldr	r3, [pc, #372]	; (80038d4 <MX_LWIP_Init+0x23c>)
 8003760:	789b      	ldrb	r3, [r3, #2]
 8003762:	021b      	lsls	r3, r3, #8
 8003764:	430b      	orrs	r3, r1
 8003766:	495b      	ldr	r1, [pc, #364]	; (80038d4 <MX_LWIP_Init+0x23c>)
 8003768:	78c9      	ldrb	r1, [r1, #3]
 800376a:	430b      	orrs	r3, r1
 800376c:	0e1b      	lsrs	r3, r3, #24
 800376e:	4313      	orrs	r3, r2
 8003770:	4a5b      	ldr	r2, [pc, #364]	; (80038e0 <MX_LWIP_Init+0x248>)
 8003772:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003774:	4b58      	ldr	r3, [pc, #352]	; (80038d8 <MX_LWIP_Init+0x240>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	061a      	lsls	r2, r3, #24
 800377a:	4b57      	ldr	r3, [pc, #348]	; (80038d8 <MX_LWIP_Init+0x240>)
 800377c:	785b      	ldrb	r3, [r3, #1]
 800377e:	041b      	lsls	r3, r3, #16
 8003780:	431a      	orrs	r2, r3
 8003782:	4b55      	ldr	r3, [pc, #340]	; (80038d8 <MX_LWIP_Init+0x240>)
 8003784:	789b      	ldrb	r3, [r3, #2]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	4313      	orrs	r3, r2
 800378a:	4a53      	ldr	r2, [pc, #332]	; (80038d8 <MX_LWIP_Init+0x240>)
 800378c:	78d2      	ldrb	r2, [r2, #3]
 800378e:	4313      	orrs	r3, r2
 8003790:	061a      	lsls	r2, r3, #24
 8003792:	4b51      	ldr	r3, [pc, #324]	; (80038d8 <MX_LWIP_Init+0x240>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	0619      	lsls	r1, r3, #24
 8003798:	4b4f      	ldr	r3, [pc, #316]	; (80038d8 <MX_LWIP_Init+0x240>)
 800379a:	785b      	ldrb	r3, [r3, #1]
 800379c:	041b      	lsls	r3, r3, #16
 800379e:	4319      	orrs	r1, r3
 80037a0:	4b4d      	ldr	r3, [pc, #308]	; (80038d8 <MX_LWIP_Init+0x240>)
 80037a2:	789b      	ldrb	r3, [r3, #2]
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	430b      	orrs	r3, r1
 80037a8:	494b      	ldr	r1, [pc, #300]	; (80038d8 <MX_LWIP_Init+0x240>)
 80037aa:	78c9      	ldrb	r1, [r1, #3]
 80037ac:	430b      	orrs	r3, r1
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037b4:	431a      	orrs	r2, r3
 80037b6:	4b48      	ldr	r3, [pc, #288]	; (80038d8 <MX_LWIP_Init+0x240>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	0619      	lsls	r1, r3, #24
 80037bc:	4b46      	ldr	r3, [pc, #280]	; (80038d8 <MX_LWIP_Init+0x240>)
 80037be:	785b      	ldrb	r3, [r3, #1]
 80037c0:	041b      	lsls	r3, r3, #16
 80037c2:	4319      	orrs	r1, r3
 80037c4:	4b44      	ldr	r3, [pc, #272]	; (80038d8 <MX_LWIP_Init+0x240>)
 80037c6:	789b      	ldrb	r3, [r3, #2]
 80037c8:	021b      	lsls	r3, r3, #8
 80037ca:	430b      	orrs	r3, r1
 80037cc:	4942      	ldr	r1, [pc, #264]	; (80038d8 <MX_LWIP_Init+0x240>)
 80037ce:	78c9      	ldrb	r1, [r1, #3]
 80037d0:	430b      	orrs	r3, r1
 80037d2:	0a1b      	lsrs	r3, r3, #8
 80037d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80037d8:	431a      	orrs	r2, r3
 80037da:	4b3f      	ldr	r3, [pc, #252]	; (80038d8 <MX_LWIP_Init+0x240>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	0619      	lsls	r1, r3, #24
 80037e0:	4b3d      	ldr	r3, [pc, #244]	; (80038d8 <MX_LWIP_Init+0x240>)
 80037e2:	785b      	ldrb	r3, [r3, #1]
 80037e4:	041b      	lsls	r3, r3, #16
 80037e6:	4319      	orrs	r1, r3
 80037e8:	4b3b      	ldr	r3, [pc, #236]	; (80038d8 <MX_LWIP_Init+0x240>)
 80037ea:	789b      	ldrb	r3, [r3, #2]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	430b      	orrs	r3, r1
 80037f0:	4939      	ldr	r1, [pc, #228]	; (80038d8 <MX_LWIP_Init+0x240>)
 80037f2:	78c9      	ldrb	r1, [r1, #3]
 80037f4:	430b      	orrs	r3, r1
 80037f6:	0e1b      	lsrs	r3, r3, #24
 80037f8:	4313      	orrs	r3, r2
 80037fa:	4a3a      	ldr	r2, [pc, #232]	; (80038e4 <MX_LWIP_Init+0x24c>)
 80037fc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80037fe:	4b37      	ldr	r3, [pc, #220]	; (80038dc <MX_LWIP_Init+0x244>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	061a      	lsls	r2, r3, #24
 8003804:	4b35      	ldr	r3, [pc, #212]	; (80038dc <MX_LWIP_Init+0x244>)
 8003806:	785b      	ldrb	r3, [r3, #1]
 8003808:	041b      	lsls	r3, r3, #16
 800380a:	431a      	orrs	r2, r3
 800380c:	4b33      	ldr	r3, [pc, #204]	; (80038dc <MX_LWIP_Init+0x244>)
 800380e:	789b      	ldrb	r3, [r3, #2]
 8003810:	021b      	lsls	r3, r3, #8
 8003812:	4313      	orrs	r3, r2
 8003814:	4a31      	ldr	r2, [pc, #196]	; (80038dc <MX_LWIP_Init+0x244>)
 8003816:	78d2      	ldrb	r2, [r2, #3]
 8003818:	4313      	orrs	r3, r2
 800381a:	061a      	lsls	r2, r3, #24
 800381c:	4b2f      	ldr	r3, [pc, #188]	; (80038dc <MX_LWIP_Init+0x244>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	0619      	lsls	r1, r3, #24
 8003822:	4b2e      	ldr	r3, [pc, #184]	; (80038dc <MX_LWIP_Init+0x244>)
 8003824:	785b      	ldrb	r3, [r3, #1]
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	4319      	orrs	r1, r3
 800382a:	4b2c      	ldr	r3, [pc, #176]	; (80038dc <MX_LWIP_Init+0x244>)
 800382c:	789b      	ldrb	r3, [r3, #2]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	430b      	orrs	r3, r1
 8003832:	492a      	ldr	r1, [pc, #168]	; (80038dc <MX_LWIP_Init+0x244>)
 8003834:	78c9      	ldrb	r1, [r1, #3]
 8003836:	430b      	orrs	r3, r1
 8003838:	021b      	lsls	r3, r3, #8
 800383a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800383e:	431a      	orrs	r2, r3
 8003840:	4b26      	ldr	r3, [pc, #152]	; (80038dc <MX_LWIP_Init+0x244>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	0619      	lsls	r1, r3, #24
 8003846:	4b25      	ldr	r3, [pc, #148]	; (80038dc <MX_LWIP_Init+0x244>)
 8003848:	785b      	ldrb	r3, [r3, #1]
 800384a:	041b      	lsls	r3, r3, #16
 800384c:	4319      	orrs	r1, r3
 800384e:	4b23      	ldr	r3, [pc, #140]	; (80038dc <MX_LWIP_Init+0x244>)
 8003850:	789b      	ldrb	r3, [r3, #2]
 8003852:	021b      	lsls	r3, r3, #8
 8003854:	430b      	orrs	r3, r1
 8003856:	4921      	ldr	r1, [pc, #132]	; (80038dc <MX_LWIP_Init+0x244>)
 8003858:	78c9      	ldrb	r1, [r1, #3]
 800385a:	430b      	orrs	r3, r1
 800385c:	0a1b      	lsrs	r3, r3, #8
 800385e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003862:	431a      	orrs	r2, r3
 8003864:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <MX_LWIP_Init+0x244>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	0619      	lsls	r1, r3, #24
 800386a:	4b1c      	ldr	r3, [pc, #112]	; (80038dc <MX_LWIP_Init+0x244>)
 800386c:	785b      	ldrb	r3, [r3, #1]
 800386e:	041b      	lsls	r3, r3, #16
 8003870:	4319      	orrs	r1, r3
 8003872:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <MX_LWIP_Init+0x244>)
 8003874:	789b      	ldrb	r3, [r3, #2]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	430b      	orrs	r3, r1
 800387a:	4918      	ldr	r1, [pc, #96]	; (80038dc <MX_LWIP_Init+0x244>)
 800387c:	78c9      	ldrb	r1, [r1, #3]
 800387e:	430b      	orrs	r3, r1
 8003880:	0e1b      	lsrs	r3, r3, #24
 8003882:	4313      	orrs	r3, r2
 8003884:	4a18      	ldr	r2, [pc, #96]	; (80038e8 <MX_LWIP_Init+0x250>)
 8003886:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003888:	4b18      	ldr	r3, [pc, #96]	; (80038ec <MX_LWIP_Init+0x254>)
 800388a:	9302      	str	r3, [sp, #8]
 800388c:	4b18      	ldr	r3, [pc, #96]	; (80038f0 <MX_LWIP_Init+0x258>)
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	2300      	movs	r3, #0
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <MX_LWIP_Init+0x250>)
 8003896:	4a13      	ldr	r2, [pc, #76]	; (80038e4 <MX_LWIP_Init+0x24c>)
 8003898:	4911      	ldr	r1, [pc, #68]	; (80038e0 <MX_LWIP_Init+0x248>)
 800389a:	4816      	ldr	r0, [pc, #88]	; (80038f4 <MX_LWIP_Init+0x25c>)
 800389c:	f001 f896 	bl	80049cc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80038a0:	4814      	ldr	r0, [pc, #80]	; (80038f4 <MX_LWIP_Init+0x25c>)
 80038a2:	f001 fa45 	bl	8004d30 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80038a6:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <MX_LWIP_Init+0x25c>)
 80038a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80038ac:	089b      	lsrs	r3, r3, #2
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80038b8:	480e      	ldr	r0, [pc, #56]	; (80038f4 <MX_LWIP_Init+0x25c>)
 80038ba:	f001 fa49 	bl	8004d50 <netif_set_up>
 80038be:	e002      	b.n	80038c6 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80038c0:	480c      	ldr	r0, [pc, #48]	; (80038f4 <MX_LWIP_Init+0x25c>)
 80038c2:	f001 fab1 	bl	8004e28 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80038c6:	490c      	ldr	r1, [pc, #48]	; (80038f8 <MX_LWIP_Init+0x260>)
 80038c8:	480a      	ldr	r0, [pc, #40]	; (80038f4 <MX_LWIP_Init+0x25c>)
 80038ca:	f001 fadf 	bl	8004e8c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80038ce:	bf00      	nop
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	200002fc 	.word	0x200002fc
 80038d8:	200002f8 	.word	0x200002f8
 80038dc:	200002bc 	.word	0x200002bc
 80038e0:	200002f4 	.word	0x200002f4
 80038e4:	20000300 	.word	0x20000300
 80038e8:	20000304 	.word	0x20000304
 80038ec:	0800e111 	.word	0x0800e111
 80038f0:	08003ead 	.word	0x08003ead
 80038f4:	200002c0 	.word	0x200002c0
 80038f8:	08003f19 	.word	0x08003f19

080038fc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08e      	sub	sp, #56	; 0x38
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	609a      	str	r2, [r3, #8]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a4e      	ldr	r2, [pc, #312]	; (8003a54 <HAL_ETH_MspInit+0x158>)
 800391a:	4293      	cmp	r3, r2
 800391c:	f040 8096 	bne.w	8003a4c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003920:	4b4d      	ldr	r3, [pc, #308]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	4a4c      	ldr	r2, [pc, #304]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 8003926:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800392a:	6313      	str	r3, [r2, #48]	; 0x30
 800392c:	4b4a      	ldr	r3, [pc, #296]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003934:	623b      	str	r3, [r7, #32]
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	4b47      	ldr	r3, [pc, #284]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	4a46      	ldr	r2, [pc, #280]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 800393e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003942:	6313      	str	r3, [r2, #48]	; 0x30
 8003944:	4b44      	ldr	r3, [pc, #272]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	4b41      	ldr	r3, [pc, #260]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	4a40      	ldr	r2, [pc, #256]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 8003956:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800395a:	6313      	str	r3, [r2, #48]	; 0x30
 800395c:	4b3e      	ldr	r3, [pc, #248]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003968:	4b3b      	ldr	r3, [pc, #236]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	4a3a      	ldr	r2, [pc, #232]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 800396e:	f043 0304 	orr.w	r3, r3, #4
 8003972:	6313      	str	r3, [r2, #48]	; 0x30
 8003974:	4b38      	ldr	r3, [pc, #224]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003980:	4b35      	ldr	r3, [pc, #212]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	4a34      	ldr	r2, [pc, #208]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	6313      	str	r3, [r2, #48]	; 0x30
 800398c:	4b32      	ldr	r3, [pc, #200]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003998:	4b2f      	ldr	r3, [pc, #188]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	4a2e      	ldr	r2, [pc, #184]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 800399e:	f043 0302 	orr.w	r3, r3, #2
 80039a2:	6313      	str	r3, [r2, #48]	; 0x30
 80039a4:	4b2c      	ldr	r3, [pc, #176]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80039b0:	4b29      	ldr	r3, [pc, #164]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	4a28      	ldr	r2, [pc, #160]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 80039b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ba:	6313      	str	r3, [r2, #48]	; 0x30
 80039bc:	4b26      	ldr	r3, [pc, #152]	; (8003a58 <HAL_ETH_MspInit+0x15c>)
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80039c8:	2332      	movs	r3, #50	; 0x32
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039cc:	2302      	movs	r3, #2
 80039ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d4:	2303      	movs	r3, #3
 80039d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80039d8:	230b      	movs	r3, #11
 80039da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039e0:	4619      	mov	r1, r3
 80039e2:	481e      	ldr	r0, [pc, #120]	; (8003a5c <HAL_ETH_MspInit+0x160>)
 80039e4:	f7fe fcba 	bl	800235c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80039e8:	2386      	movs	r3, #134	; 0x86
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ec:	2302      	movs	r3, #2
 80039ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f4:	2303      	movs	r3, #3
 80039f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80039f8:	230b      	movs	r3, #11
 80039fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a00:	4619      	mov	r1, r3
 8003a02:	4817      	ldr	r0, [pc, #92]	; (8003a60 <HAL_ETH_MspInit+0x164>)
 8003a04:	f7fe fcaa 	bl	800235c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a16:	2303      	movs	r3, #3
 8003a18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a1a:	230b      	movs	r3, #11
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a22:	4619      	mov	r1, r3
 8003a24:	480f      	ldr	r0, [pc, #60]	; (8003a64 <HAL_ETH_MspInit+0x168>)
 8003a26:	f7fe fc99 	bl	800235c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003a2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a30:	2302      	movs	r3, #2
 8003a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a3c:	230b      	movs	r3, #11
 8003a3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a44:	4619      	mov	r1, r3
 8003a46:	4808      	ldr	r0, [pc, #32]	; (8003a68 <HAL_ETH_MspInit+0x16c>)
 8003a48:	f7fe fc88 	bl	800235c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	3738      	adds	r7, #56	; 0x38
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40028000 	.word	0x40028000
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40020800 	.word	0x40020800
 8003a60:	40020000 	.word	0x40020000
 8003a64:	40020400 	.word	0x40020400
 8003a68:	40021800 	.word	0x40021800

08003a6c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003a78:	4b4d      	ldr	r3, [pc, #308]	; (8003bb0 <low_level_init+0x144>)
 8003a7a:	4a4e      	ldr	r2, [pc, #312]	; (8003bb4 <low_level_init+0x148>)
 8003a7c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003a7e:	4b4c      	ldr	r3, [pc, #304]	; (8003bb0 <low_level_init+0x144>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003a84:	4b4a      	ldr	r3, [pc, #296]	; (8003bb0 <low_level_init+0x144>)
 8003a86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a8a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003a8c:	4b48      	ldr	r3, [pc, #288]	; (8003bb0 <low_level_init+0x144>)
 8003a8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a92:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003a94:	4b46      	ldr	r3, [pc, #280]	; (8003bb0 <low_level_init+0x144>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003a9e:	2380      	movs	r3, #128	; 0x80
 8003aa0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003aa2:	23e1      	movs	r3, #225	; 0xe1
 8003aa4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003ab2:	4a3f      	ldr	r2, [pc, #252]	; (8003bb0 <low_level_init+0x144>)
 8003ab4:	f107 0308 	add.w	r3, r7, #8
 8003ab8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003aba:	4b3d      	ldr	r3, [pc, #244]	; (8003bb0 <low_level_init+0x144>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003ac0:	4b3b      	ldr	r3, [pc, #236]	; (8003bb0 <low_level_init+0x144>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003ac6:	4b3a      	ldr	r3, [pc, #232]	; (8003bb0 <low_level_init+0x144>)
 8003ac8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003acc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003ace:	4838      	ldr	r0, [pc, #224]	; (8003bb0 <low_level_init+0x144>)
 8003ad0:	f7fd fb40 	bl	8001154 <HAL_ETH_Init>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003ad8:	7dfb      	ldrb	r3, [r7, #23]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d108      	bne.n	8003af0 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ae4:	f043 0304 	orr.w	r3, r3, #4
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003af0:	2304      	movs	r3, #4
 8003af2:	4a31      	ldr	r2, [pc, #196]	; (8003bb8 <low_level_init+0x14c>)
 8003af4:	4931      	ldr	r1, [pc, #196]	; (8003bbc <low_level_init+0x150>)
 8003af6:	482e      	ldr	r0, [pc, #184]	; (8003bb0 <low_level_init+0x144>)
 8003af8:	f7fd fcc6 	bl	8001488 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003afc:	2304      	movs	r3, #4
 8003afe:	4a30      	ldr	r2, [pc, #192]	; (8003bc0 <low_level_init+0x154>)
 8003b00:	4930      	ldr	r1, [pc, #192]	; (8003bc4 <low_level_init+0x158>)
 8003b02:	482b      	ldr	r0, [pc, #172]	; (8003bb0 <low_level_init+0x144>)
 8003b04:	f7fd fd29 	bl	800155a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2206      	movs	r2, #6
 8003b0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003b10:	4b27      	ldr	r3, [pc, #156]	; (8003bb0 <low_level_init+0x144>)
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	781a      	ldrb	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003b1c:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <low_level_init+0x144>)
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	785a      	ldrb	r2, [r3, #1]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003b28:	4b21      	ldr	r3, [pc, #132]	; (8003bb0 <low_level_init+0x144>)
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	789a      	ldrb	r2, [r3, #2]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003b34:	4b1e      	ldr	r3, [pc, #120]	; (8003bb0 <low_level_init+0x144>)
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	78da      	ldrb	r2, [r3, #3]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003b40:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <low_level_init+0x144>)
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	791a      	ldrb	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003b4c:	4b18      	ldr	r3, [pc, #96]	; (8003bb0 <low_level_init+0x144>)
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	795a      	ldrb	r2, [r3, #5]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003b5e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003b66:	f043 030a 	orr.w	r3, r3, #10
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003b72:	480f      	ldr	r0, [pc, #60]	; (8003bb0 <low_level_init+0x144>)
 8003b74:	f7fd ff9a 	bl	8001aac <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003b78:	f107 0310 	add.w	r3, r7, #16
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	211d      	movs	r1, #29
 8003b80:	480b      	ldr	r0, [pc, #44]	; (8003bb0 <low_level_init+0x144>)
 8003b82:	f7fd fec5 	bl	8001910 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f043 030b 	orr.w	r3, r3, #11
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	461a      	mov	r2, r3
 8003b92:	211d      	movs	r1, #29
 8003b94:	4806      	ldr	r0, [pc, #24]	; (8003bb0 <low_level_init+0x144>)
 8003b96:	f7fd ff23 	bl	80019e0 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003b9a:	f107 0310 	add.w	r3, r7, #16
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	211d      	movs	r1, #29
 8003ba2:	4803      	ldr	r0, [pc, #12]	; (8003bb0 <low_level_init+0x144>)
 8003ba4:	f7fd feb4 	bl	8001910 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003ba8:	bf00      	nop
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20001bd8 	.word	0x20001bd8
 8003bb4:	40028000 	.word	0x40028000
 8003bb8:	20001c20 	.word	0x20001c20
 8003bbc:	20000308 	.word	0x20000308
 8003bc0:	20000388 	.word	0x20000388
 8003bc4:	20001b58 	.word	0x20001b58

08003bc8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08a      	sub	sp, #40	; 0x28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003bd2:	4b4b      	ldr	r3, [pc, #300]	; (8003d00 <low_level_output+0x138>)
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003bea:	4b45      	ldr	r3, [pc, #276]	; (8003d00 <low_level_output+0x138>)
 8003bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bee:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	623b      	str	r3, [r7, #32]
 8003bf8:	e05a      	b.n	8003cb0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	da03      	bge.n	8003c0a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003c02:	23f8      	movs	r3, #248	; 0xf8
 8003c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003c08:	e05c      	b.n	8003cc4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	895b      	ldrh	r3, [r3, #10]
 8003c0e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003c14:	e02f      	b.n	8003c76 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	18d0      	adds	r0, r2, r3
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	18d1      	adds	r1, r2, r3
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f00a fb77 	bl	800e320 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	da03      	bge.n	8003c48 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003c40:	23f8      	movs	r3, #248	; 0xf8
 8003c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003c46:	e03d      	b.n	8003cc4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4413      	add	r3, r2
 8003c54:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003c58:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003c64:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003c70:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d8c8      	bhi.n	8003c16 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003c84:	69fa      	ldr	r2, [r7, #28]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	18d0      	adds	r0, r2, r3
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4413      	add	r3, r2
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4619      	mov	r1, r3
 8003c96:	f00a fb43 	bl	800e320 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	623b      	str	r3, [r7, #32]
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1a1      	bne.n	8003bfa <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003cb6:	6979      	ldr	r1, [r7, #20]
 8003cb8:	4811      	ldr	r0, [pc, #68]	; (8003d00 <low_level_output+0x138>)
 8003cba:	f7fd fcbb 	bl	8001634 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <low_level_output+0x138>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	f241 0314 	movw	r3, #4116	; 0x1014
 8003ccc:	4413      	add	r3, r2
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00d      	beq.n	8003cf4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <low_level_output+0x138>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	f241 0314 	movw	r3, #4116	; 0x1014
 8003ce0:	4413      	add	r3, r2
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <low_level_output+0x138>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	f241 0304 	movw	r3, #4100	; 0x1004
 8003cee:	4413      	add	r3, r2
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003cf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3728      	adds	r7, #40	; 0x28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20001bd8 	.word	0x20001bd8

08003d04 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08c      	sub	sp, #48	; 0x30
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003d28:	484f      	ldr	r0, [pc, #316]	; (8003e68 <low_level_input+0x164>)
 8003d2a:	f7fd fd6d 	bl	8001808 <HAL_ETH_GetReceivedFrame>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <low_level_input+0x34>

    return NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	e092      	b.n	8003e5e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003d38:	4b4b      	ldr	r3, [pc, #300]	; (8003e68 <low_level_input+0x164>)
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003d3e:	4b4a      	ldr	r3, [pc, #296]	; (8003e68 <low_level_input+0x164>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003d44:	89fb      	ldrh	r3, [r7, #14]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d007      	beq.n	8003d5a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003d4a:	89fb      	ldrh	r3, [r7, #14]
 8003d4c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003d50:	4619      	mov	r1, r3
 8003d52:	2000      	movs	r0, #0
 8003d54:	f001 f936 	bl	8004fc4 <pbuf_alloc>
 8003d58:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d04b      	beq.n	8003df8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003d60:	4b41      	ldr	r3, [pc, #260]	; (8003e68 <low_level_input+0x164>)
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d6e:	e040      	b.n	8003df2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	895b      	ldrh	r3, [r3, #10]
 8003d74:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003d7a:	e021      	b.n	8003dc0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	18d0      	adds	r0, r2, r3
 8003d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	18d1      	adds	r1, r2, r3
 8003d8a:	69fa      	ldr	r2, [r7, #28]
 8003d8c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	461a      	mov	r2, r3
 8003d94:	f00a fac4 	bl	800e320 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	4413      	add	r3, r2
 8003daa:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003dae:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003dba:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d8d6      	bhi.n	8003d7c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	18d0      	adds	r0, r2, r3
 8003dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	4413      	add	r3, r2
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4619      	mov	r1, r3
 8003de0:	f00a fa9e 	bl	800e320 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003de4:	69fa      	ldr	r2, [r7, #28]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	4413      	add	r3, r2
 8003dea:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1bb      	bne.n	8003d70 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003df8:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <low_level_input+0x164>)
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003dfe:	2300      	movs	r3, #0
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	e00b      	b.n	8003e1c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	613b      	str	r3, [r7, #16]
 8003e1c:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <low_level_input+0x164>)
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d3ee      	bcc.n	8003e04 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003e26:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <low_level_input+0x164>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003e2c:	4b0e      	ldr	r3, [pc, #56]	; (8003e68 <low_level_input+0x164>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	f241 0314 	movw	r3, #4116	; 0x1014
 8003e34:	4413      	add	r3, r2
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00d      	beq.n	8003e5c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003e40:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <low_level_input+0x164>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	f241 0314 	movw	r3, #4116	; 0x1014
 8003e48:	4413      	add	r3, r2
 8003e4a:	2280      	movs	r2, #128	; 0x80
 8003e4c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003e4e:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <low_level_input+0x164>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	f241 0308 	movw	r3, #4104	; 0x1008
 8003e56:	4413      	add	r3, r2
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3730      	adds	r7, #48	; 0x30
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20001bd8 	.word	0x20001bd8

08003e6c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff ff45 	bl	8003d04 <low_level_input>
 8003e7a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d010      	beq.n	8003ea4 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	4798      	blx	r3
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003e90:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d006      	beq.n	8003ea6 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f001 fb77 	bl	800558c <pbuf_free>
    p = NULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	e000      	b.n	8003ea6 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003ea4:	bf00      	nop
  }
}
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <ethernetif_init+0x1c>
 8003eba:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <ethernetif_init+0x48>)
 8003ebc:	f240 221a 	movw	r2, #538	; 0x21a
 8003ec0:	490d      	ldr	r1, [pc, #52]	; (8003ef8 <ethernetif_init+0x4c>)
 8003ec2:	480e      	ldr	r0, [pc, #56]	; (8003efc <ethernetif_init+0x50>)
 8003ec4:	f00a fa5c 	bl	800e380 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2273      	movs	r2, #115	; 0x73
 8003ecc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2274      	movs	r2, #116	; 0x74
 8003ed4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a09      	ldr	r2, [pc, #36]	; (8003f00 <ethernetif_init+0x54>)
 8003edc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a08      	ldr	r2, [pc, #32]	; (8003f04 <ethernetif_init+0x58>)
 8003ee2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff fdc1 	bl	8003a6c <low_level_init>

  return ERR_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	0800f73c 	.word	0x0800f73c
 8003ef8:	0800f758 	.word	0x0800f758
 8003efc:	0800f768 	.word	0x0800f768
 8003f00:	0800c4b1 	.word	0x0800c4b1
 8003f04:	08003bc9 	.word	0x08003bc9

08003f08 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003f0c:	f7fc ff94 	bl	8000e38 <HAL_GetTick>
 8003f10:	4603      	mov	r3, r0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003f2e:	089b      	lsrs	r3, r3, #2
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d05d      	beq.n	8003ff6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003f3a:	4b34      	ldr	r3, [pc, #208]	; (800400c <ethernetif_update_config+0xf4>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d03f      	beq.n	8003fc2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003f42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f46:	2100      	movs	r1, #0
 8003f48:	4830      	ldr	r0, [pc, #192]	; (800400c <ethernetif_update_config+0xf4>)
 8003f4a:	f7fd fd49 	bl	80019e0 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003f4e:	f7fc ff73 	bl	8000e38 <HAL_GetTick>
 8003f52:	4603      	mov	r3, r0
 8003f54:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003f56:	f107 0308 	add.w	r3, r7, #8
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	482b      	ldr	r0, [pc, #172]	; (800400c <ethernetif_update_config+0xf4>)
 8003f60:	f7fd fcd6 	bl	8001910 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003f64:	f7fc ff68 	bl	8000e38 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f72:	d828      	bhi.n	8003fc6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0eb      	beq.n	8003f56 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003f7e:	f107 0308 	add.w	r3, r7, #8
 8003f82:	461a      	mov	r2, r3
 8003f84:	2110      	movs	r1, #16
 8003f86:	4821      	ldr	r0, [pc, #132]	; (800400c <ethernetif_update_config+0xf4>)
 8003f88:	f7fd fcc2 	bl	8001910 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d004      	beq.n	8003fa0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003f96:	4b1d      	ldr	r3, [pc, #116]	; (800400c <ethernetif_update_config+0xf4>)
 8003f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f9c:	60da      	str	r2, [r3, #12]
 8003f9e:	e002      	b.n	8003fa6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003fa0:	4b1a      	ldr	r3, [pc, #104]	; (800400c <ethernetif_update_config+0xf4>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003fb0:	4b16      	ldr	r3, [pc, #88]	; (800400c <ethernetif_update_config+0xf4>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	609a      	str	r2, [r3, #8]
 8003fb6:	e016      	b.n	8003fe6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003fb8:	4b14      	ldr	r3, [pc, #80]	; (800400c <ethernetif_update_config+0xf4>)
 8003fba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fbe:	609a      	str	r2, [r3, #8]
 8003fc0:	e011      	b.n	8003fe6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003fc2:	bf00      	nop
 8003fc4:	e000      	b.n	8003fc8 <ethernetif_update_config+0xb0>
          goto error;
 8003fc6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003fc8:	4b10      	ldr	r3, [pc, #64]	; (800400c <ethernetif_update_config+0xf4>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	08db      	lsrs	r3, r3, #3
 8003fce:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	; (800400c <ethernetif_update_config+0xf4>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	085b      	lsrs	r3, r3, #1
 8003fd6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	461a      	mov	r2, r3
 8003fde:	2100      	movs	r1, #0
 8003fe0:	480a      	ldr	r0, [pc, #40]	; (800400c <ethernetif_update_config+0xf4>)
 8003fe2:	f7fd fcfd 	bl	80019e0 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4808      	ldr	r0, [pc, #32]	; (800400c <ethernetif_update_config+0xf4>)
 8003fea:	f7fd fdbd 	bl	8001b68 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003fee:	4807      	ldr	r0, [pc, #28]	; (800400c <ethernetif_update_config+0xf4>)
 8003ff0:	f7fd fd5c 	bl	8001aac <HAL_ETH_Start>
 8003ff4:	e002      	b.n	8003ffc <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003ff6:	4805      	ldr	r0, [pc, #20]	; (800400c <ethernetif_update_config+0xf4>)
 8003ff8:	f7fd fd87 	bl	8001b0a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f807 	bl	8004010 <ethernetif_notify_conn_changed>
}
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20001bd8 	.word	0x20001bd8

08004010 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	b21a      	sxth	r2, r3
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	0a1b      	lsrs	r3, r3, #8
 8004038:	b29b      	uxth	r3, r3
 800403a:	b21b      	sxth	r3, r3
 800403c:	4313      	orrs	r3, r2
 800403e:	b21b      	sxth	r3, r3
 8004040:	b29b      	uxth	r3, r3
}
 8004042:	4618      	mov	r0, r3
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	061a      	lsls	r2, r3, #24
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	0a1b      	lsrs	r3, r3, #8
 8004068:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	0e1b      	lsrs	r3, r3, #24
 8004072:	4313      	orrs	r3, r2
}
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800408a:	f000 f8d5 	bl	8004238 <mem_init>
  memp_init();
 800408e:	f000 fbdb 	bl	8004848 <memp_init>
  pbuf_init();
  netif_init();
 8004092:	f000 fc93 	bl	80049bc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004096:	f007 f84b 	bl	800b130 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800409a:	f001 fda7 	bl	8005bec <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800409e:	f006 ffbd 	bl	800b01c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80040b6:	4b05      	ldr	r3, [pc, #20]	; (80040cc <ptr_to_mem+0x20>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	88fb      	ldrh	r3, [r7, #6]
 80040bc:	4413      	add	r3, r2
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000098 	.word	0x20000098

080040d0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80040d8:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <mem_to_ptr+0x20>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	b29b      	uxth	r3, r3
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000098 	.word	0x20000098

080040f4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80040f4:	b590      	push	{r4, r7, lr}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80040fc:	4b45      	ldr	r3, [pc, #276]	; (8004214 <plug_holes+0x120>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	429a      	cmp	r2, r3
 8004104:	d206      	bcs.n	8004114 <plug_holes+0x20>
 8004106:	4b44      	ldr	r3, [pc, #272]	; (8004218 <plug_holes+0x124>)
 8004108:	f240 12df 	movw	r2, #479	; 0x1df
 800410c:	4943      	ldr	r1, [pc, #268]	; (800421c <plug_holes+0x128>)
 800410e:	4844      	ldr	r0, [pc, #272]	; (8004220 <plug_holes+0x12c>)
 8004110:	f00a f936 	bl	800e380 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004114:	4b43      	ldr	r3, [pc, #268]	; (8004224 <plug_holes+0x130>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	d306      	bcc.n	800412c <plug_holes+0x38>
 800411e:	4b3e      	ldr	r3, [pc, #248]	; (8004218 <plug_holes+0x124>)
 8004120:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004124:	4940      	ldr	r1, [pc, #256]	; (8004228 <plug_holes+0x134>)
 8004126:	483e      	ldr	r0, [pc, #248]	; (8004220 <plug_holes+0x12c>)
 8004128:	f00a f92a 	bl	800e380 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	791b      	ldrb	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d006      	beq.n	8004142 <plug_holes+0x4e>
 8004134:	4b38      	ldr	r3, [pc, #224]	; (8004218 <plug_holes+0x124>)
 8004136:	f240 12e1 	movw	r2, #481	; 0x1e1
 800413a:	493c      	ldr	r1, [pc, #240]	; (800422c <plug_holes+0x138>)
 800413c:	4838      	ldr	r0, [pc, #224]	; (8004220 <plug_holes+0x12c>)
 800413e:	f00a f91f 	bl	800e380 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800414a:	d906      	bls.n	800415a <plug_holes+0x66>
 800414c:	4b32      	ldr	r3, [pc, #200]	; (8004218 <plug_holes+0x124>)
 800414e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004152:	4937      	ldr	r1, [pc, #220]	; (8004230 <plug_holes+0x13c>)
 8004154:	4832      	ldr	r0, [pc, #200]	; (8004220 <plug_holes+0x12c>)
 8004156:	f00a f913 	bl	800e380 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff ffa4 	bl	80040ac <ptr_to_mem>
 8004164:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	429a      	cmp	r2, r3
 800416c:	d024      	beq.n	80041b8 <plug_holes+0xc4>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	791b      	ldrb	r3, [r3, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d120      	bne.n	80041b8 <plug_holes+0xc4>
 8004176:	4b2b      	ldr	r3, [pc, #172]	; (8004224 <plug_holes+0x130>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	429a      	cmp	r2, r3
 800417e:	d01b      	beq.n	80041b8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004180:	4b2c      	ldr	r3, [pc, #176]	; (8004234 <plug_holes+0x140>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	429a      	cmp	r2, r3
 8004188:	d102      	bne.n	8004190 <plug_holes+0x9c>
      lfree = mem;
 800418a:	4a2a      	ldr	r2, [pc, #168]	; (8004234 <plug_holes+0x140>)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	881a      	ldrh	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80041a0:	d00a      	beq.n	80041b8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff ff80 	bl	80040ac <ptr_to_mem>
 80041ac:	4604      	mov	r4, r0
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff ff8e 	bl	80040d0 <mem_to_ptr>
 80041b4:	4603      	mov	r3, r0
 80041b6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	885b      	ldrh	r3, [r3, #2]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff ff75 	bl	80040ac <ptr_to_mem>
 80041c2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d01f      	beq.n	800420c <plug_holes+0x118>
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	791b      	ldrb	r3, [r3, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d11b      	bne.n	800420c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80041d4:	4b17      	ldr	r3, [pc, #92]	; (8004234 <plug_holes+0x140>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d102      	bne.n	80041e4 <plug_holes+0xf0>
      lfree = pmem;
 80041de:	4a15      	ldr	r2, [pc, #84]	; (8004234 <plug_holes+0x140>)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	881a      	ldrh	r2, [r3, #0]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80041f4:	d00a      	beq.n	800420c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff ff56 	bl	80040ac <ptr_to_mem>
 8004200:	4604      	mov	r4, r0
 8004202:	68b8      	ldr	r0, [r7, #8]
 8004204:	f7ff ff64 	bl	80040d0 <mem_to_ptr>
 8004208:	4603      	mov	r3, r0
 800420a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800420c:	bf00      	nop
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	bd90      	pop	{r4, r7, pc}
 8004214:	20000098 	.word	0x20000098
 8004218:	0800f790 	.word	0x0800f790
 800421c:	0800f7c0 	.word	0x0800f7c0
 8004220:	0800f7d8 	.word	0x0800f7d8
 8004224:	2000009c 	.word	0x2000009c
 8004228:	0800f800 	.word	0x0800f800
 800422c:	0800f81c 	.word	0x0800f81c
 8004230:	0800f838 	.word	0x0800f838
 8004234:	200000a0 	.word	0x200000a0

08004238 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800423e:	4b18      	ldr	r3, [pc, #96]	; (80042a0 <mem_init+0x68>)
 8004240:	3303      	adds	r3, #3
 8004242:	f023 0303 	bic.w	r3, r3, #3
 8004246:	461a      	mov	r2, r3
 8004248:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <mem_init+0x6c>)
 800424a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800424c:	4b15      	ldr	r3, [pc, #84]	; (80042a4 <mem_init+0x6c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004258:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004266:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800426a:	f7ff ff1f 	bl	80040ac <ptr_to_mem>
 800426e:	4603      	mov	r3, r0
 8004270:	4a0d      	ldr	r2, [pc, #52]	; (80042a8 <mem_init+0x70>)
 8004272:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004274:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <mem_init+0x70>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2201      	movs	r2, #1
 800427a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800427c:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <mem_init+0x70>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004284:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004286:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <mem_init+0x70>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800428e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004290:	4b04      	ldr	r3, [pc, #16]	; (80042a4 <mem_init+0x6c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a05      	ldr	r2, [pc, #20]	; (80042ac <mem_init+0x74>)
 8004296:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004298:	bf00      	nop
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	20003408 	.word	0x20003408
 80042a4:	20000098 	.word	0x20000098
 80042a8:	2000009c 	.word	0x2000009c
 80042ac:	200000a0 	.word	0x200000a0

080042b0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff ff09 	bl	80040d0 <mem_to_ptr>
 80042be:	4603      	mov	r3, r0
 80042c0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff fef0 	bl	80040ac <ptr_to_mem>
 80042cc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	885b      	ldrh	r3, [r3, #2]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff feea 	bl	80040ac <ptr_to_mem>
 80042d8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80042e2:	d818      	bhi.n	8004316 <mem_link_valid+0x66>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	885b      	ldrh	r3, [r3, #2]
 80042e8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80042ec:	d813      	bhi.n	8004316 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80042f2:	8afa      	ldrh	r2, [r7, #22]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d004      	beq.n	8004302 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	8afa      	ldrh	r2, [r7, #22]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d109      	bne.n	8004316 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004302:	4b08      	ldr	r3, [pc, #32]	; (8004324 <mem_link_valid+0x74>)
 8004304:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	429a      	cmp	r2, r3
 800430a:	d006      	beq.n	800431a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	885b      	ldrh	r3, [r3, #2]
 8004310:	8afa      	ldrh	r2, [r7, #22]
 8004312:	429a      	cmp	r2, r3
 8004314:	d001      	beq.n	800431a <mem_link_valid+0x6a>
    return 0;
 8004316:	2300      	movs	r3, #0
 8004318:	e000      	b.n	800431c <mem_link_valid+0x6c>
  }
  return 1;
 800431a:	2301      	movs	r3, #1
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	2000009c 	.word	0x2000009c

08004328 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d04c      	beq.n	80043d0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f003 0303 	and.w	r3, r3, #3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d007      	beq.n	8004350 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004340:	4b25      	ldr	r3, [pc, #148]	; (80043d8 <mem_free+0xb0>)
 8004342:	f240 2273 	movw	r2, #627	; 0x273
 8004346:	4925      	ldr	r1, [pc, #148]	; (80043dc <mem_free+0xb4>)
 8004348:	4825      	ldr	r0, [pc, #148]	; (80043e0 <mem_free+0xb8>)
 800434a:	f00a f819 	bl	800e380 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800434e:	e040      	b.n	80043d2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3b08      	subs	r3, #8
 8004354:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004356:	4b23      	ldr	r3, [pc, #140]	; (80043e4 <mem_free+0xbc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	429a      	cmp	r2, r3
 800435e:	d306      	bcc.n	800436e <mem_free+0x46>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f103 020c 	add.w	r2, r3, #12
 8004366:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <mem_free+0xc0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d907      	bls.n	800437e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800436e:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <mem_free+0xb0>)
 8004370:	f240 227f 	movw	r2, #639	; 0x27f
 8004374:	491d      	ldr	r1, [pc, #116]	; (80043ec <mem_free+0xc4>)
 8004376:	481a      	ldr	r0, [pc, #104]	; (80043e0 <mem_free+0xb8>)
 8004378:	f00a f802 	bl	800e380 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800437c:	e029      	b.n	80043d2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	791b      	ldrb	r3, [r3, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d107      	bne.n	8004396 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004386:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <mem_free+0xb0>)
 8004388:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800438c:	4918      	ldr	r1, [pc, #96]	; (80043f0 <mem_free+0xc8>)
 800438e:	4814      	ldr	r0, [pc, #80]	; (80043e0 <mem_free+0xb8>)
 8004390:	f009 fff6 	bl	800e380 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004394:	e01d      	b.n	80043d2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f7ff ff8a 	bl	80042b0 <mem_link_valid>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d107      	bne.n	80043b2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80043a2:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <mem_free+0xb0>)
 80043a4:	f240 2295 	movw	r2, #661	; 0x295
 80043a8:	4912      	ldr	r1, [pc, #72]	; (80043f4 <mem_free+0xcc>)
 80043aa:	480d      	ldr	r0, [pc, #52]	; (80043e0 <mem_free+0xb8>)
 80043ac:	f009 ffe8 	bl	800e380 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80043b0:	e00f      	b.n	80043d2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80043b8:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <mem_free+0xd0>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d202      	bcs.n	80043c8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80043c2:	4a0d      	ldr	r2, [pc, #52]	; (80043f8 <mem_free+0xd0>)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f7ff fe93 	bl	80040f4 <plug_holes>
 80043ce:	e000      	b.n	80043d2 <mem_free+0xaa>
    return;
 80043d0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	0800f790 	.word	0x0800f790
 80043dc:	0800f864 	.word	0x0800f864
 80043e0:	0800f7d8 	.word	0x0800f7d8
 80043e4:	20000098 	.word	0x20000098
 80043e8:	2000009c 	.word	0x2000009c
 80043ec:	0800f888 	.word	0x0800f888
 80043f0:	0800f8a4 	.word	0x0800f8a4
 80043f4:	0800f8cc 	.word	0x0800f8cc
 80043f8:	200000a0 	.word	0x200000a0

080043fc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004408:	887b      	ldrh	r3, [r7, #2]
 800440a:	3303      	adds	r3, #3
 800440c:	b29b      	uxth	r3, r3
 800440e:	f023 0303 	bic.w	r3, r3, #3
 8004412:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004414:	8bfb      	ldrh	r3, [r7, #30]
 8004416:	2b0b      	cmp	r3, #11
 8004418:	d801      	bhi.n	800441e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800441a:	230c      	movs	r3, #12
 800441c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800441e:	8bfb      	ldrh	r3, [r7, #30]
 8004420:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004424:	d803      	bhi.n	800442e <mem_trim+0x32>
 8004426:	8bfa      	ldrh	r2, [r7, #30]
 8004428:	887b      	ldrh	r3, [r7, #2]
 800442a:	429a      	cmp	r2, r3
 800442c:	d201      	bcs.n	8004432 <mem_trim+0x36>
    return NULL;
 800442e:	2300      	movs	r3, #0
 8004430:	e0cc      	b.n	80045cc <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004432:	4b68      	ldr	r3, [pc, #416]	; (80045d4 <mem_trim+0x1d8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	429a      	cmp	r2, r3
 800443a:	d304      	bcc.n	8004446 <mem_trim+0x4a>
 800443c:	4b66      	ldr	r3, [pc, #408]	; (80045d8 <mem_trim+0x1dc>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	429a      	cmp	r2, r3
 8004444:	d306      	bcc.n	8004454 <mem_trim+0x58>
 8004446:	4b65      	ldr	r3, [pc, #404]	; (80045dc <mem_trim+0x1e0>)
 8004448:	f240 22d1 	movw	r2, #721	; 0x2d1
 800444c:	4964      	ldr	r1, [pc, #400]	; (80045e0 <mem_trim+0x1e4>)
 800444e:	4865      	ldr	r0, [pc, #404]	; (80045e4 <mem_trim+0x1e8>)
 8004450:	f009 ff96 	bl	800e380 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004454:	4b5f      	ldr	r3, [pc, #380]	; (80045d4 <mem_trim+0x1d8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	429a      	cmp	r2, r3
 800445c:	d304      	bcc.n	8004468 <mem_trim+0x6c>
 800445e:	4b5e      	ldr	r3, [pc, #376]	; (80045d8 <mem_trim+0x1dc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	429a      	cmp	r2, r3
 8004466:	d301      	bcc.n	800446c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	e0af      	b.n	80045cc <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3b08      	subs	r3, #8
 8004470:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004472:	69b8      	ldr	r0, [r7, #24]
 8004474:	f7ff fe2c 	bl	80040d0 <mem_to_ptr>
 8004478:	4603      	mov	r3, r0
 800447a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	881a      	ldrh	r2, [r3, #0]
 8004480:	8afb      	ldrh	r3, [r7, #22]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b08      	subs	r3, #8
 8004488:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800448a:	8bfa      	ldrh	r2, [r7, #30]
 800448c:	8abb      	ldrh	r3, [r7, #20]
 800448e:	429a      	cmp	r2, r3
 8004490:	d906      	bls.n	80044a0 <mem_trim+0xa4>
 8004492:	4b52      	ldr	r3, [pc, #328]	; (80045dc <mem_trim+0x1e0>)
 8004494:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004498:	4953      	ldr	r1, [pc, #332]	; (80045e8 <mem_trim+0x1ec>)
 800449a:	4852      	ldr	r0, [pc, #328]	; (80045e4 <mem_trim+0x1e8>)
 800449c:	f009 ff70 	bl	800e380 <iprintf>
  if (newsize > size) {
 80044a0:	8bfa      	ldrh	r2, [r7, #30]
 80044a2:	8abb      	ldrh	r3, [r7, #20]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d901      	bls.n	80044ac <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	e08f      	b.n	80045cc <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80044ac:	8bfa      	ldrh	r2, [r7, #30]
 80044ae:	8abb      	ldrh	r3, [r7, #20]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d101      	bne.n	80044b8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	e089      	b.n	80045cc <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fdf5 	bl	80040ac <ptr_to_mem>
 80044c2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	791b      	ldrb	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d13f      	bne.n	800454c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80044d4:	d106      	bne.n	80044e4 <mem_trim+0xe8>
 80044d6:	4b41      	ldr	r3, [pc, #260]	; (80045dc <mem_trim+0x1e0>)
 80044d8:	f240 22f5 	movw	r2, #757	; 0x2f5
 80044dc:	4943      	ldr	r1, [pc, #268]	; (80045ec <mem_trim+0x1f0>)
 80044de:	4841      	ldr	r0, [pc, #260]	; (80045e4 <mem_trim+0x1e8>)
 80044e0:	f009 ff4e 	bl	800e380 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80044ea:	8afa      	ldrh	r2, [r7, #22]
 80044ec:	8bfb      	ldrh	r3, [r7, #30]
 80044ee:	4413      	add	r3, r2
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3308      	adds	r3, #8
 80044f4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80044f6:	4b3e      	ldr	r3, [pc, #248]	; (80045f0 <mem_trim+0x1f4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d106      	bne.n	800450e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004500:	89fb      	ldrh	r3, [r7, #14]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff fdd2 	bl	80040ac <ptr_to_mem>
 8004508:	4603      	mov	r3, r0
 800450a:	4a39      	ldr	r2, [pc, #228]	; (80045f0 <mem_trim+0x1f4>)
 800450c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800450e:	89fb      	ldrh	r3, [r7, #14]
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff fdcb 	bl	80040ac <ptr_to_mem>
 8004516:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2200      	movs	r2, #0
 800451c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	89ba      	ldrh	r2, [r7, #12]
 8004522:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	8afa      	ldrh	r2, [r7, #22]
 8004528:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	89fa      	ldrh	r2, [r7, #14]
 800452e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004538:	d047      	beq.n	80045ca <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff fdb4 	bl	80040ac <ptr_to_mem>
 8004544:	4602      	mov	r2, r0
 8004546:	89fb      	ldrh	r3, [r7, #14]
 8004548:	8053      	strh	r3, [r2, #2]
 800454a:	e03e      	b.n	80045ca <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800454c:	8bfb      	ldrh	r3, [r7, #30]
 800454e:	f103 0214 	add.w	r2, r3, #20
 8004552:	8abb      	ldrh	r3, [r7, #20]
 8004554:	429a      	cmp	r2, r3
 8004556:	d838      	bhi.n	80045ca <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004558:	8afa      	ldrh	r2, [r7, #22]
 800455a:	8bfb      	ldrh	r3, [r7, #30]
 800455c:	4413      	add	r3, r2
 800455e:	b29b      	uxth	r3, r3
 8004560:	3308      	adds	r3, #8
 8004562:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800456c:	d106      	bne.n	800457c <mem_trim+0x180>
 800456e:	4b1b      	ldr	r3, [pc, #108]	; (80045dc <mem_trim+0x1e0>)
 8004570:	f240 3216 	movw	r2, #790	; 0x316
 8004574:	491d      	ldr	r1, [pc, #116]	; (80045ec <mem_trim+0x1f0>)
 8004576:	481b      	ldr	r0, [pc, #108]	; (80045e4 <mem_trim+0x1e8>)
 8004578:	f009 ff02 	bl	800e380 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800457c:	89fb      	ldrh	r3, [r7, #14]
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fd94 	bl	80040ac <ptr_to_mem>
 8004584:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004586:	4b1a      	ldr	r3, [pc, #104]	; (80045f0 <mem_trim+0x1f4>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	429a      	cmp	r2, r3
 800458e:	d202      	bcs.n	8004596 <mem_trim+0x19a>
      lfree = mem2;
 8004590:	4a17      	ldr	r2, [pc, #92]	; (80045f0 <mem_trim+0x1f4>)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2200      	movs	r2, #0
 800459a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	881a      	ldrh	r2, [r3, #0]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	8afa      	ldrh	r2, [r7, #22]
 80045a8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	89fa      	ldrh	r2, [r7, #14]
 80045ae:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80045b8:	d007      	beq.n	80045ca <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fd74 	bl	80040ac <ptr_to_mem>
 80045c4:	4602      	mov	r2, r0
 80045c6:	89fb      	ldrh	r3, [r7, #14]
 80045c8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80045ca:	687b      	ldr	r3, [r7, #4]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3720      	adds	r7, #32
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000098 	.word	0x20000098
 80045d8:	2000009c 	.word	0x2000009c
 80045dc:	0800f790 	.word	0x0800f790
 80045e0:	0800f900 	.word	0x0800f900
 80045e4:	0800f7d8 	.word	0x0800f7d8
 80045e8:	0800f918 	.word	0x0800f918
 80045ec:	0800f938 	.word	0x0800f938
 80045f0:	200000a0 	.word	0x200000a0

080045f4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <mem_malloc+0x14>
    return NULL;
 8004604:	2300      	movs	r3, #0
 8004606:	e0d9      	b.n	80047bc <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004608:	88fb      	ldrh	r3, [r7, #6]
 800460a:	3303      	adds	r3, #3
 800460c:	b29b      	uxth	r3, r3
 800460e:	f023 0303 	bic.w	r3, r3, #3
 8004612:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004614:	8bbb      	ldrh	r3, [r7, #28]
 8004616:	2b0b      	cmp	r3, #11
 8004618:	d801      	bhi.n	800461e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800461a:	230c      	movs	r3, #12
 800461c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800461e:	8bbb      	ldrh	r3, [r7, #28]
 8004620:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004624:	d803      	bhi.n	800462e <mem_malloc+0x3a>
 8004626:	8bba      	ldrh	r2, [r7, #28]
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	429a      	cmp	r2, r3
 800462c:	d201      	bcs.n	8004632 <mem_malloc+0x3e>
    return NULL;
 800462e:	2300      	movs	r3, #0
 8004630:	e0c4      	b.n	80047bc <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004632:	4b64      	ldr	r3, [pc, #400]	; (80047c4 <mem_malloc+0x1d0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fd4a 	bl	80040d0 <mem_to_ptr>
 800463c:	4603      	mov	r3, r0
 800463e:	83fb      	strh	r3, [r7, #30]
 8004640:	e0b4      	b.n	80047ac <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004642:	8bfb      	ldrh	r3, [r7, #30]
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff fd31 	bl	80040ac <ptr_to_mem>
 800464a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	791b      	ldrb	r3, [r3, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	f040 80a4 	bne.w	800479e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	8bfb      	ldrh	r3, [r7, #30]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	f1a3 0208 	sub.w	r2, r3, #8
 8004664:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004666:	429a      	cmp	r2, r3
 8004668:	f0c0 8099 	bcc.w	800479e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	8bfb      	ldrh	r3, [r7, #30]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f1a3 0208 	sub.w	r2, r3, #8
 800467a:	8bbb      	ldrh	r3, [r7, #28]
 800467c:	3314      	adds	r3, #20
 800467e:	429a      	cmp	r2, r3
 8004680:	d333      	bcc.n	80046ea <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004682:	8bfa      	ldrh	r2, [r7, #30]
 8004684:	8bbb      	ldrh	r3, [r7, #28]
 8004686:	4413      	add	r3, r2
 8004688:	b29b      	uxth	r3, r3
 800468a:	3308      	adds	r3, #8
 800468c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800468e:	8a7b      	ldrh	r3, [r7, #18]
 8004690:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004694:	d106      	bne.n	80046a4 <mem_malloc+0xb0>
 8004696:	4b4c      	ldr	r3, [pc, #304]	; (80047c8 <mem_malloc+0x1d4>)
 8004698:	f240 3287 	movw	r2, #903	; 0x387
 800469c:	494b      	ldr	r1, [pc, #300]	; (80047cc <mem_malloc+0x1d8>)
 800469e:	484c      	ldr	r0, [pc, #304]	; (80047d0 <mem_malloc+0x1dc>)
 80046a0:	f009 fe6e 	bl	800e380 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80046a4:	8a7b      	ldrh	r3, [r7, #18]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff fd00 	bl	80040ac <ptr_to_mem>
 80046ac:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	881a      	ldrh	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8bfa      	ldrh	r2, [r7, #30]
 80046c0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	8a7a      	ldrh	r2, [r7, #18]
 80046c6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2201      	movs	r2, #1
 80046cc:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80046d6:	d00b      	beq.n	80046f0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff fce5 	bl	80040ac <ptr_to_mem>
 80046e2:	4602      	mov	r2, r0
 80046e4:	8a7b      	ldrh	r3, [r7, #18]
 80046e6:	8053      	strh	r3, [r2, #2]
 80046e8:	e002      	b.n	80046f0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2201      	movs	r2, #1
 80046ee:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80046f0:	4b34      	ldr	r3, [pc, #208]	; (80047c4 <mem_malloc+0x1d0>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d127      	bne.n	800474a <mem_malloc+0x156>
          struct mem *cur = lfree;
 80046fa:	4b32      	ldr	r3, [pc, #200]	; (80047c4 <mem_malloc+0x1d0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004700:	e005      	b.n	800470e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff fcd0 	bl	80040ac <ptr_to_mem>
 800470c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	791b      	ldrb	r3, [r3, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d004      	beq.n	8004720 <mem_malloc+0x12c>
 8004716:	4b2f      	ldr	r3, [pc, #188]	; (80047d4 <mem_malloc+0x1e0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	429a      	cmp	r2, r3
 800471e:	d1f0      	bne.n	8004702 <mem_malloc+0x10e>
          }
          lfree = cur;
 8004720:	4a28      	ldr	r2, [pc, #160]	; (80047c4 <mem_malloc+0x1d0>)
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004726:	4b27      	ldr	r3, [pc, #156]	; (80047c4 <mem_malloc+0x1d0>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4b2a      	ldr	r3, [pc, #168]	; (80047d4 <mem_malloc+0x1e0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d00b      	beq.n	800474a <mem_malloc+0x156>
 8004732:	4b24      	ldr	r3, [pc, #144]	; (80047c4 <mem_malloc+0x1d0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	791b      	ldrb	r3, [r3, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d006      	beq.n	800474a <mem_malloc+0x156>
 800473c:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <mem_malloc+0x1d4>)
 800473e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004742:	4925      	ldr	r1, [pc, #148]	; (80047d8 <mem_malloc+0x1e4>)
 8004744:	4822      	ldr	r0, [pc, #136]	; (80047d0 <mem_malloc+0x1dc>)
 8004746:	f009 fe1b 	bl	800e380 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800474a:	8bba      	ldrh	r2, [r7, #28]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	4413      	add	r3, r2
 8004750:	3308      	adds	r3, #8
 8004752:	4a20      	ldr	r2, [pc, #128]	; (80047d4 <mem_malloc+0x1e0>)
 8004754:	6812      	ldr	r2, [r2, #0]
 8004756:	4293      	cmp	r3, r2
 8004758:	d906      	bls.n	8004768 <mem_malloc+0x174>
 800475a:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <mem_malloc+0x1d4>)
 800475c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004760:	491e      	ldr	r1, [pc, #120]	; (80047dc <mem_malloc+0x1e8>)
 8004762:	481b      	ldr	r0, [pc, #108]	; (80047d0 <mem_malloc+0x1dc>)
 8004764:	f009 fe0c 	bl	800e380 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d006      	beq.n	8004780 <mem_malloc+0x18c>
 8004772:	4b15      	ldr	r3, [pc, #84]	; (80047c8 <mem_malloc+0x1d4>)
 8004774:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004778:	4919      	ldr	r1, [pc, #100]	; (80047e0 <mem_malloc+0x1ec>)
 800477a:	4815      	ldr	r0, [pc, #84]	; (80047d0 <mem_malloc+0x1dc>)
 800477c:	f009 fe00 	bl	800e380 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d006      	beq.n	8004798 <mem_malloc+0x1a4>
 800478a:	4b0f      	ldr	r3, [pc, #60]	; (80047c8 <mem_malloc+0x1d4>)
 800478c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004790:	4914      	ldr	r1, [pc, #80]	; (80047e4 <mem_malloc+0x1f0>)
 8004792:	480f      	ldr	r0, [pc, #60]	; (80047d0 <mem_malloc+0x1dc>)
 8004794:	f009 fdf4 	bl	800e380 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	3308      	adds	r3, #8
 800479c:	e00e      	b.n	80047bc <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800479e:	8bfb      	ldrh	r3, [r7, #30]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff fc83 	bl	80040ac <ptr_to_mem>
 80047a6:	4603      	mov	r3, r0
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80047ac:	8bfa      	ldrh	r2, [r7, #30]
 80047ae:	8bbb      	ldrh	r3, [r7, #28]
 80047b0:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80047b4:	429a      	cmp	r2, r3
 80047b6:	f4ff af44 	bcc.w	8004642 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3720      	adds	r7, #32
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	200000a0 	.word	0x200000a0
 80047c8:	0800f790 	.word	0x0800f790
 80047cc:	0800f938 	.word	0x0800f938
 80047d0:	0800f7d8 	.word	0x0800f7d8
 80047d4:	2000009c 	.word	0x2000009c
 80047d8:	0800f94c 	.word	0x0800f94c
 80047dc:	0800f968 	.word	0x0800f968
 80047e0:	0800f998 	.word	0x0800f998
 80047e4:	0800f9c8 	.word	0x0800f9c8

080047e8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	3303      	adds	r3, #3
 80047fe:	f023 0303 	bic.w	r3, r3, #3
 8004802:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	e011      	b.n	800482e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4413      	add	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3301      	adds	r3, #1
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	885b      	ldrh	r3, [r3, #2]
 8004832:	461a      	mov	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4293      	cmp	r3, r2
 8004838:	dbe7      	blt.n	800480a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800483a:	bf00      	nop
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800484e:	2300      	movs	r3, #0
 8004850:	80fb      	strh	r3, [r7, #6]
 8004852:	e009      	b.n	8004868 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	4a08      	ldr	r2, [pc, #32]	; (8004878 <memp_init+0x30>)
 8004858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff ffc3 	bl	80047e8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	3301      	adds	r3, #1
 8004866:	80fb      	strh	r3, [r7, #6]
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	2b08      	cmp	r3, #8
 800486c:	d9f2      	bls.n	8004854 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800486e:	bf00      	nop
 8004870:	bf00      	nop
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	080121a0 	.word	0x080121a0

0800487c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d012      	beq.n	80048b8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	6812      	ldr	r2, [r2, #0]
 800489a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d006      	beq.n	80048b4 <do_memp_malloc_pool+0x38>
 80048a6:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <do_memp_malloc_pool+0x48>)
 80048a8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80048ac:	4906      	ldr	r1, [pc, #24]	; (80048c8 <do_memp_malloc_pool+0x4c>)
 80048ae:	4807      	ldr	r0, [pc, #28]	; (80048cc <do_memp_malloc_pool+0x50>)
 80048b0:	f009 fd66 	bl	800e380 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	e000      	b.n	80048ba <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	0800f9ec 	.word	0x0800f9ec
 80048c8:	0800fa1c 	.word	0x0800fa1c
 80048cc:	0800fa40 	.word	0x0800fa40

080048d0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d908      	bls.n	80048f2 <memp_malloc+0x22>
 80048e0:	4b0a      	ldr	r3, [pc, #40]	; (800490c <memp_malloc+0x3c>)
 80048e2:	f240 1257 	movw	r2, #343	; 0x157
 80048e6:	490a      	ldr	r1, [pc, #40]	; (8004910 <memp_malloc+0x40>)
 80048e8:	480a      	ldr	r0, [pc, #40]	; (8004914 <memp_malloc+0x44>)
 80048ea:	f009 fd49 	bl	800e380 <iprintf>
 80048ee:	2300      	movs	r3, #0
 80048f0:	e008      	b.n	8004904 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80048f2:	79fb      	ldrb	r3, [r7, #7]
 80048f4:	4a08      	ldr	r2, [pc, #32]	; (8004918 <memp_malloc+0x48>)
 80048f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff ffbe 	bl	800487c <do_memp_malloc_pool>
 8004900:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004902:	68fb      	ldr	r3, [r7, #12]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	0800f9ec 	.word	0x0800f9ec
 8004910:	0800fa7c 	.word	0x0800fa7c
 8004914:	0800fa40 	.word	0x0800fa40
 8004918:	080121a0 	.word	0x080121a0

0800491c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d006      	beq.n	800493e <do_memp_free_pool+0x22>
 8004930:	4b0a      	ldr	r3, [pc, #40]	; (800495c <do_memp_free_pool+0x40>)
 8004932:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004936:	490a      	ldr	r1, [pc, #40]	; (8004960 <do_memp_free_pool+0x44>)
 8004938:	480a      	ldr	r0, [pc, #40]	; (8004964 <do_memp_free_pool+0x48>)
 800493a:	f009 fd21 	bl	800e380 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004954:	bf00      	nop
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	0800f9ec 	.word	0x0800f9ec
 8004960:	0800fa9c 	.word	0x0800fa9c
 8004964:	0800fa40 	.word	0x0800fa40

08004968 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	6039      	str	r1, [r7, #0]
 8004972:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	2b08      	cmp	r3, #8
 8004978:	d907      	bls.n	800498a <memp_free+0x22>
 800497a:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <memp_free+0x44>)
 800497c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004980:	490b      	ldr	r1, [pc, #44]	; (80049b0 <memp_free+0x48>)
 8004982:	480c      	ldr	r0, [pc, #48]	; (80049b4 <memp_free+0x4c>)
 8004984:	f009 fcfc 	bl	800e380 <iprintf>
 8004988:	e00c      	b.n	80049a4 <memp_free+0x3c>

  if (mem == NULL) {
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004990:	79fb      	ldrb	r3, [r7, #7]
 8004992:	4a09      	ldr	r2, [pc, #36]	; (80049b8 <memp_free+0x50>)
 8004994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004998:	6839      	ldr	r1, [r7, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff ffbe 	bl	800491c <do_memp_free_pool>
 80049a0:	e000      	b.n	80049a4 <memp_free+0x3c>
    return;
 80049a2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	0800f9ec 	.word	0x0800f9ec
 80049b0:	0800fabc 	.word	0x0800fabc
 80049b4:	0800fa40 	.word	0x0800fa40
 80049b8:	080121a0 	.word	0x080121a0

080049bc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80049c0:	bf00      	nop
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d108      	bne.n	80049f2 <netif_add+0x26>
 80049e0:	4b57      	ldr	r3, [pc, #348]	; (8004b40 <netif_add+0x174>)
 80049e2:	f240 1227 	movw	r2, #295	; 0x127
 80049e6:	4957      	ldr	r1, [pc, #348]	; (8004b44 <netif_add+0x178>)
 80049e8:	4857      	ldr	r0, [pc, #348]	; (8004b48 <netif_add+0x17c>)
 80049ea:	f009 fcc9 	bl	800e380 <iprintf>
 80049ee:	2300      	movs	r3, #0
 80049f0:	e0a2      	b.n	8004b38 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d108      	bne.n	8004a0a <netif_add+0x3e>
 80049f8:	4b51      	ldr	r3, [pc, #324]	; (8004b40 <netif_add+0x174>)
 80049fa:	f44f 7294 	mov.w	r2, #296	; 0x128
 80049fe:	4953      	ldr	r1, [pc, #332]	; (8004b4c <netif_add+0x180>)
 8004a00:	4851      	ldr	r0, [pc, #324]	; (8004b48 <netif_add+0x17c>)
 8004a02:	f009 fcbd 	bl	800e380 <iprintf>
 8004a06:	2300      	movs	r3, #0
 8004a08:	e096      	b.n	8004b38 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004a10:	4b4f      	ldr	r3, [pc, #316]	; (8004b50 <netif_add+0x184>)
 8004a12:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004a1a:	4b4d      	ldr	r3, [pc, #308]	; (8004b50 <netif_add+0x184>)
 8004a1c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004a24:	4b4a      	ldr	r3, [pc, #296]	; (8004b50 <netif_add+0x184>)
 8004a26:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4a45      	ldr	r2, [pc, #276]	; (8004b54 <netif_add+0x188>)
 8004a3e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a3a      	ldr	r2, [r7, #32]
 8004a58:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004a5a:	4b3f      	ldr	r3, [pc, #252]	; (8004b58 <netif_add+0x18c>)
 8004a5c:	781a      	ldrb	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a68:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 f913 	bl	8004c9c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	4798      	blx	r3
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <netif_add+0xba>
    return NULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	e058      	b.n	8004b38 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a8c:	2bff      	cmp	r3, #255	; 0xff
 8004a8e:	d103      	bne.n	8004a98 <netif_add+0xcc>
        netif->num = 0;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004a9c:	4b2f      	ldr	r3, [pc, #188]	; (8004b5c <netif_add+0x190>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	e02b      	b.n	8004afc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d106      	bne.n	8004aba <netif_add+0xee>
 8004aac:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <netif_add+0x174>)
 8004aae:	f240 128b 	movw	r2, #395	; 0x18b
 8004ab2:	492b      	ldr	r1, [pc, #172]	; (8004b60 <netif_add+0x194>)
 8004ab4:	4824      	ldr	r0, [pc, #144]	; (8004b48 <netif_add+0x17c>)
 8004ab6:	f009 fc63 	bl	800e380 <iprintf>
        num_netifs++;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	3301      	adds	r3, #1
 8004abe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	2bff      	cmp	r3, #255	; 0xff
 8004ac4:	dd06      	ble.n	8004ad4 <netif_add+0x108>
 8004ac6:	4b1e      	ldr	r3, [pc, #120]	; (8004b40 <netif_add+0x174>)
 8004ac8:	f240 128d 	movw	r2, #397	; 0x18d
 8004acc:	4925      	ldr	r1, [pc, #148]	; (8004b64 <netif_add+0x198>)
 8004ace:	481e      	ldr	r0, [pc, #120]	; (8004b48 <netif_add+0x17c>)
 8004ad0:	f009 fc56 	bl	800e380 <iprintf>
        if (netif2->num == netif->num) {
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d108      	bne.n	8004af6 <netif_add+0x12a>
          netif->num++;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004aea:	3301      	adds	r3, #1
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8004af4:	e005      	b.n	8004b02 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1d0      	bne.n	8004aa4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1be      	bne.n	8004a86 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b0e:	2bfe      	cmp	r3, #254	; 0xfe
 8004b10:	d103      	bne.n	8004b1a <netif_add+0x14e>
    netif_num = 0;
 8004b12:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <netif_add+0x18c>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	e006      	b.n	8004b28 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b20:	3301      	adds	r3, #1
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <netif_add+0x18c>)
 8004b26:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004b28:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <netif_add+0x190>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004b30:	4a0a      	ldr	r2, [pc, #40]	; (8004b5c <netif_add+0x190>)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004b36:	68fb      	ldr	r3, [r7, #12]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	0800fad8 	.word	0x0800fad8
 8004b44:	0800fb6c 	.word	0x0800fb6c
 8004b48:	0800fb28 	.word	0x0800fb28
 8004b4c:	0800fb88 	.word	0x0800fb88
 8004b50:	08012204 	.word	0x08012204
 8004b54:	08004eaf 	.word	0x08004eaf
 8004b58:	200000c8 	.word	0x200000c8
 8004b5c:	20008ae4 	.word	0x20008ae4
 8004b60:	0800fbac 	.word	0x0800fbac
 8004b64:	0800fbc0 	.word	0x0800fbc0

08004b68 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004b72:	6839      	ldr	r1, [r7, #0]
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f002 fb81 	bl	800727c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004b7a:	6839      	ldr	r1, [r7, #0]
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f007 f81b 	bl	800bbb8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <netif_do_set_ipaddr+0x20>
 8004b9e:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <netif_do_set_ipaddr+0x88>)
 8004ba0:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004ba4:	491c      	ldr	r1, [pc, #112]	; (8004c18 <netif_do_set_ipaddr+0x8c>)
 8004ba6:	481d      	ldr	r0, [pc, #116]	; (8004c1c <netif_do_set_ipaddr+0x90>)
 8004ba8:	f009 fbea 	bl	800e380 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <netif_do_set_ipaddr+0x34>
 8004bb2:	4b18      	ldr	r3, [pc, #96]	; (8004c14 <netif_do_set_ipaddr+0x88>)
 8004bb4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004bb8:	4917      	ldr	r1, [pc, #92]	; (8004c18 <netif_do_set_ipaddr+0x8c>)
 8004bba:	4818      	ldr	r0, [pc, #96]	; (8004c1c <netif_do_set_ipaddr+0x90>)
 8004bbc:	f009 fbe0 	bl	800e380 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d01c      	beq.n	8004c08 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004bde:	f107 0314 	add.w	r3, r7, #20
 8004be2:	4619      	mov	r1, r3
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff ffbf 	bl	8004b68 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <netif_do_set_ipaddr+0x6a>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	e000      	b.n	8004bf8 <netif_do_set_ipaddr+0x6c>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 f8d2 	bl	8004da8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	0800fad8 	.word	0x0800fad8
 8004c18:	0800fbf0 	.word	0x0800fbf0
 8004c1c:	0800fb28 	.word	0x0800fb28

08004c20 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3308      	adds	r3, #8
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d00a      	beq.n	8004c50 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <netif_do_set_netmask+0x26>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	e000      	b.n	8004c48 <netif_do_set_netmask+0x28>
 8004c46:	2300      	movs	r3, #0
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b085      	sub	sp, #20
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	330c      	adds	r3, #12
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d00a      	beq.n	8004c8e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <netif_do_set_gw+0x26>
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	e000      	b.n	8004c86 <netif_do_set_gw+0x28>
 8004c84:	2300      	movs	r3, #0
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004cb8:	4b1c      	ldr	r3, [pc, #112]	; (8004d2c <netif_set_addr+0x90>)
 8004cba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004cc2:	4b1a      	ldr	r3, [pc, #104]	; (8004d2c <netif_set_addr+0x90>)
 8004cc4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004ccc:	4b17      	ldr	r3, [pc, #92]	; (8004d2c <netif_set_addr+0x90>)
 8004cce:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <netif_set_addr+0x42>
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <netif_set_addr+0x46>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <netif_set_addr+0x48>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d006      	beq.n	8004cfa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004cec:	f107 0310 	add.w	r3, r7, #16
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f7ff ff49 	bl	8004b8c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f7ff ff8e 	bl	8004c20 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	6839      	ldr	r1, [r7, #0]
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff ffa8 	bl	8004c5e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d106      	bne.n	8004d22 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004d14:	f107 0310 	add.w	r3, r7, #16
 8004d18:	461a      	mov	r2, r3
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f7ff ff35 	bl	8004b8c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004d22:	bf00      	nop
 8004d24:	3720      	adds	r7, #32
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	08012204 	.word	0x08012204

08004d30 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004d38:	4a04      	ldr	r2, [pc, #16]	; (8004d4c <netif_set_default+0x1c>)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	20008ae8 	.word	0x20008ae8

08004d50 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d107      	bne.n	8004d6e <netif_set_up+0x1e>
 8004d5e:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <netif_set_up+0x4c>)
 8004d60:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004d64:	490e      	ldr	r1, [pc, #56]	; (8004da0 <netif_set_up+0x50>)
 8004d66:	480f      	ldr	r0, [pc, #60]	; (8004da4 <netif_set_up+0x54>)
 8004d68:	f009 fb0a 	bl	800e380 <iprintf>
 8004d6c:	e013      	b.n	8004d96 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10c      	bne.n	8004d96 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d82:	f043 0301 	orr.w	r3, r3, #1
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004d8e:	2103      	movs	r1, #3
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f809 	bl	8004da8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	0800fad8 	.word	0x0800fad8
 8004da0:	0800fc60 	.word	0x0800fc60
 8004da4:	0800fb28 	.word	0x0800fb28

08004da8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <netif_issue_reports+0x20>
 8004dba:	4b18      	ldr	r3, [pc, #96]	; (8004e1c <netif_issue_reports+0x74>)
 8004dbc:	f240 326d 	movw	r2, #877	; 0x36d
 8004dc0:	4917      	ldr	r1, [pc, #92]	; (8004e20 <netif_issue_reports+0x78>)
 8004dc2:	4818      	ldr	r0, [pc, #96]	; (8004e24 <netif_issue_reports+0x7c>)
 8004dc4:	f009 fadc 	bl	800e380 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d01e      	beq.n	8004e14 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ddc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d017      	beq.n	8004e14 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d013      	beq.n	8004e16 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3304      	adds	r3, #4
 8004df2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00e      	beq.n	8004e16 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f007 fe3d 	bl	800ca8c <etharp_request>
 8004e12:	e000      	b.n	8004e16 <netif_issue_reports+0x6e>
    return;
 8004e14:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	0800fad8 	.word	0x0800fad8
 8004e20:	0800fc7c 	.word	0x0800fc7c
 8004e24:	0800fb28 	.word	0x0800fb28

08004e28 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d107      	bne.n	8004e46 <netif_set_down+0x1e>
 8004e36:	4b12      	ldr	r3, [pc, #72]	; (8004e80 <netif_set_down+0x58>)
 8004e38:	f240 329b 	movw	r2, #923	; 0x39b
 8004e3c:	4911      	ldr	r1, [pc, #68]	; (8004e84 <netif_set_down+0x5c>)
 8004e3e:	4812      	ldr	r0, [pc, #72]	; (8004e88 <netif_set_down+0x60>)
 8004e40:	f009 fa9e 	bl	800e380 <iprintf>
 8004e44:	e019      	b.n	8004e7a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d012      	beq.n	8004e7a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e5a:	f023 0301 	bic.w	r3, r3, #1
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d002      	beq.n	8004e7a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f007 f9c7 	bl	800c208 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	0800fad8 	.word	0x0800fad8
 8004e84:	0800fca0 	.word	0x0800fca0
 8004e88:	0800fb28 	.word	0x0800fb28

08004e8c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	61da      	str	r2, [r3, #28]
  }
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004eba:	f06f 030b 	mvn.w	r3, #11
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
	...

08004ecc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d013      	beq.n	8004f04 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004edc:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <netif_get_by_index+0x48>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	e00c      	b.n	8004efe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004eea:	3301      	adds	r3, #1
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	79fa      	ldrb	r2, [r7, #7]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d101      	bne.n	8004ef8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	e006      	b.n	8004f06 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1ef      	bne.n	8004ee4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20008ae4 	.word	0x20008ae4

08004f18 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <pbuf_free_ooseq+0x38>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004f24:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <pbuf_free_ooseq+0x3c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	e00a      	b.n	8004f42 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f002 f9df 	bl	80072f8 <tcp_free_ooseq>
      return;
 8004f3a:	e005      	b.n	8004f48 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	607b      	str	r3, [r7, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1f1      	bne.n	8004f2c <pbuf_free_ooseq+0x14>
    }
  }
}
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	20008aec 	.word	0x20008aec
 8004f54:	20008af4 	.word	0x20008af4

08004f58 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004f5c:	4b03      	ldr	r3, [pc, #12]	; (8004f6c <pbuf_pool_is_empty+0x14>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004f62:	bf00      	nop
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	20008aec 	.word	0x20008aec

08004f70 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	460b      	mov	r3, r1
 8004f80:	80fb      	strh	r3, [r7, #6]
 8004f82:	4613      	mov	r3, r2
 8004f84:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	88fa      	ldrh	r2, [r7, #6]
 8004f96:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	88ba      	ldrh	r2, [r7, #4]
 8004f9c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004f9e:	8b3b      	ldrh	r3, [r7, #24]
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	7f3a      	ldrb	r2, [r7, #28]
 8004faa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	73da      	strb	r2, [r3, #15]
}
 8004fb8:	bf00      	nop
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08c      	sub	sp, #48	; 0x30
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	4603      	mov	r3, r0
 8004fcc:	71fb      	strb	r3, [r7, #7]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	80bb      	strh	r3, [r7, #4]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004fda:	887b      	ldrh	r3, [r7, #2]
 8004fdc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004fe0:	d07f      	beq.n	80050e2 <pbuf_alloc+0x11e>
 8004fe2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004fe6:	f300 80c8 	bgt.w	800517a <pbuf_alloc+0x1b6>
 8004fea:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004fee:	d010      	beq.n	8005012 <pbuf_alloc+0x4e>
 8004ff0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004ff4:	f300 80c1 	bgt.w	800517a <pbuf_alloc+0x1b6>
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d002      	beq.n	8005002 <pbuf_alloc+0x3e>
 8004ffc:	2b41      	cmp	r3, #65	; 0x41
 8004ffe:	f040 80bc 	bne.w	800517a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005002:	887a      	ldrh	r2, [r7, #2]
 8005004:	88bb      	ldrh	r3, [r7, #4]
 8005006:	4619      	mov	r1, r3
 8005008:	2000      	movs	r0, #0
 800500a:	f000 f8d1 	bl	80051b0 <pbuf_alloc_reference>
 800500e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005010:	e0bd      	b.n	800518e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005012:	2300      	movs	r3, #0
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800501a:	88bb      	ldrh	r3, [r7, #4]
 800501c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800501e:	2008      	movs	r0, #8
 8005020:	f7ff fc56 	bl	80048d0 <memp_malloc>
 8005024:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d109      	bne.n	8005040 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800502c:	f7ff ff94 	bl	8004f58 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <pbuf_alloc+0x78>
            pbuf_free(p);
 8005036:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005038:	f000 faa8 	bl	800558c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800503c:	2300      	movs	r3, #0
 800503e:	e0a7      	b.n	8005190 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005040:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005042:	3303      	adds	r3, #3
 8005044:	b29b      	uxth	r3, r3
 8005046:	f023 0303 	bic.w	r3, r3, #3
 800504a:	b29b      	uxth	r3, r3
 800504c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005050:	b29b      	uxth	r3, r3
 8005052:	8b7a      	ldrh	r2, [r7, #26]
 8005054:	4293      	cmp	r3, r2
 8005056:	bf28      	it	cs
 8005058:	4613      	movcs	r3, r2
 800505a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800505c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800505e:	3310      	adds	r3, #16
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	4413      	add	r3, r2
 8005064:	3303      	adds	r3, #3
 8005066:	f023 0303 	bic.w	r3, r3, #3
 800506a:	4618      	mov	r0, r3
 800506c:	89f9      	ldrh	r1, [r7, #14]
 800506e:	8b7a      	ldrh	r2, [r7, #26]
 8005070:	2300      	movs	r3, #0
 8005072:	9301      	str	r3, [sp, #4]
 8005074:	887b      	ldrh	r3, [r7, #2]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	460b      	mov	r3, r1
 800507a:	4601      	mov	r1, r0
 800507c:	6938      	ldr	r0, [r7, #16]
 800507e:	f7ff ff77 	bl	8004f70 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d006      	beq.n	800509c <pbuf_alloc+0xd8>
 800508e:	4b42      	ldr	r3, [pc, #264]	; (8005198 <pbuf_alloc+0x1d4>)
 8005090:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005094:	4941      	ldr	r1, [pc, #260]	; (800519c <pbuf_alloc+0x1d8>)
 8005096:	4842      	ldr	r0, [pc, #264]	; (80051a0 <pbuf_alloc+0x1dc>)
 8005098:	f009 f972 	bl	800e380 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800509c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800509e:	3303      	adds	r3, #3
 80050a0:	f023 0303 	bic.w	r3, r3, #3
 80050a4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80050a8:	d106      	bne.n	80050b8 <pbuf_alloc+0xf4>
 80050aa:	4b3b      	ldr	r3, [pc, #236]	; (8005198 <pbuf_alloc+0x1d4>)
 80050ac:	f44f 7281 	mov.w	r2, #258	; 0x102
 80050b0:	493c      	ldr	r1, [pc, #240]	; (80051a4 <pbuf_alloc+0x1e0>)
 80050b2:	483b      	ldr	r0, [pc, #236]	; (80051a0 <pbuf_alloc+0x1dc>)
 80050b4:	f009 f964 	bl	800e380 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d102      	bne.n	80050c4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
 80050c2:	e002      	b.n	80050ca <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80050ce:	8b7a      	ldrh	r2, [r7, #26]
 80050d0:	89fb      	ldrh	r3, [r7, #14]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80050d6:	2300      	movs	r3, #0
 80050d8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80050da:	8b7b      	ldrh	r3, [r7, #26]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d19e      	bne.n	800501e <pbuf_alloc+0x5a>
      break;
 80050e0:	e055      	b.n	800518e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80050e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050e4:	3303      	adds	r3, #3
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	f023 0303 	bic.w	r3, r3, #3
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	88bb      	ldrh	r3, [r7, #4]
 80050f0:	3303      	adds	r3, #3
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f023 0303 	bic.w	r3, r3, #3
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	4413      	add	r3, r2
 80050fc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80050fe:	8b3b      	ldrh	r3, [r7, #24]
 8005100:	3310      	adds	r3, #16
 8005102:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005104:	8b3a      	ldrh	r2, [r7, #24]
 8005106:	88bb      	ldrh	r3, [r7, #4]
 8005108:	3303      	adds	r3, #3
 800510a:	f023 0303 	bic.w	r3, r3, #3
 800510e:	429a      	cmp	r2, r3
 8005110:	d306      	bcc.n	8005120 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005112:	8afa      	ldrh	r2, [r7, #22]
 8005114:	88bb      	ldrh	r3, [r7, #4]
 8005116:	3303      	adds	r3, #3
 8005118:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800511c:	429a      	cmp	r2, r3
 800511e:	d201      	bcs.n	8005124 <pbuf_alloc+0x160>
        return NULL;
 8005120:	2300      	movs	r3, #0
 8005122:	e035      	b.n	8005190 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005124:	8afb      	ldrh	r3, [r7, #22]
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff fa64 	bl	80045f4 <mem_malloc>
 800512c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <pbuf_alloc+0x174>
        return NULL;
 8005134:	2300      	movs	r3, #0
 8005136:	e02b      	b.n	8005190 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005138:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800513a:	3310      	adds	r3, #16
 800513c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513e:	4413      	add	r3, r2
 8005140:	3303      	adds	r3, #3
 8005142:	f023 0303 	bic.w	r3, r3, #3
 8005146:	4618      	mov	r0, r3
 8005148:	88b9      	ldrh	r1, [r7, #4]
 800514a:	88ba      	ldrh	r2, [r7, #4]
 800514c:	2300      	movs	r3, #0
 800514e:	9301      	str	r3, [sp, #4]
 8005150:	887b      	ldrh	r3, [r7, #2]
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	460b      	mov	r3, r1
 8005156:	4601      	mov	r1, r0
 8005158:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800515a:	f7ff ff09 	bl	8004f70 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d010      	beq.n	800518c <pbuf_alloc+0x1c8>
 800516a:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <pbuf_alloc+0x1d4>)
 800516c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005170:	490d      	ldr	r1, [pc, #52]	; (80051a8 <pbuf_alloc+0x1e4>)
 8005172:	480b      	ldr	r0, [pc, #44]	; (80051a0 <pbuf_alloc+0x1dc>)
 8005174:	f009 f904 	bl	800e380 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005178:	e008      	b.n	800518c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800517a:	4b07      	ldr	r3, [pc, #28]	; (8005198 <pbuf_alloc+0x1d4>)
 800517c:	f240 1227 	movw	r2, #295	; 0x127
 8005180:	490a      	ldr	r1, [pc, #40]	; (80051ac <pbuf_alloc+0x1e8>)
 8005182:	4807      	ldr	r0, [pc, #28]	; (80051a0 <pbuf_alloc+0x1dc>)
 8005184:	f009 f8fc 	bl	800e380 <iprintf>
      return NULL;
 8005188:	2300      	movs	r3, #0
 800518a:	e001      	b.n	8005190 <pbuf_alloc+0x1cc>
      break;
 800518c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005190:	4618      	mov	r0, r3
 8005192:	3728      	adds	r7, #40	; 0x28
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	0800fd08 	.word	0x0800fd08
 800519c:	0800fd38 	.word	0x0800fd38
 80051a0:	0800fd68 	.word	0x0800fd68
 80051a4:	0800fd90 	.word	0x0800fd90
 80051a8:	0800fdc4 	.word	0x0800fdc4
 80051ac:	0800fdf0 	.word	0x0800fdf0

080051b0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	807b      	strh	r3, [r7, #2]
 80051bc:	4613      	mov	r3, r2
 80051be:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80051c0:	883b      	ldrh	r3, [r7, #0]
 80051c2:	2b41      	cmp	r3, #65	; 0x41
 80051c4:	d009      	beq.n	80051da <pbuf_alloc_reference+0x2a>
 80051c6:	883b      	ldrh	r3, [r7, #0]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d006      	beq.n	80051da <pbuf_alloc_reference+0x2a>
 80051cc:	4b0f      	ldr	r3, [pc, #60]	; (800520c <pbuf_alloc_reference+0x5c>)
 80051ce:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80051d2:	490f      	ldr	r1, [pc, #60]	; (8005210 <pbuf_alloc_reference+0x60>)
 80051d4:	480f      	ldr	r0, [pc, #60]	; (8005214 <pbuf_alloc_reference+0x64>)
 80051d6:	f009 f8d3 	bl	800e380 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80051da:	2007      	movs	r0, #7
 80051dc:	f7ff fb78 	bl	80048d0 <memp_malloc>
 80051e0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80051e8:	2300      	movs	r3, #0
 80051ea:	e00b      	b.n	8005204 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80051ec:	8879      	ldrh	r1, [r7, #2]
 80051ee:	887a      	ldrh	r2, [r7, #2]
 80051f0:	2300      	movs	r3, #0
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	883b      	ldrh	r3, [r7, #0]
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	460b      	mov	r3, r1
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f7ff feb7 	bl	8004f70 <pbuf_init_alloced_pbuf>
  return p;
 8005202:	68fb      	ldr	r3, [r7, #12]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	0800fd08 	.word	0x0800fd08
 8005210:	0800fe0c 	.word	0x0800fe0c
 8005214:	0800fd68 	.word	0x0800fd68

08005218 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af02      	add	r7, sp, #8
 800521e:	607b      	str	r3, [r7, #4]
 8005220:	4603      	mov	r3, r0
 8005222:	73fb      	strb	r3, [r7, #15]
 8005224:	460b      	mov	r3, r1
 8005226:	81bb      	strh	r3, [r7, #12]
 8005228:	4613      	mov	r3, r2
 800522a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800522c:	7bfb      	ldrb	r3, [r7, #15]
 800522e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005230:	8a7b      	ldrh	r3, [r7, #18]
 8005232:	3303      	adds	r3, #3
 8005234:	f023 0203 	bic.w	r2, r3, #3
 8005238:	89bb      	ldrh	r3, [r7, #12]
 800523a:	441a      	add	r2, r3
 800523c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800523e:	429a      	cmp	r2, r3
 8005240:	d901      	bls.n	8005246 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005242:	2300      	movs	r3, #0
 8005244:	e018      	b.n	8005278 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d007      	beq.n	800525c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800524c:	8a7b      	ldrh	r3, [r7, #18]
 800524e:	3303      	adds	r3, #3
 8005250:	f023 0303 	bic.w	r3, r3, #3
 8005254:	6a3a      	ldr	r2, [r7, #32]
 8005256:	4413      	add	r3, r2
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	e001      	b.n	8005260 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	89b9      	ldrh	r1, [r7, #12]
 8005264:	89ba      	ldrh	r2, [r7, #12]
 8005266:	2302      	movs	r3, #2
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	897b      	ldrh	r3, [r7, #10]
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	460b      	mov	r3, r1
 8005270:	6979      	ldr	r1, [r7, #20]
 8005272:	f7ff fe7d 	bl	8004f70 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005276:	687b      	ldr	r3, [r7, #4]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d106      	bne.n	80052a0 <pbuf_realloc+0x20>
 8005292:	4b3a      	ldr	r3, [pc, #232]	; (800537c <pbuf_realloc+0xfc>)
 8005294:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005298:	4939      	ldr	r1, [pc, #228]	; (8005380 <pbuf_realloc+0x100>)
 800529a:	483a      	ldr	r0, [pc, #232]	; (8005384 <pbuf_realloc+0x104>)
 800529c:	f009 f870 	bl	800e380 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	891b      	ldrh	r3, [r3, #8]
 80052a4:	887a      	ldrh	r2, [r7, #2]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d263      	bcs.n	8005372 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	891a      	ldrh	r2, [r3, #8]
 80052ae:	887b      	ldrh	r3, [r7, #2]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80052b4:	887b      	ldrh	r3, [r7, #2]
 80052b6:	817b      	strh	r3, [r7, #10]
  q = p;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80052bc:	e018      	b.n	80052f0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	895b      	ldrh	r3, [r3, #10]
 80052c2:	897a      	ldrh	r2, [r7, #10]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	891a      	ldrh	r2, [r3, #8]
 80052cc:	893b      	ldrh	r3, [r7, #8]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <pbuf_realloc+0x70>
 80052e2:	4b26      	ldr	r3, [pc, #152]	; (800537c <pbuf_realloc+0xfc>)
 80052e4:	f240 12af 	movw	r2, #431	; 0x1af
 80052e8:	4927      	ldr	r1, [pc, #156]	; (8005388 <pbuf_realloc+0x108>)
 80052ea:	4826      	ldr	r0, [pc, #152]	; (8005384 <pbuf_realloc+0x104>)
 80052ec:	f009 f848 	bl	800e380 <iprintf>
  while (rem_len > q->len) {
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	895b      	ldrh	r3, [r3, #10]
 80052f4:	897a      	ldrh	r2, [r7, #10]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d8e1      	bhi.n	80052be <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	7b1b      	ldrb	r3, [r3, #12]
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	2b00      	cmp	r3, #0
 8005304:	d121      	bne.n	800534a <pbuf_realloc+0xca>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	895b      	ldrh	r3, [r3, #10]
 800530a:	897a      	ldrh	r2, [r7, #10]
 800530c:	429a      	cmp	r2, r3
 800530e:	d01c      	beq.n	800534a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	7b5b      	ldrb	r3, [r3, #13]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d116      	bne.n	800534a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	b29a      	uxth	r2, r3
 8005326:	897b      	ldrh	r3, [r7, #10]
 8005328:	4413      	add	r3, r2
 800532a:	b29b      	uxth	r3, r3
 800532c:	4619      	mov	r1, r3
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f7ff f864 	bl	80043fc <mem_trim>
 8005334:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d106      	bne.n	800534a <pbuf_realloc+0xca>
 800533c:	4b0f      	ldr	r3, [pc, #60]	; (800537c <pbuf_realloc+0xfc>)
 800533e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005342:	4912      	ldr	r1, [pc, #72]	; (800538c <pbuf_realloc+0x10c>)
 8005344:	480f      	ldr	r0, [pc, #60]	; (8005384 <pbuf_realloc+0x104>)
 8005346:	f009 f81b 	bl	800e380 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	897a      	ldrh	r2, [r7, #10]
 800534e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	895a      	ldrh	r2, [r3, #10]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d004      	beq.n	800536a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f000 f911 	bl	800558c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	e000      	b.n	8005374 <pbuf_realloc+0xf4>
    return;
 8005372:	bf00      	nop

}
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	0800fd08 	.word	0x0800fd08
 8005380:	0800fe20 	.word	0x0800fe20
 8005384:	0800fd68 	.word	0x0800fd68
 8005388:	0800fe38 	.word	0x0800fe38
 800538c:	0800fe50 	.word	0x0800fe50

08005390 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	4613      	mov	r3, r2
 800539c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <pbuf_add_header_impl+0x22>
 80053a4:	4b2b      	ldr	r3, [pc, #172]	; (8005454 <pbuf_add_header_impl+0xc4>)
 80053a6:	f240 12df 	movw	r2, #479	; 0x1df
 80053aa:	492b      	ldr	r1, [pc, #172]	; (8005458 <pbuf_add_header_impl+0xc8>)
 80053ac:	482b      	ldr	r0, [pc, #172]	; (800545c <pbuf_add_header_impl+0xcc>)
 80053ae:	f008 ffe7 	bl	800e380 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <pbuf_add_header_impl+0x30>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053be:	d301      	bcc.n	80053c4 <pbuf_add_header_impl+0x34>
    return 1;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e043      	b.n	800544c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <pbuf_add_header_impl+0x3e>
    return 0;
 80053ca:	2300      	movs	r3, #0
 80053cc:	e03e      	b.n	800544c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	891a      	ldrh	r2, [r3, #8]
 80053d6:	8a7b      	ldrh	r3, [r7, #18]
 80053d8:	4413      	add	r3, r2
 80053da:	b29b      	uxth	r3, r3
 80053dc:	8a7a      	ldrh	r2, [r7, #18]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d901      	bls.n	80053e6 <pbuf_add_header_impl+0x56>
    return 1;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e032      	b.n	800544c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	7b1b      	ldrb	r3, [r3, #12]
 80053ea:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80053ec:	8a3b      	ldrh	r3, [r7, #16]
 80053ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00c      	beq.n	8005410 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	425b      	negs	r3, r3
 80053fe:	4413      	add	r3, r2
 8005400:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3310      	adds	r3, #16
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	429a      	cmp	r2, r3
 800540a:	d20d      	bcs.n	8005428 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800540c:	2301      	movs	r3, #1
 800540e:	e01d      	b.n	800544c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d006      	beq.n	8005424 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	425b      	negs	r3, r3
 800541e:	4413      	add	r3, r2
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	e001      	b.n	8005428 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005424:	2301      	movs	r3, #1
 8005426:	e011      	b.n	800544c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	895a      	ldrh	r2, [r3, #10]
 8005432:	8a7b      	ldrh	r3, [r7, #18]
 8005434:	4413      	add	r3, r2
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	891a      	ldrh	r2, [r3, #8]
 8005440:	8a7b      	ldrh	r3, [r7, #18]
 8005442:	4413      	add	r3, r2
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	811a      	strh	r2, [r3, #8]


  return 0;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	0800fd08 	.word	0x0800fd08
 8005458:	0800fe6c 	.word	0x0800fe6c
 800545c:	0800fd68 	.word	0x0800fd68

08005460 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800546a:	2200      	movs	r2, #0
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff ff8e 	bl	8005390 <pbuf_add_header_impl>
 8005474:	4603      	mov	r3, r0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d106      	bne.n	800549e <pbuf_remove_header+0x1e>
 8005490:	4b20      	ldr	r3, [pc, #128]	; (8005514 <pbuf_remove_header+0x94>)
 8005492:	f240 224b 	movw	r2, #587	; 0x24b
 8005496:	4920      	ldr	r1, [pc, #128]	; (8005518 <pbuf_remove_header+0x98>)
 8005498:	4820      	ldr	r0, [pc, #128]	; (800551c <pbuf_remove_header+0x9c>)
 800549a:	f008 ff71 	bl	800e380 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <pbuf_remove_header+0x2c>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054aa:	d301      	bcc.n	80054b0 <pbuf_remove_header+0x30>
    return 1;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e02c      	b.n	800550a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <pbuf_remove_header+0x3a>
    return 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	e027      	b.n	800550a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	895b      	ldrh	r3, [r3, #10]
 80054c2:	89fa      	ldrh	r2, [r7, #14]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d908      	bls.n	80054da <pbuf_remove_header+0x5a>
 80054c8:	4b12      	ldr	r3, [pc, #72]	; (8005514 <pbuf_remove_header+0x94>)
 80054ca:	f240 2255 	movw	r2, #597	; 0x255
 80054ce:	4914      	ldr	r1, [pc, #80]	; (8005520 <pbuf_remove_header+0xa0>)
 80054d0:	4812      	ldr	r0, [pc, #72]	; (800551c <pbuf_remove_header+0x9c>)
 80054d2:	f008 ff55 	bl	800e380 <iprintf>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e017      	b.n	800550a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	441a      	add	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	895a      	ldrh	r2, [r3, #10]
 80054f0:	89fb      	ldrh	r3, [r7, #14]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	891a      	ldrh	r2, [r3, #8]
 80054fe:	89fb      	ldrh	r3, [r7, #14]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	b29a      	uxth	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	0800fd08 	.word	0x0800fd08
 8005518:	0800fe6c 	.word	0x0800fe6c
 800551c:	0800fd68 	.word	0x0800fd68
 8005520:	0800fe78 	.word	0x0800fe78

08005524 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	807b      	strh	r3, [r7, #2]
 8005530:	4613      	mov	r3, r2
 8005532:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005534:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005538:	2b00      	cmp	r3, #0
 800553a:	da08      	bge.n	800554e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800553c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005540:	425b      	negs	r3, r3
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff ff9b 	bl	8005480 <pbuf_remove_header>
 800554a:	4603      	mov	r3, r0
 800554c:	e007      	b.n	800555e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800554e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005552:	787a      	ldrb	r2, [r7, #1]
 8005554:	4619      	mov	r1, r3
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff ff1a 	bl	8005390 <pbuf_add_header_impl>
 800555c:	4603      	mov	r3, r0
  }
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	460b      	mov	r3, r1
 8005570:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005572:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005576:	2201      	movs	r2, #1
 8005578:	4619      	mov	r1, r3
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff ffd2 	bl	8005524 <pbuf_header_impl>
 8005580:	4603      	mov	r3, r0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10b      	bne.n	80055b2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d106      	bne.n	80055ae <pbuf_free+0x22>
 80055a0:	4b38      	ldr	r3, [pc, #224]	; (8005684 <pbuf_free+0xf8>)
 80055a2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80055a6:	4938      	ldr	r1, [pc, #224]	; (8005688 <pbuf_free+0xfc>)
 80055a8:	4838      	ldr	r0, [pc, #224]	; (800568c <pbuf_free+0x100>)
 80055aa:	f008 fee9 	bl	800e380 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	e063      	b.n	800567a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80055b2:	2300      	movs	r3, #0
 80055b4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80055b6:	e05c      	b.n	8005672 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	7b9b      	ldrb	r3, [r3, #14]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d106      	bne.n	80055ce <pbuf_free+0x42>
 80055c0:	4b30      	ldr	r3, [pc, #192]	; (8005684 <pbuf_free+0xf8>)
 80055c2:	f240 22f1 	movw	r2, #753	; 0x2f1
 80055c6:	4932      	ldr	r1, [pc, #200]	; (8005690 <pbuf_free+0x104>)
 80055c8:	4830      	ldr	r0, [pc, #192]	; (800568c <pbuf_free+0x100>)
 80055ca:	f008 fed9 	bl	800e380 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	7b9b      	ldrb	r3, [r3, #14]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	739a      	strb	r2, [r3, #14]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	7b9b      	ldrb	r3, [r3, #14]
 80055de:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80055e0:	7dbb      	ldrb	r3, [r7, #22]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d143      	bne.n	800566e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	7b1b      	ldrb	r3, [r3, #12]
 80055f0:	f003 030f 	and.w	r3, r3, #15
 80055f4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	7b5b      	ldrb	r3, [r3, #13]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d011      	beq.n	8005626 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d106      	bne.n	800561c <pbuf_free+0x90>
 800560e:	4b1d      	ldr	r3, [pc, #116]	; (8005684 <pbuf_free+0xf8>)
 8005610:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005614:	491f      	ldr	r1, [pc, #124]	; (8005694 <pbuf_free+0x108>)
 8005616:	481d      	ldr	r0, [pc, #116]	; (800568c <pbuf_free+0x100>)
 8005618:	f008 feb2 	bl	800e380 <iprintf>
        pc->custom_free_function(p);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	4798      	blx	r3
 8005624:	e01d      	b.n	8005662 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005626:	7bfb      	ldrb	r3, [r7, #15]
 8005628:	2b02      	cmp	r3, #2
 800562a:	d104      	bne.n	8005636 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800562c:	6879      	ldr	r1, [r7, #4]
 800562e:	2008      	movs	r0, #8
 8005630:	f7ff f99a 	bl	8004968 <memp_free>
 8005634:	e015      	b.n	8005662 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005636:	7bfb      	ldrb	r3, [r7, #15]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d104      	bne.n	8005646 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	2007      	movs	r0, #7
 8005640:	f7ff f992 	bl	8004968 <memp_free>
 8005644:	e00d      	b.n	8005662 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d103      	bne.n	8005654 <pbuf_free+0xc8>
          mem_free(p);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7fe fe6b 	bl	8004328 <mem_free>
 8005652:	e006      	b.n	8005662 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005654:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <pbuf_free+0xf8>)
 8005656:	f240 320f 	movw	r2, #783	; 0x30f
 800565a:	490f      	ldr	r1, [pc, #60]	; (8005698 <pbuf_free+0x10c>)
 800565c:	480b      	ldr	r0, [pc, #44]	; (800568c <pbuf_free+0x100>)
 800565e:	f008 fe8f 	bl	800e380 <iprintf>
        }
      }
      count++;
 8005662:	7dfb      	ldrb	r3, [r7, #23]
 8005664:	3301      	adds	r3, #1
 8005666:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	607b      	str	r3, [r7, #4]
 800566c:	e001      	b.n	8005672 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800566e:	2300      	movs	r3, #0
 8005670:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d19f      	bne.n	80055b8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005678:	7dfb      	ldrb	r3, [r7, #23]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	0800fd08 	.word	0x0800fd08
 8005688:	0800fe6c 	.word	0x0800fe6c
 800568c:	0800fd68 	.word	0x0800fd68
 8005690:	0800fe98 	.word	0x0800fe98
 8005694:	0800feb0 	.word	0x0800feb0
 8005698:	0800fed4 	.word	0x0800fed4

0800569c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80056a4:	2300      	movs	r3, #0
 80056a6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80056a8:	e005      	b.n	80056b6 <pbuf_clen+0x1a>
    ++len;
 80056aa:	89fb      	ldrh	r3, [r7, #14]
 80056ac:	3301      	adds	r3, #1
 80056ae:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1f6      	bne.n	80056aa <pbuf_clen+0xe>
  }
  return len;
 80056bc:	89fb      	ldrh	r3, [r7, #14]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d010      	beq.n	80056fc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	7b9b      	ldrb	r3, [r3, #14]
 80056de:	3301      	adds	r3, #1
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	7b9b      	ldrb	r3, [r3, #14]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d106      	bne.n	80056fc <pbuf_ref+0x30>
 80056ee:	4b05      	ldr	r3, [pc, #20]	; (8005704 <pbuf_ref+0x38>)
 80056f0:	f240 3242 	movw	r2, #834	; 0x342
 80056f4:	4904      	ldr	r1, [pc, #16]	; (8005708 <pbuf_ref+0x3c>)
 80056f6:	4805      	ldr	r0, [pc, #20]	; (800570c <pbuf_ref+0x40>)
 80056f8:	f008 fe42 	bl	800e380 <iprintf>
  }
}
 80056fc:	bf00      	nop
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	0800fd08 	.word	0x0800fd08
 8005708:	0800fee8 	.word	0x0800fee8
 800570c:	0800fd68 	.word	0x0800fd68

08005710 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <pbuf_cat+0x16>
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d107      	bne.n	8005736 <pbuf_cat+0x26>
 8005726:	4b20      	ldr	r3, [pc, #128]	; (80057a8 <pbuf_cat+0x98>)
 8005728:	f240 3259 	movw	r2, #857	; 0x359
 800572c:	491f      	ldr	r1, [pc, #124]	; (80057ac <pbuf_cat+0x9c>)
 800572e:	4820      	ldr	r0, [pc, #128]	; (80057b0 <pbuf_cat+0xa0>)
 8005730:	f008 fe26 	bl	800e380 <iprintf>
 8005734:	e034      	b.n	80057a0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	e00a      	b.n	8005752 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	891a      	ldrh	r2, [r3, #8]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	891b      	ldrh	r3, [r3, #8]
 8005744:	4413      	add	r3, r2
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f0      	bne.n	800573c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	891a      	ldrh	r2, [r3, #8]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	895b      	ldrh	r3, [r3, #10]
 8005762:	429a      	cmp	r2, r3
 8005764:	d006      	beq.n	8005774 <pbuf_cat+0x64>
 8005766:	4b10      	ldr	r3, [pc, #64]	; (80057a8 <pbuf_cat+0x98>)
 8005768:	f240 3262 	movw	r2, #866	; 0x362
 800576c:	4911      	ldr	r1, [pc, #68]	; (80057b4 <pbuf_cat+0xa4>)
 800576e:	4810      	ldr	r0, [pc, #64]	; (80057b0 <pbuf_cat+0xa0>)
 8005770:	f008 fe06 	bl	800e380 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d006      	beq.n	800578a <pbuf_cat+0x7a>
 800577c:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <pbuf_cat+0x98>)
 800577e:	f240 3263 	movw	r2, #867	; 0x363
 8005782:	490d      	ldr	r1, [pc, #52]	; (80057b8 <pbuf_cat+0xa8>)
 8005784:	480a      	ldr	r0, [pc, #40]	; (80057b0 <pbuf_cat+0xa0>)
 8005786:	f008 fdfb 	bl	800e380 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	891a      	ldrh	r2, [r3, #8]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	891b      	ldrh	r3, [r3, #8]
 8005792:	4413      	add	r3, r2
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	0800fd08 	.word	0x0800fd08
 80057ac:	0800fefc 	.word	0x0800fefc
 80057b0:	0800fd68 	.word	0x0800fd68
 80057b4:	0800ff34 	.word	0x0800ff34
 80057b8:	0800ff64 	.word	0x0800ff64

080057bc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80057c6:	6839      	ldr	r1, [r7, #0]
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff ffa1 	bl	8005710 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80057ce:	6838      	ldr	r0, [r7, #0]
 80057d0:	f7ff ff7c 	bl	80056cc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80057d4:	bf00      	nop
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80057e6:	2300      	movs	r3, #0
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	2300      	movs	r3, #0
 80057ec:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <pbuf_copy+0x2a>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <pbuf_copy+0x2a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	891a      	ldrh	r2, [r3, #8]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	891b      	ldrh	r3, [r3, #8]
 8005802:	429a      	cmp	r2, r3
 8005804:	d209      	bcs.n	800581a <pbuf_copy+0x3e>
 8005806:	4b57      	ldr	r3, [pc, #348]	; (8005964 <pbuf_copy+0x188>)
 8005808:	f240 32c9 	movw	r2, #969	; 0x3c9
 800580c:	4956      	ldr	r1, [pc, #344]	; (8005968 <pbuf_copy+0x18c>)
 800580e:	4857      	ldr	r0, [pc, #348]	; (800596c <pbuf_copy+0x190>)
 8005810:	f008 fdb6 	bl	800e380 <iprintf>
 8005814:	f06f 030f 	mvn.w	r3, #15
 8005818:	e09f      	b.n	800595a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	895b      	ldrh	r3, [r3, #10]
 800581e:	461a      	mov	r2, r3
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	1ad2      	subs	r2, r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	895b      	ldrh	r3, [r3, #10]
 8005828:	4619      	mov	r1, r3
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1acb      	subs	r3, r1, r3
 800582e:	429a      	cmp	r2, r3
 8005830:	d306      	bcc.n	8005840 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	895b      	ldrh	r3, [r3, #10]
 8005836:	461a      	mov	r2, r3
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	e005      	b.n	800584c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	895b      	ldrh	r3, [r3, #10]
 8005844:	461a      	mov	r2, r3
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	18d0      	adds	r0, r2, r3
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4413      	add	r3, r2
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4619      	mov	r1, r3
 8005860:	f008 fd5e 	bl	800e320 <memcpy>
    offset_to += len;
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4413      	add	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	895b      	ldrh	r3, [r3, #10]
 8005878:	461a      	mov	r2, r3
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	4293      	cmp	r3, r2
 800587e:	d906      	bls.n	800588e <pbuf_copy+0xb2>
 8005880:	4b38      	ldr	r3, [pc, #224]	; (8005964 <pbuf_copy+0x188>)
 8005882:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005886:	493a      	ldr	r1, [pc, #232]	; (8005970 <pbuf_copy+0x194>)
 8005888:	4838      	ldr	r0, [pc, #224]	; (800596c <pbuf_copy+0x190>)
 800588a:	f008 fd79 	bl	800e380 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	895b      	ldrh	r3, [r3, #10]
 8005892:	461a      	mov	r2, r3
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	4293      	cmp	r3, r2
 8005898:	d906      	bls.n	80058a8 <pbuf_copy+0xcc>
 800589a:	4b32      	ldr	r3, [pc, #200]	; (8005964 <pbuf_copy+0x188>)
 800589c:	f240 32da 	movw	r2, #986	; 0x3da
 80058a0:	4934      	ldr	r1, [pc, #208]	; (8005974 <pbuf_copy+0x198>)
 80058a2:	4832      	ldr	r0, [pc, #200]	; (800596c <pbuf_copy+0x190>)
 80058a4:	f008 fd6c 	bl	800e380 <iprintf>
    if (offset_from >= p_from->len) {
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	895b      	ldrh	r3, [r3, #10]
 80058ac:	461a      	mov	r2, r3
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d304      	bcc.n	80058be <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	895b      	ldrh	r3, [r3, #10]
 80058c2:	461a      	mov	r2, r3
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d114      	bne.n	80058f4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10c      	bne.n	80058f4 <pbuf_copy+0x118>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d009      	beq.n	80058f4 <pbuf_copy+0x118>
 80058e0:	4b20      	ldr	r3, [pc, #128]	; (8005964 <pbuf_copy+0x188>)
 80058e2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80058e6:	4924      	ldr	r1, [pc, #144]	; (8005978 <pbuf_copy+0x19c>)
 80058e8:	4820      	ldr	r0, [pc, #128]	; (800596c <pbuf_copy+0x190>)
 80058ea:	f008 fd49 	bl	800e380 <iprintf>
 80058ee:	f06f 030f 	mvn.w	r3, #15
 80058f2:	e032      	b.n	800595a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d013      	beq.n	8005922 <pbuf_copy+0x146>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	895a      	ldrh	r2, [r3, #10]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	891b      	ldrh	r3, [r3, #8]
 8005902:	429a      	cmp	r2, r3
 8005904:	d10d      	bne.n	8005922 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d009      	beq.n	8005922 <pbuf_copy+0x146>
 800590e:	4b15      	ldr	r3, [pc, #84]	; (8005964 <pbuf_copy+0x188>)
 8005910:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8005914:	4919      	ldr	r1, [pc, #100]	; (800597c <pbuf_copy+0x1a0>)
 8005916:	4815      	ldr	r0, [pc, #84]	; (800596c <pbuf_copy+0x190>)
 8005918:	f008 fd32 	bl	800e380 <iprintf>
 800591c:	f06f 0305 	mvn.w	r3, #5
 8005920:	e01b      	b.n	800595a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d013      	beq.n	8005950 <pbuf_copy+0x174>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	895a      	ldrh	r2, [r3, #10]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	891b      	ldrh	r3, [r3, #8]
 8005930:	429a      	cmp	r2, r3
 8005932:	d10d      	bne.n	8005950 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d009      	beq.n	8005950 <pbuf_copy+0x174>
 800593c:	4b09      	ldr	r3, [pc, #36]	; (8005964 <pbuf_copy+0x188>)
 800593e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8005942:	490e      	ldr	r1, [pc, #56]	; (800597c <pbuf_copy+0x1a0>)
 8005944:	4809      	ldr	r0, [pc, #36]	; (800596c <pbuf_copy+0x190>)
 8005946:	f008 fd1b 	bl	800e380 <iprintf>
 800594a:	f06f 0305 	mvn.w	r3, #5
 800594e:	e004      	b.n	800595a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	f47f af61 	bne.w	800581a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	0800fd08 	.word	0x0800fd08
 8005968:	0800ffb0 	.word	0x0800ffb0
 800596c:	0800fd68 	.word	0x0800fd68
 8005970:	0800ffe0 	.word	0x0800ffe0
 8005974:	0800fff8 	.word	0x0800fff8
 8005978:	08010014 	.word	0x08010014
 800597c:	08010024 	.word	0x08010024

08005980 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	4611      	mov	r1, r2
 800598c:	461a      	mov	r2, r3
 800598e:	460b      	mov	r3, r1
 8005990:	80fb      	strh	r3, [r7, #6]
 8005992:	4613      	mov	r3, r2
 8005994:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d108      	bne.n	80059b6 <pbuf_copy_partial+0x36>
 80059a4:	4b2b      	ldr	r3, [pc, #172]	; (8005a54 <pbuf_copy_partial+0xd4>)
 80059a6:	f240 420a 	movw	r2, #1034	; 0x40a
 80059aa:	492b      	ldr	r1, [pc, #172]	; (8005a58 <pbuf_copy_partial+0xd8>)
 80059ac:	482b      	ldr	r0, [pc, #172]	; (8005a5c <pbuf_copy_partial+0xdc>)
 80059ae:	f008 fce7 	bl	800e380 <iprintf>
 80059b2:	2300      	movs	r3, #0
 80059b4:	e04a      	b.n	8005a4c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d108      	bne.n	80059ce <pbuf_copy_partial+0x4e>
 80059bc:	4b25      	ldr	r3, [pc, #148]	; (8005a54 <pbuf_copy_partial+0xd4>)
 80059be:	f240 420b 	movw	r2, #1035	; 0x40b
 80059c2:	4927      	ldr	r1, [pc, #156]	; (8005a60 <pbuf_copy_partial+0xe0>)
 80059c4:	4825      	ldr	r0, [pc, #148]	; (8005a5c <pbuf_copy_partial+0xdc>)
 80059c6:	f008 fcdb 	bl	800e380 <iprintf>
 80059ca:	2300      	movs	r3, #0
 80059cc:	e03e      	b.n	8005a4c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	61fb      	str	r3, [r7, #28]
 80059d2:	e034      	b.n	8005a3e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80059d4:	88bb      	ldrh	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <pbuf_copy_partial+0x70>
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	895b      	ldrh	r3, [r3, #10]
 80059de:	88ba      	ldrh	r2, [r7, #4]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d305      	bcc.n	80059f0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	895b      	ldrh	r3, [r3, #10]
 80059e8:	88ba      	ldrh	r2, [r7, #4]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	80bb      	strh	r3, [r7, #4]
 80059ee:	e023      	b.n	8005a38 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	895a      	ldrh	r2, [r3, #10]
 80059f4:	88bb      	ldrh	r3, [r7, #4]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80059fa:	8b3a      	ldrh	r2, [r7, #24]
 80059fc:	88fb      	ldrh	r3, [r7, #6]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d901      	bls.n	8005a06 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005a02:	88fb      	ldrh	r3, [r7, #6]
 8005a04:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005a06:	8b7b      	ldrh	r3, [r7, #26]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	18d0      	adds	r0, r2, r3
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	88bb      	ldrh	r3, [r7, #4]
 8005a12:	4413      	add	r3, r2
 8005a14:	8b3a      	ldrh	r2, [r7, #24]
 8005a16:	4619      	mov	r1, r3
 8005a18:	f008 fc82 	bl	800e320 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005a1c:	8afa      	ldrh	r2, [r7, #22]
 8005a1e:	8b3b      	ldrh	r3, [r7, #24]
 8005a20:	4413      	add	r3, r2
 8005a22:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005a24:	8b7a      	ldrh	r2, [r7, #26]
 8005a26:	8b3b      	ldrh	r3, [r7, #24]
 8005a28:	4413      	add	r3, r2
 8005a2a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005a2c:	88fa      	ldrh	r2, [r7, #6]
 8005a2e:	8b3b      	ldrh	r3, [r7, #24]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005a34:	2300      	movs	r3, #0
 8005a36:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	61fb      	str	r3, [r7, #28]
 8005a3e:	88fb      	ldrh	r3, [r7, #6]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <pbuf_copy_partial+0xca>
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1c4      	bne.n	80059d4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005a4a:	8afb      	ldrh	r3, [r7, #22]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3720      	adds	r7, #32
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	0800fd08 	.word	0x0800fd08
 8005a58:	08010050 	.word	0x08010050
 8005a5c:	0800fd68 	.word	0x0800fd68
 8005a60:	08010070 	.word	0x08010070

08005a64 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8005a72:	88fb      	ldrh	r3, [r7, #6]
 8005a74:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d109      	bne.n	8005a94 <pbuf_take+0x30>
 8005a80:	4b3a      	ldr	r3, [pc, #232]	; (8005b6c <pbuf_take+0x108>)
 8005a82:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8005a86:	493a      	ldr	r1, [pc, #232]	; (8005b70 <pbuf_take+0x10c>)
 8005a88:	483a      	ldr	r0, [pc, #232]	; (8005b74 <pbuf_take+0x110>)
 8005a8a:	f008 fc79 	bl	800e380 <iprintf>
 8005a8e:	f06f 030f 	mvn.w	r3, #15
 8005a92:	e067      	b.n	8005b64 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d109      	bne.n	8005aae <pbuf_take+0x4a>
 8005a9a:	4b34      	ldr	r3, [pc, #208]	; (8005b6c <pbuf_take+0x108>)
 8005a9c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8005aa0:	4935      	ldr	r1, [pc, #212]	; (8005b78 <pbuf_take+0x114>)
 8005aa2:	4834      	ldr	r0, [pc, #208]	; (8005b74 <pbuf_take+0x110>)
 8005aa4:	f008 fc6c 	bl	800e380 <iprintf>
 8005aa8:	f06f 030f 	mvn.w	r3, #15
 8005aac:	e05a      	b.n	8005b64 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	891b      	ldrh	r3, [r3, #8]
 8005ab2:	88fa      	ldrh	r2, [r7, #6]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d909      	bls.n	8005acc <pbuf_take+0x68>
 8005ab8:	4b2c      	ldr	r3, [pc, #176]	; (8005b6c <pbuf_take+0x108>)
 8005aba:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8005abe:	492f      	ldr	r1, [pc, #188]	; (8005b7c <pbuf_take+0x118>)
 8005ac0:	482c      	ldr	r0, [pc, #176]	; (8005b74 <pbuf_take+0x110>)
 8005ac2:	f008 fc5d 	bl	800e380 <iprintf>
 8005ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aca:	e04b      	b.n	8005b64 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d007      	beq.n	8005ae2 <pbuf_take+0x7e>
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d004      	beq.n	8005ae2 <pbuf_take+0x7e>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	891b      	ldrh	r3, [r3, #8]
 8005adc:	88fa      	ldrh	r2, [r7, #6]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d902      	bls.n	8005ae8 <pbuf_take+0x84>
    return ERR_ARG;
 8005ae2:	f06f 030f 	mvn.w	r3, #15
 8005ae6:	e03d      	b.n	8005b64 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	61fb      	str	r3, [r7, #28]
 8005aec:	e028      	b.n	8005b40 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d106      	bne.n	8005b02 <pbuf_take+0x9e>
 8005af4:	4b1d      	ldr	r3, [pc, #116]	; (8005b6c <pbuf_take+0x108>)
 8005af6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8005afa:	4921      	ldr	r1, [pc, #132]	; (8005b80 <pbuf_take+0x11c>)
 8005afc:	481d      	ldr	r0, [pc, #116]	; (8005b74 <pbuf_take+0x110>)
 8005afe:	f008 fc3f 	bl	800e380 <iprintf>
    buf_copy_len = total_copy_len;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	895b      	ldrh	r3, [r3, #10]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d902      	bls.n	8005b18 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	895b      	ldrh	r3, [r3, #10]
 8005b16:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	6858      	ldr	r0, [r3, #4]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	4413      	add	r3, r2
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	4619      	mov	r1, r3
 8005b26:	f008 fbfb 	bl	800e320 <memcpy>
    total_copy_len -= buf_copy_len;
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	4413      	add	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1d3      	bne.n	8005aee <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d103      	bne.n	8005b54 <pbuf_take+0xf0>
 8005b4c:	88fb      	ldrh	r3, [r7, #6]
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d006      	beq.n	8005b62 <pbuf_take+0xfe>
 8005b54:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <pbuf_take+0x108>)
 8005b56:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8005b5a:	490a      	ldr	r1, [pc, #40]	; (8005b84 <pbuf_take+0x120>)
 8005b5c:	4805      	ldr	r0, [pc, #20]	; (8005b74 <pbuf_take+0x110>)
 8005b5e:	f008 fc0f 	bl	800e380 <iprintf>
  return ERR_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3720      	adds	r7, #32
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	0800fd08 	.word	0x0800fd08
 8005b70:	080100e0 	.word	0x080100e0
 8005b74:	0800fd68 	.word	0x0800fd68
 8005b78:	080100f8 	.word	0x080100f8
 8005b7c:	08010114 	.word	0x08010114
 8005b80:	08010134 	.word	0x08010134
 8005b84:	0801014c 	.word	0x0801014c

08005b88 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	603a      	str	r2, [r7, #0]
 8005b92:	71fb      	strb	r3, [r7, #7]
 8005b94:	460b      	mov	r3, r1
 8005b96:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	8919      	ldrh	r1, [r3, #8]
 8005b9c:	88ba      	ldrh	r2, [r7, #4]
 8005b9e:	79fb      	ldrb	r3, [r7, #7]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff fa0f 	bl	8004fc4 <pbuf_alloc>
 8005ba6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <pbuf_clone+0x2a>
    return NULL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	e011      	b.n	8005bd6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005bb2:	6839      	ldr	r1, [r7, #0]
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f7ff fe11 	bl	80057dc <pbuf_copy>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005bbe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d006      	beq.n	8005bd4 <pbuf_clone+0x4c>
 8005bc6:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <pbuf_clone+0x58>)
 8005bc8:	f240 5224 	movw	r2, #1316	; 0x524
 8005bcc:	4905      	ldr	r1, [pc, #20]	; (8005be4 <pbuf_clone+0x5c>)
 8005bce:	4806      	ldr	r0, [pc, #24]	; (8005be8 <pbuf_clone+0x60>)
 8005bd0:	f008 fbd6 	bl	800e380 <iprintf>
  return q;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	0800fd08 	.word	0x0800fd08
 8005be4:	0801017c 	.word	0x0801017c
 8005be8:	0800fd68 	.word	0x0800fd68

08005bec <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005bf0:	f008 fbde 	bl	800e3b0 <rand>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	4b01      	ldr	r3, [pc, #4]	; (8005c0c <tcp_init+0x20>)
 8005c06:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005c08:	bf00      	nop
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	2000000a 	.word	0x2000000a

08005c10 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	7d1b      	ldrb	r3, [r3, #20]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d105      	bne.n	8005c2c <tcp_free+0x1c>
 8005c20:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <tcp_free+0x2c>)
 8005c22:	22d4      	movs	r2, #212	; 0xd4
 8005c24:	4906      	ldr	r1, [pc, #24]	; (8005c40 <tcp_free+0x30>)
 8005c26:	4807      	ldr	r0, [pc, #28]	; (8005c44 <tcp_free+0x34>)
 8005c28:	f008 fbaa 	bl	800e380 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	2001      	movs	r0, #1
 8005c30:	f7fe fe9a 	bl	8004968 <memp_free>
}
 8005c34:	bf00      	nop
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	08010208 	.word	0x08010208
 8005c40:	08010238 	.word	0x08010238
 8005c44:	0801024c 	.word	0x0801024c

08005c48 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	7d1b      	ldrb	r3, [r3, #20]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d105      	bne.n	8005c64 <tcp_free_listen+0x1c>
 8005c58:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <tcp_free_listen+0x2c>)
 8005c5a:	22df      	movs	r2, #223	; 0xdf
 8005c5c:	4906      	ldr	r1, [pc, #24]	; (8005c78 <tcp_free_listen+0x30>)
 8005c5e:	4807      	ldr	r0, [pc, #28]	; (8005c7c <tcp_free_listen+0x34>)
 8005c60:	f008 fb8e 	bl	800e380 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	2002      	movs	r0, #2
 8005c68:	f7fe fe7e 	bl	8004968 <memp_free>
}
 8005c6c:	bf00      	nop
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	08010208 	.word	0x08010208
 8005c78:	08010274 	.word	0x08010274
 8005c7c:	0801024c 	.word	0x0801024c

08005c80 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005c84:	f000 fea2 	bl	80069cc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005c88:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <tcp_tmr+0x28>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <tcp_tmr+0x28>)
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	4b04      	ldr	r3, [pc, #16]	; (8005ca8 <tcp_tmr+0x28>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005ca0:	f000 fb54 	bl	800634c <tcp_slowtmr>
  }
}
 8005ca4:	bf00      	nop
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	200000c9 	.word	0x200000c9

08005cac <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d105      	bne.n	8005cc8 <tcp_remove_listener+0x1c>
 8005cbc:	4b0d      	ldr	r3, [pc, #52]	; (8005cf4 <tcp_remove_listener+0x48>)
 8005cbe:	22ff      	movs	r2, #255	; 0xff
 8005cc0:	490d      	ldr	r1, [pc, #52]	; (8005cf8 <tcp_remove_listener+0x4c>)
 8005cc2:	480e      	ldr	r0, [pc, #56]	; (8005cfc <tcp_remove_listener+0x50>)
 8005cc4:	f008 fb5c 	bl	800e380 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	e00a      	b.n	8005ce4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d102      	bne.n	8005cde <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1f1      	bne.n	8005cce <tcp_remove_listener+0x22>
    }
  }
}
 8005cea:	bf00      	nop
 8005cec:	bf00      	nop
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	08010208 	.word	0x08010208
 8005cf8:	08010290 	.word	0x08010290
 8005cfc:	0801024c 	.word	0x0801024c

08005d00 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <tcp_listen_closed+0x1c>
 8005d0e:	4b14      	ldr	r3, [pc, #80]	; (8005d60 <tcp_listen_closed+0x60>)
 8005d10:	f240 1211 	movw	r2, #273	; 0x111
 8005d14:	4913      	ldr	r1, [pc, #76]	; (8005d64 <tcp_listen_closed+0x64>)
 8005d16:	4814      	ldr	r0, [pc, #80]	; (8005d68 <tcp_listen_closed+0x68>)
 8005d18:	f008 fb32 	bl	800e380 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	7d1b      	ldrb	r3, [r3, #20]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d006      	beq.n	8005d32 <tcp_listen_closed+0x32>
 8005d24:	4b0e      	ldr	r3, [pc, #56]	; (8005d60 <tcp_listen_closed+0x60>)
 8005d26:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005d2a:	4910      	ldr	r1, [pc, #64]	; (8005d6c <tcp_listen_closed+0x6c>)
 8005d2c:	480e      	ldr	r0, [pc, #56]	; (8005d68 <tcp_listen_closed+0x68>)
 8005d2e:	f008 fb27 	bl	800e380 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005d32:	2301      	movs	r3, #1
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	e00b      	b.n	8005d50 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005d38:	4a0d      	ldr	r2, [pc, #52]	; (8005d70 <tcp_listen_closed+0x70>)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff ffb1 	bl	8005cac <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d9f0      	bls.n	8005d38 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005d56:	bf00      	nop
 8005d58:	bf00      	nop
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	08010208 	.word	0x08010208
 8005d64:	080102b8 	.word	0x080102b8
 8005d68:	0801024c 	.word	0x0801024c
 8005d6c:	080102c4 	.word	0x080102c4
 8005d70:	080121dc 	.word	0x080121dc

08005d74 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005d74:	b5b0      	push	{r4, r5, r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af04      	add	r7, sp, #16
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d106      	bne.n	8005d94 <tcp_close_shutdown+0x20>
 8005d86:	4b63      	ldr	r3, [pc, #396]	; (8005f14 <tcp_close_shutdown+0x1a0>)
 8005d88:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005d8c:	4962      	ldr	r1, [pc, #392]	; (8005f18 <tcp_close_shutdown+0x1a4>)
 8005d8e:	4863      	ldr	r0, [pc, #396]	; (8005f1c <tcp_close_shutdown+0x1a8>)
 8005d90:	f008 faf6 	bl	800e380 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d066      	beq.n	8005e68 <tcp_close_shutdown+0xf4>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	7d1b      	ldrb	r3, [r3, #20]
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d003      	beq.n	8005daa <tcp_close_shutdown+0x36>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	7d1b      	ldrb	r3, [r3, #20]
 8005da6:	2b07      	cmp	r3, #7
 8005da8:	d15e      	bne.n	8005e68 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d104      	bne.n	8005dbc <tcp_close_shutdown+0x48>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005dba:	d055      	beq.n	8005e68 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	8b5b      	ldrh	r3, [r3, #26]
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d106      	bne.n	8005dd6 <tcp_close_shutdown+0x62>
 8005dc8:	4b52      	ldr	r3, [pc, #328]	; (8005f14 <tcp_close_shutdown+0x1a0>)
 8005dca:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005dce:	4954      	ldr	r1, [pc, #336]	; (8005f20 <tcp_close_shutdown+0x1ac>)
 8005dd0:	4852      	ldr	r0, [pc, #328]	; (8005f1c <tcp_close_shutdown+0x1a8>)
 8005dd2:	f008 fad5 	bl	800e380 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005dde:	687d      	ldr	r5, [r7, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3304      	adds	r3, #4
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	8ad2      	ldrh	r2, [r2, #22]
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	8b09      	ldrh	r1, [r1, #24]
 8005dec:	9102      	str	r1, [sp, #8]
 8005dee:	9201      	str	r2, [sp, #4]
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	462b      	mov	r3, r5
 8005df4:	4622      	mov	r2, r4
 8005df6:	4601      	mov	r1, r0
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f004 fe8d 	bl	800ab18 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f001 f8c6 	bl	8006f90 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005e04:	4b47      	ldr	r3, [pc, #284]	; (8005f24 <tcp_close_shutdown+0x1b0>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d105      	bne.n	8005e1a <tcp_close_shutdown+0xa6>
 8005e0e:	4b45      	ldr	r3, [pc, #276]	; (8005f24 <tcp_close_shutdown+0x1b0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	4a43      	ldr	r2, [pc, #268]	; (8005f24 <tcp_close_shutdown+0x1b0>)
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	e013      	b.n	8005e42 <tcp_close_shutdown+0xce>
 8005e1a:	4b42      	ldr	r3, [pc, #264]	; (8005f24 <tcp_close_shutdown+0x1b0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	e00c      	b.n	8005e3c <tcp_close_shutdown+0xc8>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d104      	bne.n	8005e36 <tcp_close_shutdown+0xc2>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68da      	ldr	r2, [r3, #12]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	60da      	str	r2, [r3, #12]
 8005e34:	e005      	b.n	8005e42 <tcp_close_shutdown+0xce>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1ef      	bne.n	8005e22 <tcp_close_shutdown+0xae>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	60da      	str	r2, [r3, #12]
 8005e48:	4b37      	ldr	r3, [pc, #220]	; (8005f28 <tcp_close_shutdown+0x1b4>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005e4e:	4b37      	ldr	r3, [pc, #220]	; (8005f2c <tcp_close_shutdown+0x1b8>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d102      	bne.n	8005e5e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005e58:	f003 fd5a 	bl	8009910 <tcp_trigger_input_pcb_close>
 8005e5c:	e002      	b.n	8005e64 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff fed6 	bl	8005c10 <tcp_free>
      }
      return ERR_OK;
 8005e64:	2300      	movs	r3, #0
 8005e66:	e050      	b.n	8005f0a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	7d1b      	ldrb	r3, [r3, #20]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d03b      	beq.n	8005ee8 <tcp_close_shutdown+0x174>
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	dc44      	bgt.n	8005efe <tcp_close_shutdown+0x18a>
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <tcp_close_shutdown+0x10a>
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d02a      	beq.n	8005ed2 <tcp_close_shutdown+0x15e>
 8005e7c:	e03f      	b.n	8005efe <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	8adb      	ldrh	r3, [r3, #22]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d021      	beq.n	8005eca <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005e86:	4b2a      	ldr	r3, [pc, #168]	; (8005f30 <tcp_close_shutdown+0x1bc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d105      	bne.n	8005e9c <tcp_close_shutdown+0x128>
 8005e90:	4b27      	ldr	r3, [pc, #156]	; (8005f30 <tcp_close_shutdown+0x1bc>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	4a26      	ldr	r2, [pc, #152]	; (8005f30 <tcp_close_shutdown+0x1bc>)
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	e013      	b.n	8005ec4 <tcp_close_shutdown+0x150>
 8005e9c:	4b24      	ldr	r3, [pc, #144]	; (8005f30 <tcp_close_shutdown+0x1bc>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	60bb      	str	r3, [r7, #8]
 8005ea2:	e00c      	b.n	8005ebe <tcp_close_shutdown+0x14a>
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d104      	bne.n	8005eb8 <tcp_close_shutdown+0x144>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	60da      	str	r2, [r3, #12]
 8005eb6:	e005      	b.n	8005ec4 <tcp_close_shutdown+0x150>
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	60bb      	str	r3, [r7, #8]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1ef      	bne.n	8005ea4 <tcp_close_shutdown+0x130>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7ff fea0 	bl	8005c10 <tcp_free>
      break;
 8005ed0:	e01a      	b.n	8005f08 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7ff ff14 	bl	8005d00 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	4816      	ldr	r0, [pc, #88]	; (8005f34 <tcp_close_shutdown+0x1c0>)
 8005edc:	f001 f8a8 	bl	8007030 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7ff feb1 	bl	8005c48 <tcp_free_listen>
      break;
 8005ee6:	e00f      	b.n	8005f08 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	480e      	ldr	r0, [pc, #56]	; (8005f24 <tcp_close_shutdown+0x1b0>)
 8005eec:	f001 f8a0 	bl	8007030 <tcp_pcb_remove>
 8005ef0:	4b0d      	ldr	r3, [pc, #52]	; (8005f28 <tcp_close_shutdown+0x1b4>)
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff fe8a 	bl	8005c10 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005efc:	e004      	b.n	8005f08 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f81a 	bl	8005f38 <tcp_close_shutdown_fin>
 8005f04:	4603      	mov	r3, r0
 8005f06:	e000      	b.n	8005f0a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bdb0      	pop	{r4, r5, r7, pc}
 8005f12:	bf00      	nop
 8005f14:	08010208 	.word	0x08010208
 8005f18:	080102dc 	.word	0x080102dc
 8005f1c:	0801024c 	.word	0x0801024c
 8005f20:	080102fc 	.word	0x080102fc
 8005f24:	20008af4 	.word	0x20008af4
 8005f28:	20008af0 	.word	0x20008af0
 8005f2c:	20008b08 	.word	0x20008b08
 8005f30:	20008b00 	.word	0x20008b00
 8005f34:	20008afc 	.word	0x20008afc

08005f38 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d106      	bne.n	8005f54 <tcp_close_shutdown_fin+0x1c>
 8005f46:	4b2e      	ldr	r3, [pc, #184]	; (8006000 <tcp_close_shutdown_fin+0xc8>)
 8005f48:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005f4c:	492d      	ldr	r1, [pc, #180]	; (8006004 <tcp_close_shutdown_fin+0xcc>)
 8005f4e:	482e      	ldr	r0, [pc, #184]	; (8006008 <tcp_close_shutdown_fin+0xd0>)
 8005f50:	f008 fa16 	bl	800e380 <iprintf>

  switch (pcb->state) {
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	7d1b      	ldrb	r3, [r3, #20]
 8005f58:	2b07      	cmp	r3, #7
 8005f5a:	d020      	beq.n	8005f9e <tcp_close_shutdown_fin+0x66>
 8005f5c:	2b07      	cmp	r3, #7
 8005f5e:	dc2b      	bgt.n	8005fb8 <tcp_close_shutdown_fin+0x80>
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d002      	beq.n	8005f6a <tcp_close_shutdown_fin+0x32>
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	d00d      	beq.n	8005f84 <tcp_close_shutdown_fin+0x4c>
 8005f68:	e026      	b.n	8005fb8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f003 fee2 	bl	8009d34 <tcp_send_fin>
 8005f70:	4603      	mov	r3, r0
 8005f72:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d11f      	bne.n	8005fbc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2205      	movs	r2, #5
 8005f80:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005f82:	e01b      	b.n	8005fbc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f003 fed5 	bl	8009d34 <tcp_send_fin>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d114      	bne.n	8005fc0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2205      	movs	r2, #5
 8005f9a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005f9c:	e010      	b.n	8005fc0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f003 fec8 	bl	8009d34 <tcp_send_fin>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d109      	bne.n	8005fc4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2209      	movs	r2, #9
 8005fb4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005fb6:	e005      	b.n	8005fc4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	e01c      	b.n	8005ff6 <tcp_close_shutdown_fin+0xbe>
      break;
 8005fbc:	bf00      	nop
 8005fbe:	e002      	b.n	8005fc6 <tcp_close_shutdown_fin+0x8e>
      break;
 8005fc0:	bf00      	nop
 8005fc2:	e000      	b.n	8005fc6 <tcp_close_shutdown_fin+0x8e>
      break;
 8005fc4:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d103      	bne.n	8005fd6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f003 ffee 	bl	8009fb0 <tcp_output>
 8005fd4:	e00d      	b.n	8005ff2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fde:	d108      	bne.n	8005ff2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	8b5b      	ldrh	r3, [r3, #26]
 8005fe4:	f043 0308 	orr.w	r3, r3, #8
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e001      	b.n	8005ff6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	08010208 	.word	0x08010208
 8006004:	080102b8 	.word	0x080102b8
 8006008:	0801024c 	.word	0x0801024c

0800600c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d109      	bne.n	800602e <tcp_close+0x22>
 800601a:	4b0f      	ldr	r3, [pc, #60]	; (8006058 <tcp_close+0x4c>)
 800601c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006020:	490e      	ldr	r1, [pc, #56]	; (800605c <tcp_close+0x50>)
 8006022:	480f      	ldr	r0, [pc, #60]	; (8006060 <tcp_close+0x54>)
 8006024:	f008 f9ac 	bl	800e380 <iprintf>
 8006028:	f06f 030f 	mvn.w	r3, #15
 800602c:	e00f      	b.n	800604e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	7d1b      	ldrb	r3, [r3, #20]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d006      	beq.n	8006044 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	8b5b      	ldrh	r3, [r3, #26]
 800603a:	f043 0310 	orr.w	r3, r3, #16
 800603e:	b29a      	uxth	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006044:	2101      	movs	r1, #1
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff fe94 	bl	8005d74 <tcp_close_shutdown>
 800604c:	4603      	mov	r3, r0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	08010208 	.word	0x08010208
 800605c:	08010318 	.word	0x08010318
 8006060:	0801024c 	.word	0x0801024c

08006064 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08e      	sub	sp, #56	; 0x38
 8006068:	af04      	add	r7, sp, #16
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d107      	bne.n	8006084 <tcp_abandon+0x20>
 8006074:	4b52      	ldr	r3, [pc, #328]	; (80061c0 <tcp_abandon+0x15c>)
 8006076:	f240 223d 	movw	r2, #573	; 0x23d
 800607a:	4952      	ldr	r1, [pc, #328]	; (80061c4 <tcp_abandon+0x160>)
 800607c:	4852      	ldr	r0, [pc, #328]	; (80061c8 <tcp_abandon+0x164>)
 800607e:	f008 f97f 	bl	800e380 <iprintf>
 8006082:	e099      	b.n	80061b8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	7d1b      	ldrb	r3, [r3, #20]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d106      	bne.n	800609a <tcp_abandon+0x36>
 800608c:	4b4c      	ldr	r3, [pc, #304]	; (80061c0 <tcp_abandon+0x15c>)
 800608e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006092:	494e      	ldr	r1, [pc, #312]	; (80061cc <tcp_abandon+0x168>)
 8006094:	484c      	ldr	r0, [pc, #304]	; (80061c8 <tcp_abandon+0x164>)
 8006096:	f008 f973 	bl	800e380 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	7d1b      	ldrb	r3, [r3, #20]
 800609e:	2b0a      	cmp	r3, #10
 80060a0:	d107      	bne.n	80060b2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	484a      	ldr	r0, [pc, #296]	; (80061d0 <tcp_abandon+0x16c>)
 80060a6:	f000 ffc3 	bl	8007030 <tcp_pcb_remove>
    tcp_free(pcb);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7ff fdb0 	bl	8005c10 <tcp_free>
 80060b0:	e082      	b.n	80061b8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80060b6:	2300      	movs	r3, #0
 80060b8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060be:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060cc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	7d1b      	ldrb	r3, [r3, #20]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d126      	bne.n	800612a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	8adb      	ldrh	r3, [r3, #22]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d02e      	beq.n	8006142 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80060e4:	4b3b      	ldr	r3, [pc, #236]	; (80061d4 <tcp_abandon+0x170>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d105      	bne.n	80060fa <tcp_abandon+0x96>
 80060ee:	4b39      	ldr	r3, [pc, #228]	; (80061d4 <tcp_abandon+0x170>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	4a37      	ldr	r2, [pc, #220]	; (80061d4 <tcp_abandon+0x170>)
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	e013      	b.n	8006122 <tcp_abandon+0xbe>
 80060fa:	4b36      	ldr	r3, [pc, #216]	; (80061d4 <tcp_abandon+0x170>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	61fb      	str	r3, [r7, #28]
 8006100:	e00c      	b.n	800611c <tcp_abandon+0xb8>
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	429a      	cmp	r2, r3
 800610a:	d104      	bne.n	8006116 <tcp_abandon+0xb2>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	60da      	str	r2, [r3, #12]
 8006114:	e005      	b.n	8006122 <tcp_abandon+0xbe>
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	61fb      	str	r3, [r7, #28]
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1ef      	bne.n	8006102 <tcp_abandon+0x9e>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	60da      	str	r2, [r3, #12]
 8006128:	e00b      	b.n	8006142 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	8adb      	ldrh	r3, [r3, #22]
 8006132:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006134:	6879      	ldr	r1, [r7, #4]
 8006136:	4828      	ldr	r0, [pc, #160]	; (80061d8 <tcp_abandon+0x174>)
 8006138:	f000 ff7a 	bl	8007030 <tcp_pcb_remove>
 800613c:	4b27      	ldr	r3, [pc, #156]	; (80061dc <tcp_abandon+0x178>)
 800613e:	2201      	movs	r2, #1
 8006140:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006146:	2b00      	cmp	r3, #0
 8006148:	d004      	beq.n	8006154 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614e:	4618      	mov	r0, r3
 8006150:	f000 fd1c 	bl	8006b8c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d004      	beq.n	8006166 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fd13 	bl	8006b8c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fd0a 	bl	8006b8c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00e      	beq.n	800619c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3304      	adds	r3, #4
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	8b12      	ldrh	r2, [r2, #24]
 8006188:	9202      	str	r2, [sp, #8]
 800618a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800618c:	9201      	str	r2, [sp, #4]
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	460b      	mov	r3, r1
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	69b9      	ldr	r1, [r7, #24]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f004 fcbe 	bl	800ab18 <tcp_rst>
    }
    last_state = pcb->state;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	7d1b      	ldrb	r3, [r3, #20]
 80061a0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff fd34 	bl	8005c10 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d004      	beq.n	80061b8 <tcp_abandon+0x154>
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f06f 010c 	mvn.w	r1, #12
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	4798      	blx	r3
  }
}
 80061b8:	3728      	adds	r7, #40	; 0x28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	08010208 	.word	0x08010208
 80061c4:	0801034c 	.word	0x0801034c
 80061c8:	0801024c 	.word	0x0801024c
 80061cc:	08010368 	.word	0x08010368
 80061d0:	20008b04 	.word	0x20008b04
 80061d4:	20008b00 	.word	0x20008b00
 80061d8:	20008af4 	.word	0x20008af4
 80061dc:	20008af0 	.word	0x20008af0

080061e0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80061e8:	2101      	movs	r1, #1
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7ff ff3a 	bl	8006064 <tcp_abandon>
}
 80061f0:	bf00      	nop
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <tcp_update_rcv_ann_wnd+0x1c>
 8006206:	4b25      	ldr	r3, [pc, #148]	; (800629c <tcp_update_rcv_ann_wnd+0xa4>)
 8006208:	f240 32a6 	movw	r2, #934	; 0x3a6
 800620c:	4924      	ldr	r1, [pc, #144]	; (80062a0 <tcp_update_rcv_ann_wnd+0xa8>)
 800620e:	4825      	ldr	r0, [pc, #148]	; (80062a4 <tcp_update_rcv_ann_wnd+0xac>)
 8006210:	f008 f8b6 	bl	800e380 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800621c:	4413      	add	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006228:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800622c:	bf28      	it	cs
 800622e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006232:	b292      	uxth	r2, r2
 8006234:	4413      	add	r3, r2
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	db08      	blt.n	8006250 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	e020      	b.n	8006292 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	dd03      	ble.n	8006266 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006264:	e014      	b.n	8006290 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006278:	d306      	bcc.n	8006288 <tcp_update_rcv_ann_wnd+0x90>
 800627a:	4b08      	ldr	r3, [pc, #32]	; (800629c <tcp_update_rcv_ann_wnd+0xa4>)
 800627c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006280:	4909      	ldr	r1, [pc, #36]	; (80062a8 <tcp_update_rcv_ann_wnd+0xb0>)
 8006282:	4808      	ldr	r0, [pc, #32]	; (80062a4 <tcp_update_rcv_ann_wnd+0xac>)
 8006284:	f008 f87c 	bl	800e380 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	b29a      	uxth	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006290:	2300      	movs	r3, #0
  }
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	08010208 	.word	0x08010208
 80062a0:	08010464 	.word	0x08010464
 80062a4:	0801024c 	.word	0x0801024c
 80062a8:	08010488 	.word	0x08010488

080062ac <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	460b      	mov	r3, r1
 80062b6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d107      	bne.n	80062ce <tcp_recved+0x22>
 80062be:	4b1f      	ldr	r3, [pc, #124]	; (800633c <tcp_recved+0x90>)
 80062c0:	f240 32cf 	movw	r2, #975	; 0x3cf
 80062c4:	491e      	ldr	r1, [pc, #120]	; (8006340 <tcp_recved+0x94>)
 80062c6:	481f      	ldr	r0, [pc, #124]	; (8006344 <tcp_recved+0x98>)
 80062c8:	f008 f85a 	bl	800e380 <iprintf>
 80062cc:	e032      	b.n	8006334 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	7d1b      	ldrb	r3, [r3, #20]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d106      	bne.n	80062e4 <tcp_recved+0x38>
 80062d6:	4b19      	ldr	r3, [pc, #100]	; (800633c <tcp_recved+0x90>)
 80062d8:	f240 32d2 	movw	r2, #978	; 0x3d2
 80062dc:	491a      	ldr	r1, [pc, #104]	; (8006348 <tcp_recved+0x9c>)
 80062de:	4819      	ldr	r0, [pc, #100]	; (8006344 <tcp_recved+0x98>)
 80062e0:	f008 f84e 	bl	800e380 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80062e8:	887b      	ldrh	r3, [r7, #2]
 80062ea:	4413      	add	r3, r2
 80062ec:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80062ee:	89fb      	ldrh	r3, [r7, #14]
 80062f0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80062f4:	d804      	bhi.n	8006300 <tcp_recved+0x54>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062fa:	89fa      	ldrh	r2, [r7, #14]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d204      	bcs.n	800630a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006306:	851a      	strh	r2, [r3, #40]	; 0x28
 8006308:	e002      	b.n	8006310 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	89fa      	ldrh	r2, [r7, #14]
 800630e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff ff71 	bl	80061f8 <tcp_update_rcv_ann_wnd>
 8006316:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800631e:	d309      	bcc.n	8006334 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	8b5b      	ldrh	r3, [r3, #26]
 8006324:	f043 0302 	orr.w	r3, r3, #2
 8006328:	b29a      	uxth	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f003 fe3e 	bl	8009fb0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	08010208 	.word	0x08010208
 8006340:	080104a4 	.word	0x080104a4
 8006344:	0801024c 	.word	0x0801024c
 8006348:	080104bc 	.word	0x080104bc

0800634c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800634c:	b5b0      	push	{r4, r5, r7, lr}
 800634e:	b090      	sub	sp, #64	; 0x40
 8006350:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006358:	4b94      	ldr	r3, [pc, #592]	; (80065ac <tcp_slowtmr+0x260>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3301      	adds	r3, #1
 800635e:	4a93      	ldr	r2, [pc, #588]	; (80065ac <tcp_slowtmr+0x260>)
 8006360:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006362:	4b93      	ldr	r3, [pc, #588]	; (80065b0 <tcp_slowtmr+0x264>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	3301      	adds	r3, #1
 8006368:	b2da      	uxtb	r2, r3
 800636a:	4b91      	ldr	r3, [pc, #580]	; (80065b0 <tcp_slowtmr+0x264>)
 800636c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800636e:	2300      	movs	r3, #0
 8006370:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006372:	4b90      	ldr	r3, [pc, #576]	; (80065b4 <tcp_slowtmr+0x268>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006378:	e29d      	b.n	80068b6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800637a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637c:	7d1b      	ldrb	r3, [r3, #20]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d106      	bne.n	8006390 <tcp_slowtmr+0x44>
 8006382:	4b8d      	ldr	r3, [pc, #564]	; (80065b8 <tcp_slowtmr+0x26c>)
 8006384:	f240 42be 	movw	r2, #1214	; 0x4be
 8006388:	498c      	ldr	r1, [pc, #560]	; (80065bc <tcp_slowtmr+0x270>)
 800638a:	488d      	ldr	r0, [pc, #564]	; (80065c0 <tcp_slowtmr+0x274>)
 800638c:	f007 fff8 	bl	800e380 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	7d1b      	ldrb	r3, [r3, #20]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d106      	bne.n	80063a6 <tcp_slowtmr+0x5a>
 8006398:	4b87      	ldr	r3, [pc, #540]	; (80065b8 <tcp_slowtmr+0x26c>)
 800639a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800639e:	4989      	ldr	r1, [pc, #548]	; (80065c4 <tcp_slowtmr+0x278>)
 80063a0:	4887      	ldr	r0, [pc, #540]	; (80065c0 <tcp_slowtmr+0x274>)
 80063a2:	f007 ffed 	bl	800e380 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80063a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a8:	7d1b      	ldrb	r3, [r3, #20]
 80063aa:	2b0a      	cmp	r3, #10
 80063ac:	d106      	bne.n	80063bc <tcp_slowtmr+0x70>
 80063ae:	4b82      	ldr	r3, [pc, #520]	; (80065b8 <tcp_slowtmr+0x26c>)
 80063b0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80063b4:	4984      	ldr	r1, [pc, #528]	; (80065c8 <tcp_slowtmr+0x27c>)
 80063b6:	4882      	ldr	r0, [pc, #520]	; (80065c0 <tcp_slowtmr+0x274>)
 80063b8:	f007 ffe2 	bl	800e380 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	7f9a      	ldrb	r2, [r3, #30]
 80063c0:	4b7b      	ldr	r3, [pc, #492]	; (80065b0 <tcp_slowtmr+0x264>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d105      	bne.n	80063d4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80063cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80063d2:	e270      	b.n	80068b6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80063d4:	4b76      	ldr	r3, [pc, #472]	; (80065b0 <tcp_slowtmr+0x264>)
 80063d6:	781a      	ldrb	r2, [r3, #0]
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80063dc:	2300      	movs	r3, #0
 80063de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80063e2:	2300      	movs	r3, #0
 80063e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80063e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ea:	7d1b      	ldrb	r3, [r3, #20]
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d10a      	bne.n	8006406 <tcp_slowtmr+0xba>
 80063f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063f6:	2b05      	cmp	r3, #5
 80063f8:	d905      	bls.n	8006406 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80063fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063fe:	3301      	adds	r3, #1
 8006400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006404:	e11e      	b.n	8006644 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800640c:	2b0b      	cmp	r3, #11
 800640e:	d905      	bls.n	800641c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006414:	3301      	adds	r3, #1
 8006416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800641a:	e113      	b.n	8006644 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006422:	2b00      	cmp	r3, #0
 8006424:	d075      	beq.n	8006512 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642a:	2b00      	cmp	r3, #0
 800642c:	d006      	beq.n	800643c <tcp_slowtmr+0xf0>
 800642e:	4b62      	ldr	r3, [pc, #392]	; (80065b8 <tcp_slowtmr+0x26c>)
 8006430:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006434:	4965      	ldr	r1, [pc, #404]	; (80065cc <tcp_slowtmr+0x280>)
 8006436:	4862      	ldr	r0, [pc, #392]	; (80065c0 <tcp_slowtmr+0x274>)
 8006438:	f007 ffa2 	bl	800e380 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d106      	bne.n	8006452 <tcp_slowtmr+0x106>
 8006444:	4b5c      	ldr	r3, [pc, #368]	; (80065b8 <tcp_slowtmr+0x26c>)
 8006446:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800644a:	4961      	ldr	r1, [pc, #388]	; (80065d0 <tcp_slowtmr+0x284>)
 800644c:	485c      	ldr	r0, [pc, #368]	; (80065c0 <tcp_slowtmr+0x274>)
 800644e:	f007 ff97 	bl	800e380 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006454:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006458:	2b0b      	cmp	r3, #11
 800645a:	d905      	bls.n	8006468 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800645c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006460:	3301      	adds	r3, #1
 8006462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006466:	e0ed      	b.n	8006644 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800646e:	3b01      	subs	r3, #1
 8006470:	4a58      	ldr	r2, [pc, #352]	; (80065d4 <tcp_slowtmr+0x288>)
 8006472:	5cd3      	ldrb	r3, [r2, r3]
 8006474:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006478:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800647c:	7c7a      	ldrb	r2, [r7, #17]
 800647e:	429a      	cmp	r2, r3
 8006480:	d907      	bls.n	8006492 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006488:	3301      	adds	r3, #1
 800648a:	b2da      	uxtb	r2, r3
 800648c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006498:	7c7a      	ldrb	r2, [r7, #17]
 800649a:	429a      	cmp	r2, r3
 800649c:	f200 80d2 	bhi.w	8006644 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80064a0:	2301      	movs	r3, #1
 80064a2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d108      	bne.n	80064c0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80064ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064b0:	f004 fc26 	bl	800ad00 <tcp_zero_window_probe>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d014      	beq.n	80064e4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80064ba:	2300      	movs	r3, #0
 80064bc:	623b      	str	r3, [r7, #32]
 80064be:	e011      	b.n	80064e4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80064c6:	4619      	mov	r1, r3
 80064c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064ca:	f003 faeb 	bl	8009aa4 <tcp_split_unsent_seg>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d107      	bne.n	80064e4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80064d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064d6:	f003 fd6b 	bl	8009fb0 <tcp_output>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80064e0:	2300      	movs	r3, #0
 80064e2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 80ac 	beq.w	8006644 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80064ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80064f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80064fa:	2b06      	cmp	r3, #6
 80064fc:	f200 80a2 	bhi.w	8006644 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006502:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006506:	3301      	adds	r3, #1
 8006508:	b2da      	uxtb	r2, r3
 800650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006510:	e098      	b.n	8006644 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006514:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006518:	2b00      	cmp	r3, #0
 800651a:	db0f      	blt.n	800653c <tcp_slowtmr+0x1f0>
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006522:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006526:	4293      	cmp	r3, r2
 8006528:	d008      	beq.n	800653c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006530:	b29b      	uxth	r3, r3
 8006532:	3301      	adds	r3, #1
 8006534:	b29b      	uxth	r3, r3
 8006536:	b21a      	sxth	r2, r3
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800653c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006548:	429a      	cmp	r2, r3
 800654a:	db7b      	blt.n	8006644 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800654c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800654e:	f004 f821 	bl	800a594 <tcp_rexmit_rto_prepare>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d007      	beq.n	8006568 <tcp_slowtmr+0x21c>
 8006558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655c:	2b00      	cmp	r3, #0
 800655e:	d171      	bne.n	8006644 <tcp_slowtmr+0x2f8>
 8006560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006564:	2b00      	cmp	r3, #0
 8006566:	d06d      	beq.n	8006644 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656a:	7d1b      	ldrb	r3, [r3, #20]
 800656c:	2b02      	cmp	r3, #2
 800656e:	d03a      	beq.n	80065e6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006576:	2b0c      	cmp	r3, #12
 8006578:	bf28      	it	cs
 800657a:	230c      	movcs	r3, #12
 800657c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006580:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006584:	10db      	asrs	r3, r3, #3
 8006586:	b21b      	sxth	r3, r3
 8006588:	461a      	mov	r2, r3
 800658a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006590:	4413      	add	r3, r2
 8006592:	7efa      	ldrb	r2, [r7, #27]
 8006594:	4910      	ldr	r1, [pc, #64]	; (80065d8 <tcp_slowtmr+0x28c>)
 8006596:	5c8a      	ldrb	r2, [r1, r2]
 8006598:	4093      	lsls	r3, r2
 800659a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80065a2:	4293      	cmp	r3, r2
 80065a4:	dc1a      	bgt.n	80065dc <tcp_slowtmr+0x290>
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	b21a      	sxth	r2, r3
 80065aa:	e019      	b.n	80065e0 <tcp_slowtmr+0x294>
 80065ac:	20008af8 	.word	0x20008af8
 80065b0:	200000ca 	.word	0x200000ca
 80065b4:	20008af4 	.word	0x20008af4
 80065b8:	08010208 	.word	0x08010208
 80065bc:	0801054c 	.word	0x0801054c
 80065c0:	0801024c 	.word	0x0801024c
 80065c4:	08010578 	.word	0x08010578
 80065c8:	080105a4 	.word	0x080105a4
 80065cc:	080105d4 	.word	0x080105d4
 80065d0:	08010608 	.word	0x08010608
 80065d4:	080121d4 	.word	0x080121d4
 80065d8:	080121c4 	.word	0x080121c4
 80065dc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80065e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e8:	2200      	movs	r2, #0
 80065ea:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80065ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80065f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80065f8:	4293      	cmp	r3, r2
 80065fa:	bf28      	it	cs
 80065fc:	4613      	movcs	r3, r2
 80065fe:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006600:	8a7b      	ldrh	r3, [r7, #18]
 8006602:	085b      	lsrs	r3, r3, #1
 8006604:	b29a      	uxth	r2, r3
 8006606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006608:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800660c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006614:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	b29b      	uxth	r3, r3
 800661a:	429a      	cmp	r2, r3
 800661c:	d206      	bcs.n	800662c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006620:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	b29a      	uxth	r2, r3
 8006626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006628:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006632:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006638:	2200      	movs	r2, #0
 800663a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800663e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006640:	f004 f818 	bl	800a674 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006646:	7d1b      	ldrb	r3, [r3, #20]
 8006648:	2b06      	cmp	r3, #6
 800664a:	d111      	bne.n	8006670 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800664c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664e:	8b5b      	ldrh	r3, [r3, #26]
 8006650:	f003 0310 	and.w	r3, r3, #16
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00b      	beq.n	8006670 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006658:	4b9c      	ldr	r3, [pc, #624]	; (80068cc <tcp_slowtmr+0x580>)
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b28      	cmp	r3, #40	; 0x28
 8006664:	d904      	bls.n	8006670 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800666a:	3301      	adds	r3, #1
 800666c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	7a5b      	ldrb	r3, [r3, #9]
 8006674:	f003 0308 	and.w	r3, r3, #8
 8006678:	2b00      	cmp	r3, #0
 800667a:	d04a      	beq.n	8006712 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006680:	2b04      	cmp	r3, #4
 8006682:	d003      	beq.n	800668c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006686:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006688:	2b07      	cmp	r3, #7
 800668a:	d142      	bne.n	8006712 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800668c:	4b8f      	ldr	r3, [pc, #572]	; (80068cc <tcp_slowtmr+0x580>)
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800669c:	4b8c      	ldr	r3, [pc, #560]	; (80068d0 <tcp_slowtmr+0x584>)
 800669e:	440b      	add	r3, r1
 80066a0:	498c      	ldr	r1, [pc, #560]	; (80068d4 <tcp_slowtmr+0x588>)
 80066a2:	fba1 1303 	umull	r1, r3, r1, r3
 80066a6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d90a      	bls.n	80066c2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80066ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066b0:	3301      	adds	r3, #1
 80066b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80066b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80066ba:	3301      	adds	r3, #1
 80066bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80066c0:	e027      	b.n	8006712 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066c2:	4b82      	ldr	r3, [pc, #520]	; (80068cc <tcp_slowtmr+0x580>)
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80066cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ce:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80066d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80066d8:	4618      	mov	r0, r3
 80066da:	4b7f      	ldr	r3, [pc, #508]	; (80068d8 <tcp_slowtmr+0x58c>)
 80066dc:	fb03 f300 	mul.w	r3, r3, r0
 80066e0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80066e2:	497c      	ldr	r1, [pc, #496]	; (80068d4 <tcp_slowtmr+0x588>)
 80066e4:	fba1 1303 	umull	r1, r3, r1, r3
 80066e8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d911      	bls.n	8006712 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80066ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066f0:	f004 fac6 	bl	800ac80 <tcp_keepalive>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80066fa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d107      	bne.n	8006712 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006708:	3301      	adds	r3, #1
 800670a:	b2da      	uxtb	r2, r3
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006716:	2b00      	cmp	r3, #0
 8006718:	d011      	beq.n	800673e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800671a:	4b6c      	ldr	r3, [pc, #432]	; (80068cc <tcp_slowtmr+0x580>)
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	1ad2      	subs	r2, r2, r3
 8006724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006726:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800672a:	4619      	mov	r1, r3
 800672c:	460b      	mov	r3, r1
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	440b      	add	r3, r1
 8006732:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006734:	429a      	cmp	r2, r3
 8006736:	d302      	bcc.n	800673e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006738:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800673a:	f000 fddd 	bl	80072f8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	7d1b      	ldrb	r3, [r3, #20]
 8006742:	2b03      	cmp	r3, #3
 8006744:	d10b      	bne.n	800675e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006746:	4b61      	ldr	r3, [pc, #388]	; (80068cc <tcp_slowtmr+0x580>)
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b28      	cmp	r3, #40	; 0x28
 8006752:	d904      	bls.n	800675e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006758:	3301      	adds	r3, #1
 800675a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	7d1b      	ldrb	r3, [r3, #20]
 8006762:	2b09      	cmp	r3, #9
 8006764:	d10b      	bne.n	800677e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006766:	4b59      	ldr	r3, [pc, #356]	; (80068cc <tcp_slowtmr+0x580>)
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2bf0      	cmp	r3, #240	; 0xf0
 8006772:	d904      	bls.n	800677e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8006774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006778:	3301      	adds	r3, #1
 800677a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800677e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006782:	2b00      	cmp	r3, #0
 8006784:	d060      	beq.n	8006848 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800678c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800678e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006790:	f000 fbfe 	bl	8006f90 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006796:	2b00      	cmp	r3, #0
 8006798:	d010      	beq.n	80067bc <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800679a:	4b50      	ldr	r3, [pc, #320]	; (80068dc <tcp_slowtmr+0x590>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d106      	bne.n	80067b2 <tcp_slowtmr+0x466>
 80067a4:	4b4e      	ldr	r3, [pc, #312]	; (80068e0 <tcp_slowtmr+0x594>)
 80067a6:	f240 526d 	movw	r2, #1389	; 0x56d
 80067aa:	494e      	ldr	r1, [pc, #312]	; (80068e4 <tcp_slowtmr+0x598>)
 80067ac:	484e      	ldr	r0, [pc, #312]	; (80068e8 <tcp_slowtmr+0x59c>)
 80067ae:	f007 fde7 	bl	800e380 <iprintf>
        prev->next = pcb->next;
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b8:	60da      	str	r2, [r3, #12]
 80067ba:	e00f      	b.n	80067dc <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80067bc:	4b47      	ldr	r3, [pc, #284]	; (80068dc <tcp_slowtmr+0x590>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d006      	beq.n	80067d4 <tcp_slowtmr+0x488>
 80067c6:	4b46      	ldr	r3, [pc, #280]	; (80068e0 <tcp_slowtmr+0x594>)
 80067c8:	f240 5271 	movw	r2, #1393	; 0x571
 80067cc:	4947      	ldr	r1, [pc, #284]	; (80068ec <tcp_slowtmr+0x5a0>)
 80067ce:	4846      	ldr	r0, [pc, #280]	; (80068e8 <tcp_slowtmr+0x59c>)
 80067d0:	f007 fdd6 	bl	800e380 <iprintf>
        tcp_active_pcbs = pcb->next;
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	4a40      	ldr	r2, [pc, #256]	; (80068dc <tcp_slowtmr+0x590>)
 80067da:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80067dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d013      	beq.n	800680c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80067e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80067e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80067ec:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80067ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f0:	3304      	adds	r3, #4
 80067f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067f4:	8ad2      	ldrh	r2, [r2, #22]
 80067f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067f8:	8b09      	ldrh	r1, [r1, #24]
 80067fa:	9102      	str	r1, [sp, #8]
 80067fc:	9201      	str	r2, [sp, #4]
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	462b      	mov	r3, r5
 8006802:	4622      	mov	r2, r4
 8006804:	4601      	mov	r1, r0
 8006806:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006808:	f004 f986 	bl	800ab18 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006814:	7d1b      	ldrb	r3, [r3, #20]
 8006816:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006822:	6838      	ldr	r0, [r7, #0]
 8006824:	f7ff f9f4 	bl	8005c10 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006828:	4b31      	ldr	r3, [pc, #196]	; (80068f0 <tcp_slowtmr+0x5a4>)
 800682a:	2200      	movs	r2, #0
 800682c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d004      	beq.n	800683e <tcp_slowtmr+0x4f2>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f06f 010c 	mvn.w	r1, #12
 800683a:	68b8      	ldr	r0, [r7, #8]
 800683c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800683e:	4b2c      	ldr	r3, [pc, #176]	; (80068f0 <tcp_slowtmr+0x5a4>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d037      	beq.n	80068b6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8006846:	e592      	b.n	800636e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800684c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006854:	7f1b      	ldrb	r3, [r3, #28]
 8006856:	3301      	adds	r3, #1
 8006858:	b2da      	uxtb	r2, r3
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800685e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006860:	7f1a      	ldrb	r2, [r3, #28]
 8006862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006864:	7f5b      	ldrb	r3, [r3, #29]
 8006866:	429a      	cmp	r2, r3
 8006868:	d325      	bcc.n	80068b6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	2200      	movs	r2, #0
 800686e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006870:	4b1f      	ldr	r3, [pc, #124]	; (80068f0 <tcp_slowtmr+0x5a4>)
 8006872:	2200      	movs	r2, #0
 8006874:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00b      	beq.n	8006898 <tcp_slowtmr+0x54c>
 8006880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006888:	6912      	ldr	r2, [r2, #16]
 800688a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800688c:	4610      	mov	r0, r2
 800688e:	4798      	blx	r3
 8006890:	4603      	mov	r3, r0
 8006892:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006896:	e002      	b.n	800689e <tcp_slowtmr+0x552>
 8006898:	2300      	movs	r3, #0
 800689a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800689e:	4b14      	ldr	r3, [pc, #80]	; (80068f0 <tcp_slowtmr+0x5a4>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d000      	beq.n	80068a8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80068a6:	e562      	b.n	800636e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80068a8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d102      	bne.n	80068b6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80068b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068b2:	f003 fb7d 	bl	8009fb0 <tcp_output>
  while (pcb != NULL) {
 80068b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f47f ad5e 	bne.w	800637a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80068c2:	4b0c      	ldr	r3, [pc, #48]	; (80068f4 <tcp_slowtmr+0x5a8>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80068c8:	e069      	b.n	800699e <tcp_slowtmr+0x652>
 80068ca:	bf00      	nop
 80068cc:	20008af8 	.word	0x20008af8
 80068d0:	000a4cb8 	.word	0x000a4cb8
 80068d4:	10624dd3 	.word	0x10624dd3
 80068d8:	000124f8 	.word	0x000124f8
 80068dc:	20008af4 	.word	0x20008af4
 80068e0:	08010208 	.word	0x08010208
 80068e4:	08010640 	.word	0x08010640
 80068e8:	0801024c 	.word	0x0801024c
 80068ec:	0801066c 	.word	0x0801066c
 80068f0:	20008af0 	.word	0x20008af0
 80068f4:	20008b04 	.word	0x20008b04
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80068f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fa:	7d1b      	ldrb	r3, [r3, #20]
 80068fc:	2b0a      	cmp	r3, #10
 80068fe:	d006      	beq.n	800690e <tcp_slowtmr+0x5c2>
 8006900:	4b2b      	ldr	r3, [pc, #172]	; (80069b0 <tcp_slowtmr+0x664>)
 8006902:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006906:	492b      	ldr	r1, [pc, #172]	; (80069b4 <tcp_slowtmr+0x668>)
 8006908:	482b      	ldr	r0, [pc, #172]	; (80069b8 <tcp_slowtmr+0x66c>)
 800690a:	f007 fd39 	bl	800e380 <iprintf>
    pcb_remove = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006914:	4b29      	ldr	r3, [pc, #164]	; (80069bc <tcp_slowtmr+0x670>)
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	2bf0      	cmp	r3, #240	; 0xf0
 8006920:	d904      	bls.n	800692c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8006922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006926:	3301      	adds	r3, #1
 8006928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800692c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006930:	2b00      	cmp	r3, #0
 8006932:	d02f      	beq.n	8006994 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006936:	f000 fb2b 	bl	8006f90 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800693a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693c:	2b00      	cmp	r3, #0
 800693e:	d010      	beq.n	8006962 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006940:	4b1f      	ldr	r3, [pc, #124]	; (80069c0 <tcp_slowtmr+0x674>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006946:	429a      	cmp	r2, r3
 8006948:	d106      	bne.n	8006958 <tcp_slowtmr+0x60c>
 800694a:	4b19      	ldr	r3, [pc, #100]	; (80069b0 <tcp_slowtmr+0x664>)
 800694c:	f240 52af 	movw	r2, #1455	; 0x5af
 8006950:	491c      	ldr	r1, [pc, #112]	; (80069c4 <tcp_slowtmr+0x678>)
 8006952:	4819      	ldr	r0, [pc, #100]	; (80069b8 <tcp_slowtmr+0x66c>)
 8006954:	f007 fd14 	bl	800e380 <iprintf>
        prev->next = pcb->next;
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695e:	60da      	str	r2, [r3, #12]
 8006960:	e00f      	b.n	8006982 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006962:	4b17      	ldr	r3, [pc, #92]	; (80069c0 <tcp_slowtmr+0x674>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006968:	429a      	cmp	r2, r3
 800696a:	d006      	beq.n	800697a <tcp_slowtmr+0x62e>
 800696c:	4b10      	ldr	r3, [pc, #64]	; (80069b0 <tcp_slowtmr+0x664>)
 800696e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006972:	4915      	ldr	r1, [pc, #84]	; (80069c8 <tcp_slowtmr+0x67c>)
 8006974:	4810      	ldr	r0, [pc, #64]	; (80069b8 <tcp_slowtmr+0x66c>)
 8006976:	f007 fd03 	bl	800e380 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	4a10      	ldr	r2, [pc, #64]	; (80069c0 <tcp_slowtmr+0x674>)
 8006980:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006984:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800698c:	69f8      	ldr	r0, [r7, #28]
 800698e:	f7ff f93f 	bl	8005c10 <tcp_free>
 8006992:	e004      	b.n	800699e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006996:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800699e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1a9      	bne.n	80068f8 <tcp_slowtmr+0x5ac>
    }
  }
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop
 80069a8:	3730      	adds	r7, #48	; 0x30
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bdb0      	pop	{r4, r5, r7, pc}
 80069ae:	bf00      	nop
 80069b0:	08010208 	.word	0x08010208
 80069b4:	08010698 	.word	0x08010698
 80069b8:	0801024c 	.word	0x0801024c
 80069bc:	20008af8 	.word	0x20008af8
 80069c0:	20008b04 	.word	0x20008b04
 80069c4:	080106c8 	.word	0x080106c8
 80069c8:	080106f0 	.word	0x080106f0

080069cc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80069d2:	4b2d      	ldr	r3, [pc, #180]	; (8006a88 <tcp_fasttmr+0xbc>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	3301      	adds	r3, #1
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	4b2b      	ldr	r3, [pc, #172]	; (8006a88 <tcp_fasttmr+0xbc>)
 80069dc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80069de:	4b2b      	ldr	r3, [pc, #172]	; (8006a8c <tcp_fasttmr+0xc0>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80069e4:	e048      	b.n	8006a78 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	7f9a      	ldrb	r2, [r3, #30]
 80069ea:	4b27      	ldr	r3, [pc, #156]	; (8006a88 <tcp_fasttmr+0xbc>)
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d03f      	beq.n	8006a72 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80069f2:	4b25      	ldr	r3, [pc, #148]	; (8006a88 <tcp_fasttmr+0xbc>)
 80069f4:	781a      	ldrb	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	8b5b      	ldrh	r3, [r3, #26]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d010      	beq.n	8006a28 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	8b5b      	ldrh	r3, [r3, #26]
 8006a0a:	f043 0302 	orr.w	r3, r3, #2
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f003 facb 	bl	8009fb0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	8b5b      	ldrh	r3, [r3, #26]
 8006a1e:	f023 0303 	bic.w	r3, r3, #3
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	8b5b      	ldrh	r3, [r3, #26]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d009      	beq.n	8006a48 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	8b5b      	ldrh	r3, [r3, #26]
 8006a38:	f023 0308 	bic.w	r3, r3, #8
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7ff fa78 	bl	8005f38 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006a56:	4b0e      	ldr	r3, [pc, #56]	; (8006a90 <tcp_fasttmr+0xc4>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f819 	bl	8006a94 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006a62:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <tcp_fasttmr+0xc4>)
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d000      	beq.n	8006a6c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006a6a:	e7b8      	b.n	80069de <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	607b      	str	r3, [r7, #4]
 8006a70:	e002      	b.n	8006a78 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1b3      	bne.n	80069e6 <tcp_fasttmr+0x1a>
    }
  }
}
 8006a7e:	bf00      	nop
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	200000ca 	.word	0x200000ca
 8006a8c:	20008af4 	.word	0x20008af4
 8006a90:	20008af0 	.word	0x20008af0

08006a94 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006a94:	b590      	push	{r4, r7, lr}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d109      	bne.n	8006ab6 <tcp_process_refused_data+0x22>
 8006aa2:	4b37      	ldr	r3, [pc, #220]	; (8006b80 <tcp_process_refused_data+0xec>)
 8006aa4:	f240 6209 	movw	r2, #1545	; 0x609
 8006aa8:	4936      	ldr	r1, [pc, #216]	; (8006b84 <tcp_process_refused_data+0xf0>)
 8006aaa:	4837      	ldr	r0, [pc, #220]	; (8006b88 <tcp_process_refused_data+0xf4>)
 8006aac:	f007 fc68 	bl	800e380 <iprintf>
 8006ab0:	f06f 030f 	mvn.w	r3, #15
 8006ab4:	e060      	b.n	8006b78 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aba:	7b5b      	ldrb	r3, [r3, #13]
 8006abc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ac2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00b      	beq.n	8006aec <tcp_process_refused_data+0x58>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6918      	ldr	r0, [r3, #16]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	47a0      	blx	r4
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	73fb      	strb	r3, [r7, #15]
 8006aea:	e007      	b.n	8006afc <tcp_process_refused_data+0x68>
 8006aec:	2300      	movs	r3, #0
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	6879      	ldr	r1, [r7, #4]
 8006af2:	2000      	movs	r0, #0
 8006af4:	f000 f8a4 	bl	8006c40 <tcp_recv_null>
 8006af8:	4603      	mov	r3, r0
 8006afa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d12a      	bne.n	8006b5a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d033      	beq.n	8006b76 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b12:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006b16:	d005      	beq.n	8006b24 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00b      	beq.n	8006b46 <tcp_process_refused_data+0xb2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6918      	ldr	r0, [r3, #16]
 8006b38:	2300      	movs	r3, #0
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	6879      	ldr	r1, [r7, #4]
 8006b3e:	47a0      	blx	r4
 8006b40:	4603      	mov	r3, r0
 8006b42:	73fb      	strb	r3, [r7, #15]
 8006b44:	e001      	b.n	8006b4a <tcp_process_refused_data+0xb6>
 8006b46:	2300      	movs	r3, #0
 8006b48:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b4e:	f113 0f0d 	cmn.w	r3, #13
 8006b52:	d110      	bne.n	8006b76 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006b54:	f06f 030c 	mvn.w	r3, #12
 8006b58:	e00e      	b.n	8006b78 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b5e:	f113 0f0d 	cmn.w	r3, #13
 8006b62:	d102      	bne.n	8006b6a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006b64:	f06f 030c 	mvn.w	r3, #12
 8006b68:	e006      	b.n	8006b78 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006b70:	f06f 0304 	mvn.w	r3, #4
 8006b74:	e000      	b.n	8006b78 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd90      	pop	{r4, r7, pc}
 8006b80:	08010208 	.word	0x08010208
 8006b84:	08010718 	.word	0x08010718
 8006b88:	0801024c 	.word	0x0801024c

08006b8c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006b94:	e007      	b.n	8006ba6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f80a 	bl	8006bb6 <tcp_seg_free>
    seg = next;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1f4      	bne.n	8006b96 <tcp_segs_free+0xa>
  }
}
 8006bac:	bf00      	nop
 8006bae:	bf00      	nop
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00c      	beq.n	8006bde <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d004      	beq.n	8006bd6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fe fcdb 	bl	800558c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	2003      	movs	r0, #3
 8006bda:	f7fd fec5 	bl	8004968 <memp_free>
  }
}
 8006bde:	bf00      	nop
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d106      	bne.n	8006c04 <tcp_seg_copy+0x1c>
 8006bf6:	4b0f      	ldr	r3, [pc, #60]	; (8006c34 <tcp_seg_copy+0x4c>)
 8006bf8:	f240 6282 	movw	r2, #1666	; 0x682
 8006bfc:	490e      	ldr	r1, [pc, #56]	; (8006c38 <tcp_seg_copy+0x50>)
 8006bfe:	480f      	ldr	r0, [pc, #60]	; (8006c3c <tcp_seg_copy+0x54>)
 8006c00:	f007 fbbe 	bl	800e380 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006c04:	2003      	movs	r0, #3
 8006c06:	f7fd fe63 	bl	80048d0 <memp_malloc>
 8006c0a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <tcp_seg_copy+0x2e>
    return NULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	e00a      	b.n	8006c2c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006c16:	2210      	movs	r2, #16
 8006c18:	6879      	ldr	r1, [r7, #4]
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f007 fb80 	bl	800e320 <memcpy>
  pbuf_ref(cseg->p);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fe fd51 	bl	80056cc <pbuf_ref>
  return cseg;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	08010208 	.word	0x08010208
 8006c38:	0801075c 	.word	0x0801075c
 8006c3c:	0801024c 	.word	0x0801024c

08006c40 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d109      	bne.n	8006c68 <tcp_recv_null+0x28>
 8006c54:	4b12      	ldr	r3, [pc, #72]	; (8006ca0 <tcp_recv_null+0x60>)
 8006c56:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006c5a:	4912      	ldr	r1, [pc, #72]	; (8006ca4 <tcp_recv_null+0x64>)
 8006c5c:	4812      	ldr	r0, [pc, #72]	; (8006ca8 <tcp_recv_null+0x68>)
 8006c5e:	f007 fb8f 	bl	800e380 <iprintf>
 8006c62:	f06f 030f 	mvn.w	r3, #15
 8006c66:	e016      	b.n	8006c96 <tcp_recv_null+0x56>

  if (p != NULL) {
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d009      	beq.n	8006c82 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	891b      	ldrh	r3, [r3, #8]
 8006c72:	4619      	mov	r1, r3
 8006c74:	68b8      	ldr	r0, [r7, #8]
 8006c76:	f7ff fb19 	bl	80062ac <tcp_recved>
    pbuf_free(p);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7fe fc86 	bl	800558c <pbuf_free>
 8006c80:	e008      	b.n	8006c94 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006c82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d104      	bne.n	8006c94 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006c8a:	68b8      	ldr	r0, [r7, #8]
 8006c8c:	f7ff f9be 	bl	800600c <tcp_close>
 8006c90:	4603      	mov	r3, r0
 8006c92:	e000      	b.n	8006c96 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	08010208 	.word	0x08010208
 8006ca4:	08010778 	.word	0x08010778
 8006ca8:	0801024c 	.word	0x0801024c

08006cac <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	db01      	blt.n	8006cc2 <tcp_kill_prio+0x16>
 8006cbe:	79fb      	ldrb	r3, [r7, #7]
 8006cc0:	e000      	b.n	8006cc4 <tcp_kill_prio+0x18>
 8006cc2:	237f      	movs	r3, #127	; 0x7f
 8006cc4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006cc6:	7afb      	ldrb	r3, [r7, #11]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d034      	beq.n	8006d36 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006ccc:	7afb      	ldrb	r3, [r7, #11]
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006cda:	4b19      	ldr	r3, [pc, #100]	; (8006d40 <tcp_kill_prio+0x94>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	617b      	str	r3, [r7, #20]
 8006ce0:	e01f      	b.n	8006d22 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	7d5b      	ldrb	r3, [r3, #21]
 8006ce6:	7afa      	ldrb	r2, [r7, #11]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d80c      	bhi.n	8006d06 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006cf0:	7afa      	ldrb	r2, [r7, #11]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d112      	bne.n	8006d1c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006cf6:	4b13      	ldr	r3, [pc, #76]	; (8006d44 <tcp_kill_prio+0x98>)
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d80a      	bhi.n	8006d1c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006d06:	4b0f      	ldr	r3, [pc, #60]	; (8006d44 <tcp_kill_prio+0x98>)
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	7d5b      	ldrb	r3, [r3, #21]
 8006d1a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	617b      	str	r3, [r7, #20]
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1dc      	bne.n	8006ce2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d004      	beq.n	8006d38 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006d2e:	6938      	ldr	r0, [r7, #16]
 8006d30:	f7ff fa56 	bl	80061e0 <tcp_abort>
 8006d34:	e000      	b.n	8006d38 <tcp_kill_prio+0x8c>
    return;
 8006d36:	bf00      	nop
  }
}
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	20008af4 	.word	0x20008af4
 8006d44:	20008af8 	.word	0x20008af8

08006d48 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006d52:	79fb      	ldrb	r3, [r7, #7]
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	d009      	beq.n	8006d6c <tcp_kill_state+0x24>
 8006d58:	79fb      	ldrb	r3, [r7, #7]
 8006d5a:	2b09      	cmp	r3, #9
 8006d5c:	d006      	beq.n	8006d6c <tcp_kill_state+0x24>
 8006d5e:	4b1a      	ldr	r3, [pc, #104]	; (8006dc8 <tcp_kill_state+0x80>)
 8006d60:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006d64:	4919      	ldr	r1, [pc, #100]	; (8006dcc <tcp_kill_state+0x84>)
 8006d66:	481a      	ldr	r0, [pc, #104]	; (8006dd0 <tcp_kill_state+0x88>)
 8006d68:	f007 fb0a 	bl	800e380 <iprintf>

  inactivity = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006d70:	2300      	movs	r3, #0
 8006d72:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d74:	4b17      	ldr	r3, [pc, #92]	; (8006dd4 <tcp_kill_state+0x8c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	617b      	str	r3, [r7, #20]
 8006d7a:	e017      	b.n	8006dac <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	7d1b      	ldrb	r3, [r3, #20]
 8006d80:	79fa      	ldrb	r2, [r7, #7]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d10f      	bne.n	8006da6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006d86:	4b14      	ldr	r3, [pc, #80]	; (8006dd8 <tcp_kill_state+0x90>)
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d807      	bhi.n	8006da6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006d96:	4b10      	ldr	r3, [pc, #64]	; (8006dd8 <tcp_kill_state+0x90>)
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	617b      	str	r3, [r7, #20]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e4      	bne.n	8006d7c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d003      	beq.n	8006dc0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006db8:	2100      	movs	r1, #0
 8006dba:	6938      	ldr	r0, [r7, #16]
 8006dbc:	f7ff f952 	bl	8006064 <tcp_abandon>
  }
}
 8006dc0:	bf00      	nop
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	08010208 	.word	0x08010208
 8006dcc:	08010794 	.word	0x08010794
 8006dd0:	0801024c 	.word	0x0801024c
 8006dd4:	20008af4 	.word	0x20008af4
 8006dd8:	20008af8 	.word	0x20008af8

08006ddc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006de6:	2300      	movs	r3, #0
 8006de8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006dea:	4b12      	ldr	r3, [pc, #72]	; (8006e34 <tcp_kill_timewait+0x58>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	e012      	b.n	8006e18 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006df2:	4b11      	ldr	r3, [pc, #68]	; (8006e38 <tcp_kill_timewait+0x5c>)
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d807      	bhi.n	8006e12 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006e02:	4b0d      	ldr	r3, [pc, #52]	; (8006e38 <tcp_kill_timewait+0x5c>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e9      	bne.n	8006df2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006e24:	68b8      	ldr	r0, [r7, #8]
 8006e26:	f7ff f9db 	bl	80061e0 <tcp_abort>
  }
}
 8006e2a:	bf00      	nop
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20008b04 	.word	0x20008b04
 8006e38:	20008af8 	.word	0x20008af8

08006e3c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006e42:	4b10      	ldr	r3, [pc, #64]	; (8006e84 <tcp_handle_closepend+0x48>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006e48:	e014      	b.n	8006e74 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	8b5b      	ldrh	r3, [r3, #26]
 8006e54:	f003 0308 	and.w	r3, r3, #8
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d009      	beq.n	8006e70 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	8b5b      	ldrh	r3, [r3, #26]
 8006e60:	f023 0308 	bic.w	r3, r3, #8
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff f864 	bl	8005f38 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1e7      	bne.n	8006e4a <tcp_handle_closepend+0xe>
  }
}
 8006e7a:	bf00      	nop
 8006e7c:	bf00      	nop
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20008af4 	.word	0x20008af4

08006e88 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006e92:	2001      	movs	r0, #1
 8006e94:	f7fd fd1c 	bl	80048d0 <memp_malloc>
 8006e98:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d126      	bne.n	8006eee <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006ea0:	f7ff ffcc 	bl	8006e3c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006ea4:	f7ff ff9a 	bl	8006ddc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006ea8:	2001      	movs	r0, #1
 8006eaa:	f7fd fd11 	bl	80048d0 <memp_malloc>
 8006eae:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d11b      	bne.n	8006eee <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006eb6:	2009      	movs	r0, #9
 8006eb8:	f7ff ff46 	bl	8006d48 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006ebc:	2001      	movs	r0, #1
 8006ebe:	f7fd fd07 	bl	80048d0 <memp_malloc>
 8006ec2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d111      	bne.n	8006eee <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006eca:	2008      	movs	r0, #8
 8006ecc:	f7ff ff3c 	bl	8006d48 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006ed0:	2001      	movs	r0, #1
 8006ed2:	f7fd fcfd 	bl	80048d0 <memp_malloc>
 8006ed6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d107      	bne.n	8006eee <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006ede:	79fb      	ldrb	r3, [r7, #7]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff fee3 	bl	8006cac <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006ee6:	2001      	movs	r0, #1
 8006ee8:	f7fd fcf2 	bl	80048d0 <memp_malloc>
 8006eec:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d03f      	beq.n	8006f74 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006ef4:	229c      	movs	r2, #156	; 0x9c
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f007 fa39 	bl	800e370 <memset>
    pcb->prio = prio;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	79fa      	ldrb	r2, [r7, #7]
 8006f02:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006f0a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006f14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	22ff      	movs	r2, #255	; 0xff
 8006f22:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006f2a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2206      	movs	r2, #6
 8006f30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2206      	movs	r2, #6
 8006f38:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f40:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006f4a:	4b0d      	ldr	r3, [pc, #52]	; (8006f80 <tcp_alloc+0xf8>)
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006f52:	4b0c      	ldr	r3, [pc, #48]	; (8006f84 <tcp_alloc+0xfc>)
 8006f54:	781a      	ldrb	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006f60:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	4a08      	ldr	r2, [pc, #32]	; (8006f88 <tcp_alloc+0x100>)
 8006f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4a07      	ldr	r2, [pc, #28]	; (8006f8c <tcp_alloc+0x104>)
 8006f70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006f74:	68fb      	ldr	r3, [r7, #12]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20008af8 	.word	0x20008af8
 8006f84:	200000ca 	.word	0x200000ca
 8006f88:	08006c41 	.word	0x08006c41
 8006f8c:	006ddd00 	.word	0x006ddd00

08006f90 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d107      	bne.n	8006fae <tcp_pcb_purge+0x1e>
 8006f9e:	4b21      	ldr	r3, [pc, #132]	; (8007024 <tcp_pcb_purge+0x94>)
 8006fa0:	f640 0251 	movw	r2, #2129	; 0x851
 8006fa4:	4920      	ldr	r1, [pc, #128]	; (8007028 <tcp_pcb_purge+0x98>)
 8006fa6:	4821      	ldr	r0, [pc, #132]	; (800702c <tcp_pcb_purge+0x9c>)
 8006fa8:	f007 f9ea 	bl	800e380 <iprintf>
 8006fac:	e037      	b.n	800701e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	7d1b      	ldrb	r3, [r3, #20]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d033      	beq.n	800701e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006fba:	2b0a      	cmp	r3, #10
 8006fbc:	d02f      	beq.n	800701e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d02b      	beq.n	800701e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d007      	beq.n	8006fde <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fe fada 	bl	800558c <pbuf_free>
      pcb->refused_data = NULL;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f986 	bl	80072f8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ff2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7ff fdc7 	bl	8006b8c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff fdc2 	bl	8006b8c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	66da      	str	r2, [r3, #108]	; 0x6c
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	08010208 	.word	0x08010208
 8007028:	08010854 	.word	0x08010854
 800702c:	0801024c 	.word	0x0801024c

08007030 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d106      	bne.n	800704e <tcp_pcb_remove+0x1e>
 8007040:	4b3e      	ldr	r3, [pc, #248]	; (800713c <tcp_pcb_remove+0x10c>)
 8007042:	f640 0283 	movw	r2, #2179	; 0x883
 8007046:	493e      	ldr	r1, [pc, #248]	; (8007140 <tcp_pcb_remove+0x110>)
 8007048:	483e      	ldr	r0, [pc, #248]	; (8007144 <tcp_pcb_remove+0x114>)
 800704a:	f007 f999 	bl	800e380 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d106      	bne.n	8007062 <tcp_pcb_remove+0x32>
 8007054:	4b39      	ldr	r3, [pc, #228]	; (800713c <tcp_pcb_remove+0x10c>)
 8007056:	f640 0284 	movw	r2, #2180	; 0x884
 800705a:	493b      	ldr	r1, [pc, #236]	; (8007148 <tcp_pcb_remove+0x118>)
 800705c:	4839      	ldr	r0, [pc, #228]	; (8007144 <tcp_pcb_remove+0x114>)
 800705e:	f007 f98f 	bl	800e380 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d105      	bne.n	8007078 <tcp_pcb_remove+0x48>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68da      	ldr	r2, [r3, #12]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	e013      	b.n	80070a0 <tcp_pcb_remove+0x70>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	e00c      	b.n	800709a <tcp_pcb_remove+0x6a>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	683a      	ldr	r2, [r7, #0]
 8007086:	429a      	cmp	r2, r3
 8007088:	d104      	bne.n	8007094 <tcp_pcb_remove+0x64>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	68da      	ldr	r2, [r3, #12]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	60da      	str	r2, [r3, #12]
 8007092:	e005      	b.n	80070a0 <tcp_pcb_remove+0x70>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	60fb      	str	r3, [r7, #12]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1ef      	bne.n	8007080 <tcp_pcb_remove+0x50>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2200      	movs	r2, #0
 80070a4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80070a6:	6838      	ldr	r0, [r7, #0]
 80070a8:	f7ff ff72 	bl	8006f90 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	7d1b      	ldrb	r3, [r3, #20]
 80070b0:	2b0a      	cmp	r3, #10
 80070b2:	d013      	beq.n	80070dc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d00f      	beq.n	80070dc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	8b5b      	ldrh	r3, [r3, #26]
 80070c0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d009      	beq.n	80070dc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	8b5b      	ldrh	r3, [r3, #26]
 80070cc:	f043 0302 	orr.w	r3, r3, #2
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80070d6:	6838      	ldr	r0, [r7, #0]
 80070d8:	f002 ff6a 	bl	8009fb0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	7d1b      	ldrb	r3, [r3, #20]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d020      	beq.n	8007126 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d006      	beq.n	80070fa <tcp_pcb_remove+0xca>
 80070ec:	4b13      	ldr	r3, [pc, #76]	; (800713c <tcp_pcb_remove+0x10c>)
 80070ee:	f640 0293 	movw	r2, #2195	; 0x893
 80070f2:	4916      	ldr	r1, [pc, #88]	; (800714c <tcp_pcb_remove+0x11c>)
 80070f4:	4813      	ldr	r0, [pc, #76]	; (8007144 <tcp_pcb_remove+0x114>)
 80070f6:	f007 f943 	bl	800e380 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d006      	beq.n	8007110 <tcp_pcb_remove+0xe0>
 8007102:	4b0e      	ldr	r3, [pc, #56]	; (800713c <tcp_pcb_remove+0x10c>)
 8007104:	f640 0294 	movw	r2, #2196	; 0x894
 8007108:	4911      	ldr	r1, [pc, #68]	; (8007150 <tcp_pcb_remove+0x120>)
 800710a:	480e      	ldr	r0, [pc, #56]	; (8007144 <tcp_pcb_remove+0x114>)
 800710c:	f007 f938 	bl	800e380 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007114:	2b00      	cmp	r3, #0
 8007116:	d006      	beq.n	8007126 <tcp_pcb_remove+0xf6>
 8007118:	4b08      	ldr	r3, [pc, #32]	; (800713c <tcp_pcb_remove+0x10c>)
 800711a:	f640 0296 	movw	r2, #2198	; 0x896
 800711e:	490d      	ldr	r1, [pc, #52]	; (8007154 <tcp_pcb_remove+0x124>)
 8007120:	4808      	ldr	r0, [pc, #32]	; (8007144 <tcp_pcb_remove+0x114>)
 8007122:	f007 f92d 	bl	800e380 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2200      	movs	r2, #0
 800712a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2200      	movs	r2, #0
 8007130:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007132:	bf00      	nop
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	08010208 	.word	0x08010208
 8007140:	08010870 	.word	0x08010870
 8007144:	0801024c 	.word	0x0801024c
 8007148:	0801088c 	.word	0x0801088c
 800714c:	080108ac 	.word	0x080108ac
 8007150:	080108c4 	.word	0x080108c4
 8007154:	080108e0 	.word	0x080108e0

08007158 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d106      	bne.n	8007174 <tcp_next_iss+0x1c>
 8007166:	4b0a      	ldr	r3, [pc, #40]	; (8007190 <tcp_next_iss+0x38>)
 8007168:	f640 02af 	movw	r2, #2223	; 0x8af
 800716c:	4909      	ldr	r1, [pc, #36]	; (8007194 <tcp_next_iss+0x3c>)
 800716e:	480a      	ldr	r0, [pc, #40]	; (8007198 <tcp_next_iss+0x40>)
 8007170:	f007 f906 	bl	800e380 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007174:	4b09      	ldr	r3, [pc, #36]	; (800719c <tcp_next_iss+0x44>)
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	4b09      	ldr	r3, [pc, #36]	; (80071a0 <tcp_next_iss+0x48>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4413      	add	r3, r2
 800717e:	4a07      	ldr	r2, [pc, #28]	; (800719c <tcp_next_iss+0x44>)
 8007180:	6013      	str	r3, [r2, #0]
  return iss;
 8007182:	4b06      	ldr	r3, [pc, #24]	; (800719c <tcp_next_iss+0x44>)
 8007184:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007186:	4618      	mov	r0, r3
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	08010208 	.word	0x08010208
 8007194:	080108f8 	.word	0x080108f8
 8007198:	0801024c 	.word	0x0801024c
 800719c:	2000000c 	.word	0x2000000c
 80071a0:	20008af8 	.word	0x20008af8

080071a4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	4603      	mov	r3, r0
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d106      	bne.n	80071c6 <tcp_eff_send_mss_netif+0x22>
 80071b8:	4b14      	ldr	r3, [pc, #80]	; (800720c <tcp_eff_send_mss_netif+0x68>)
 80071ba:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80071be:	4914      	ldr	r1, [pc, #80]	; (8007210 <tcp_eff_send_mss_netif+0x6c>)
 80071c0:	4814      	ldr	r0, [pc, #80]	; (8007214 <tcp_eff_send_mss_netif+0x70>)
 80071c2:	f007 f8dd 	bl	800e380 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80071cc:	89fb      	ldrh	r3, [r7, #14]
 80071ce:	e019      	b.n	8007204 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80071d4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80071d6:	8afb      	ldrh	r3, [r7, #22]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d012      	beq.n	8007202 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80071dc:	2328      	movs	r3, #40	; 0x28
 80071de:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80071e0:	8afa      	ldrh	r2, [r7, #22]
 80071e2:	8abb      	ldrh	r3, [r7, #20]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d904      	bls.n	80071f2 <tcp_eff_send_mss_netif+0x4e>
 80071e8:	8afa      	ldrh	r2, [r7, #22]
 80071ea:	8abb      	ldrh	r3, [r7, #20]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	e000      	b.n	80071f4 <tcp_eff_send_mss_netif+0x50>
 80071f2:	2300      	movs	r3, #0
 80071f4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80071f6:	8a7a      	ldrh	r2, [r7, #18]
 80071f8:	89fb      	ldrh	r3, [r7, #14]
 80071fa:	4293      	cmp	r3, r2
 80071fc:	bf28      	it	cs
 80071fe:	4613      	movcs	r3, r2
 8007200:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007202:	89fb      	ldrh	r3, [r7, #14]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3718      	adds	r7, #24
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	08010208 	.word	0x08010208
 8007210:	08010914 	.word	0x08010914
 8007214:	0801024c 	.word	0x0801024c

08007218 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d119      	bne.n	8007260 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800722c:	4b10      	ldr	r3, [pc, #64]	; (8007270 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800722e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007232:	4910      	ldr	r1, [pc, #64]	; (8007274 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007234:	4810      	ldr	r0, [pc, #64]	; (8007278 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007236:	f007 f8a3 	bl	800e380 <iprintf>

  while (pcb != NULL) {
 800723a:	e011      	b.n	8007260 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	429a      	cmp	r2, r3
 8007246:	d108      	bne.n	800725a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f7fe ffc6 	bl	80061e0 <tcp_abort>
      pcb = next;
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	e002      	b.n	8007260 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1ea      	bne.n	800723c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007266:	bf00      	nop
 8007268:	bf00      	nop
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	08010208 	.word	0x08010208
 8007274:	0801093c 	.word	0x0801093c
 8007278:	0801024c 	.word	0x0801024c

0800727c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d02a      	beq.n	80072e2 <tcp_netif_ip_addr_changed+0x66>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d026      	beq.n	80072e2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007294:	4b15      	ldr	r3, [pc, #84]	; (80072ec <tcp_netif_ip_addr_changed+0x70>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7ff ffbc 	bl	8007218 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80072a0:	4b13      	ldr	r3, [pc, #76]	; (80072f0 <tcp_netif_ip_addr_changed+0x74>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4619      	mov	r1, r3
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7ff ffb6 	bl	8007218 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d017      	beq.n	80072e2 <tcp_netif_ip_addr_changed+0x66>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d013      	beq.n	80072e2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80072ba:	4b0e      	ldr	r3, [pc, #56]	; (80072f4 <tcp_netif_ip_addr_changed+0x78>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	e00c      	b.n	80072dc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d103      	bne.n	80072d6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1ef      	bne.n	80072c2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80072e2:	bf00      	nop
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	20008af4 	.word	0x20008af4
 80072f0:	20008b00 	.word	0x20008b00
 80072f4:	20008afc 	.word	0x20008afc

080072f8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007304:	2b00      	cmp	r3, #0
 8007306:	d007      	beq.n	8007318 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff fc3d 	bl	8006b8c <tcp_segs_free>
    pcb->ooseq = NULL;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007318:	bf00      	nop
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007320:	b590      	push	{r4, r7, lr}
 8007322:	b08d      	sub	sp, #52	; 0x34
 8007324:	af04      	add	r7, sp, #16
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d105      	bne.n	800733c <tcp_input+0x1c>
 8007330:	4b9b      	ldr	r3, [pc, #620]	; (80075a0 <tcp_input+0x280>)
 8007332:	2283      	movs	r2, #131	; 0x83
 8007334:	499b      	ldr	r1, [pc, #620]	; (80075a4 <tcp_input+0x284>)
 8007336:	489c      	ldr	r0, [pc, #624]	; (80075a8 <tcp_input+0x288>)
 8007338:	f007 f822 	bl	800e380 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	4a9a      	ldr	r2, [pc, #616]	; (80075ac <tcp_input+0x28c>)
 8007342:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	895b      	ldrh	r3, [r3, #10]
 8007348:	2b13      	cmp	r3, #19
 800734a:	f240 83c4 	bls.w	8007ad6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800734e:	4b98      	ldr	r3, [pc, #608]	; (80075b0 <tcp_input+0x290>)
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	4a97      	ldr	r2, [pc, #604]	; (80075b0 <tcp_input+0x290>)
 8007354:	6812      	ldr	r2, [r2, #0]
 8007356:	4611      	mov	r1, r2
 8007358:	4618      	mov	r0, r3
 800735a:	f005 ffcd 	bl	800d2f8 <ip4_addr_isbroadcast_u32>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	f040 83ba 	bne.w	8007ada <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007366:	4b92      	ldr	r3, [pc, #584]	; (80075b0 <tcp_input+0x290>)
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800736e:	2be0      	cmp	r3, #224	; 0xe0
 8007370:	f000 83b3 	beq.w	8007ada <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007374:	4b8d      	ldr	r3, [pc, #564]	; (80075ac <tcp_input+0x28c>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	899b      	ldrh	r3, [r3, #12]
 800737a:	b29b      	uxth	r3, r3
 800737c:	4618      	mov	r0, r3
 800737e:	f7fc fe51 	bl	8004024 <lwip_htons>
 8007382:	4603      	mov	r3, r0
 8007384:	0b1b      	lsrs	r3, r3, #12
 8007386:	b29b      	uxth	r3, r3
 8007388:	b2db      	uxtb	r3, r3
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800738e:	7cbb      	ldrb	r3, [r7, #18]
 8007390:	2b13      	cmp	r3, #19
 8007392:	f240 83a4 	bls.w	8007ade <tcp_input+0x7be>
 8007396:	7cbb      	ldrb	r3, [r7, #18]
 8007398:	b29a      	uxth	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	891b      	ldrh	r3, [r3, #8]
 800739e:	429a      	cmp	r2, r3
 80073a0:	f200 839d 	bhi.w	8007ade <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80073a4:	7cbb      	ldrb	r3, [r7, #18]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	3b14      	subs	r3, #20
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	4b81      	ldr	r3, [pc, #516]	; (80075b4 <tcp_input+0x294>)
 80073ae:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80073b0:	4b81      	ldr	r3, [pc, #516]	; (80075b8 <tcp_input+0x298>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	895a      	ldrh	r2, [r3, #10]
 80073ba:	7cbb      	ldrb	r3, [r7, #18]
 80073bc:	b29b      	uxth	r3, r3
 80073be:	429a      	cmp	r2, r3
 80073c0:	d309      	bcc.n	80073d6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80073c2:	4b7c      	ldr	r3, [pc, #496]	; (80075b4 <tcp_input+0x294>)
 80073c4:	881a      	ldrh	r2, [r3, #0]
 80073c6:	4b7d      	ldr	r3, [pc, #500]	; (80075bc <tcp_input+0x29c>)
 80073c8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80073ca:	7cbb      	ldrb	r3, [r7, #18]
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7fe f856 	bl	8005480 <pbuf_remove_header>
 80073d4:	e04e      	b.n	8007474 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d105      	bne.n	80073ea <tcp_input+0xca>
 80073de:	4b70      	ldr	r3, [pc, #448]	; (80075a0 <tcp_input+0x280>)
 80073e0:	22c2      	movs	r2, #194	; 0xc2
 80073e2:	4977      	ldr	r1, [pc, #476]	; (80075c0 <tcp_input+0x2a0>)
 80073e4:	4870      	ldr	r0, [pc, #448]	; (80075a8 <tcp_input+0x288>)
 80073e6:	f006 ffcb 	bl	800e380 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80073ea:	2114      	movs	r1, #20
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7fe f847 	bl	8005480 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	895a      	ldrh	r2, [r3, #10]
 80073f6:	4b71      	ldr	r3, [pc, #452]	; (80075bc <tcp_input+0x29c>)
 80073f8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80073fa:	4b6e      	ldr	r3, [pc, #440]	; (80075b4 <tcp_input+0x294>)
 80073fc:	881a      	ldrh	r2, [r3, #0]
 80073fe:	4b6f      	ldr	r3, [pc, #444]	; (80075bc <tcp_input+0x29c>)
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007406:	4b6d      	ldr	r3, [pc, #436]	; (80075bc <tcp_input+0x29c>)
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7fe f837 	bl	8005480 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	895b      	ldrh	r3, [r3, #10]
 8007418:	8a3a      	ldrh	r2, [r7, #16]
 800741a:	429a      	cmp	r2, r3
 800741c:	f200 8361 	bhi.w	8007ae2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	4a64      	ldr	r2, [pc, #400]	; (80075b8 <tcp_input+0x298>)
 8007428:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	8a3a      	ldrh	r2, [r7, #16]
 8007430:	4611      	mov	r1, r2
 8007432:	4618      	mov	r0, r3
 8007434:	f7fe f824 	bl	8005480 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	891a      	ldrh	r2, [r3, #8]
 800743c:	8a3b      	ldrh	r3, [r7, #16]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	b29a      	uxth	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	895b      	ldrh	r3, [r3, #10]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d005      	beq.n	800745a <tcp_input+0x13a>
 800744e:	4b54      	ldr	r3, [pc, #336]	; (80075a0 <tcp_input+0x280>)
 8007450:	22df      	movs	r2, #223	; 0xdf
 8007452:	495c      	ldr	r1, [pc, #368]	; (80075c4 <tcp_input+0x2a4>)
 8007454:	4854      	ldr	r0, [pc, #336]	; (80075a8 <tcp_input+0x288>)
 8007456:	f006 ff93 	bl	800e380 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	891a      	ldrh	r2, [r3, #8]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	891b      	ldrh	r3, [r3, #8]
 8007464:	429a      	cmp	r2, r3
 8007466:	d005      	beq.n	8007474 <tcp_input+0x154>
 8007468:	4b4d      	ldr	r3, [pc, #308]	; (80075a0 <tcp_input+0x280>)
 800746a:	22e0      	movs	r2, #224	; 0xe0
 800746c:	4956      	ldr	r1, [pc, #344]	; (80075c8 <tcp_input+0x2a8>)
 800746e:	484e      	ldr	r0, [pc, #312]	; (80075a8 <tcp_input+0x288>)
 8007470:	f006 ff86 	bl	800e380 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007474:	4b4d      	ldr	r3, [pc, #308]	; (80075ac <tcp_input+0x28c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	4a4b      	ldr	r2, [pc, #300]	; (80075ac <tcp_input+0x28c>)
 800747e:	6814      	ldr	r4, [r2, #0]
 8007480:	4618      	mov	r0, r3
 8007482:	f7fc fdcf 	bl	8004024 <lwip_htons>
 8007486:	4603      	mov	r3, r0
 8007488:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800748a:	4b48      	ldr	r3, [pc, #288]	; (80075ac <tcp_input+0x28c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	885b      	ldrh	r3, [r3, #2]
 8007490:	b29b      	uxth	r3, r3
 8007492:	4a46      	ldr	r2, [pc, #280]	; (80075ac <tcp_input+0x28c>)
 8007494:	6814      	ldr	r4, [r2, #0]
 8007496:	4618      	mov	r0, r3
 8007498:	f7fc fdc4 	bl	8004024 <lwip_htons>
 800749c:	4603      	mov	r3, r0
 800749e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80074a0:	4b42      	ldr	r3, [pc, #264]	; (80075ac <tcp_input+0x28c>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	4a41      	ldr	r2, [pc, #260]	; (80075ac <tcp_input+0x28c>)
 80074a8:	6814      	ldr	r4, [r2, #0]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fc fdcf 	bl	800404e <lwip_htonl>
 80074b0:	4603      	mov	r3, r0
 80074b2:	6063      	str	r3, [r4, #4]
 80074b4:	6863      	ldr	r3, [r4, #4]
 80074b6:	4a45      	ldr	r2, [pc, #276]	; (80075cc <tcp_input+0x2ac>)
 80074b8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80074ba:	4b3c      	ldr	r3, [pc, #240]	; (80075ac <tcp_input+0x28c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	4a3a      	ldr	r2, [pc, #232]	; (80075ac <tcp_input+0x28c>)
 80074c2:	6814      	ldr	r4, [r2, #0]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fc fdc2 	bl	800404e <lwip_htonl>
 80074ca:	4603      	mov	r3, r0
 80074cc:	60a3      	str	r3, [r4, #8]
 80074ce:	68a3      	ldr	r3, [r4, #8]
 80074d0:	4a3f      	ldr	r2, [pc, #252]	; (80075d0 <tcp_input+0x2b0>)
 80074d2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80074d4:	4b35      	ldr	r3, [pc, #212]	; (80075ac <tcp_input+0x28c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	89db      	ldrh	r3, [r3, #14]
 80074da:	b29b      	uxth	r3, r3
 80074dc:	4a33      	ldr	r2, [pc, #204]	; (80075ac <tcp_input+0x28c>)
 80074de:	6814      	ldr	r4, [r2, #0]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fc fd9f 	bl	8004024 <lwip_htons>
 80074e6:	4603      	mov	r3, r0
 80074e8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80074ea:	4b30      	ldr	r3, [pc, #192]	; (80075ac <tcp_input+0x28c>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	899b      	ldrh	r3, [r3, #12]
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fc fd96 	bl	8004024 <lwip_htons>
 80074f8:	4603      	mov	r3, r0
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007500:	b2da      	uxtb	r2, r3
 8007502:	4b34      	ldr	r3, [pc, #208]	; (80075d4 <tcp_input+0x2b4>)
 8007504:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	891a      	ldrh	r2, [r3, #8]
 800750a:	4b33      	ldr	r3, [pc, #204]	; (80075d8 <tcp_input+0x2b8>)
 800750c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800750e:	4b31      	ldr	r3, [pc, #196]	; (80075d4 <tcp_input+0x2b4>)
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	f003 0303 	and.w	r3, r3, #3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00c      	beq.n	8007534 <tcp_input+0x214>
    tcplen++;
 800751a:	4b2f      	ldr	r3, [pc, #188]	; (80075d8 <tcp_input+0x2b8>)
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	3301      	adds	r3, #1
 8007520:	b29a      	uxth	r2, r3
 8007522:	4b2d      	ldr	r3, [pc, #180]	; (80075d8 <tcp_input+0x2b8>)
 8007524:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	891a      	ldrh	r2, [r3, #8]
 800752a:	4b2b      	ldr	r3, [pc, #172]	; (80075d8 <tcp_input+0x2b8>)
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	429a      	cmp	r2, r3
 8007530:	f200 82d9 	bhi.w	8007ae6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007534:	2300      	movs	r3, #0
 8007536:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007538:	4b28      	ldr	r3, [pc, #160]	; (80075dc <tcp_input+0x2bc>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	61fb      	str	r3, [r7, #28]
 800753e:	e09d      	b.n	800767c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	7d1b      	ldrb	r3, [r3, #20]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d105      	bne.n	8007554 <tcp_input+0x234>
 8007548:	4b15      	ldr	r3, [pc, #84]	; (80075a0 <tcp_input+0x280>)
 800754a:	22fb      	movs	r2, #251	; 0xfb
 800754c:	4924      	ldr	r1, [pc, #144]	; (80075e0 <tcp_input+0x2c0>)
 800754e:	4816      	ldr	r0, [pc, #88]	; (80075a8 <tcp_input+0x288>)
 8007550:	f006 ff16 	bl	800e380 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	7d1b      	ldrb	r3, [r3, #20]
 8007558:	2b0a      	cmp	r3, #10
 800755a:	d105      	bne.n	8007568 <tcp_input+0x248>
 800755c:	4b10      	ldr	r3, [pc, #64]	; (80075a0 <tcp_input+0x280>)
 800755e:	22fc      	movs	r2, #252	; 0xfc
 8007560:	4920      	ldr	r1, [pc, #128]	; (80075e4 <tcp_input+0x2c4>)
 8007562:	4811      	ldr	r0, [pc, #68]	; (80075a8 <tcp_input+0x288>)
 8007564:	f006 ff0c 	bl	800e380 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	7d1b      	ldrb	r3, [r3, #20]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d105      	bne.n	800757c <tcp_input+0x25c>
 8007570:	4b0b      	ldr	r3, [pc, #44]	; (80075a0 <tcp_input+0x280>)
 8007572:	22fd      	movs	r2, #253	; 0xfd
 8007574:	491c      	ldr	r1, [pc, #112]	; (80075e8 <tcp_input+0x2c8>)
 8007576:	480c      	ldr	r0, [pc, #48]	; (80075a8 <tcp_input+0x288>)
 8007578:	f006 ff02 	bl	800e380 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	7a1b      	ldrb	r3, [r3, #8]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d033      	beq.n	80075ec <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	7a1a      	ldrb	r2, [r3, #8]
 8007588:	4b09      	ldr	r3, [pc, #36]	; (80075b0 <tcp_input+0x290>)
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007590:	3301      	adds	r3, #1
 8007592:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007594:	429a      	cmp	r2, r3
 8007596:	d029      	beq.n	80075ec <tcp_input+0x2cc>
      prev = pcb;
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	61bb      	str	r3, [r7, #24]
      continue;
 800759c:	e06b      	b.n	8007676 <tcp_input+0x356>
 800759e:	bf00      	nop
 80075a0:	08010970 	.word	0x08010970
 80075a4:	080109a4 	.word	0x080109a4
 80075a8:	080109bc 	.word	0x080109bc
 80075ac:	200000dc 	.word	0x200000dc
 80075b0:	200033f0 	.word	0x200033f0
 80075b4:	200000e0 	.word	0x200000e0
 80075b8:	200000e4 	.word	0x200000e4
 80075bc:	200000e2 	.word	0x200000e2
 80075c0:	080109e4 	.word	0x080109e4
 80075c4:	080109f4 	.word	0x080109f4
 80075c8:	08010a00 	.word	0x08010a00
 80075cc:	200000ec 	.word	0x200000ec
 80075d0:	200000f0 	.word	0x200000f0
 80075d4:	200000f8 	.word	0x200000f8
 80075d8:	200000f6 	.word	0x200000f6
 80075dc:	20008af4 	.word	0x20008af4
 80075e0:	08010a20 	.word	0x08010a20
 80075e4:	08010a48 	.word	0x08010a48
 80075e8:	08010a74 	.word	0x08010a74
    }

    if (pcb->remote_port == tcphdr->src &&
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	8b1a      	ldrh	r2, [r3, #24]
 80075f0:	4b94      	ldr	r3, [pc, #592]	; (8007844 <tcp_input+0x524>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	881b      	ldrh	r3, [r3, #0]
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d13a      	bne.n	8007672 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	8ada      	ldrh	r2, [r3, #22]
 8007600:	4b90      	ldr	r3, [pc, #576]	; (8007844 <tcp_input+0x524>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	885b      	ldrh	r3, [r3, #2]
 8007606:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007608:	429a      	cmp	r2, r3
 800760a:	d132      	bne.n	8007672 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	685a      	ldr	r2, [r3, #4]
 8007610:	4b8d      	ldr	r3, [pc, #564]	; (8007848 <tcp_input+0x528>)
 8007612:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007614:	429a      	cmp	r2, r3
 8007616:	d12c      	bne.n	8007672 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	4b8a      	ldr	r3, [pc, #552]	; (8007848 <tcp_input+0x528>)
 800761e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007620:	429a      	cmp	r2, r3
 8007622:	d126      	bne.n	8007672 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	69fa      	ldr	r2, [r7, #28]
 800762a:	429a      	cmp	r2, r3
 800762c:	d106      	bne.n	800763c <tcp_input+0x31c>
 800762e:	4b87      	ldr	r3, [pc, #540]	; (800784c <tcp_input+0x52c>)
 8007630:	f240 120d 	movw	r2, #269	; 0x10d
 8007634:	4986      	ldr	r1, [pc, #536]	; (8007850 <tcp_input+0x530>)
 8007636:	4887      	ldr	r0, [pc, #540]	; (8007854 <tcp_input+0x534>)
 8007638:	f006 fea2 	bl	800e380 <iprintf>
      if (prev != NULL) {
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <tcp_input+0x338>
        prev->next = pcb->next;
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800764a:	4b83      	ldr	r3, [pc, #524]	; (8007858 <tcp_input+0x538>)
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007652:	4a81      	ldr	r2, [pc, #516]	; (8007858 <tcp_input+0x538>)
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	69fa      	ldr	r2, [r7, #28]
 800765e:	429a      	cmp	r2, r3
 8007660:	d111      	bne.n	8007686 <tcp_input+0x366>
 8007662:	4b7a      	ldr	r3, [pc, #488]	; (800784c <tcp_input+0x52c>)
 8007664:	f240 1215 	movw	r2, #277	; 0x115
 8007668:	497c      	ldr	r1, [pc, #496]	; (800785c <tcp_input+0x53c>)
 800766a:	487a      	ldr	r0, [pc, #488]	; (8007854 <tcp_input+0x534>)
 800766c:	f006 fe88 	bl	800e380 <iprintf>
      break;
 8007670:	e009      	b.n	8007686 <tcp_input+0x366>
    }
    prev = pcb;
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	61fb      	str	r3, [r7, #28]
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f47f af5e 	bne.w	8007540 <tcp_input+0x220>
 8007684:	e000      	b.n	8007688 <tcp_input+0x368>
      break;
 8007686:	bf00      	nop
  }

  if (pcb == NULL) {
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	2b00      	cmp	r3, #0
 800768c:	f040 8095 	bne.w	80077ba <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007690:	4b73      	ldr	r3, [pc, #460]	; (8007860 <tcp_input+0x540>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	61fb      	str	r3, [r7, #28]
 8007696:	e03f      	b.n	8007718 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	7d1b      	ldrb	r3, [r3, #20]
 800769c:	2b0a      	cmp	r3, #10
 800769e:	d006      	beq.n	80076ae <tcp_input+0x38e>
 80076a0:	4b6a      	ldr	r3, [pc, #424]	; (800784c <tcp_input+0x52c>)
 80076a2:	f240 121f 	movw	r2, #287	; 0x11f
 80076a6:	496f      	ldr	r1, [pc, #444]	; (8007864 <tcp_input+0x544>)
 80076a8:	486a      	ldr	r0, [pc, #424]	; (8007854 <tcp_input+0x534>)
 80076aa:	f006 fe69 	bl	800e380 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	7a1b      	ldrb	r3, [r3, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d009      	beq.n	80076ca <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	7a1a      	ldrb	r2, [r3, #8]
 80076ba:	4b63      	ldr	r3, [pc, #396]	; (8007848 <tcp_input+0x528>)
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076c2:	3301      	adds	r3, #1
 80076c4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d122      	bne.n	8007710 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	8b1a      	ldrh	r2, [r3, #24]
 80076ce:	4b5d      	ldr	r3, [pc, #372]	; (8007844 <tcp_input+0x524>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d11b      	bne.n	8007712 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	8ada      	ldrh	r2, [r3, #22]
 80076de:	4b59      	ldr	r3, [pc, #356]	; (8007844 <tcp_input+0x524>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	885b      	ldrh	r3, [r3, #2]
 80076e4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d113      	bne.n	8007712 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	4b56      	ldr	r3, [pc, #344]	; (8007848 <tcp_input+0x528>)
 80076f0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d10d      	bne.n	8007712 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	4b53      	ldr	r3, [pc, #332]	; (8007848 <tcp_input+0x528>)
 80076fc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80076fe:	429a      	cmp	r2, r3
 8007700:	d107      	bne.n	8007712 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007702:	69f8      	ldr	r0, [r7, #28]
 8007704:	f000 fb54 	bl	8007db0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7fd ff3f 	bl	800558c <pbuf_free>
        return;
 800770e:	e1f0      	b.n	8007af2 <tcp_input+0x7d2>
        continue;
 8007710:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	61fb      	str	r3, [r7, #28]
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1bc      	bne.n	8007698 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800771e:	2300      	movs	r3, #0
 8007720:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007722:	4b51      	ldr	r3, [pc, #324]	; (8007868 <tcp_input+0x548>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	617b      	str	r3, [r7, #20]
 8007728:	e02a      	b.n	8007780 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	7a1b      	ldrb	r3, [r3, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00c      	beq.n	800774c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	7a1a      	ldrb	r2, [r3, #8]
 8007736:	4b44      	ldr	r3, [pc, #272]	; (8007848 <tcp_input+0x528>)
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800773e:	3301      	adds	r3, #1
 8007740:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007742:	429a      	cmp	r2, r3
 8007744:	d002      	beq.n	800774c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	61bb      	str	r3, [r7, #24]
        continue;
 800774a:	e016      	b.n	800777a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	8ada      	ldrh	r2, [r3, #22]
 8007750:	4b3c      	ldr	r3, [pc, #240]	; (8007844 <tcp_input+0x524>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	885b      	ldrh	r3, [r3, #2]
 8007756:	b29b      	uxth	r3, r3
 8007758:	429a      	cmp	r2, r3
 800775a:	d10c      	bne.n	8007776 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	4b39      	ldr	r3, [pc, #228]	; (8007848 <tcp_input+0x528>)
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	429a      	cmp	r2, r3
 8007766:	d00f      	beq.n	8007788 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00d      	beq.n	800778a <tcp_input+0x46a>
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d009      	beq.n	800778a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1d1      	bne.n	800772a <tcp_input+0x40a>
 8007786:	e000      	b.n	800778a <tcp_input+0x46a>
            break;
 8007788:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d014      	beq.n	80077ba <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00a      	beq.n	80077ac <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800779e:	4b32      	ldr	r3, [pc, #200]	; (8007868 <tcp_input+0x548>)
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80077a6:	4a30      	ldr	r2, [pc, #192]	; (8007868 <tcp_input+0x548>)
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80077ac:	6978      	ldr	r0, [r7, #20]
 80077ae:	f000 fa01 	bl	8007bb4 <tcp_listen_input>
      }
      pbuf_free(p);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7fd feea 	bl	800558c <pbuf_free>
      return;
 80077b8:	e19b      	b.n	8007af2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 8160 	beq.w	8007a82 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80077c2:	4b2a      	ldr	r3, [pc, #168]	; (800786c <tcp_input+0x54c>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	891a      	ldrh	r2, [r3, #8]
 80077cc:	4b27      	ldr	r3, [pc, #156]	; (800786c <tcp_input+0x54c>)
 80077ce:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80077d0:	4a26      	ldr	r2, [pc, #152]	; (800786c <tcp_input+0x54c>)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80077d6:	4b1b      	ldr	r3, [pc, #108]	; (8007844 <tcp_input+0x524>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a24      	ldr	r2, [pc, #144]	; (800786c <tcp_input+0x54c>)
 80077dc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80077de:	4b24      	ldr	r3, [pc, #144]	; (8007870 <tcp_input+0x550>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80077e4:	4b23      	ldr	r3, [pc, #140]	; (8007874 <tcp_input+0x554>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80077ea:	4b23      	ldr	r3, [pc, #140]	; (8007878 <tcp_input+0x558>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80077f0:	4b22      	ldr	r3, [pc, #136]	; (800787c <tcp_input+0x55c>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	f003 0308 	and.w	r3, r3, #8
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d006      	beq.n	800780a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	7b5b      	ldrb	r3, [r3, #13]
 8007800:	f043 0301 	orr.w	r3, r3, #1
 8007804:	b2da      	uxtb	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800780e:	2b00      	cmp	r3, #0
 8007810:	d038      	beq.n	8007884 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007812:	69f8      	ldr	r0, [r7, #28]
 8007814:	f7ff f93e 	bl	8006a94 <tcp_process_refused_data>
 8007818:	4603      	mov	r3, r0
 800781a:	f113 0f0d 	cmn.w	r3, #13
 800781e:	d007      	beq.n	8007830 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007824:	2b00      	cmp	r3, #0
 8007826:	d02d      	beq.n	8007884 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007828:	4b15      	ldr	r3, [pc, #84]	; (8007880 <tcp_input+0x560>)
 800782a:	881b      	ldrh	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d029      	beq.n	8007884 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007834:	2b00      	cmp	r3, #0
 8007836:	f040 8104 	bne.w	8007a42 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800783a:	69f8      	ldr	r0, [r7, #28]
 800783c:	f003 f9be 	bl	800abbc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007840:	e0ff      	b.n	8007a42 <tcp_input+0x722>
 8007842:	bf00      	nop
 8007844:	200000dc 	.word	0x200000dc
 8007848:	200033f0 	.word	0x200033f0
 800784c:	08010970 	.word	0x08010970
 8007850:	08010a9c 	.word	0x08010a9c
 8007854:	080109bc 	.word	0x080109bc
 8007858:	20008af4 	.word	0x20008af4
 800785c:	08010ac8 	.word	0x08010ac8
 8007860:	20008b04 	.word	0x20008b04
 8007864:	08010af4 	.word	0x08010af4
 8007868:	20008afc 	.word	0x20008afc
 800786c:	200000cc 	.word	0x200000cc
 8007870:	200000fc 	.word	0x200000fc
 8007874:	200000f9 	.word	0x200000f9
 8007878:	200000f4 	.word	0x200000f4
 800787c:	200000f8 	.word	0x200000f8
 8007880:	200000f6 	.word	0x200000f6
      }
    }
    tcp_input_pcb = pcb;
 8007884:	4a9c      	ldr	r2, [pc, #624]	; (8007af8 <tcp_input+0x7d8>)
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800788a:	69f8      	ldr	r0, [r7, #28]
 800788c:	f000 fb0a 	bl	8007ea4 <tcp_process>
 8007890:	4603      	mov	r3, r0
 8007892:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007894:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007898:	f113 0f0d 	cmn.w	r3, #13
 800789c:	f000 80d3 	beq.w	8007a46 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80078a0:	4b96      	ldr	r3, [pc, #600]	; (8007afc <tcp_input+0x7dc>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	f003 0308 	and.w	r3, r3, #8
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d015      	beq.n	80078d8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d008      	beq.n	80078c8 <tcp_input+0x5a8>
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078bc:	69fa      	ldr	r2, [r7, #28]
 80078be:	6912      	ldr	r2, [r2, #16]
 80078c0:	f06f 010d 	mvn.w	r1, #13
 80078c4:	4610      	mov	r0, r2
 80078c6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80078c8:	69f9      	ldr	r1, [r7, #28]
 80078ca:	488d      	ldr	r0, [pc, #564]	; (8007b00 <tcp_input+0x7e0>)
 80078cc:	f7ff fbb0 	bl	8007030 <tcp_pcb_remove>
        tcp_free(pcb);
 80078d0:	69f8      	ldr	r0, [r7, #28]
 80078d2:	f7fe f99d 	bl	8005c10 <tcp_free>
 80078d6:	e0c1      	b.n	8007a5c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80078dc:	4b89      	ldr	r3, [pc, #548]	; (8007b04 <tcp_input+0x7e4>)
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d01d      	beq.n	8007920 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80078e4:	4b87      	ldr	r3, [pc, #540]	; (8007b04 <tcp_input+0x7e4>)
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00a      	beq.n	800790a <tcp_input+0x5ea>
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078fa:	69fa      	ldr	r2, [r7, #28]
 80078fc:	6910      	ldr	r0, [r2, #16]
 80078fe:	89fa      	ldrh	r2, [r7, #14]
 8007900:	69f9      	ldr	r1, [r7, #28]
 8007902:	4798      	blx	r3
 8007904:	4603      	mov	r3, r0
 8007906:	74fb      	strb	r3, [r7, #19]
 8007908:	e001      	b.n	800790e <tcp_input+0x5ee>
 800790a:	2300      	movs	r3, #0
 800790c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800790e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007912:	f113 0f0d 	cmn.w	r3, #13
 8007916:	f000 8098 	beq.w	8007a4a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800791a:	4b7a      	ldr	r3, [pc, #488]	; (8007b04 <tcp_input+0x7e4>)
 800791c:	2200      	movs	r2, #0
 800791e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007920:	69f8      	ldr	r0, [r7, #28]
 8007922:	f000 f907 	bl	8007b34 <tcp_input_delayed_close>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	f040 8090 	bne.w	8007a4e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800792e:	4b76      	ldr	r3, [pc, #472]	; (8007b08 <tcp_input+0x7e8>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d041      	beq.n	80079ba <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800793a:	2b00      	cmp	r3, #0
 800793c:	d006      	beq.n	800794c <tcp_input+0x62c>
 800793e:	4b73      	ldr	r3, [pc, #460]	; (8007b0c <tcp_input+0x7ec>)
 8007940:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007944:	4972      	ldr	r1, [pc, #456]	; (8007b10 <tcp_input+0x7f0>)
 8007946:	4873      	ldr	r0, [pc, #460]	; (8007b14 <tcp_input+0x7f4>)
 8007948:	f006 fd1a 	bl	800e380 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	8b5b      	ldrh	r3, [r3, #26]
 8007950:	f003 0310 	and.w	r3, r3, #16
 8007954:	2b00      	cmp	r3, #0
 8007956:	d008      	beq.n	800796a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007958:	4b6b      	ldr	r3, [pc, #428]	; (8007b08 <tcp_input+0x7e8>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4618      	mov	r0, r3
 800795e:	f7fd fe15 	bl	800558c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007962:	69f8      	ldr	r0, [r7, #28]
 8007964:	f7fe fc3c 	bl	80061e0 <tcp_abort>
            goto aborted;
 8007968:	e078      	b.n	8007a5c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00c      	beq.n	800798e <tcp_input+0x66e>
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	6918      	ldr	r0, [r3, #16]
 800797e:	4b62      	ldr	r3, [pc, #392]	; (8007b08 <tcp_input+0x7e8>)
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	2300      	movs	r3, #0
 8007984:	69f9      	ldr	r1, [r7, #28]
 8007986:	47a0      	blx	r4
 8007988:	4603      	mov	r3, r0
 800798a:	74fb      	strb	r3, [r7, #19]
 800798c:	e008      	b.n	80079a0 <tcp_input+0x680>
 800798e:	4b5e      	ldr	r3, [pc, #376]	; (8007b08 <tcp_input+0x7e8>)
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	2300      	movs	r3, #0
 8007994:	69f9      	ldr	r1, [r7, #28]
 8007996:	2000      	movs	r0, #0
 8007998:	f7ff f952 	bl	8006c40 <tcp_recv_null>
 800799c:	4603      	mov	r3, r0
 800799e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80079a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80079a4:	f113 0f0d 	cmn.w	r3, #13
 80079a8:	d053      	beq.n	8007a52 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80079aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80079b2:	4b55      	ldr	r3, [pc, #340]	; (8007b08 <tcp_input+0x7e8>)
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80079ba:	4b50      	ldr	r3, [pc, #320]	; (8007afc <tcp_input+0x7dc>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	f003 0320 	and.w	r3, r3, #32
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d030      	beq.n	8007a28 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d009      	beq.n	80079e2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079d2:	7b5a      	ldrb	r2, [r3, #13]
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079d8:	f042 0220 	orr.w	r2, r2, #32
 80079dc:	b2d2      	uxtb	r2, r2
 80079de:	735a      	strb	r2, [r3, #13]
 80079e0:	e022      	b.n	8007a28 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80079ea:	d005      	beq.n	80079f8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f0:	3301      	adds	r3, #1
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00b      	beq.n	8007a1a <tcp_input+0x6fa>
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	6918      	ldr	r0, [r3, #16]
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	2200      	movs	r2, #0
 8007a10:	69f9      	ldr	r1, [r7, #28]
 8007a12:	47a0      	blx	r4
 8007a14:	4603      	mov	r3, r0
 8007a16:	74fb      	strb	r3, [r7, #19]
 8007a18:	e001      	b.n	8007a1e <tcp_input+0x6fe>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007a1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007a22:	f113 0f0d 	cmn.w	r3, #13
 8007a26:	d016      	beq.n	8007a56 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007a28:	4b33      	ldr	r3, [pc, #204]	; (8007af8 <tcp_input+0x7d8>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007a2e:	69f8      	ldr	r0, [r7, #28]
 8007a30:	f000 f880 	bl	8007b34 <tcp_input_delayed_close>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10f      	bne.n	8007a5a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007a3a:	69f8      	ldr	r0, [r7, #28]
 8007a3c:	f002 fab8 	bl	8009fb0 <tcp_output>
 8007a40:	e00c      	b.n	8007a5c <tcp_input+0x73c>
        goto aborted;
 8007a42:	bf00      	nop
 8007a44:	e00a      	b.n	8007a5c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007a46:	bf00      	nop
 8007a48:	e008      	b.n	8007a5c <tcp_input+0x73c>
              goto aborted;
 8007a4a:	bf00      	nop
 8007a4c:	e006      	b.n	8007a5c <tcp_input+0x73c>
          goto aborted;
 8007a4e:	bf00      	nop
 8007a50:	e004      	b.n	8007a5c <tcp_input+0x73c>
            goto aborted;
 8007a52:	bf00      	nop
 8007a54:	e002      	b.n	8007a5c <tcp_input+0x73c>
              goto aborted;
 8007a56:	bf00      	nop
 8007a58:	e000      	b.n	8007a5c <tcp_input+0x73c>
          goto aborted;
 8007a5a:	bf00      	nop
    tcp_input_pcb = NULL;
 8007a5c:	4b26      	ldr	r3, [pc, #152]	; (8007af8 <tcp_input+0x7d8>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007a62:	4b29      	ldr	r3, [pc, #164]	; (8007b08 <tcp_input+0x7e8>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007a68:	4b2b      	ldr	r3, [pc, #172]	; (8007b18 <tcp_input+0x7f8>)
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d03f      	beq.n	8007af0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8007a70:	4b29      	ldr	r3, [pc, #164]	; (8007b18 <tcp_input+0x7f8>)
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fd fd89 	bl	800558c <pbuf_free>
      inseg.p = NULL;
 8007a7a:	4b27      	ldr	r3, [pc, #156]	; (8007b18 <tcp_input+0x7f8>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007a80:	e036      	b.n	8007af0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007a82:	4b26      	ldr	r3, [pc, #152]	; (8007b1c <tcp_input+0x7fc>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	899b      	ldrh	r3, [r3, #12]
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fc faca 	bl	8004024 <lwip_htons>
 8007a90:	4603      	mov	r3, r0
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	f003 0304 	and.w	r3, r3, #4
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d118      	bne.n	8007ace <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a9c:	4b20      	ldr	r3, [pc, #128]	; (8007b20 <tcp_input+0x800>)
 8007a9e:	6819      	ldr	r1, [r3, #0]
 8007aa0:	4b20      	ldr	r3, [pc, #128]	; (8007b24 <tcp_input+0x804>)
 8007aa2:	881b      	ldrh	r3, [r3, #0]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	4b20      	ldr	r3, [pc, #128]	; (8007b28 <tcp_input+0x808>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007aac:	4b1b      	ldr	r3, [pc, #108]	; (8007b1c <tcp_input+0x7fc>)
 8007aae:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ab0:	885b      	ldrh	r3, [r3, #2]
 8007ab2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ab4:	4a19      	ldr	r2, [pc, #100]	; (8007b1c <tcp_input+0x7fc>)
 8007ab6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ab8:	8812      	ldrh	r2, [r2, #0]
 8007aba:	b292      	uxth	r2, r2
 8007abc:	9202      	str	r2, [sp, #8]
 8007abe:	9301      	str	r3, [sp, #4]
 8007ac0:	4b1a      	ldr	r3, [pc, #104]	; (8007b2c <tcp_input+0x80c>)
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	4b1a      	ldr	r3, [pc, #104]	; (8007b30 <tcp_input+0x810>)
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	2000      	movs	r0, #0
 8007aca:	f003 f825 	bl	800ab18 <tcp_rst>
    pbuf_free(p);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7fd fd5c 	bl	800558c <pbuf_free>
  return;
 8007ad4:	e00c      	b.n	8007af0 <tcp_input+0x7d0>
    goto dropped;
 8007ad6:	bf00      	nop
 8007ad8:	e006      	b.n	8007ae8 <tcp_input+0x7c8>
    goto dropped;
 8007ada:	bf00      	nop
 8007adc:	e004      	b.n	8007ae8 <tcp_input+0x7c8>
    goto dropped;
 8007ade:	bf00      	nop
 8007ae0:	e002      	b.n	8007ae8 <tcp_input+0x7c8>
      goto dropped;
 8007ae2:	bf00      	nop
 8007ae4:	e000      	b.n	8007ae8 <tcp_input+0x7c8>
      goto dropped;
 8007ae6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7fd fd4f 	bl	800558c <pbuf_free>
 8007aee:	e000      	b.n	8007af2 <tcp_input+0x7d2>
  return;
 8007af0:	bf00      	nop
}
 8007af2:	3724      	adds	r7, #36	; 0x24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd90      	pop	{r4, r7, pc}
 8007af8:	20008b08 	.word	0x20008b08
 8007afc:	200000f9 	.word	0x200000f9
 8007b00:	20008af4 	.word	0x20008af4
 8007b04:	200000f4 	.word	0x200000f4
 8007b08:	200000fc 	.word	0x200000fc
 8007b0c:	08010970 	.word	0x08010970
 8007b10:	08010b24 	.word	0x08010b24
 8007b14:	080109bc 	.word	0x080109bc
 8007b18:	200000cc 	.word	0x200000cc
 8007b1c:	200000dc 	.word	0x200000dc
 8007b20:	200000f0 	.word	0x200000f0
 8007b24:	200000f6 	.word	0x200000f6
 8007b28:	200000ec 	.word	0x200000ec
 8007b2c:	20003400 	.word	0x20003400
 8007b30:	20003404 	.word	0x20003404

08007b34 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d106      	bne.n	8007b50 <tcp_input_delayed_close+0x1c>
 8007b42:	4b17      	ldr	r3, [pc, #92]	; (8007ba0 <tcp_input_delayed_close+0x6c>)
 8007b44:	f240 225a 	movw	r2, #602	; 0x25a
 8007b48:	4916      	ldr	r1, [pc, #88]	; (8007ba4 <tcp_input_delayed_close+0x70>)
 8007b4a:	4817      	ldr	r0, [pc, #92]	; (8007ba8 <tcp_input_delayed_close+0x74>)
 8007b4c:	f006 fc18 	bl	800e380 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007b50:	4b16      	ldr	r3, [pc, #88]	; (8007bac <tcp_input_delayed_close+0x78>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	f003 0310 	and.w	r3, r3, #16
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d01c      	beq.n	8007b96 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	8b5b      	ldrh	r3, [r3, #26]
 8007b60:	f003 0310 	and.w	r3, r3, #16
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10d      	bne.n	8007b84 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d008      	beq.n	8007b84 <tcp_input_delayed_close+0x50>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	6912      	ldr	r2, [r2, #16]
 8007b7c:	f06f 010e 	mvn.w	r1, #14
 8007b80:	4610      	mov	r0, r2
 8007b82:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007b84:	6879      	ldr	r1, [r7, #4]
 8007b86:	480a      	ldr	r0, [pc, #40]	; (8007bb0 <tcp_input_delayed_close+0x7c>)
 8007b88:	f7ff fa52 	bl	8007030 <tcp_pcb_remove>
    tcp_free(pcb);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7fe f83f 	bl	8005c10 <tcp_free>
    return 1;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e000      	b.n	8007b98 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	08010970 	.word	0x08010970
 8007ba4:	08010b40 	.word	0x08010b40
 8007ba8:	080109bc 	.word	0x080109bc
 8007bac:	200000f9 	.word	0x200000f9
 8007bb0:	20008af4 	.word	0x20008af4

08007bb4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007bb4:	b590      	push	{r4, r7, lr}
 8007bb6:	b08b      	sub	sp, #44	; 0x2c
 8007bb8:	af04      	add	r7, sp, #16
 8007bba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007bbc:	4b6f      	ldr	r3, [pc, #444]	; (8007d7c <tcp_listen_input+0x1c8>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	f003 0304 	and.w	r3, r3, #4
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f040 80d2 	bne.w	8007d6e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d106      	bne.n	8007bde <tcp_listen_input+0x2a>
 8007bd0:	4b6b      	ldr	r3, [pc, #428]	; (8007d80 <tcp_listen_input+0x1cc>)
 8007bd2:	f240 2281 	movw	r2, #641	; 0x281
 8007bd6:	496b      	ldr	r1, [pc, #428]	; (8007d84 <tcp_listen_input+0x1d0>)
 8007bd8:	486b      	ldr	r0, [pc, #428]	; (8007d88 <tcp_listen_input+0x1d4>)
 8007bda:	f006 fbd1 	bl	800e380 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007bde:	4b67      	ldr	r3, [pc, #412]	; (8007d7c <tcp_listen_input+0x1c8>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	f003 0310 	and.w	r3, r3, #16
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d019      	beq.n	8007c1e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bea:	4b68      	ldr	r3, [pc, #416]	; (8007d8c <tcp_listen_input+0x1d8>)
 8007bec:	6819      	ldr	r1, [r3, #0]
 8007bee:	4b68      	ldr	r3, [pc, #416]	; (8007d90 <tcp_listen_input+0x1dc>)
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	4b67      	ldr	r3, [pc, #412]	; (8007d94 <tcp_listen_input+0x1e0>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007bfa:	4b67      	ldr	r3, [pc, #412]	; (8007d98 <tcp_listen_input+0x1e4>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bfe:	885b      	ldrh	r3, [r3, #2]
 8007c00:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c02:	4a65      	ldr	r2, [pc, #404]	; (8007d98 <tcp_listen_input+0x1e4>)
 8007c04:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c06:	8812      	ldrh	r2, [r2, #0]
 8007c08:	b292      	uxth	r2, r2
 8007c0a:	9202      	str	r2, [sp, #8]
 8007c0c:	9301      	str	r3, [sp, #4]
 8007c0e:	4b63      	ldr	r3, [pc, #396]	; (8007d9c <tcp_listen_input+0x1e8>)
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	4b63      	ldr	r3, [pc, #396]	; (8007da0 <tcp_listen_input+0x1ec>)
 8007c14:	4602      	mov	r2, r0
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f002 ff7e 	bl	800ab18 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007c1c:	e0a9      	b.n	8007d72 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8007c1e:	4b57      	ldr	r3, [pc, #348]	; (8007d7c <tcp_listen_input+0x1c8>)
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f000 80a3 	beq.w	8007d72 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	7d5b      	ldrb	r3, [r3, #21]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff f929 	bl	8006e88 <tcp_alloc>
 8007c36:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d111      	bne.n	8007c62 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00a      	beq.n	8007c5c <tcp_listen_input+0xa8>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	6910      	ldr	r0, [r2, #16]
 8007c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c52:	2100      	movs	r1, #0
 8007c54:	4798      	blx	r3
 8007c56:	4603      	mov	r3, r0
 8007c58:	73bb      	strb	r3, [r7, #14]
      return;
 8007c5a:	e08b      	b.n	8007d74 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007c5c:	23f0      	movs	r3, #240	; 0xf0
 8007c5e:	73bb      	strb	r3, [r7, #14]
      return;
 8007c60:	e088      	b.n	8007d74 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007c62:	4b50      	ldr	r3, [pc, #320]	; (8007da4 <tcp_listen_input+0x1f0>)
 8007c64:	695a      	ldr	r2, [r3, #20]
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007c6a:	4b4e      	ldr	r3, [pc, #312]	; (8007da4 <tcp_listen_input+0x1f0>)
 8007c6c:	691a      	ldr	r2, [r3, #16]
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	8ada      	ldrh	r2, [r3, #22]
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007c7a:	4b47      	ldr	r3, [pc, #284]	; (8007d98 <tcp_listen_input+0x1e4>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2203      	movs	r2, #3
 8007c8a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007c8c:	4b41      	ldr	r3, [pc, #260]	; (8007d94 <tcp_listen_input+0x1e0>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007c9e:	6978      	ldr	r0, [r7, #20]
 8007ca0:	f7ff fa5a 	bl	8007158 <tcp_next_iss>
 8007ca4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007cbe:	4b35      	ldr	r3, [pc, #212]	; (8007d94 <tcp_listen_input+0x1e0>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	1e5a      	subs	r2, r3, #1
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	691a      	ldr	r2, [r3, #16]
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	7a5b      	ldrb	r3, [r3, #9]
 8007cda:	f003 030c 	and.w	r3, r3, #12
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	7a1a      	ldrb	r2, [r3, #8]
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007cec:	4b2e      	ldr	r3, [pc, #184]	; (8007da8 <tcp_listen_input+0x1f4>)
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	60da      	str	r2, [r3, #12]
 8007cf4:	4a2c      	ldr	r2, [pc, #176]	; (8007da8 <tcp_listen_input+0x1f4>)
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	f003 f8cf 	bl	800ae9c <tcp_timer_needed>
 8007cfe:	4b2b      	ldr	r3, [pc, #172]	; (8007dac <tcp_listen_input+0x1f8>)
 8007d00:	2201      	movs	r2, #1
 8007d02:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007d04:	6978      	ldr	r0, [r7, #20]
 8007d06:	f001 fd8d 	bl	8009824 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007d0a:	4b23      	ldr	r3, [pc, #140]	; (8007d98 <tcp_listen_input+0x1e4>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	89db      	ldrh	r3, [r3, #14]
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f005 f84d 	bl	800cdcc <ip4_route>
 8007d32:	4601      	mov	r1, r0
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	3304      	adds	r3, #4
 8007d38:	461a      	mov	r2, r3
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f7ff fa32 	bl	80071a4 <tcp_eff_send_mss_netif>
 8007d40:	4603      	mov	r3, r0
 8007d42:	461a      	mov	r2, r3
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007d48:	2112      	movs	r1, #18
 8007d4a:	6978      	ldr	r0, [r7, #20]
 8007d4c:	f002 f842 	bl	8009dd4 <tcp_enqueue_flags>
 8007d50:	4603      	mov	r3, r0
 8007d52:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d004      	beq.n	8007d66 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	6978      	ldr	r0, [r7, #20]
 8007d60:	f7fe f980 	bl	8006064 <tcp_abandon>
      return;
 8007d64:	e006      	b.n	8007d74 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007d66:	6978      	ldr	r0, [r7, #20]
 8007d68:	f002 f922 	bl	8009fb0 <tcp_output>
  return;
 8007d6c:	e001      	b.n	8007d72 <tcp_listen_input+0x1be>
    return;
 8007d6e:	bf00      	nop
 8007d70:	e000      	b.n	8007d74 <tcp_listen_input+0x1c0>
  return;
 8007d72:	bf00      	nop
}
 8007d74:	371c      	adds	r7, #28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd90      	pop	{r4, r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	200000f8 	.word	0x200000f8
 8007d80:	08010970 	.word	0x08010970
 8007d84:	08010b68 	.word	0x08010b68
 8007d88:	080109bc 	.word	0x080109bc
 8007d8c:	200000f0 	.word	0x200000f0
 8007d90:	200000f6 	.word	0x200000f6
 8007d94:	200000ec 	.word	0x200000ec
 8007d98:	200000dc 	.word	0x200000dc
 8007d9c:	20003400 	.word	0x20003400
 8007da0:	20003404 	.word	0x20003404
 8007da4:	200033f0 	.word	0x200033f0
 8007da8:	20008af4 	.word	0x20008af4
 8007dac:	20008af0 	.word	0x20008af0

08007db0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af04      	add	r7, sp, #16
 8007db6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007db8:	4b2f      	ldr	r3, [pc, #188]	; (8007e78 <tcp_timewait_input+0xc8>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	f003 0304 	and.w	r3, r3, #4
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d153      	bne.n	8007e6c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d106      	bne.n	8007dd8 <tcp_timewait_input+0x28>
 8007dca:	4b2c      	ldr	r3, [pc, #176]	; (8007e7c <tcp_timewait_input+0xcc>)
 8007dcc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007dd0:	492b      	ldr	r1, [pc, #172]	; (8007e80 <tcp_timewait_input+0xd0>)
 8007dd2:	482c      	ldr	r0, [pc, #176]	; (8007e84 <tcp_timewait_input+0xd4>)
 8007dd4:	f006 fad4 	bl	800e380 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007dd8:	4b27      	ldr	r3, [pc, #156]	; (8007e78 <tcp_timewait_input+0xc8>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	f003 0302 	and.w	r3, r3, #2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d02a      	beq.n	8007e3a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007de4:	4b28      	ldr	r3, [pc, #160]	; (8007e88 <tcp_timewait_input+0xd8>)
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	db2d      	blt.n	8007e4e <tcp_timewait_input+0x9e>
 8007df2:	4b25      	ldr	r3, [pc, #148]	; (8007e88 <tcp_timewait_input+0xd8>)
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007dfe:	440b      	add	r3, r1
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	dc23      	bgt.n	8007e4e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e06:	4b21      	ldr	r3, [pc, #132]	; (8007e8c <tcp_timewait_input+0xdc>)
 8007e08:	6819      	ldr	r1, [r3, #0]
 8007e0a:	4b21      	ldr	r3, [pc, #132]	; (8007e90 <tcp_timewait_input+0xe0>)
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	4b1d      	ldr	r3, [pc, #116]	; (8007e88 <tcp_timewait_input+0xd8>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007e16:	4b1f      	ldr	r3, [pc, #124]	; (8007e94 <tcp_timewait_input+0xe4>)
 8007e18:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e1a:	885b      	ldrh	r3, [r3, #2]
 8007e1c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007e1e:	4a1d      	ldr	r2, [pc, #116]	; (8007e94 <tcp_timewait_input+0xe4>)
 8007e20:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e22:	8812      	ldrh	r2, [r2, #0]
 8007e24:	b292      	uxth	r2, r2
 8007e26:	9202      	str	r2, [sp, #8]
 8007e28:	9301      	str	r3, [sp, #4]
 8007e2a:	4b1b      	ldr	r3, [pc, #108]	; (8007e98 <tcp_timewait_input+0xe8>)
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	4b1b      	ldr	r3, [pc, #108]	; (8007e9c <tcp_timewait_input+0xec>)
 8007e30:	4602      	mov	r2, r0
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f002 fe70 	bl	800ab18 <tcp_rst>
      return;
 8007e38:	e01b      	b.n	8007e72 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8007e3a:	4b0f      	ldr	r3, [pc, #60]	; (8007e78 <tcp_timewait_input+0xc8>)
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d003      	beq.n	8007e4e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007e46:	4b16      	ldr	r3, [pc, #88]	; (8007ea0 <tcp_timewait_input+0xf0>)
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007e4e:	4b10      	ldr	r3, [pc, #64]	; (8007e90 <tcp_timewait_input+0xe0>)
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00c      	beq.n	8007e70 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	8b5b      	ldrh	r3, [r3, #26]
 8007e5a:	f043 0302 	orr.w	r3, r3, #2
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f002 f8a3 	bl	8009fb0 <tcp_output>
  }
  return;
 8007e6a:	e001      	b.n	8007e70 <tcp_timewait_input+0xc0>
    return;
 8007e6c:	bf00      	nop
 8007e6e:	e000      	b.n	8007e72 <tcp_timewait_input+0xc2>
  return;
 8007e70:	bf00      	nop
}
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	200000f8 	.word	0x200000f8
 8007e7c:	08010970 	.word	0x08010970
 8007e80:	08010b88 	.word	0x08010b88
 8007e84:	080109bc 	.word	0x080109bc
 8007e88:	200000ec 	.word	0x200000ec
 8007e8c:	200000f0 	.word	0x200000f0
 8007e90:	200000f6 	.word	0x200000f6
 8007e94:	200000dc 	.word	0x200000dc
 8007e98:	20003400 	.word	0x20003400
 8007e9c:	20003404 	.word	0x20003404
 8007ea0:	20008af8 	.word	0x20008af8

08007ea4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007ea4:	b590      	push	{r4, r7, lr}
 8007ea6:	b08d      	sub	sp, #52	; 0x34
 8007ea8:	af04      	add	r7, sp, #16
 8007eaa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d106      	bne.n	8007ec8 <tcp_process+0x24>
 8007eba:	4ba5      	ldr	r3, [pc, #660]	; (8008150 <tcp_process+0x2ac>)
 8007ebc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007ec0:	49a4      	ldr	r1, [pc, #656]	; (8008154 <tcp_process+0x2b0>)
 8007ec2:	48a5      	ldr	r0, [pc, #660]	; (8008158 <tcp_process+0x2b4>)
 8007ec4:	f006 fa5c 	bl	800e380 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007ec8:	4ba4      	ldr	r3, [pc, #656]	; (800815c <tcp_process+0x2b8>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d04e      	beq.n	8007f72 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	7d1b      	ldrb	r3, [r3, #20]
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d108      	bne.n	8007eee <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ee0:	4b9f      	ldr	r3, [pc, #636]	; (8008160 <tcp_process+0x2bc>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d123      	bne.n	8007f30 <tcp_process+0x8c>
        acceptable = 1;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	76fb      	strb	r3, [r7, #27]
 8007eec:	e020      	b.n	8007f30 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ef2:	4b9c      	ldr	r3, [pc, #624]	; (8008164 <tcp_process+0x2c0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d102      	bne.n	8007f00 <tcp_process+0x5c>
        acceptable = 1;
 8007efa:	2301      	movs	r3, #1
 8007efc:	76fb      	strb	r3, [r7, #27]
 8007efe:	e017      	b.n	8007f30 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007f00:	4b98      	ldr	r3, [pc, #608]	; (8008164 <tcp_process+0x2c0>)
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	db10      	blt.n	8007f30 <tcp_process+0x8c>
 8007f0e:	4b95      	ldr	r3, [pc, #596]	; (8008164 <tcp_process+0x2c0>)
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007f1a:	440b      	add	r3, r1
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	dc06      	bgt.n	8007f30 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	8b5b      	ldrh	r3, [r3, #26]
 8007f26:	f043 0302 	orr.w	r3, r3, #2
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007f30:	7efb      	ldrb	r3, [r7, #27]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d01b      	beq.n	8007f6e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	7d1b      	ldrb	r3, [r3, #20]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d106      	bne.n	8007f4c <tcp_process+0xa8>
 8007f3e:	4b84      	ldr	r3, [pc, #528]	; (8008150 <tcp_process+0x2ac>)
 8007f40:	f44f 724e 	mov.w	r2, #824	; 0x338
 8007f44:	4988      	ldr	r1, [pc, #544]	; (8008168 <tcp_process+0x2c4>)
 8007f46:	4884      	ldr	r0, [pc, #528]	; (8008158 <tcp_process+0x2b4>)
 8007f48:	f006 fa1a 	bl	800e380 <iprintf>
      recv_flags |= TF_RESET;
 8007f4c:	4b87      	ldr	r3, [pc, #540]	; (800816c <tcp_process+0x2c8>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	f043 0308 	orr.w	r3, r3, #8
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	4b85      	ldr	r3, [pc, #532]	; (800816c <tcp_process+0x2c8>)
 8007f58:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	8b5b      	ldrh	r3, [r3, #26]
 8007f5e:	f023 0301 	bic.w	r3, r3, #1
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007f68:	f06f 030d 	mvn.w	r3, #13
 8007f6c:	e37a      	b.n	8008664 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e378      	b.n	8008664 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007f72:	4b7a      	ldr	r3, [pc, #488]	; (800815c <tcp_process+0x2b8>)
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d010      	beq.n	8007fa0 <tcp_process+0xfc>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	7d1b      	ldrb	r3, [r3, #20]
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d00c      	beq.n	8007fa0 <tcp_process+0xfc>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	7d1b      	ldrb	r3, [r3, #20]
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d008      	beq.n	8007fa0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	8b5b      	ldrh	r3, [r3, #26]
 8007f92:	f043 0302 	orr.w	r3, r3, #2
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	e361      	b.n	8008664 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	8b5b      	ldrh	r3, [r3, #26]
 8007fa4:	f003 0310 	and.w	r3, r3, #16
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d103      	bne.n	8007fb4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007fac:	4b70      	ldr	r3, [pc, #448]	; (8008170 <tcp_process+0x2cc>)
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f001 fc2d 	bl	8009824 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	7d1b      	ldrb	r3, [r3, #20]
 8007fce:	3b02      	subs	r3, #2
 8007fd0:	2b07      	cmp	r3, #7
 8007fd2:	f200 8337 	bhi.w	8008644 <tcp_process+0x7a0>
 8007fd6:	a201      	add	r2, pc, #4	; (adr r2, 8007fdc <tcp_process+0x138>)
 8007fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fdc:	08007ffd 	.word	0x08007ffd
 8007fe0:	0800822d 	.word	0x0800822d
 8007fe4:	080083a5 	.word	0x080083a5
 8007fe8:	080083cf 	.word	0x080083cf
 8007fec:	080084f3 	.word	0x080084f3
 8007ff0:	080083a5 	.word	0x080083a5
 8007ff4:	0800857f 	.word	0x0800857f
 8007ff8:	0800860f 	.word	0x0800860f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007ffc:	4b57      	ldr	r3, [pc, #348]	; (800815c <tcp_process+0x2b8>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	f003 0310 	and.w	r3, r3, #16
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 80e4 	beq.w	80081d2 <tcp_process+0x32e>
 800800a:	4b54      	ldr	r3, [pc, #336]	; (800815c <tcp_process+0x2b8>)
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	f000 80dd 	beq.w	80081d2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800801c:	1c5a      	adds	r2, r3, #1
 800801e:	4b50      	ldr	r3, [pc, #320]	; (8008160 <tcp_process+0x2bc>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	429a      	cmp	r2, r3
 8008024:	f040 80d5 	bne.w	80081d2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008028:	4b4e      	ldr	r3, [pc, #312]	; (8008164 <tcp_process+0x2c0>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	1c5a      	adds	r2, r3, #1
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800803a:	4b49      	ldr	r3, [pc, #292]	; (8008160 <tcp_process+0x2bc>)
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008042:	4b4c      	ldr	r3, [pc, #304]	; (8008174 <tcp_process+0x2d0>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	89db      	ldrh	r3, [r3, #14]
 8008048:	b29a      	uxth	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800805c:	4b41      	ldr	r3, [pc, #260]	; (8008164 <tcp_process+0x2c0>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	1e5a      	subs	r2, r3, #1
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2204      	movs	r2, #4
 800806a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	3304      	adds	r3, #4
 8008074:	4618      	mov	r0, r3
 8008076:	f004 fea9 	bl	800cdcc <ip4_route>
 800807a:	4601      	mov	r1, r0
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	3304      	adds	r3, #4
 8008080:	461a      	mov	r2, r3
 8008082:	4620      	mov	r0, r4
 8008084:	f7ff f88e 	bl	80071a4 <tcp_eff_send_mss_netif>
 8008088:	4603      	mov	r3, r0
 800808a:	461a      	mov	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008094:	009a      	lsls	r2, r3, #2
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800809a:	005b      	lsls	r3, r3, #1
 800809c:	f241 111c 	movw	r1, #4380	; 0x111c
 80080a0:	428b      	cmp	r3, r1
 80080a2:	bf38      	it	cc
 80080a4:	460b      	movcc	r3, r1
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d204      	bcs.n	80080b4 <tcp_process+0x210>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	e00d      	b.n	80080d0 <tcp_process+0x22c>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080b8:	005b      	lsls	r3, r3, #1
 80080ba:	f241 121c 	movw	r2, #4380	; 0x111c
 80080be:	4293      	cmp	r3, r2
 80080c0:	d904      	bls.n	80080cc <tcp_process+0x228>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080c6:	005b      	lsls	r3, r3, #1
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	e001      	b.n	80080d0 <tcp_process+0x22c>
 80080cc:	f241 131c 	movw	r3, #4380	; 0x111c
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d106      	bne.n	80080ee <tcp_process+0x24a>
 80080e0:	4b1b      	ldr	r3, [pc, #108]	; (8008150 <tcp_process+0x2ac>)
 80080e2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80080e6:	4924      	ldr	r1, [pc, #144]	; (8008178 <tcp_process+0x2d4>)
 80080e8:	481b      	ldr	r0, [pc, #108]	; (8008158 <tcp_process+0x2b4>)
 80080ea:	f006 f949 	bl	800e380 <iprintf>
        --pcb->snd_queuelen;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80080f4:	3b01      	subs	r3, #1
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008102:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d111      	bne.n	800812e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800810e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d106      	bne.n	8008124 <tcp_process+0x280>
 8008116:	4b0e      	ldr	r3, [pc, #56]	; (8008150 <tcp_process+0x2ac>)
 8008118:	f44f 725d 	mov.w	r2, #884	; 0x374
 800811c:	4917      	ldr	r1, [pc, #92]	; (800817c <tcp_process+0x2d8>)
 800811e:	480e      	ldr	r0, [pc, #56]	; (8008158 <tcp_process+0x2b4>)
 8008120:	f006 f92e 	bl	800e380 <iprintf>
          pcb->unsent = rseg->next;
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	66da      	str	r2, [r3, #108]	; 0x6c
 800812c:	e003      	b.n	8008136 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008136:	69f8      	ldr	r0, [r7, #28]
 8008138:	f7fe fd3d 	bl	8006bb6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008140:	2b00      	cmp	r3, #0
 8008142:	d11d      	bne.n	8008180 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800814a:	861a      	strh	r2, [r3, #48]	; 0x30
 800814c:	e01f      	b.n	800818e <tcp_process+0x2ea>
 800814e:	bf00      	nop
 8008150:	08010970 	.word	0x08010970
 8008154:	08010ba8 	.word	0x08010ba8
 8008158:	080109bc 	.word	0x080109bc
 800815c:	200000f8 	.word	0x200000f8
 8008160:	200000f0 	.word	0x200000f0
 8008164:	200000ec 	.word	0x200000ec
 8008168:	08010bc4 	.word	0x08010bc4
 800816c:	200000f9 	.word	0x200000f9
 8008170:	20008af8 	.word	0x20008af8
 8008174:	200000dc 	.word	0x200000dc
 8008178:	08010be4 	.word	0x08010be4
 800817c:	08010bfc 	.word	0x08010bfc
        } else {
          pcb->rtime = 0;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00a      	beq.n	80081ae <tcp_process+0x30a>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	6910      	ldr	r0, [r2, #16]
 80081a2:	2200      	movs	r2, #0
 80081a4:	6879      	ldr	r1, [r7, #4]
 80081a6:	4798      	blx	r3
 80081a8:	4603      	mov	r3, r0
 80081aa:	76bb      	strb	r3, [r7, #26]
 80081ac:	e001      	b.n	80081b2 <tcp_process+0x30e>
 80081ae:	2300      	movs	r3, #0
 80081b0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80081b2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80081b6:	f113 0f0d 	cmn.w	r3, #13
 80081ba:	d102      	bne.n	80081c2 <tcp_process+0x31e>
          return ERR_ABRT;
 80081bc:	f06f 030c 	mvn.w	r3, #12
 80081c0:	e250      	b.n	8008664 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	8b5b      	ldrh	r3, [r3, #26]
 80081c6:	f043 0302 	orr.w	r3, r3, #2
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80081d0:	e23a      	b.n	8008648 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80081d2:	4b9d      	ldr	r3, [pc, #628]	; (8008448 <tcp_process+0x5a4>)
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	f003 0310 	and.w	r3, r3, #16
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 8234 	beq.w	8008648 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081e0:	4b9a      	ldr	r3, [pc, #616]	; (800844c <tcp_process+0x5a8>)
 80081e2:	6819      	ldr	r1, [r3, #0]
 80081e4:	4b9a      	ldr	r3, [pc, #616]	; (8008450 <tcp_process+0x5ac>)
 80081e6:	881b      	ldrh	r3, [r3, #0]
 80081e8:	461a      	mov	r2, r3
 80081ea:	4b9a      	ldr	r3, [pc, #616]	; (8008454 <tcp_process+0x5b0>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081f0:	4b99      	ldr	r3, [pc, #612]	; (8008458 <tcp_process+0x5b4>)
 80081f2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081f4:	885b      	ldrh	r3, [r3, #2]
 80081f6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081f8:	4a97      	ldr	r2, [pc, #604]	; (8008458 <tcp_process+0x5b4>)
 80081fa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081fc:	8812      	ldrh	r2, [r2, #0]
 80081fe:	b292      	uxth	r2, r2
 8008200:	9202      	str	r2, [sp, #8]
 8008202:	9301      	str	r3, [sp, #4]
 8008204:	4b95      	ldr	r3, [pc, #596]	; (800845c <tcp_process+0x5b8>)
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	4b95      	ldr	r3, [pc, #596]	; (8008460 <tcp_process+0x5bc>)
 800820a:	4602      	mov	r2, r0
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f002 fc83 	bl	800ab18 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008218:	2b05      	cmp	r3, #5
 800821a:	f200 8215 	bhi.w	8008648 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f002 fa4d 	bl	800a6c4 <tcp_rexmit_rto>
      break;
 800822a:	e20d      	b.n	8008648 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800822c:	4b86      	ldr	r3, [pc, #536]	; (8008448 <tcp_process+0x5a4>)
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	f003 0310 	and.w	r3, r3, #16
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 80a1 	beq.w	800837c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800823a:	4b84      	ldr	r3, [pc, #528]	; (800844c <tcp_process+0x5a8>)
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	3b01      	subs	r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	db7e      	blt.n	8008348 <tcp_process+0x4a4>
 800824a:	4b80      	ldr	r3, [pc, #512]	; (800844c <tcp_process+0x5a8>)
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	dc77      	bgt.n	8008348 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2204      	movs	r2, #4
 800825c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008262:	2b00      	cmp	r3, #0
 8008264:	d102      	bne.n	800826c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008266:	23fa      	movs	r3, #250	; 0xfa
 8008268:	76bb      	strb	r3, [r7, #26]
 800826a:	e01d      	b.n	80082a8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d106      	bne.n	8008284 <tcp_process+0x3e0>
 8008276:	4b7b      	ldr	r3, [pc, #492]	; (8008464 <tcp_process+0x5c0>)
 8008278:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800827c:	497a      	ldr	r1, [pc, #488]	; (8008468 <tcp_process+0x5c4>)
 800827e:	487b      	ldr	r0, [pc, #492]	; (800846c <tcp_process+0x5c8>)
 8008280:	f006 f87e 	bl	800e380 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00a      	beq.n	80082a4 <tcp_process+0x400>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	6910      	ldr	r0, [r2, #16]
 8008298:	2200      	movs	r2, #0
 800829a:	6879      	ldr	r1, [r7, #4]
 800829c:	4798      	blx	r3
 800829e:	4603      	mov	r3, r0
 80082a0:	76bb      	strb	r3, [r7, #26]
 80082a2:	e001      	b.n	80082a8 <tcp_process+0x404>
 80082a4:	23f0      	movs	r3, #240	; 0xf0
 80082a6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80082a8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00a      	beq.n	80082c6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80082b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80082b4:	f113 0f0d 	cmn.w	r3, #13
 80082b8:	d002      	beq.n	80082c0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7fd ff90 	bl	80061e0 <tcp_abort>
            }
            return ERR_ABRT;
 80082c0:	f06f 030c 	mvn.w	r3, #12
 80082c4:	e1ce      	b.n	8008664 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fae0 	bl	800888c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80082cc:	4b68      	ldr	r3, [pc, #416]	; (8008470 <tcp_process+0x5cc>)
 80082ce:	881b      	ldrh	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d005      	beq.n	80082e0 <tcp_process+0x43c>
            recv_acked--;
 80082d4:	4b66      	ldr	r3, [pc, #408]	; (8008470 <tcp_process+0x5cc>)
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	3b01      	subs	r3, #1
 80082da:	b29a      	uxth	r2, r3
 80082dc:	4b64      	ldr	r3, [pc, #400]	; (8008470 <tcp_process+0x5cc>)
 80082de:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082e4:	009a      	lsls	r2, r3, #2
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	f241 111c 	movw	r1, #4380	; 0x111c
 80082f0:	428b      	cmp	r3, r1
 80082f2:	bf38      	it	cc
 80082f4:	460b      	movcc	r3, r1
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d204      	bcs.n	8008304 <tcp_process+0x460>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	b29b      	uxth	r3, r3
 8008302:	e00d      	b.n	8008320 <tcp_process+0x47c>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008308:	005b      	lsls	r3, r3, #1
 800830a:	f241 121c 	movw	r2, #4380	; 0x111c
 800830e:	4293      	cmp	r3, r2
 8008310:	d904      	bls.n	800831c <tcp_process+0x478>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008316:	005b      	lsls	r3, r3, #1
 8008318:	b29b      	uxth	r3, r3
 800831a:	e001      	b.n	8008320 <tcp_process+0x47c>
 800831c:	f241 131c 	movw	r3, #4380	; 0x111c
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008326:	4b53      	ldr	r3, [pc, #332]	; (8008474 <tcp_process+0x5d0>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	f003 0320 	and.w	r3, r3, #32
 800832e:	2b00      	cmp	r3, #0
 8008330:	d037      	beq.n	80083a2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	8b5b      	ldrh	r3, [r3, #26]
 8008336:	f043 0302 	orr.w	r3, r3, #2
 800833a:	b29a      	uxth	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2207      	movs	r2, #7
 8008344:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008346:	e02c      	b.n	80083a2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008348:	4b40      	ldr	r3, [pc, #256]	; (800844c <tcp_process+0x5a8>)
 800834a:	6819      	ldr	r1, [r3, #0]
 800834c:	4b40      	ldr	r3, [pc, #256]	; (8008450 <tcp_process+0x5ac>)
 800834e:	881b      	ldrh	r3, [r3, #0]
 8008350:	461a      	mov	r2, r3
 8008352:	4b40      	ldr	r3, [pc, #256]	; (8008454 <tcp_process+0x5b0>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008358:	4b3f      	ldr	r3, [pc, #252]	; (8008458 <tcp_process+0x5b4>)
 800835a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800835c:	885b      	ldrh	r3, [r3, #2]
 800835e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008360:	4a3d      	ldr	r2, [pc, #244]	; (8008458 <tcp_process+0x5b4>)
 8008362:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008364:	8812      	ldrh	r2, [r2, #0]
 8008366:	b292      	uxth	r2, r2
 8008368:	9202      	str	r2, [sp, #8]
 800836a:	9301      	str	r3, [sp, #4]
 800836c:	4b3b      	ldr	r3, [pc, #236]	; (800845c <tcp_process+0x5b8>)
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	4b3b      	ldr	r3, [pc, #236]	; (8008460 <tcp_process+0x5bc>)
 8008372:	4602      	mov	r2, r0
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f002 fbcf 	bl	800ab18 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800837a:	e167      	b.n	800864c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800837c:	4b32      	ldr	r3, [pc, #200]	; (8008448 <tcp_process+0x5a4>)
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	f003 0302 	and.w	r3, r3, #2
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 8161 	beq.w	800864c <tcp_process+0x7a8>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838e:	1e5a      	subs	r2, r3, #1
 8008390:	4b30      	ldr	r3, [pc, #192]	; (8008454 <tcp_process+0x5b0>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	429a      	cmp	r2, r3
 8008396:	f040 8159 	bne.w	800864c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f002 f9b4 	bl	800a708 <tcp_rexmit>
      break;
 80083a0:	e154      	b.n	800864c <tcp_process+0x7a8>
 80083a2:	e153      	b.n	800864c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fa71 	bl	800888c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80083aa:	4b32      	ldr	r3, [pc, #200]	; (8008474 <tcp_process+0x5d0>)
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	f003 0320 	and.w	r3, r3, #32
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 814c 	beq.w	8008650 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	8b5b      	ldrh	r3, [r3, #26]
 80083bc:	f043 0302 	orr.w	r3, r3, #2
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2207      	movs	r2, #7
 80083ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 80083cc:	e140      	b.n	8008650 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fa5c 	bl	800888c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80083d4:	4b27      	ldr	r3, [pc, #156]	; (8008474 <tcp_process+0x5d0>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	f003 0320 	and.w	r3, r3, #32
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d071      	beq.n	80084c4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80083e0:	4b19      	ldr	r3, [pc, #100]	; (8008448 <tcp_process+0x5a4>)
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	f003 0310 	and.w	r3, r3, #16
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d060      	beq.n	80084ae <tcp_process+0x60a>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083f0:	4b16      	ldr	r3, [pc, #88]	; (800844c <tcp_process+0x5a8>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d15a      	bne.n	80084ae <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d156      	bne.n	80084ae <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	8b5b      	ldrh	r3, [r3, #26]
 8008404:	f043 0302 	orr.w	r3, r3, #2
 8008408:	b29a      	uxth	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7fe fdbe 	bl	8006f90 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008414:	4b18      	ldr	r3, [pc, #96]	; (8008478 <tcp_process+0x5d4>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	429a      	cmp	r2, r3
 800841c:	d105      	bne.n	800842a <tcp_process+0x586>
 800841e:	4b16      	ldr	r3, [pc, #88]	; (8008478 <tcp_process+0x5d4>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	4a14      	ldr	r2, [pc, #80]	; (8008478 <tcp_process+0x5d4>)
 8008426:	6013      	str	r3, [r2, #0]
 8008428:	e02e      	b.n	8008488 <tcp_process+0x5e4>
 800842a:	4b13      	ldr	r3, [pc, #76]	; (8008478 <tcp_process+0x5d4>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	617b      	str	r3, [r7, #20]
 8008430:	e027      	b.n	8008482 <tcp_process+0x5de>
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	429a      	cmp	r2, r3
 800843a:	d11f      	bne.n	800847c <tcp_process+0x5d8>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	68da      	ldr	r2, [r3, #12]
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	60da      	str	r2, [r3, #12]
 8008444:	e020      	b.n	8008488 <tcp_process+0x5e4>
 8008446:	bf00      	nop
 8008448:	200000f8 	.word	0x200000f8
 800844c:	200000f0 	.word	0x200000f0
 8008450:	200000f6 	.word	0x200000f6
 8008454:	200000ec 	.word	0x200000ec
 8008458:	200000dc 	.word	0x200000dc
 800845c:	20003400 	.word	0x20003400
 8008460:	20003404 	.word	0x20003404
 8008464:	08010970 	.word	0x08010970
 8008468:	08010c10 	.word	0x08010c10
 800846c:	080109bc 	.word	0x080109bc
 8008470:	200000f4 	.word	0x200000f4
 8008474:	200000f9 	.word	0x200000f9
 8008478:	20008af4 	.word	0x20008af4
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	617b      	str	r3, [r7, #20]
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1d4      	bne.n	8008432 <tcp_process+0x58e>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	60da      	str	r2, [r3, #12]
 800848e:	4b77      	ldr	r3, [pc, #476]	; (800866c <tcp_process+0x7c8>)
 8008490:	2201      	movs	r2, #1
 8008492:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	220a      	movs	r2, #10
 8008498:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800849a:	4b75      	ldr	r3, [pc, #468]	; (8008670 <tcp_process+0x7cc>)
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	60da      	str	r2, [r3, #12]
 80084a2:	4a73      	ldr	r2, [pc, #460]	; (8008670 <tcp_process+0x7cc>)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6013      	str	r3, [r2, #0]
 80084a8:	f002 fcf8 	bl	800ae9c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80084ac:	e0d2      	b.n	8008654 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	8b5b      	ldrh	r3, [r3, #26]
 80084b2:	f043 0302 	orr.w	r3, r3, #2
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2208      	movs	r2, #8
 80084c0:	751a      	strb	r2, [r3, #20]
      break;
 80084c2:	e0c7      	b.n	8008654 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80084c4:	4b6b      	ldr	r3, [pc, #428]	; (8008674 <tcp_process+0x7d0>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	f003 0310 	and.w	r3, r3, #16
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 80c1 	beq.w	8008654 <tcp_process+0x7b0>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084d6:	4b68      	ldr	r3, [pc, #416]	; (8008678 <tcp_process+0x7d4>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	429a      	cmp	r2, r3
 80084dc:	f040 80ba 	bne.w	8008654 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f040 80b5 	bne.w	8008654 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2206      	movs	r2, #6
 80084ee:	751a      	strb	r2, [r3, #20]
      break;
 80084f0:	e0b0      	b.n	8008654 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f9ca 	bl	800888c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80084f8:	4b60      	ldr	r3, [pc, #384]	; (800867c <tcp_process+0x7d8>)
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	f003 0320 	and.w	r3, r3, #32
 8008500:	2b00      	cmp	r3, #0
 8008502:	f000 80a9 	beq.w	8008658 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	8b5b      	ldrh	r3, [r3, #26]
 800850a:	f043 0302 	orr.w	r3, r3, #2
 800850e:	b29a      	uxth	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7fe fd3b 	bl	8006f90 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800851a:	4b59      	ldr	r3, [pc, #356]	; (8008680 <tcp_process+0x7dc>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	429a      	cmp	r2, r3
 8008522:	d105      	bne.n	8008530 <tcp_process+0x68c>
 8008524:	4b56      	ldr	r3, [pc, #344]	; (8008680 <tcp_process+0x7dc>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	4a55      	ldr	r2, [pc, #340]	; (8008680 <tcp_process+0x7dc>)
 800852c:	6013      	str	r3, [r2, #0]
 800852e:	e013      	b.n	8008558 <tcp_process+0x6b4>
 8008530:	4b53      	ldr	r3, [pc, #332]	; (8008680 <tcp_process+0x7dc>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	613b      	str	r3, [r7, #16]
 8008536:	e00c      	b.n	8008552 <tcp_process+0x6ae>
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	429a      	cmp	r2, r3
 8008540:	d104      	bne.n	800854c <tcp_process+0x6a8>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68da      	ldr	r2, [r3, #12]
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	60da      	str	r2, [r3, #12]
 800854a:	e005      	b.n	8008558 <tcp_process+0x6b4>
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	613b      	str	r3, [r7, #16]
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1ef      	bne.n	8008538 <tcp_process+0x694>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	60da      	str	r2, [r3, #12]
 800855e:	4b43      	ldr	r3, [pc, #268]	; (800866c <tcp_process+0x7c8>)
 8008560:	2201      	movs	r2, #1
 8008562:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	220a      	movs	r2, #10
 8008568:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800856a:	4b41      	ldr	r3, [pc, #260]	; (8008670 <tcp_process+0x7cc>)
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	60da      	str	r2, [r3, #12]
 8008572:	4a3f      	ldr	r2, [pc, #252]	; (8008670 <tcp_process+0x7cc>)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6013      	str	r3, [r2, #0]
 8008578:	f002 fc90 	bl	800ae9c <tcp_timer_needed>
      }
      break;
 800857c:	e06c      	b.n	8008658 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f984 	bl	800888c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008584:	4b3b      	ldr	r3, [pc, #236]	; (8008674 <tcp_process+0x7d0>)
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	f003 0310 	and.w	r3, r3, #16
 800858c:	2b00      	cmp	r3, #0
 800858e:	d065      	beq.n	800865c <tcp_process+0x7b8>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008594:	4b38      	ldr	r3, [pc, #224]	; (8008678 <tcp_process+0x7d4>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	429a      	cmp	r2, r3
 800859a:	d15f      	bne.n	800865c <tcp_process+0x7b8>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d15b      	bne.n	800865c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7fe fcf3 	bl	8006f90 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80085aa:	4b35      	ldr	r3, [pc, #212]	; (8008680 <tcp_process+0x7dc>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d105      	bne.n	80085c0 <tcp_process+0x71c>
 80085b4:	4b32      	ldr	r3, [pc, #200]	; (8008680 <tcp_process+0x7dc>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	4a31      	ldr	r2, [pc, #196]	; (8008680 <tcp_process+0x7dc>)
 80085bc:	6013      	str	r3, [r2, #0]
 80085be:	e013      	b.n	80085e8 <tcp_process+0x744>
 80085c0:	4b2f      	ldr	r3, [pc, #188]	; (8008680 <tcp_process+0x7dc>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	60fb      	str	r3, [r7, #12]
 80085c6:	e00c      	b.n	80085e2 <tcp_process+0x73e>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d104      	bne.n	80085dc <tcp_process+0x738>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	68da      	ldr	r2, [r3, #12]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	60da      	str	r2, [r3, #12]
 80085da:	e005      	b.n	80085e8 <tcp_process+0x744>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	60fb      	str	r3, [r7, #12]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1ef      	bne.n	80085c8 <tcp_process+0x724>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	60da      	str	r2, [r3, #12]
 80085ee:	4b1f      	ldr	r3, [pc, #124]	; (800866c <tcp_process+0x7c8>)
 80085f0:	2201      	movs	r2, #1
 80085f2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	220a      	movs	r2, #10
 80085f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80085fa:	4b1d      	ldr	r3, [pc, #116]	; (8008670 <tcp_process+0x7cc>)
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	60da      	str	r2, [r3, #12]
 8008602:	4a1b      	ldr	r2, [pc, #108]	; (8008670 <tcp_process+0x7cc>)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	f002 fc48 	bl	800ae9c <tcp_timer_needed>
      }
      break;
 800860c:	e026      	b.n	800865c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f93c 	bl	800888c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008614:	4b17      	ldr	r3, [pc, #92]	; (8008674 <tcp_process+0x7d0>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	f003 0310 	and.w	r3, r3, #16
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01f      	beq.n	8008660 <tcp_process+0x7bc>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008624:	4b14      	ldr	r3, [pc, #80]	; (8008678 <tcp_process+0x7d4>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	429a      	cmp	r2, r3
 800862a:	d119      	bne.n	8008660 <tcp_process+0x7bc>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008630:	2b00      	cmp	r3, #0
 8008632:	d115      	bne.n	8008660 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008634:	4b11      	ldr	r3, [pc, #68]	; (800867c <tcp_process+0x7d8>)
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	f043 0310 	orr.w	r3, r3, #16
 800863c:	b2da      	uxtb	r2, r3
 800863e:	4b0f      	ldr	r3, [pc, #60]	; (800867c <tcp_process+0x7d8>)
 8008640:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008642:	e00d      	b.n	8008660 <tcp_process+0x7bc>
    default:
      break;
 8008644:	bf00      	nop
 8008646:	e00c      	b.n	8008662 <tcp_process+0x7be>
      break;
 8008648:	bf00      	nop
 800864a:	e00a      	b.n	8008662 <tcp_process+0x7be>
      break;
 800864c:	bf00      	nop
 800864e:	e008      	b.n	8008662 <tcp_process+0x7be>
      break;
 8008650:	bf00      	nop
 8008652:	e006      	b.n	8008662 <tcp_process+0x7be>
      break;
 8008654:	bf00      	nop
 8008656:	e004      	b.n	8008662 <tcp_process+0x7be>
      break;
 8008658:	bf00      	nop
 800865a:	e002      	b.n	8008662 <tcp_process+0x7be>
      break;
 800865c:	bf00      	nop
 800865e:	e000      	b.n	8008662 <tcp_process+0x7be>
      break;
 8008660:	bf00      	nop
  }
  return ERR_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3724      	adds	r7, #36	; 0x24
 8008668:	46bd      	mov	sp, r7
 800866a:	bd90      	pop	{r4, r7, pc}
 800866c:	20008af0 	.word	0x20008af0
 8008670:	20008b04 	.word	0x20008b04
 8008674:	200000f8 	.word	0x200000f8
 8008678:	200000f0 	.word	0x200000f0
 800867c:	200000f9 	.word	0x200000f9
 8008680:	20008af4 	.word	0x20008af4

08008684 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008684:	b590      	push	{r4, r7, lr}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d106      	bne.n	80086a2 <tcp_oos_insert_segment+0x1e>
 8008694:	4b3b      	ldr	r3, [pc, #236]	; (8008784 <tcp_oos_insert_segment+0x100>)
 8008696:	f240 421f 	movw	r2, #1055	; 0x41f
 800869a:	493b      	ldr	r1, [pc, #236]	; (8008788 <tcp_oos_insert_segment+0x104>)
 800869c:	483b      	ldr	r0, [pc, #236]	; (800878c <tcp_oos_insert_segment+0x108>)
 800869e:	f005 fe6f 	bl	800e380 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	899b      	ldrh	r3, [r3, #12]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fb fcba 	bl	8004024 <lwip_htons>
 80086b0:	4603      	mov	r3, r0
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	f003 0301 	and.w	r3, r3, #1
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d028      	beq.n	800870e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80086bc:	6838      	ldr	r0, [r7, #0]
 80086be:	f7fe fa65 	bl	8006b8c <tcp_segs_free>
    next = NULL;
 80086c2:	2300      	movs	r3, #0
 80086c4:	603b      	str	r3, [r7, #0]
 80086c6:	e056      	b.n	8008776 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	899b      	ldrh	r3, [r3, #12]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fb fca7 	bl	8004024 <lwip_htons>
 80086d6:	4603      	mov	r3, r0
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00d      	beq.n	80086fe <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	899b      	ldrh	r3, [r3, #12]
 80086e8:	b29c      	uxth	r4, r3
 80086ea:	2001      	movs	r0, #1
 80086ec:	f7fb fc9a 	bl	8004024 <lwip_htons>
 80086f0:	4603      	mov	r3, r0
 80086f2:	461a      	mov	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	4322      	orrs	r2, r4
 80086fa:	b292      	uxth	r2, r2
 80086fc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f7fe fa54 	bl	8006bb6 <tcp_seg_free>
    while (next &&
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00e      	beq.n	8008732 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	891b      	ldrh	r3, [r3, #8]
 8008718:	461a      	mov	r2, r3
 800871a:	4b1d      	ldr	r3, [pc, #116]	; (8008790 <tcp_oos_insert_segment+0x10c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	441a      	add	r2, r3
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	6839      	ldr	r1, [r7, #0]
 8008728:	8909      	ldrh	r1, [r1, #8]
 800872a:	440b      	add	r3, r1
 800872c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800872e:	2b00      	cmp	r3, #0
 8008730:	daca      	bge.n	80086c8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d01e      	beq.n	8008776 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	891b      	ldrh	r3, [r3, #8]
 800873c:	461a      	mov	r2, r3
 800873e:	4b14      	ldr	r3, [pc, #80]	; (8008790 <tcp_oos_insert_segment+0x10c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	441a      	add	r2, r3
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800874c:	2b00      	cmp	r3, #0
 800874e:	dd12      	ble.n	8008776 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	b29a      	uxth	r2, r3
 8008758:	4b0d      	ldr	r3, [pc, #52]	; (8008790 <tcp_oos_insert_segment+0x10c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	b29b      	uxth	r3, r3
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	b29a      	uxth	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	685a      	ldr	r2, [r3, #4]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	891b      	ldrh	r3, [r3, #8]
 800876e:	4619      	mov	r1, r3
 8008770:	4610      	mov	r0, r2
 8008772:	f7fc fd85 	bl	8005280 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	601a      	str	r2, [r3, #0]
}
 800877c:	bf00      	nop
 800877e:	3714      	adds	r7, #20
 8008780:	46bd      	mov	sp, r7
 8008782:	bd90      	pop	{r4, r7, pc}
 8008784:	08010970 	.word	0x08010970
 8008788:	08010c30 	.word	0x08010c30
 800878c:	080109bc 	.word	0x080109bc
 8008790:	200000ec 	.word	0x200000ec

08008794 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008794:	b5b0      	push	{r4, r5, r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80087a2:	e03e      	b.n	8008822 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fc ff72 	bl	800569c <pbuf_clen>
 80087b8:	4603      	mov	r3, r0
 80087ba:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80087c2:	8a7a      	ldrh	r2, [r7, #18]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d906      	bls.n	80087d6 <tcp_free_acked_segments+0x42>
 80087c8:	4b2a      	ldr	r3, [pc, #168]	; (8008874 <tcp_free_acked_segments+0xe0>)
 80087ca:	f240 4257 	movw	r2, #1111	; 0x457
 80087ce:	492a      	ldr	r1, [pc, #168]	; (8008878 <tcp_free_acked_segments+0xe4>)
 80087d0:	482a      	ldr	r0, [pc, #168]	; (800887c <tcp_free_acked_segments+0xe8>)
 80087d2:	f005 fdd5 	bl	800e380 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80087dc:	8a7b      	ldrh	r3, [r7, #18]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	891a      	ldrh	r2, [r3, #8]
 80087ec:	4b24      	ldr	r3, [pc, #144]	; (8008880 <tcp_free_acked_segments+0xec>)
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	4413      	add	r3, r2
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	4b22      	ldr	r3, [pc, #136]	; (8008880 <tcp_free_acked_segments+0xec>)
 80087f6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80087f8:	6978      	ldr	r0, [r7, #20]
 80087fa:	f7fe f9dc 	bl	8006bb6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00c      	beq.n	8008822 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d109      	bne.n	8008822 <tcp_free_acked_segments+0x8e>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d106      	bne.n	8008822 <tcp_free_acked_segments+0x8e>
 8008814:	4b17      	ldr	r3, [pc, #92]	; (8008874 <tcp_free_acked_segments+0xe0>)
 8008816:	f240 4261 	movw	r2, #1121	; 0x461
 800881a:	491a      	ldr	r1, [pc, #104]	; (8008884 <tcp_free_acked_segments+0xf0>)
 800881c:	4817      	ldr	r0, [pc, #92]	; (800887c <tcp_free_acked_segments+0xe8>)
 800881e:	f005 fdaf 	bl	800e380 <iprintf>
  while (seg_list != NULL &&
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d020      	beq.n	800886a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	4618      	mov	r0, r3
 8008830:	f7fb fc0d 	bl	800404e <lwip_htonl>
 8008834:	4604      	mov	r4, r0
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	891b      	ldrh	r3, [r3, #8]
 800883a:	461d      	mov	r5, r3
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	899b      	ldrh	r3, [r3, #12]
 8008842:	b29b      	uxth	r3, r3
 8008844:	4618      	mov	r0, r3
 8008846:	f7fb fbed 	bl	8004024 <lwip_htons>
 800884a:	4603      	mov	r3, r0
 800884c:	b2db      	uxtb	r3, r3
 800884e:	f003 0303 	and.w	r3, r3, #3
 8008852:	2b00      	cmp	r3, #0
 8008854:	d001      	beq.n	800885a <tcp_free_acked_segments+0xc6>
 8008856:	2301      	movs	r3, #1
 8008858:	e000      	b.n	800885c <tcp_free_acked_segments+0xc8>
 800885a:	2300      	movs	r3, #0
 800885c:	442b      	add	r3, r5
 800885e:	18e2      	adds	r2, r4, r3
 8008860:	4b09      	ldr	r3, [pc, #36]	; (8008888 <tcp_free_acked_segments+0xf4>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008866:	2b00      	cmp	r3, #0
 8008868:	dd9c      	ble.n	80087a4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800886a:	68bb      	ldr	r3, [r7, #8]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3718      	adds	r7, #24
 8008870:	46bd      	mov	sp, r7
 8008872:	bdb0      	pop	{r4, r5, r7, pc}
 8008874:	08010970 	.word	0x08010970
 8008878:	08010c58 	.word	0x08010c58
 800887c:	080109bc 	.word	0x080109bc
 8008880:	200000f4 	.word	0x200000f4
 8008884:	08010c80 	.word	0x08010c80
 8008888:	200000f0 	.word	0x200000f0

0800888c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800888c:	b5b0      	push	{r4, r5, r7, lr}
 800888e:	b094      	sub	sp, #80	; 0x50
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d106      	bne.n	80088ac <tcp_receive+0x20>
 800889e:	4ba6      	ldr	r3, [pc, #664]	; (8008b38 <tcp_receive+0x2ac>)
 80088a0:	f240 427b 	movw	r2, #1147	; 0x47b
 80088a4:	49a5      	ldr	r1, [pc, #660]	; (8008b3c <tcp_receive+0x2b0>)
 80088a6:	48a6      	ldr	r0, [pc, #664]	; (8008b40 <tcp_receive+0x2b4>)
 80088a8:	f005 fd6a 	bl	800e380 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	7d1b      	ldrb	r3, [r3, #20]
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	d806      	bhi.n	80088c2 <tcp_receive+0x36>
 80088b4:	4ba0      	ldr	r3, [pc, #640]	; (8008b38 <tcp_receive+0x2ac>)
 80088b6:	f240 427c 	movw	r2, #1148	; 0x47c
 80088ba:	49a2      	ldr	r1, [pc, #648]	; (8008b44 <tcp_receive+0x2b8>)
 80088bc:	48a0      	ldr	r0, [pc, #640]	; (8008b40 <tcp_receive+0x2b4>)
 80088be:	f005 fd5f 	bl	800e380 <iprintf>

  if (flags & TCP_ACK) {
 80088c2:	4ba1      	ldr	r3, [pc, #644]	; (8008b48 <tcp_receive+0x2bc>)
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	f003 0310 	and.w	r3, r3, #16
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 8263 	beq.w	8008d96 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80088d6:	461a      	mov	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088dc:	4413      	add	r3, r2
 80088de:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088e4:	4b99      	ldr	r3, [pc, #612]	; (8008b4c <tcp_receive+0x2c0>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	db1b      	blt.n	8008926 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088f2:	4b96      	ldr	r3, [pc, #600]	; (8008b4c <tcp_receive+0x2c0>)
 80088f4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d106      	bne.n	8008908 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80088fe:	4b94      	ldr	r3, [pc, #592]	; (8008b50 <tcp_receive+0x2c4>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	2b00      	cmp	r3, #0
 8008906:	db0e      	blt.n	8008926 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800890c:	4b90      	ldr	r3, [pc, #576]	; (8008b50 <tcp_receive+0x2c4>)
 800890e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008910:	429a      	cmp	r2, r3
 8008912:	d125      	bne.n	8008960 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008914:	4b8f      	ldr	r3, [pc, #572]	; (8008b54 <tcp_receive+0x2c8>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	89db      	ldrh	r3, [r3, #14]
 800891a:	b29a      	uxth	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008922:	429a      	cmp	r2, r3
 8008924:	d91c      	bls.n	8008960 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008926:	4b8b      	ldr	r3, [pc, #556]	; (8008b54 <tcp_receive+0x2c8>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	89db      	ldrh	r3, [r3, #14]
 800892c:	b29a      	uxth	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008940:	429a      	cmp	r2, r3
 8008942:	d205      	bcs.n	8008950 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008950:	4b7e      	ldr	r3, [pc, #504]	; (8008b4c <tcp_receive+0x2c0>)
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008958:	4b7d      	ldr	r3, [pc, #500]	; (8008b50 <tcp_receive+0x2c4>)
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008960:	4b7b      	ldr	r3, [pc, #492]	; (8008b50 <tcp_receive+0x2c4>)
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	dc58      	bgt.n	8008a20 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800896e:	4b7a      	ldr	r3, [pc, #488]	; (8008b58 <tcp_receive+0x2cc>)
 8008970:	881b      	ldrh	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d14b      	bne.n	8008a0e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008980:	4413      	add	r3, r2
 8008982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008984:	429a      	cmp	r2, r3
 8008986:	d142      	bne.n	8008a0e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800898e:	2b00      	cmp	r3, #0
 8008990:	db3d      	blt.n	8008a0e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008996:	4b6e      	ldr	r3, [pc, #440]	; (8008b50 <tcp_receive+0x2c4>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	429a      	cmp	r2, r3
 800899c:	d137      	bne.n	8008a0e <tcp_receive+0x182>
              found_dupack = 1;
 800899e:	2301      	movs	r3, #1
 80089a0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80089a8:	2bff      	cmp	r3, #255	; 0xff
 80089aa:	d007      	beq.n	80089bc <tcp_receive+0x130>
                ++pcb->dupacks;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80089b2:	3301      	adds	r3, #1
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d91b      	bls.n	80089fe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089d0:	4413      	add	r3, r2
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80089da:	429a      	cmp	r2, r3
 80089dc:	d30a      	bcc.n	80089f4 <tcp_receive+0x168>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089e8:	4413      	add	r3, r2
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80089f2:	e004      	b.n	80089fe <tcp_receive+0x172>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d902      	bls.n	8008a0e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 fee9 	bl	800a7e0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f040 8160 	bne.w	8008cd6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a1e:	e15a      	b.n	8008cd6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008a20:	4b4b      	ldr	r3, [pc, #300]	; (8008b50 <tcp_receive+0x2c4>)
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f2c0 814d 	blt.w	8008ccc <tcp_receive+0x440>
 8008a32:	4b47      	ldr	r3, [pc, #284]	; (8008b50 <tcp_receive+0x2c4>)
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f300 8145 	bgt.w	8008ccc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	8b5b      	ldrh	r3, [r3, #26]
 8008a46:	f003 0304 	and.w	r3, r3, #4
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d010      	beq.n	8008a70 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	8b5b      	ldrh	r3, [r3, #26]
 8008a52:	f023 0304 	bic.w	r3, r3, #4
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008a7e:	10db      	asrs	r3, r3, #3
 8008a80:	b21b      	sxth	r3, r3
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	4413      	add	r3, r2
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	b21a      	sxth	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008a98:	4b2d      	ldr	r3, [pc, #180]	; (8008b50 <tcp_receive+0x2c4>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008ab0:	4b27      	ldr	r3, [pc, #156]	; (8008b50 <tcp_receive+0x2c4>)
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	7d1b      	ldrb	r3, [r3, #20]
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	f240 8096 	bls.w	8008bee <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d244      	bcs.n	8008b5c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	8b5b      	ldrh	r3, [r3, #26]
 8008ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <tcp_receive+0x256>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e000      	b.n	8008ae4 <tcp_receive+0x258>
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008ae8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008af2:	fb12 f303 	smulbb	r3, r2, r3
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008afa:	4293      	cmp	r3, r2
 8008afc:	bf28      	it	cs
 8008afe:	4613      	movcs	r3, r2
 8008b00:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008b08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008b0a:	4413      	add	r3, r2
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d309      	bcc.n	8008b2c <tcp_receive+0x2a0>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008b1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008b20:	4413      	add	r3, r2
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008b2a:	e060      	b.n	8008bee <tcp_receive+0x362>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008b36:	e05a      	b.n	8008bee <tcp_receive+0x362>
 8008b38:	08010970 	.word	0x08010970
 8008b3c:	08010ca0 	.word	0x08010ca0
 8008b40:	080109bc 	.word	0x080109bc
 8008b44:	08010cbc 	.word	0x08010cbc
 8008b48:	200000f8 	.word	0x200000f8
 8008b4c:	200000ec 	.word	0x200000ec
 8008b50:	200000f0 	.word	0x200000f0
 8008b54:	200000dc 	.word	0x200000dc
 8008b58:	200000f6 	.word	0x200000f6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008b62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008b64:	4413      	add	r3, r2
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d309      	bcc.n	8008b86 <tcp_receive+0x2fa>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008b78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008b7a:	4413      	add	r3, r2
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008b84:	e004      	b.n	8008b90 <tcp_receive+0x304>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d326      	bcc.n	8008bee <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bc0:	4413      	add	r3, r2
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d30a      	bcc.n	8008be4 <tcp_receive+0x358>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bd8:	4413      	add	r3, r2
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008be2:	e004      	b.n	8008bee <tcp_receive+0x362>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bf6:	4a98      	ldr	r2, [pc, #608]	; (8008e58 <tcp_receive+0x5cc>)
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f7ff fdcb 	bl	8008794 <tcp_free_acked_segments>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c0c:	4a93      	ldr	r2, [pc, #588]	; (8008e5c <tcp_receive+0x5d0>)
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7ff fdc0 	bl	8008794 <tcp_free_acked_segments>
 8008c14:	4602      	mov	r2, r0
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d104      	bne.n	8008c2c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c28:	861a      	strh	r2, [r3, #48]	; 0x30
 8008c2a:	e002      	b.n	8008c32 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d103      	bne.n	8008c48 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8008c4e:	4b84      	ldr	r3, [pc, #528]	; (8008e60 <tcp_receive+0x5d4>)
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	4413      	add	r3, r2
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	8b5b      	ldrh	r3, [r3, #26]
 8008c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d035      	beq.n	8008cd4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d118      	bne.n	8008ca2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00c      	beq.n	8008c92 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fb f9e2 	bl	800404e <lwip_htonl>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	dc20      	bgt.n	8008cd4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	8b5b      	ldrh	r3, [r3, #26]
 8008c96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008ca0:	e018      	b.n	8008cd4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fb f9cd 	bl	800404e <lwip_htonl>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	1ae3      	subs	r3, r4, r3
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	dc0b      	bgt.n	8008cd4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	8b5b      	ldrh	r3, [r3, #26]
 8008cc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008cc4:	b29a      	uxth	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008cca:	e003      	b.n	8008cd4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f001 ff75 	bl	800abbc <tcp_send_empty_ack>
 8008cd2:	e000      	b.n	8008cd6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008cd4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d05b      	beq.n	8008d96 <tcp_receive+0x50a>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ce2:	4b60      	ldr	r3, [pc, #384]	; (8008e64 <tcp_receive+0x5d8>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	1ad3      	subs	r3, r2, r3
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	da54      	bge.n	8008d96 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008cec:	4b5e      	ldr	r3, [pc, #376]	; (8008e68 <tcp_receive+0x5dc>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008d00:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008d0a:	10db      	asrs	r3, r3, #3
 8008d0c:	b21b      	sxth	r3, r3
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008d24:	4413      	add	r3, r2
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	b21a      	sxth	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008d2e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	da05      	bge.n	8008d42 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8008d36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008d3a:	425b      	negs	r3, r3
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008d42:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008d4c:	109b      	asrs	r3, r3, #2
 8008d4e:	b21b      	sxth	r3, r3
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008d66:	4413      	add	r3, r2
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	b21a      	sxth	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008d76:	10db      	asrs	r3, r3, #3
 8008d78:	b21b      	sxth	r3, r3
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	4413      	add	r3, r2
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	b21a      	sxth	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008d96:	4b35      	ldr	r3, [pc, #212]	; (8008e6c <tcp_receive+0x5e0>)
 8008d98:	881b      	ldrh	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 84e1 	beq.w	8009762 <tcp_receive+0xed6>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	7d1b      	ldrb	r3, [r3, #20]
 8008da4:	2b06      	cmp	r3, #6
 8008da6:	f200 84dc 	bhi.w	8009762 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008dae:	4b30      	ldr	r3, [pc, #192]	; (8008e70 <tcp_receive+0x5e4>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	3b01      	subs	r3, #1
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f2c0 808e 	blt.w	8008ed8 <tcp_receive+0x64c>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008dc0:	4b2a      	ldr	r3, [pc, #168]	; (8008e6c <tcp_receive+0x5e0>)
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4b2a      	ldr	r3, [pc, #168]	; (8008e70 <tcp_receive+0x5e4>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	440b      	add	r3, r1
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	3301      	adds	r3, #1
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f300 8081 	bgt.w	8008ed8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008dd6:	4b27      	ldr	r3, [pc, #156]	; (8008e74 <tcp_receive+0x5e8>)
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008de0:	4b23      	ldr	r3, [pc, #140]	; (8008e70 <tcp_receive+0x5e4>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008de8:	4b22      	ldr	r3, [pc, #136]	; (8008e74 <tcp_receive+0x5e8>)
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d106      	bne.n	8008dfe <tcp_receive+0x572>
 8008df0:	4b21      	ldr	r3, [pc, #132]	; (8008e78 <tcp_receive+0x5ec>)
 8008df2:	f240 5294 	movw	r2, #1428	; 0x594
 8008df6:	4921      	ldr	r1, [pc, #132]	; (8008e7c <tcp_receive+0x5f0>)
 8008df8:	4821      	ldr	r0, [pc, #132]	; (8008e80 <tcp_receive+0x5f4>)
 8008dfa:	f005 fac1 	bl	800e380 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d906      	bls.n	8008e16 <tcp_receive+0x58a>
 8008e08:	4b1b      	ldr	r3, [pc, #108]	; (8008e78 <tcp_receive+0x5ec>)
 8008e0a:	f240 5295 	movw	r2, #1429	; 0x595
 8008e0e:	491d      	ldr	r1, [pc, #116]	; (8008e84 <tcp_receive+0x5f8>)
 8008e10:	481b      	ldr	r0, [pc, #108]	; (8008e80 <tcp_receive+0x5f4>)
 8008e12:	f005 fab5 	bl	800e380 <iprintf>
      off = (u16_t)off32;
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008e1c:	4b15      	ldr	r3, [pc, #84]	; (8008e74 <tcp_receive+0x5e8>)
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	891b      	ldrh	r3, [r3, #8]
 8008e22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d906      	bls.n	8008e38 <tcp_receive+0x5ac>
 8008e2a:	4b13      	ldr	r3, [pc, #76]	; (8008e78 <tcp_receive+0x5ec>)
 8008e2c:	f240 5297 	movw	r2, #1431	; 0x597
 8008e30:	4915      	ldr	r1, [pc, #84]	; (8008e88 <tcp_receive+0x5fc>)
 8008e32:	4813      	ldr	r0, [pc, #76]	; (8008e80 <tcp_receive+0x5f4>)
 8008e34:	f005 faa4 	bl	800e380 <iprintf>
      inseg.len -= off;
 8008e38:	4b0e      	ldr	r3, [pc, #56]	; (8008e74 <tcp_receive+0x5e8>)
 8008e3a:	891a      	ldrh	r2, [r3, #8]
 8008e3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	4b0b      	ldr	r3, [pc, #44]	; (8008e74 <tcp_receive+0x5e8>)
 8008e46:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008e48:	4b0a      	ldr	r3, [pc, #40]	; (8008e74 <tcp_receive+0x5e8>)
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	891a      	ldrh	r2, [r3, #8]
 8008e4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008e52:	1ad3      	subs	r3, r2, r3
 8008e54:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8008e56:	e029      	b.n	8008eac <tcp_receive+0x620>
 8008e58:	08010cd8 	.word	0x08010cd8
 8008e5c:	08010ce0 	.word	0x08010ce0
 8008e60:	200000f4 	.word	0x200000f4
 8008e64:	200000f0 	.word	0x200000f0
 8008e68:	20008af8 	.word	0x20008af8
 8008e6c:	200000f6 	.word	0x200000f6
 8008e70:	200000ec 	.word	0x200000ec
 8008e74:	200000cc 	.word	0x200000cc
 8008e78:	08010970 	.word	0x08010970
 8008e7c:	08010ce8 	.word	0x08010ce8
 8008e80:	080109bc 	.word	0x080109bc
 8008e84:	08010cf8 	.word	0x08010cf8
 8008e88:	08010d08 	.word	0x08010d08
        off -= p->len;
 8008e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e8e:	895b      	ldrh	r3, [r3, #10]
 8008e90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e9c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008e9e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eae:	895b      	ldrh	r3, [r3, #10]
 8008eb0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d8e9      	bhi.n	8008e8c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008eb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008ec0:	f7fc fade 	bl	8005480 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	4a91      	ldr	r2, [pc, #580]	; (8009110 <tcp_receive+0x884>)
 8008eca:	6013      	str	r3, [r2, #0]
 8008ecc:	4b91      	ldr	r3, [pc, #580]	; (8009114 <tcp_receive+0x888>)
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	4a8f      	ldr	r2, [pc, #572]	; (8009110 <tcp_receive+0x884>)
 8008ed2:	6812      	ldr	r2, [r2, #0]
 8008ed4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008ed6:	e00d      	b.n	8008ef4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008ed8:	4b8d      	ldr	r3, [pc, #564]	; (8009110 <tcp_receive+0x884>)
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	da06      	bge.n	8008ef4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	8b5b      	ldrh	r3, [r3, #26]
 8008eea:	f043 0302 	orr.w	r3, r3, #2
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008ef4:	4b86      	ldr	r3, [pc, #536]	; (8009110 <tcp_receive+0x884>)
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f2c0 842a 	blt.w	8009758 <tcp_receive+0xecc>
 8008f04:	4b82      	ldr	r3, [pc, #520]	; (8009110 <tcp_receive+0x884>)
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0c:	6879      	ldr	r1, [r7, #4]
 8008f0e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008f10:	440b      	add	r3, r1
 8008f12:	1ad3      	subs	r3, r2, r3
 8008f14:	3301      	adds	r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f300 841e 	bgt.w	8009758 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f20:	4b7b      	ldr	r3, [pc, #492]	; (8009110 <tcp_receive+0x884>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	f040 829a 	bne.w	800945e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008f2a:	4b7a      	ldr	r3, [pc, #488]	; (8009114 <tcp_receive+0x888>)
 8008f2c:	891c      	ldrh	r4, [r3, #8]
 8008f2e:	4b79      	ldr	r3, [pc, #484]	; (8009114 <tcp_receive+0x888>)
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	899b      	ldrh	r3, [r3, #12]
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fb f874 	bl	8004024 <lwip_htons>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	f003 0303 	and.w	r3, r3, #3
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <tcp_receive+0x6c0>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e000      	b.n	8008f4e <tcp_receive+0x6c2>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	4423      	add	r3, r4
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	4b71      	ldr	r3, [pc, #452]	; (8009118 <tcp_receive+0x88c>)
 8008f54:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008f5a:	4b6f      	ldr	r3, [pc, #444]	; (8009118 <tcp_receive+0x88c>)
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d275      	bcs.n	800904e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008f62:	4b6c      	ldr	r3, [pc, #432]	; (8009114 <tcp_receive+0x888>)
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	899b      	ldrh	r3, [r3, #12]
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fb f85a 	bl	8004024 <lwip_htons>
 8008f70:	4603      	mov	r3, r0
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	f003 0301 	and.w	r3, r3, #1
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d01f      	beq.n	8008fbc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008f7c:	4b65      	ldr	r3, [pc, #404]	; (8009114 <tcp_receive+0x888>)
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	899b      	ldrh	r3, [r3, #12]
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	b21b      	sxth	r3, r3
 8008f86:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008f8a:	b21c      	sxth	r4, r3
 8008f8c:	4b61      	ldr	r3, [pc, #388]	; (8009114 <tcp_receive+0x888>)
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	899b      	ldrh	r3, [r3, #12]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fb f845 	bl	8004024 <lwip_htons>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fb f83c 	bl	8004024 <lwip_htons>
 8008fac:	4603      	mov	r3, r0
 8008fae:	b21b      	sxth	r3, r3
 8008fb0:	4323      	orrs	r3, r4
 8008fb2:	b21a      	sxth	r2, r3
 8008fb4:	4b57      	ldr	r3, [pc, #348]	; (8009114 <tcp_receive+0x888>)
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	b292      	uxth	r2, r2
 8008fba:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008fc0:	4b54      	ldr	r3, [pc, #336]	; (8009114 <tcp_receive+0x888>)
 8008fc2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008fc4:	4b53      	ldr	r3, [pc, #332]	; (8009114 <tcp_receive+0x888>)
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	899b      	ldrh	r3, [r3, #12]
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fb f829 	bl	8004024 <lwip_htons>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	f003 0302 	and.w	r3, r3, #2
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d005      	beq.n	8008fea <tcp_receive+0x75e>
            inseg.len -= 1;
 8008fde:	4b4d      	ldr	r3, [pc, #308]	; (8009114 <tcp_receive+0x888>)
 8008fe0:	891b      	ldrh	r3, [r3, #8]
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	4b4b      	ldr	r3, [pc, #300]	; (8009114 <tcp_receive+0x888>)
 8008fe8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008fea:	4b4a      	ldr	r3, [pc, #296]	; (8009114 <tcp_receive+0x888>)
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	4a49      	ldr	r2, [pc, #292]	; (8009114 <tcp_receive+0x888>)
 8008ff0:	8912      	ldrh	r2, [r2, #8]
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fc f943 	bl	8005280 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008ffa:	4b46      	ldr	r3, [pc, #280]	; (8009114 <tcp_receive+0x888>)
 8008ffc:	891c      	ldrh	r4, [r3, #8]
 8008ffe:	4b45      	ldr	r3, [pc, #276]	; (8009114 <tcp_receive+0x888>)
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	899b      	ldrh	r3, [r3, #12]
 8009004:	b29b      	uxth	r3, r3
 8009006:	4618      	mov	r0, r3
 8009008:	f7fb f80c 	bl	8004024 <lwip_htons>
 800900c:	4603      	mov	r3, r0
 800900e:	b2db      	uxtb	r3, r3
 8009010:	f003 0303 	and.w	r3, r3, #3
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <tcp_receive+0x790>
 8009018:	2301      	movs	r3, #1
 800901a:	e000      	b.n	800901e <tcp_receive+0x792>
 800901c:	2300      	movs	r3, #0
 800901e:	4423      	add	r3, r4
 8009020:	b29a      	uxth	r2, r3
 8009022:	4b3d      	ldr	r3, [pc, #244]	; (8009118 <tcp_receive+0x88c>)
 8009024:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009026:	4b3c      	ldr	r3, [pc, #240]	; (8009118 <tcp_receive+0x88c>)
 8009028:	881b      	ldrh	r3, [r3, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	4b38      	ldr	r3, [pc, #224]	; (8009110 <tcp_receive+0x884>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	441a      	add	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	6879      	ldr	r1, [r7, #4]
 8009038:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800903a:	440b      	add	r3, r1
 800903c:	429a      	cmp	r2, r3
 800903e:	d006      	beq.n	800904e <tcp_receive+0x7c2>
 8009040:	4b36      	ldr	r3, [pc, #216]	; (800911c <tcp_receive+0x890>)
 8009042:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009046:	4936      	ldr	r1, [pc, #216]	; (8009120 <tcp_receive+0x894>)
 8009048:	4836      	ldr	r0, [pc, #216]	; (8009124 <tcp_receive+0x898>)
 800904a:	f005 f999 	bl	800e380 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009052:	2b00      	cmp	r3, #0
 8009054:	f000 80e7 	beq.w	8009226 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009058:	4b2e      	ldr	r3, [pc, #184]	; (8009114 <tcp_receive+0x888>)
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	899b      	ldrh	r3, [r3, #12]
 800905e:	b29b      	uxth	r3, r3
 8009060:	4618      	mov	r0, r3
 8009062:	f7fa ffdf 	bl	8004024 <lwip_htons>
 8009066:	4603      	mov	r3, r0
 8009068:	b2db      	uxtb	r3, r3
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	2b00      	cmp	r3, #0
 8009070:	d010      	beq.n	8009094 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009072:	e00a      	b.n	800908a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009078:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f7fd fd96 	bl	8006bb6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1f0      	bne.n	8009074 <tcp_receive+0x7e8>
 8009092:	e0c8      	b.n	8009226 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009098:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800909a:	e052      	b.n	8009142 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800909c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	899b      	ldrh	r3, [r3, #12]
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fa ffbd 	bl	8004024 <lwip_htons>
 80090aa:	4603      	mov	r3, r0
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	f003 0301 	and.w	r3, r3, #1
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d03d      	beq.n	8009132 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80090b6:	4b17      	ldr	r3, [pc, #92]	; (8009114 <tcp_receive+0x888>)
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	899b      	ldrh	r3, [r3, #12]
 80090bc:	b29b      	uxth	r3, r3
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fa ffb0 	bl	8004024 <lwip_htons>
 80090c4:	4603      	mov	r3, r0
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d130      	bne.n	8009132 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80090d0:	4b10      	ldr	r3, [pc, #64]	; (8009114 <tcp_receive+0x888>)
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	899b      	ldrh	r3, [r3, #12]
 80090d6:	b29c      	uxth	r4, r3
 80090d8:	2001      	movs	r0, #1
 80090da:	f7fa ffa3 	bl	8004024 <lwip_htons>
 80090de:	4603      	mov	r3, r0
 80090e0:	461a      	mov	r2, r3
 80090e2:	4b0c      	ldr	r3, [pc, #48]	; (8009114 <tcp_receive+0x888>)
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	4322      	orrs	r2, r4
 80090e8:	b292      	uxth	r2, r2
 80090ea:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80090ec:	4b09      	ldr	r3, [pc, #36]	; (8009114 <tcp_receive+0x888>)
 80090ee:	891c      	ldrh	r4, [r3, #8]
 80090f0:	4b08      	ldr	r3, [pc, #32]	; (8009114 <tcp_receive+0x888>)
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	899b      	ldrh	r3, [r3, #12]
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fa ff93 	bl	8004024 <lwip_htons>
 80090fe:	4603      	mov	r3, r0
 8009100:	b2db      	uxtb	r3, r3
 8009102:	f003 0303 	and.w	r3, r3, #3
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00e      	beq.n	8009128 <tcp_receive+0x89c>
 800910a:	2301      	movs	r3, #1
 800910c:	e00d      	b.n	800912a <tcp_receive+0x89e>
 800910e:	bf00      	nop
 8009110:	200000ec 	.word	0x200000ec
 8009114:	200000cc 	.word	0x200000cc
 8009118:	200000f6 	.word	0x200000f6
 800911c:	08010970 	.word	0x08010970
 8009120:	08010d18 	.word	0x08010d18
 8009124:	080109bc 	.word	0x080109bc
 8009128:	2300      	movs	r3, #0
 800912a:	4423      	add	r3, r4
 800912c:	b29a      	uxth	r2, r3
 800912e:	4b98      	ldr	r3, [pc, #608]	; (8009390 <tcp_receive+0xb04>)
 8009130:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009134:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800913c:	6938      	ldr	r0, [r7, #16]
 800913e:	f7fd fd3a 	bl	8006bb6 <tcp_seg_free>
            while (next &&
 8009142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00e      	beq.n	8009166 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009148:	4b91      	ldr	r3, [pc, #580]	; (8009390 <tcp_receive+0xb04>)
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	461a      	mov	r2, r3
 800914e:	4b91      	ldr	r3, [pc, #580]	; (8009394 <tcp_receive+0xb08>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	441a      	add	r2, r3
 8009154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800915c:	8909      	ldrh	r1, [r1, #8]
 800915e:	440b      	add	r3, r1
 8009160:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009162:	2b00      	cmp	r3, #0
 8009164:	da9a      	bge.n	800909c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009168:	2b00      	cmp	r3, #0
 800916a:	d059      	beq.n	8009220 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800916c:	4b88      	ldr	r3, [pc, #544]	; (8009390 <tcp_receive+0xb04>)
 800916e:	881b      	ldrh	r3, [r3, #0]
 8009170:	461a      	mov	r2, r3
 8009172:	4b88      	ldr	r3, [pc, #544]	; (8009394 <tcp_receive+0xb08>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	441a      	add	r2, r3
 8009178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009180:	2b00      	cmp	r3, #0
 8009182:	dd4d      	ble.n	8009220 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	b29a      	uxth	r2, r3
 800918c:	4b81      	ldr	r3, [pc, #516]	; (8009394 <tcp_receive+0xb08>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	b29b      	uxth	r3, r3
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	b29a      	uxth	r2, r3
 8009196:	4b80      	ldr	r3, [pc, #512]	; (8009398 <tcp_receive+0xb0c>)
 8009198:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800919a:	4b7f      	ldr	r3, [pc, #508]	; (8009398 <tcp_receive+0xb0c>)
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	899b      	ldrh	r3, [r3, #12]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fa ff3e 	bl	8004024 <lwip_htons>
 80091a8:	4603      	mov	r3, r0
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	f003 0302 	and.w	r3, r3, #2
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d005      	beq.n	80091c0 <tcp_receive+0x934>
                inseg.len -= 1;
 80091b4:	4b78      	ldr	r3, [pc, #480]	; (8009398 <tcp_receive+0xb0c>)
 80091b6:	891b      	ldrh	r3, [r3, #8]
 80091b8:	3b01      	subs	r3, #1
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	4b76      	ldr	r3, [pc, #472]	; (8009398 <tcp_receive+0xb0c>)
 80091be:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80091c0:	4b75      	ldr	r3, [pc, #468]	; (8009398 <tcp_receive+0xb0c>)
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	4a74      	ldr	r2, [pc, #464]	; (8009398 <tcp_receive+0xb0c>)
 80091c6:	8912      	ldrh	r2, [r2, #8]
 80091c8:	4611      	mov	r1, r2
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fc f858 	bl	8005280 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80091d0:	4b71      	ldr	r3, [pc, #452]	; (8009398 <tcp_receive+0xb0c>)
 80091d2:	891c      	ldrh	r4, [r3, #8]
 80091d4:	4b70      	ldr	r3, [pc, #448]	; (8009398 <tcp_receive+0xb0c>)
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	899b      	ldrh	r3, [r3, #12]
 80091da:	b29b      	uxth	r3, r3
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fa ff21 	bl	8004024 <lwip_htons>
 80091e2:	4603      	mov	r3, r0
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	f003 0303 	and.w	r3, r3, #3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <tcp_receive+0x966>
 80091ee:	2301      	movs	r3, #1
 80091f0:	e000      	b.n	80091f4 <tcp_receive+0x968>
 80091f2:	2300      	movs	r3, #0
 80091f4:	4423      	add	r3, r4
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	4b65      	ldr	r3, [pc, #404]	; (8009390 <tcp_receive+0xb04>)
 80091fa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80091fc:	4b64      	ldr	r3, [pc, #400]	; (8009390 <tcp_receive+0xb04>)
 80091fe:	881b      	ldrh	r3, [r3, #0]
 8009200:	461a      	mov	r2, r3
 8009202:	4b64      	ldr	r3, [pc, #400]	; (8009394 <tcp_receive+0xb08>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	441a      	add	r2, r3
 8009208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	429a      	cmp	r2, r3
 8009210:	d006      	beq.n	8009220 <tcp_receive+0x994>
 8009212:	4b62      	ldr	r3, [pc, #392]	; (800939c <tcp_receive+0xb10>)
 8009214:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009218:	4961      	ldr	r1, [pc, #388]	; (80093a0 <tcp_receive+0xb14>)
 800921a:	4862      	ldr	r0, [pc, #392]	; (80093a4 <tcp_receive+0xb18>)
 800921c:	f005 f8b0 	bl	800e380 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009224:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009226:	4b5a      	ldr	r3, [pc, #360]	; (8009390 <tcp_receive+0xb04>)
 8009228:	881b      	ldrh	r3, [r3, #0]
 800922a:	461a      	mov	r2, r3
 800922c:	4b59      	ldr	r3, [pc, #356]	; (8009394 <tcp_receive+0xb08>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	441a      	add	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800923a:	4b55      	ldr	r3, [pc, #340]	; (8009390 <tcp_receive+0xb04>)
 800923c:	881b      	ldrh	r3, [r3, #0]
 800923e:	429a      	cmp	r2, r3
 8009240:	d206      	bcs.n	8009250 <tcp_receive+0x9c4>
 8009242:	4b56      	ldr	r3, [pc, #344]	; (800939c <tcp_receive+0xb10>)
 8009244:	f240 6207 	movw	r2, #1543	; 0x607
 8009248:	4957      	ldr	r1, [pc, #348]	; (80093a8 <tcp_receive+0xb1c>)
 800924a:	4856      	ldr	r0, [pc, #344]	; (80093a4 <tcp_receive+0xb18>)
 800924c:	f005 f898 	bl	800e380 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009254:	4b4e      	ldr	r3, [pc, #312]	; (8009390 <tcp_receive+0xb04>)
 8009256:	881b      	ldrh	r3, [r3, #0]
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	b29a      	uxth	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f7fc ffc9 	bl	80061f8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009266:	4b4c      	ldr	r3, [pc, #304]	; (8009398 <tcp_receive+0xb0c>)
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	891b      	ldrh	r3, [r3, #8]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d006      	beq.n	800927e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8009270:	4b49      	ldr	r3, [pc, #292]	; (8009398 <tcp_receive+0xb0c>)
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	4a4d      	ldr	r2, [pc, #308]	; (80093ac <tcp_receive+0xb20>)
 8009276:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009278:	4b47      	ldr	r3, [pc, #284]	; (8009398 <tcp_receive+0xb0c>)
 800927a:	2200      	movs	r2, #0
 800927c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800927e:	4b46      	ldr	r3, [pc, #280]	; (8009398 <tcp_receive+0xb0c>)
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	899b      	ldrh	r3, [r3, #12]
 8009284:	b29b      	uxth	r3, r3
 8009286:	4618      	mov	r0, r3
 8009288:	f7fa fecc 	bl	8004024 <lwip_htons>
 800928c:	4603      	mov	r3, r0
 800928e:	b2db      	uxtb	r3, r3
 8009290:	f003 0301 	and.w	r3, r3, #1
 8009294:	2b00      	cmp	r3, #0
 8009296:	f000 80b8 	beq.w	800940a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800929a:	4b45      	ldr	r3, [pc, #276]	; (80093b0 <tcp_receive+0xb24>)
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	f043 0320 	orr.w	r3, r3, #32
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	4b42      	ldr	r3, [pc, #264]	; (80093b0 <tcp_receive+0xb24>)
 80092a6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80092a8:	e0af      	b.n	800940a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092ae:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	4a36      	ldr	r2, [pc, #216]	; (8009394 <tcp_receive+0xb08>)
 80092ba:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	891b      	ldrh	r3, [r3, #8]
 80092c0:	461c      	mov	r4, r3
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	899b      	ldrh	r3, [r3, #12]
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fa feaa 	bl	8004024 <lwip_htons>
 80092d0:	4603      	mov	r3, r0
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	f003 0303 	and.w	r3, r3, #3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d001      	beq.n	80092e0 <tcp_receive+0xa54>
 80092dc:	2301      	movs	r3, #1
 80092de:	e000      	b.n	80092e2 <tcp_receive+0xa56>
 80092e0:	2300      	movs	r3, #0
 80092e2:	191a      	adds	r2, r3, r4
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	441a      	add	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092f2:	461c      	mov	r4, r3
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	891b      	ldrh	r3, [r3, #8]
 80092f8:	461d      	mov	r5, r3
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	899b      	ldrh	r3, [r3, #12]
 8009300:	b29b      	uxth	r3, r3
 8009302:	4618      	mov	r0, r3
 8009304:	f7fa fe8e 	bl	8004024 <lwip_htons>
 8009308:	4603      	mov	r3, r0
 800930a:	b2db      	uxtb	r3, r3
 800930c:	f003 0303 	and.w	r3, r3, #3
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <tcp_receive+0xa8c>
 8009314:	2301      	movs	r3, #1
 8009316:	e000      	b.n	800931a <tcp_receive+0xa8e>
 8009318:	2300      	movs	r3, #0
 800931a:	442b      	add	r3, r5
 800931c:	429c      	cmp	r4, r3
 800931e:	d206      	bcs.n	800932e <tcp_receive+0xaa2>
 8009320:	4b1e      	ldr	r3, [pc, #120]	; (800939c <tcp_receive+0xb10>)
 8009322:	f240 622b 	movw	r2, #1579	; 0x62b
 8009326:	4923      	ldr	r1, [pc, #140]	; (80093b4 <tcp_receive+0xb28>)
 8009328:	481e      	ldr	r0, [pc, #120]	; (80093a4 <tcp_receive+0xb18>)
 800932a:	f005 f829 	bl	800e380 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	891b      	ldrh	r3, [r3, #8]
 8009332:	461c      	mov	r4, r3
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	899b      	ldrh	r3, [r3, #12]
 800933a:	b29b      	uxth	r3, r3
 800933c:	4618      	mov	r0, r3
 800933e:	f7fa fe71 	bl	8004024 <lwip_htons>
 8009342:	4603      	mov	r3, r0
 8009344:	b2db      	uxtb	r3, r3
 8009346:	f003 0303 	and.w	r3, r3, #3
 800934a:	2b00      	cmp	r3, #0
 800934c:	d001      	beq.n	8009352 <tcp_receive+0xac6>
 800934e:	2301      	movs	r3, #1
 8009350:	e000      	b.n	8009354 <tcp_receive+0xac8>
 8009352:	2300      	movs	r3, #0
 8009354:	1919      	adds	r1, r3, r4
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800935a:	b28b      	uxth	r3, r1
 800935c:	1ad3      	subs	r3, r2, r3
 800935e:	b29a      	uxth	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7fc ff47 	bl	80061f8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	891b      	ldrh	r3, [r3, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d028      	beq.n	80093c6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009374:	4b0d      	ldr	r3, [pc, #52]	; (80093ac <tcp_receive+0xb20>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d01d      	beq.n	80093b8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800937c:	4b0b      	ldr	r3, [pc, #44]	; (80093ac <tcp_receive+0xb20>)
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	4619      	mov	r1, r3
 8009386:	4610      	mov	r0, r2
 8009388:	f7fc f9c2 	bl	8005710 <pbuf_cat>
 800938c:	e018      	b.n	80093c0 <tcp_receive+0xb34>
 800938e:	bf00      	nop
 8009390:	200000f6 	.word	0x200000f6
 8009394:	200000ec 	.word	0x200000ec
 8009398:	200000cc 	.word	0x200000cc
 800939c:	08010970 	.word	0x08010970
 80093a0:	08010d50 	.word	0x08010d50
 80093a4:	080109bc 	.word	0x080109bc
 80093a8:	08010d8c 	.word	0x08010d8c
 80093ac:	200000fc 	.word	0x200000fc
 80093b0:	200000f9 	.word	0x200000f9
 80093b4:	08010dac 	.word	0x08010dac
            } else {
              recv_data = cseg->p;
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	4a70      	ldr	r2, [pc, #448]	; (8009580 <tcp_receive+0xcf4>)
 80093be:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	2200      	movs	r2, #0
 80093c4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	899b      	ldrh	r3, [r3, #12]
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fa fe28 	bl	8004024 <lwip_htons>
 80093d4:	4603      	mov	r3, r0
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	f003 0301 	and.w	r3, r3, #1
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00d      	beq.n	80093fc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80093e0:	4b68      	ldr	r3, [pc, #416]	; (8009584 <tcp_receive+0xcf8>)
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	f043 0320 	orr.w	r3, r3, #32
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	4b66      	ldr	r3, [pc, #408]	; (8009584 <tcp_receive+0xcf8>)
 80093ec:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	7d1b      	ldrb	r3, [r3, #20]
 80093f2:	2b04      	cmp	r3, #4
 80093f4:	d102      	bne.n	80093fc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2207      	movs	r2, #7
 80093fa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009404:	68b8      	ldr	r0, [r7, #8]
 8009406:	f7fd fbd6 	bl	8006bb6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800940e:	2b00      	cmp	r3, #0
 8009410:	d008      	beq.n	8009424 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	685a      	ldr	r2, [r3, #4]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800941e:	429a      	cmp	r2, r3
 8009420:	f43f af43 	beq.w	80092aa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	8b5b      	ldrh	r3, [r3, #26]
 8009428:	f003 0301 	and.w	r3, r3, #1
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00e      	beq.n	800944e <tcp_receive+0xbc2>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	8b5b      	ldrh	r3, [r3, #26]
 8009434:	f023 0301 	bic.w	r3, r3, #1
 8009438:	b29a      	uxth	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	835a      	strh	r2, [r3, #26]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	8b5b      	ldrh	r3, [r3, #26]
 8009442:	f043 0302 	orr.w	r3, r3, #2
 8009446:	b29a      	uxth	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800944c:	e188      	b.n	8009760 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	8b5b      	ldrh	r3, [r3, #26]
 8009452:	f043 0301 	orr.w	r3, r3, #1
 8009456:	b29a      	uxth	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800945c:	e180      	b.n	8009760 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009462:	2b00      	cmp	r3, #0
 8009464:	d106      	bne.n	8009474 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009466:	4848      	ldr	r0, [pc, #288]	; (8009588 <tcp_receive+0xcfc>)
 8009468:	f7fd fbbe 	bl	8006be8 <tcp_seg_copy>
 800946c:	4602      	mov	r2, r0
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	675a      	str	r2, [r3, #116]	; 0x74
 8009472:	e16d      	b.n	8009750 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009474:	2300      	movs	r3, #0
 8009476:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800947c:	63bb      	str	r3, [r7, #56]	; 0x38
 800947e:	e157      	b.n	8009730 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8009480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	4b41      	ldr	r3, [pc, #260]	; (800958c <tcp_receive+0xd00>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	429a      	cmp	r2, r3
 800948c:	d11d      	bne.n	80094ca <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800948e:	4b3e      	ldr	r3, [pc, #248]	; (8009588 <tcp_receive+0xcfc>)
 8009490:	891a      	ldrh	r2, [r3, #8]
 8009492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009494:	891b      	ldrh	r3, [r3, #8]
 8009496:	429a      	cmp	r2, r3
 8009498:	f240 814f 	bls.w	800973a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800949c:	483a      	ldr	r0, [pc, #232]	; (8009588 <tcp_receive+0xcfc>)
 800949e:	f7fd fba3 	bl	8006be8 <tcp_seg_copy>
 80094a2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f000 8149 	beq.w	800973e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80094ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d003      	beq.n	80094ba <tcp_receive+0xc2e>
                    prev->next = cseg;
 80094b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b4:	697a      	ldr	r2, [r7, #20]
 80094b6:	601a      	str	r2, [r3, #0]
 80094b8:	e002      	b.n	80094c0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80094c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094c2:	6978      	ldr	r0, [r7, #20]
 80094c4:	f7ff f8de 	bl	8008684 <tcp_oos_insert_segment>
                }
                break;
 80094c8:	e139      	b.n	800973e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80094ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d117      	bne.n	8009500 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80094d0:	4b2e      	ldr	r3, [pc, #184]	; (800958c <tcp_receive+0xd00>)
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	2b00      	cmp	r3, #0
 80094de:	da57      	bge.n	8009590 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80094e0:	4829      	ldr	r0, [pc, #164]	; (8009588 <tcp_receive+0xcfc>)
 80094e2:	f7fd fb81 	bl	8006be8 <tcp_seg_copy>
 80094e6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f000 8129 	beq.w	8009742 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	69ba      	ldr	r2, [r7, #24]
 80094f4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80094f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094f8:	69b8      	ldr	r0, [r7, #24]
 80094fa:	f7ff f8c3 	bl	8008684 <tcp_oos_insert_segment>
                  }
                  break;
 80094fe:	e120      	b.n	8009742 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009500:	4b22      	ldr	r3, [pc, #136]	; (800958c <tcp_receive+0xd00>)
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	3b01      	subs	r3, #1
 800950e:	2b00      	cmp	r3, #0
 8009510:	db3e      	blt.n	8009590 <tcp_receive+0xd04>
 8009512:	4b1e      	ldr	r3, [pc, #120]	; (800958c <tcp_receive+0xd00>)
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	3301      	adds	r3, #1
 8009520:	2b00      	cmp	r3, #0
 8009522:	dc35      	bgt.n	8009590 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009524:	4818      	ldr	r0, [pc, #96]	; (8009588 <tcp_receive+0xcfc>)
 8009526:	f7fd fb5f 	bl	8006be8 <tcp_seg_copy>
 800952a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 8109 	beq.w	8009746 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800953c:	8912      	ldrh	r2, [r2, #8]
 800953e:	441a      	add	r2, r3
 8009540:	4b12      	ldr	r3, [pc, #72]	; (800958c <tcp_receive+0xd00>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	2b00      	cmp	r3, #0
 8009548:	dd12      	ble.n	8009570 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800954a:	4b10      	ldr	r3, [pc, #64]	; (800958c <tcp_receive+0xd00>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	b29a      	uxth	r2, r3
 8009550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	b29b      	uxth	r3, r3
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	b29a      	uxth	r2, r3
 800955c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009566:	891b      	ldrh	r3, [r3, #8]
 8009568:	4619      	mov	r1, r3
 800956a:	4610      	mov	r0, r2
 800956c:	f7fb fe88 	bl	8005280 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009572:	69fa      	ldr	r2, [r7, #28]
 8009574:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009576:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009578:	69f8      	ldr	r0, [r7, #28]
 800957a:	f7ff f883 	bl	8008684 <tcp_oos_insert_segment>
                  }
                  break;
 800957e:	e0e2      	b.n	8009746 <tcp_receive+0xeba>
 8009580:	200000fc 	.word	0x200000fc
 8009584:	200000f9 	.word	0x200000f9
 8009588:	200000cc 	.word	0x200000cc
 800958c:	200000ec 	.word	0x200000ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009592:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	f040 80c6 	bne.w	800972a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800959e:	4b80      	ldr	r3, [pc, #512]	; (80097a0 <tcp_receive+0xf14>)
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f340 80bd 	ble.w	800972a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80095b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	899b      	ldrh	r3, [r3, #12]
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fa fd33 	bl	8004024 <lwip_htons>
 80095be:	4603      	mov	r3, r0
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f040 80bf 	bne.w	800974a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80095cc:	4875      	ldr	r0, [pc, #468]	; (80097a4 <tcp_receive+0xf18>)
 80095ce:	f7fd fb0b 	bl	8006be8 <tcp_seg_copy>
 80095d2:	4602      	mov	r2, r0
 80095d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80095d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f000 80b6 	beq.w	800974e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80095e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095ea:	8912      	ldrh	r2, [r2, #8]
 80095ec:	441a      	add	r2, r3
 80095ee:	4b6c      	ldr	r3, [pc, #432]	; (80097a0 <tcp_receive+0xf14>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	dd12      	ble.n	800961e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80095f8:	4b69      	ldr	r3, [pc, #420]	; (80097a0 <tcp_receive+0xf14>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	b29b      	uxth	r3, r3
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	b29a      	uxth	r2, r3
 800960a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800960e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009610:	685a      	ldr	r2, [r3, #4]
 8009612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009614:	891b      	ldrh	r3, [r3, #8]
 8009616:	4619      	mov	r1, r3
 8009618:	4610      	mov	r0, r2
 800961a:	f7fb fe31 	bl	8005280 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800961e:	4b62      	ldr	r3, [pc, #392]	; (80097a8 <tcp_receive+0xf1c>)
 8009620:	881b      	ldrh	r3, [r3, #0]
 8009622:	461a      	mov	r2, r3
 8009624:	4b5e      	ldr	r3, [pc, #376]	; (80097a0 <tcp_receive+0xf14>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	441a      	add	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962e:	6879      	ldr	r1, [r7, #4]
 8009630:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009632:	440b      	add	r3, r1
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	f340 8089 	ble.w	800974e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800963c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	899b      	ldrh	r3, [r3, #12]
 8009644:	b29b      	uxth	r3, r3
 8009646:	4618      	mov	r0, r3
 8009648:	f7fa fcec 	bl	8004024 <lwip_htons>
 800964c:	4603      	mov	r3, r0
 800964e:	b2db      	uxtb	r3, r3
 8009650:	f003 0301 	and.w	r3, r3, #1
 8009654:	2b00      	cmp	r3, #0
 8009656:	d022      	beq.n	800969e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	899b      	ldrh	r3, [r3, #12]
 8009660:	b29b      	uxth	r3, r3
 8009662:	b21b      	sxth	r3, r3
 8009664:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009668:	b21c      	sxth	r4, r3
 800966a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	899b      	ldrh	r3, [r3, #12]
 8009672:	b29b      	uxth	r3, r3
 8009674:	4618      	mov	r0, r3
 8009676:	f7fa fcd5 	bl	8004024 <lwip_htons>
 800967a:	4603      	mov	r3, r0
 800967c:	b2db      	uxtb	r3, r3
 800967e:	b29b      	uxth	r3, r3
 8009680:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009684:	b29b      	uxth	r3, r3
 8009686:	4618      	mov	r0, r3
 8009688:	f7fa fccc 	bl	8004024 <lwip_htons>
 800968c:	4603      	mov	r3, r0
 800968e:	b21b      	sxth	r3, r3
 8009690:	4323      	orrs	r3, r4
 8009692:	b21a      	sxth	r2, r3
 8009694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	b292      	uxth	r2, r2
 800969c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a8:	4413      	add	r3, r2
 80096aa:	b299      	uxth	r1, r3
 80096ac:	4b3c      	ldr	r3, [pc, #240]	; (80097a0 <tcp_receive+0xf14>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	1a8a      	subs	r2, r1, r2
 80096b8:	b292      	uxth	r2, r2
 80096ba:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80096bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	685a      	ldr	r2, [r3, #4]
 80096c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	891b      	ldrh	r3, [r3, #8]
 80096c8:	4619      	mov	r1, r3
 80096ca:	4610      	mov	r0, r2
 80096cc:	f7fb fdd8 	bl	8005280 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	891c      	ldrh	r4, [r3, #8]
 80096d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	899b      	ldrh	r3, [r3, #12]
 80096de:	b29b      	uxth	r3, r3
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fa fc9f 	bl	8004024 <lwip_htons>
 80096e6:	4603      	mov	r3, r0
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	f003 0303 	and.w	r3, r3, #3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d001      	beq.n	80096f6 <tcp_receive+0xe6a>
 80096f2:	2301      	movs	r3, #1
 80096f4:	e000      	b.n	80096f8 <tcp_receive+0xe6c>
 80096f6:	2300      	movs	r3, #0
 80096f8:	4423      	add	r3, r4
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	4b2a      	ldr	r3, [pc, #168]	; (80097a8 <tcp_receive+0xf1c>)
 80096fe:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009700:	4b29      	ldr	r3, [pc, #164]	; (80097a8 <tcp_receive+0xf1c>)
 8009702:	881b      	ldrh	r3, [r3, #0]
 8009704:	461a      	mov	r2, r3
 8009706:	4b26      	ldr	r3, [pc, #152]	; (80097a0 <tcp_receive+0xf14>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	441a      	add	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009710:	6879      	ldr	r1, [r7, #4]
 8009712:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009714:	440b      	add	r3, r1
 8009716:	429a      	cmp	r2, r3
 8009718:	d019      	beq.n	800974e <tcp_receive+0xec2>
 800971a:	4b24      	ldr	r3, [pc, #144]	; (80097ac <tcp_receive+0xf20>)
 800971c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009720:	4923      	ldr	r1, [pc, #140]	; (80097b0 <tcp_receive+0xf24>)
 8009722:	4824      	ldr	r0, [pc, #144]	; (80097b4 <tcp_receive+0xf28>)
 8009724:	f004 fe2c 	bl	800e380 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009728:	e011      	b.n	800974e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800972a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009732:	2b00      	cmp	r3, #0
 8009734:	f47f aea4 	bne.w	8009480 <tcp_receive+0xbf4>
 8009738:	e00a      	b.n	8009750 <tcp_receive+0xec4>
                break;
 800973a:	bf00      	nop
 800973c:	e008      	b.n	8009750 <tcp_receive+0xec4>
                break;
 800973e:	bf00      	nop
 8009740:	e006      	b.n	8009750 <tcp_receive+0xec4>
                  break;
 8009742:	bf00      	nop
 8009744:	e004      	b.n	8009750 <tcp_receive+0xec4>
                  break;
 8009746:	bf00      	nop
 8009748:	e002      	b.n	8009750 <tcp_receive+0xec4>
                  break;
 800974a:	bf00      	nop
 800974c:	e000      	b.n	8009750 <tcp_receive+0xec4>
                break;
 800974e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f001 fa33 	bl	800abbc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009756:	e003      	b.n	8009760 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f001 fa2f 	bl	800abbc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800975e:	e01a      	b.n	8009796 <tcp_receive+0xf0a>
 8009760:	e019      	b.n	8009796 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009762:	4b0f      	ldr	r3, [pc, #60]	; (80097a0 <tcp_receive+0xf14>)
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976a:	1ad3      	subs	r3, r2, r3
 800976c:	2b00      	cmp	r3, #0
 800976e:	db0a      	blt.n	8009786 <tcp_receive+0xefa>
 8009770:	4b0b      	ldr	r3, [pc, #44]	; (80097a0 <tcp_receive+0xf14>)
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009778:	6879      	ldr	r1, [r7, #4]
 800977a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800977c:	440b      	add	r3, r1
 800977e:	1ad3      	subs	r3, r2, r3
 8009780:	3301      	adds	r3, #1
 8009782:	2b00      	cmp	r3, #0
 8009784:	dd07      	ble.n	8009796 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	8b5b      	ldrh	r3, [r3, #26]
 800978a:	f043 0302 	orr.w	r3, r3, #2
 800978e:	b29a      	uxth	r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009794:	e7ff      	b.n	8009796 <tcp_receive+0xf0a>
 8009796:	bf00      	nop
 8009798:	3750      	adds	r7, #80	; 0x50
 800979a:	46bd      	mov	sp, r7
 800979c:	bdb0      	pop	{r4, r5, r7, pc}
 800979e:	bf00      	nop
 80097a0:	200000ec 	.word	0x200000ec
 80097a4:	200000cc 	.word	0x200000cc
 80097a8:	200000f6 	.word	0x200000f6
 80097ac:	08010970 	.word	0x08010970
 80097b0:	08010d18 	.word	0x08010d18
 80097b4:	080109bc 	.word	0x080109bc

080097b8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80097be:	4b15      	ldr	r3, [pc, #84]	; (8009814 <tcp_get_next_optbyte+0x5c>)
 80097c0:	881b      	ldrh	r3, [r3, #0]
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	b291      	uxth	r1, r2
 80097c6:	4a13      	ldr	r2, [pc, #76]	; (8009814 <tcp_get_next_optbyte+0x5c>)
 80097c8:	8011      	strh	r1, [r2, #0]
 80097ca:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80097cc:	4b12      	ldr	r3, [pc, #72]	; (8009818 <tcp_get_next_optbyte+0x60>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d004      	beq.n	80097de <tcp_get_next_optbyte+0x26>
 80097d4:	4b11      	ldr	r3, [pc, #68]	; (800981c <tcp_get_next_optbyte+0x64>)
 80097d6:	881b      	ldrh	r3, [r3, #0]
 80097d8:	88fa      	ldrh	r2, [r7, #6]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d208      	bcs.n	80097f0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80097de:	4b10      	ldr	r3, [pc, #64]	; (8009820 <tcp_get_next_optbyte+0x68>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	3314      	adds	r3, #20
 80097e4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80097e6:	88fb      	ldrh	r3, [r7, #6]
 80097e8:	683a      	ldr	r2, [r7, #0]
 80097ea:	4413      	add	r3, r2
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	e00b      	b.n	8009808 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80097f0:	88fb      	ldrh	r3, [r7, #6]
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	4b09      	ldr	r3, [pc, #36]	; (800981c <tcp_get_next_optbyte+0x64>)
 80097f6:	881b      	ldrh	r3, [r3, #0]
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	1ad3      	subs	r3, r2, r3
 80097fc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80097fe:	4b06      	ldr	r3, [pc, #24]	; (8009818 <tcp_get_next_optbyte+0x60>)
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	797b      	ldrb	r3, [r7, #5]
 8009804:	4413      	add	r3, r2
 8009806:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009808:	4618      	mov	r0, r3
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	200000e8 	.word	0x200000e8
 8009818:	200000e4 	.word	0x200000e4
 800981c:	200000e2 	.word	0x200000e2
 8009820:	200000dc 	.word	0x200000dc

08009824 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d106      	bne.n	8009840 <tcp_parseopt+0x1c>
 8009832:	4b32      	ldr	r3, [pc, #200]	; (80098fc <tcp_parseopt+0xd8>)
 8009834:	f240 727d 	movw	r2, #1917	; 0x77d
 8009838:	4931      	ldr	r1, [pc, #196]	; (8009900 <tcp_parseopt+0xdc>)
 800983a:	4832      	ldr	r0, [pc, #200]	; (8009904 <tcp_parseopt+0xe0>)
 800983c:	f004 fda0 	bl	800e380 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009840:	4b31      	ldr	r3, [pc, #196]	; (8009908 <tcp_parseopt+0xe4>)
 8009842:	881b      	ldrh	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d055      	beq.n	80098f4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009848:	4b30      	ldr	r3, [pc, #192]	; (800990c <tcp_parseopt+0xe8>)
 800984a:	2200      	movs	r2, #0
 800984c:	801a      	strh	r2, [r3, #0]
 800984e:	e045      	b.n	80098dc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009850:	f7ff ffb2 	bl	80097b8 <tcp_get_next_optbyte>
 8009854:	4603      	mov	r3, r0
 8009856:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009858:	7bfb      	ldrb	r3, [r7, #15]
 800985a:	2b02      	cmp	r3, #2
 800985c:	d006      	beq.n	800986c <tcp_parseopt+0x48>
 800985e:	2b02      	cmp	r3, #2
 8009860:	dc2b      	bgt.n	80098ba <tcp_parseopt+0x96>
 8009862:	2b00      	cmp	r3, #0
 8009864:	d041      	beq.n	80098ea <tcp_parseopt+0xc6>
 8009866:	2b01      	cmp	r3, #1
 8009868:	d127      	bne.n	80098ba <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800986a:	e037      	b.n	80098dc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800986c:	f7ff ffa4 	bl	80097b8 <tcp_get_next_optbyte>
 8009870:	4603      	mov	r3, r0
 8009872:	2b04      	cmp	r3, #4
 8009874:	d13b      	bne.n	80098ee <tcp_parseopt+0xca>
 8009876:	4b25      	ldr	r3, [pc, #148]	; (800990c <tcp_parseopt+0xe8>)
 8009878:	881b      	ldrh	r3, [r3, #0]
 800987a:	3301      	adds	r3, #1
 800987c:	4a22      	ldr	r2, [pc, #136]	; (8009908 <tcp_parseopt+0xe4>)
 800987e:	8812      	ldrh	r2, [r2, #0]
 8009880:	4293      	cmp	r3, r2
 8009882:	da34      	bge.n	80098ee <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009884:	f7ff ff98 	bl	80097b8 <tcp_get_next_optbyte>
 8009888:	4603      	mov	r3, r0
 800988a:	b29b      	uxth	r3, r3
 800988c:	021b      	lsls	r3, r3, #8
 800988e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009890:	f7ff ff92 	bl	80097b8 <tcp_get_next_optbyte>
 8009894:	4603      	mov	r3, r0
 8009896:	b29a      	uxth	r2, r3
 8009898:	89bb      	ldrh	r3, [r7, #12]
 800989a:	4313      	orrs	r3, r2
 800989c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800989e:	89bb      	ldrh	r3, [r7, #12]
 80098a0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80098a4:	d804      	bhi.n	80098b0 <tcp_parseopt+0x8c>
 80098a6:	89bb      	ldrh	r3, [r7, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d001      	beq.n	80098b0 <tcp_parseopt+0x8c>
 80098ac:	89ba      	ldrh	r2, [r7, #12]
 80098ae:	e001      	b.n	80098b4 <tcp_parseopt+0x90>
 80098b0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80098b8:	e010      	b.n	80098dc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80098ba:	f7ff ff7d 	bl	80097b8 <tcp_get_next_optbyte>
 80098be:	4603      	mov	r3, r0
 80098c0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80098c2:	7afb      	ldrb	r3, [r7, #11]
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d914      	bls.n	80098f2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80098c8:	7afb      	ldrb	r3, [r7, #11]
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	4b0f      	ldr	r3, [pc, #60]	; (800990c <tcp_parseopt+0xe8>)
 80098ce:	881b      	ldrh	r3, [r3, #0]
 80098d0:	4413      	add	r3, r2
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	3b02      	subs	r3, #2
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	4b0c      	ldr	r3, [pc, #48]	; (800990c <tcp_parseopt+0xe8>)
 80098da:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80098dc:	4b0b      	ldr	r3, [pc, #44]	; (800990c <tcp_parseopt+0xe8>)
 80098de:	881a      	ldrh	r2, [r3, #0]
 80098e0:	4b09      	ldr	r3, [pc, #36]	; (8009908 <tcp_parseopt+0xe4>)
 80098e2:	881b      	ldrh	r3, [r3, #0]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d3b3      	bcc.n	8009850 <tcp_parseopt+0x2c>
 80098e8:	e004      	b.n	80098f4 <tcp_parseopt+0xd0>
          return;
 80098ea:	bf00      	nop
 80098ec:	e002      	b.n	80098f4 <tcp_parseopt+0xd0>
            return;
 80098ee:	bf00      	nop
 80098f0:	e000      	b.n	80098f4 <tcp_parseopt+0xd0>
            return;
 80098f2:	bf00      	nop
      }
    }
  }
}
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	08010970 	.word	0x08010970
 8009900:	08010dd4 	.word	0x08010dd4
 8009904:	080109bc 	.word	0x080109bc
 8009908:	200000e0 	.word	0x200000e0
 800990c:	200000e8 	.word	0x200000e8

08009910 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009910:	b480      	push	{r7}
 8009912:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009914:	4b05      	ldr	r3, [pc, #20]	; (800992c <tcp_trigger_input_pcb_close+0x1c>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	f043 0310 	orr.w	r3, r3, #16
 800991c:	b2da      	uxtb	r2, r3
 800991e:	4b03      	ldr	r3, [pc, #12]	; (800992c <tcp_trigger_input_pcb_close+0x1c>)
 8009920:	701a      	strb	r2, [r3, #0]
}
 8009922:	bf00      	nop
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	200000f9 	.word	0x200000f9

08009930 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00a      	beq.n	8009958 <tcp_route+0x28>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	7a1b      	ldrb	r3, [r3, #8]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d006      	beq.n	8009958 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	7a1b      	ldrb	r3, [r3, #8]
 800994e:	4618      	mov	r0, r3
 8009950:	f7fb fabc 	bl	8004ecc <netif_get_by_index>
 8009954:	4603      	mov	r3, r0
 8009956:	e003      	b.n	8009960 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f003 fa37 	bl	800cdcc <ip4_route>
 800995e:	4603      	mov	r3, r0
  }
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009968:	b590      	push	{r4, r7, lr}
 800996a:	b087      	sub	sp, #28
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	603b      	str	r3, [r7, #0]
 8009974:	4613      	mov	r3, r2
 8009976:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d105      	bne.n	800998a <tcp_create_segment+0x22>
 800997e:	4b44      	ldr	r3, [pc, #272]	; (8009a90 <tcp_create_segment+0x128>)
 8009980:	22a3      	movs	r2, #163	; 0xa3
 8009982:	4944      	ldr	r1, [pc, #272]	; (8009a94 <tcp_create_segment+0x12c>)
 8009984:	4844      	ldr	r0, [pc, #272]	; (8009a98 <tcp_create_segment+0x130>)
 8009986:	f004 fcfb 	bl	800e380 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d105      	bne.n	800999c <tcp_create_segment+0x34>
 8009990:	4b3f      	ldr	r3, [pc, #252]	; (8009a90 <tcp_create_segment+0x128>)
 8009992:	22a4      	movs	r2, #164	; 0xa4
 8009994:	4941      	ldr	r1, [pc, #260]	; (8009a9c <tcp_create_segment+0x134>)
 8009996:	4840      	ldr	r0, [pc, #256]	; (8009a98 <tcp_create_segment+0x130>)
 8009998:	f004 fcf2 	bl	800e380 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800999c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	f003 0304 	and.w	r3, r3, #4
 80099a8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80099aa:	2003      	movs	r0, #3
 80099ac:	f7fa ff90 	bl	80048d0 <memp_malloc>
 80099b0:	6138      	str	r0, [r7, #16]
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d104      	bne.n	80099c2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80099b8:	68b8      	ldr	r0, [r7, #8]
 80099ba:	f7fb fde7 	bl	800558c <pbuf_free>
    return NULL;
 80099be:	2300      	movs	r3, #0
 80099c0:	e061      	b.n	8009a86 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80099c8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	2200      	movs	r2, #0
 80099ce:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	68ba      	ldr	r2, [r7, #8]
 80099d4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	891a      	ldrh	r2, [r3, #8]
 80099da:	7dfb      	ldrb	r3, [r7, #23]
 80099dc:	b29b      	uxth	r3, r3
 80099de:	429a      	cmp	r2, r3
 80099e0:	d205      	bcs.n	80099ee <tcp_create_segment+0x86>
 80099e2:	4b2b      	ldr	r3, [pc, #172]	; (8009a90 <tcp_create_segment+0x128>)
 80099e4:	22b0      	movs	r2, #176	; 0xb0
 80099e6:	492e      	ldr	r1, [pc, #184]	; (8009aa0 <tcp_create_segment+0x138>)
 80099e8:	482b      	ldr	r0, [pc, #172]	; (8009a98 <tcp_create_segment+0x130>)
 80099ea:	f004 fcc9 	bl	800e380 <iprintf>
  seg->len = p->tot_len - optlen;
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	891a      	ldrh	r2, [r3, #8]
 80099f2:	7dfb      	ldrb	r3, [r7, #23]
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80099fe:	2114      	movs	r1, #20
 8009a00:	68b8      	ldr	r0, [r7, #8]
 8009a02:	f7fb fd2d 	bl	8005460 <pbuf_add_header>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d004      	beq.n	8009a16 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009a0c:	6938      	ldr	r0, [r7, #16]
 8009a0e:	f7fd f8d2 	bl	8006bb6 <tcp_seg_free>
    return NULL;
 8009a12:	2300      	movs	r3, #0
 8009a14:	e037      	b.n	8009a86 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	8ada      	ldrh	r2, [r3, #22]
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	68dc      	ldr	r4, [r3, #12]
 8009a28:	4610      	mov	r0, r2
 8009a2a:	f7fa fafb 	bl	8004024 <lwip_htons>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	8b1a      	ldrh	r2, [r3, #24]
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	68dc      	ldr	r4, [r3, #12]
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	f7fa faf2 	bl	8004024 <lwip_htons>
 8009a40:	4603      	mov	r3, r0
 8009a42:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	68dc      	ldr	r4, [r3, #12]
 8009a48:	6838      	ldr	r0, [r7, #0]
 8009a4a:	f7fa fb00 	bl	800404e <lwip_htonl>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009a52:	7dfb      	ldrb	r3, [r7, #23]
 8009a54:	089b      	lsrs	r3, r3, #2
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	3305      	adds	r3, #5
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	031b      	lsls	r3, r3, #12
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	79fb      	ldrb	r3, [r7, #7]
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	4313      	orrs	r3, r2
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	68dc      	ldr	r4, [r3, #12]
 8009a6e:	4610      	mov	r0, r2
 8009a70:	f7fa fad8 	bl	8004024 <lwip_htons>
 8009a74:	4603      	mov	r3, r0
 8009a76:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	749a      	strb	r2, [r3, #18]
 8009a80:	2200      	movs	r2, #0
 8009a82:	74da      	strb	r2, [r3, #19]
  return seg;
 8009a84:	693b      	ldr	r3, [r7, #16]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	371c      	adds	r7, #28
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd90      	pop	{r4, r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	08010df0 	.word	0x08010df0
 8009a94:	08010e24 	.word	0x08010e24
 8009a98:	08010e44 	.word	0x08010e44
 8009a9c:	08010e6c 	.word	0x08010e6c
 8009aa0:	08010e90 	.word	0x08010e90

08009aa4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009aa4:	b590      	push	{r4, r7, lr}
 8009aa6:	b08b      	sub	sp, #44	; 0x2c
 8009aa8:	af02      	add	r7, sp, #8
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	460b      	mov	r3, r1
 8009aae:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	61fb      	str	r3, [r7, #28]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d106      	bne.n	8009ad0 <tcp_split_unsent_seg+0x2c>
 8009ac2:	4b95      	ldr	r3, [pc, #596]	; (8009d18 <tcp_split_unsent_seg+0x274>)
 8009ac4:	f240 324b 	movw	r2, #843	; 0x34b
 8009ac8:	4994      	ldr	r1, [pc, #592]	; (8009d1c <tcp_split_unsent_seg+0x278>)
 8009aca:	4895      	ldr	r0, [pc, #596]	; (8009d20 <tcp_split_unsent_seg+0x27c>)
 8009acc:	f004 fc58 	bl	800e380 <iprintf>

  useg = pcb->unsent;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ad4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d102      	bne.n	8009ae2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009adc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae0:	e116      	b.n	8009d10 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009ae2:	887b      	ldrh	r3, [r7, #2]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d109      	bne.n	8009afc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009ae8:	4b8b      	ldr	r3, [pc, #556]	; (8009d18 <tcp_split_unsent_seg+0x274>)
 8009aea:	f240 3253 	movw	r2, #851	; 0x353
 8009aee:	498d      	ldr	r1, [pc, #564]	; (8009d24 <tcp_split_unsent_seg+0x280>)
 8009af0:	488b      	ldr	r0, [pc, #556]	; (8009d20 <tcp_split_unsent_seg+0x27c>)
 8009af2:	f004 fc45 	bl	800e380 <iprintf>
    return ERR_VAL;
 8009af6:	f06f 0305 	mvn.w	r3, #5
 8009afa:	e109      	b.n	8009d10 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	891b      	ldrh	r3, [r3, #8]
 8009b00:	887a      	ldrh	r2, [r7, #2]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d301      	bcc.n	8009b0a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8009b06:	2300      	movs	r3, #0
 8009b08:	e102      	b.n	8009d10 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b0e:	887a      	ldrh	r2, [r7, #2]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d906      	bls.n	8009b22 <tcp_split_unsent_seg+0x7e>
 8009b14:	4b80      	ldr	r3, [pc, #512]	; (8009d18 <tcp_split_unsent_seg+0x274>)
 8009b16:	f240 325b 	movw	r2, #859	; 0x35b
 8009b1a:	4983      	ldr	r1, [pc, #524]	; (8009d28 <tcp_split_unsent_seg+0x284>)
 8009b1c:	4880      	ldr	r0, [pc, #512]	; (8009d20 <tcp_split_unsent_seg+0x27c>)
 8009b1e:	f004 fc2f 	bl	800e380 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	891b      	ldrh	r3, [r3, #8]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d106      	bne.n	8009b38 <tcp_split_unsent_seg+0x94>
 8009b2a:	4b7b      	ldr	r3, [pc, #492]	; (8009d18 <tcp_split_unsent_seg+0x274>)
 8009b2c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8009b30:	497e      	ldr	r1, [pc, #504]	; (8009d2c <tcp_split_unsent_seg+0x288>)
 8009b32:	487b      	ldr	r0, [pc, #492]	; (8009d20 <tcp_split_unsent_seg+0x27c>)
 8009b34:	f004 fc24 	bl	800e380 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	7a9b      	ldrb	r3, [r3, #10]
 8009b3c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009b3e:	7bfb      	ldrb	r3, [r7, #15]
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	f003 0304 	and.w	r3, r3, #4
 8009b48:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	891a      	ldrh	r2, [r3, #8]
 8009b4e:	887b      	ldrh	r3, [r7, #2]
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009b54:	7bbb      	ldrb	r3, [r7, #14]
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	89bb      	ldrh	r3, [r7, #12]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009b62:	4619      	mov	r1, r3
 8009b64:	2036      	movs	r0, #54	; 0x36
 8009b66:	f7fb fa2d 	bl	8004fc4 <pbuf_alloc>
 8009b6a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f000 80b7 	beq.w	8009ce2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	891a      	ldrh	r2, [r3, #8]
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	891b      	ldrh	r3, [r3, #8]
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	887b      	ldrh	r3, [r7, #2]
 8009b84:	4413      	add	r3, r2
 8009b86:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	6858      	ldr	r0, [r3, #4]
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	7bbb      	ldrb	r3, [r7, #14]
 8009b92:	18d1      	adds	r1, r2, r3
 8009b94:	897b      	ldrh	r3, [r7, #10]
 8009b96:	89ba      	ldrh	r2, [r7, #12]
 8009b98:	f7fb fef2 	bl	8005980 <pbuf_copy_partial>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	89bb      	ldrh	r3, [r7, #12]
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	f040 809f 	bne.w	8009ce6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	899b      	ldrh	r3, [r3, #12]
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7fa fa37 	bl	8004024 <lwip_htons>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bbe:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009bc4:	7efb      	ldrb	r3, [r7, #27]
 8009bc6:	f003 0308 	and.w	r3, r3, #8
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d007      	beq.n	8009bde <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009bce:	7efb      	ldrb	r3, [r7, #27]
 8009bd0:	f023 0308 	bic.w	r3, r3, #8
 8009bd4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8009bd6:	7ebb      	ldrb	r3, [r7, #26]
 8009bd8:	f043 0308 	orr.w	r3, r3, #8
 8009bdc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009bde:	7efb      	ldrb	r3, [r7, #27]
 8009be0:	f003 0301 	and.w	r3, r3, #1
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d007      	beq.n	8009bf8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8009be8:	7efb      	ldrb	r3, [r7, #27]
 8009bea:	f023 0301 	bic.w	r3, r3, #1
 8009bee:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009bf0:	7ebb      	ldrb	r3, [r7, #26]
 8009bf2:	f043 0301 	orr.w	r3, r3, #1
 8009bf6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7fa fa25 	bl	800404e <lwip_htonl>
 8009c04:	4602      	mov	r2, r0
 8009c06:	887b      	ldrh	r3, [r7, #2]
 8009c08:	18d1      	adds	r1, r2, r3
 8009c0a:	7eba      	ldrb	r2, [r7, #26]
 8009c0c:	7bfb      	ldrb	r3, [r7, #15]
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	460b      	mov	r3, r1
 8009c12:	6939      	ldr	r1, [r7, #16]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f7ff fea7 	bl	8009968 <tcp_create_segment>
 8009c1a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d063      	beq.n	8009cea <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7fb fd38 	bl	800569c <pbuf_clen>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	461a      	mov	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009c36:	1a9b      	subs	r3, r3, r2
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	6858      	ldr	r0, [r3, #4]
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	891a      	ldrh	r2, [r3, #8]
 8009c4a:	89bb      	ldrh	r3, [r7, #12]
 8009c4c:	1ad3      	subs	r3, r2, r3
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	4619      	mov	r1, r3
 8009c52:	f7fb fb15 	bl	8005280 <pbuf_realloc>
  useg->len -= remainder;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	891a      	ldrh	r2, [r3, #8]
 8009c5a:	89bb      	ldrh	r3, [r7, #12]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	899b      	ldrh	r3, [r3, #12]
 8009c6a:	b29c      	uxth	r4, r3
 8009c6c:	7efb      	ldrb	r3, [r7, #27]
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fa f9d7 	bl	8004024 <lwip_htons>
 8009c76:	4603      	mov	r3, r0
 8009c78:	461a      	mov	r2, r3
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	4322      	orrs	r2, r4
 8009c80:	b292      	uxth	r2, r2
 8009c82:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fb fd07 	bl	800569c <pbuf_clen>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	461a      	mov	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009c98:	4413      	add	r3, r2
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fb fcf8 	bl	800569c <pbuf_clen>
 8009cac:	4603      	mov	r3, r0
 8009cae:	461a      	mov	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009cb6:	4413      	add	r3, r2
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	69fa      	ldr	r2, [r7, #28]
 8009ccc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d103      	bne.n	8009cde <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	e016      	b.n	8009d10 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009ce2:	bf00      	nop
 8009ce4:	e002      	b.n	8009cec <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009ce6:	bf00      	nop
 8009ce8:	e000      	b.n	8009cec <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009cea:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d006      	beq.n	8009d00 <tcp_split_unsent_seg+0x25c>
 8009cf2:	4b09      	ldr	r3, [pc, #36]	; (8009d18 <tcp_split_unsent_seg+0x274>)
 8009cf4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009cf8:	490d      	ldr	r1, [pc, #52]	; (8009d30 <tcp_split_unsent_seg+0x28c>)
 8009cfa:	4809      	ldr	r0, [pc, #36]	; (8009d20 <tcp_split_unsent_seg+0x27c>)
 8009cfc:	f004 fb40 	bl	800e380 <iprintf>
  if (p != NULL) {
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d002      	beq.n	8009d0c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8009d06:	6938      	ldr	r0, [r7, #16]
 8009d08:	f7fb fc40 	bl	800558c <pbuf_free>
  }

  return ERR_MEM;
 8009d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3724      	adds	r7, #36	; 0x24
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd90      	pop	{r4, r7, pc}
 8009d18:	08010df0 	.word	0x08010df0
 8009d1c:	08011184 	.word	0x08011184
 8009d20:	08010e44 	.word	0x08010e44
 8009d24:	080111a8 	.word	0x080111a8
 8009d28:	080111cc 	.word	0x080111cc
 8009d2c:	080111dc 	.word	0x080111dc
 8009d30:	080111ec 	.word	0x080111ec

08009d34 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009d34:	b590      	push	{r4, r7, lr}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d106      	bne.n	8009d50 <tcp_send_fin+0x1c>
 8009d42:	4b21      	ldr	r3, [pc, #132]	; (8009dc8 <tcp_send_fin+0x94>)
 8009d44:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009d48:	4920      	ldr	r1, [pc, #128]	; (8009dcc <tcp_send_fin+0x98>)
 8009d4a:	4821      	ldr	r0, [pc, #132]	; (8009dd0 <tcp_send_fin+0x9c>)
 8009d4c:	f004 fb18 	bl	800e380 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d02e      	beq.n	8009db6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d5c:	60fb      	str	r3, [r7, #12]
 8009d5e:	e002      	b.n	8009d66 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1f8      	bne.n	8009d60 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	899b      	ldrh	r3, [r3, #12]
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fa f954 	bl	8004024 <lwip_htons>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	f003 0307 	and.w	r3, r3, #7
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d116      	bne.n	8009db6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	899b      	ldrh	r3, [r3, #12]
 8009d8e:	b29c      	uxth	r4, r3
 8009d90:	2001      	movs	r0, #1
 8009d92:	f7fa f947 	bl	8004024 <lwip_htons>
 8009d96:	4603      	mov	r3, r0
 8009d98:	461a      	mov	r2, r3
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	4322      	orrs	r2, r4
 8009da0:	b292      	uxth	r2, r2
 8009da2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	8b5b      	ldrh	r3, [r3, #26]
 8009da8:	f043 0320 	orr.w	r3, r3, #32
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	e004      	b.n	8009dc0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009db6:	2101      	movs	r1, #1
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f80b 	bl	8009dd4 <tcp_enqueue_flags>
 8009dbe:	4603      	mov	r3, r0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd90      	pop	{r4, r7, pc}
 8009dc8:	08010df0 	.word	0x08010df0
 8009dcc:	080111f8 	.word	0x080111f8
 8009dd0:	08010e44 	.word	0x08010e44

08009dd4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b08a      	sub	sp, #40	; 0x28
 8009dd8:	af02      	add	r7, sp, #8
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009de0:	2300      	movs	r3, #0
 8009de2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009de4:	2300      	movs	r3, #0
 8009de6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009de8:	78fb      	ldrb	r3, [r7, #3]
 8009dea:	f003 0303 	and.w	r3, r3, #3
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d106      	bne.n	8009e00 <tcp_enqueue_flags+0x2c>
 8009df2:	4b67      	ldr	r3, [pc, #412]	; (8009f90 <tcp_enqueue_flags+0x1bc>)
 8009df4:	f240 4211 	movw	r2, #1041	; 0x411
 8009df8:	4966      	ldr	r1, [pc, #408]	; (8009f94 <tcp_enqueue_flags+0x1c0>)
 8009dfa:	4867      	ldr	r0, [pc, #412]	; (8009f98 <tcp_enqueue_flags+0x1c4>)
 8009dfc:	f004 fac0 	bl	800e380 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d106      	bne.n	8009e14 <tcp_enqueue_flags+0x40>
 8009e06:	4b62      	ldr	r3, [pc, #392]	; (8009f90 <tcp_enqueue_flags+0x1bc>)
 8009e08:	f240 4213 	movw	r2, #1043	; 0x413
 8009e0c:	4963      	ldr	r1, [pc, #396]	; (8009f9c <tcp_enqueue_flags+0x1c8>)
 8009e0e:	4862      	ldr	r0, [pc, #392]	; (8009f98 <tcp_enqueue_flags+0x1c4>)
 8009e10:	f004 fab6 	bl	800e380 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009e14:	78fb      	ldrb	r3, [r7, #3]
 8009e16:	f003 0302 	and.w	r3, r3, #2
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d001      	beq.n	8009e22 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009e22:	7ffb      	ldrb	r3, [r7, #31]
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	f003 0304 	and.w	r3, r3, #4
 8009e2c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009e2e:	7dfb      	ldrb	r3, [r7, #23]
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009e36:	4619      	mov	r1, r3
 8009e38:	2036      	movs	r0, #54	; 0x36
 8009e3a:	f7fb f8c3 	bl	8004fc4 <pbuf_alloc>
 8009e3e:	6138      	str	r0, [r7, #16]
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d109      	bne.n	8009e5a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	8b5b      	ldrh	r3, [r3, #26]
 8009e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009e54:	f04f 33ff 	mov.w	r3, #4294967295
 8009e58:	e095      	b.n	8009f86 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	895a      	ldrh	r2, [r3, #10]
 8009e5e:	7dfb      	ldrb	r3, [r7, #23]
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d206      	bcs.n	8009e74 <tcp_enqueue_flags+0xa0>
 8009e66:	4b4a      	ldr	r3, [pc, #296]	; (8009f90 <tcp_enqueue_flags+0x1bc>)
 8009e68:	f240 4239 	movw	r2, #1081	; 0x439
 8009e6c:	494c      	ldr	r1, [pc, #304]	; (8009fa0 <tcp_enqueue_flags+0x1cc>)
 8009e6e:	484a      	ldr	r0, [pc, #296]	; (8009f98 <tcp_enqueue_flags+0x1c4>)
 8009e70:	f004 fa86 	bl	800e380 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009e78:	78fa      	ldrb	r2, [r7, #3]
 8009e7a:	7ffb      	ldrb	r3, [r7, #31]
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	460b      	mov	r3, r1
 8009e80:	6939      	ldr	r1, [r7, #16]
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7ff fd70 	bl	8009968 <tcp_create_segment>
 8009e88:	60f8      	str	r0, [r7, #12]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d109      	bne.n	8009ea4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	8b5b      	ldrh	r3, [r3, #26]
 8009e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea2:	e070      	b.n	8009f86 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	f003 0303 	and.w	r3, r3, #3
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d006      	beq.n	8009ebe <tcp_enqueue_flags+0xea>
 8009eb0:	4b37      	ldr	r3, [pc, #220]	; (8009f90 <tcp_enqueue_flags+0x1bc>)
 8009eb2:	f240 4242 	movw	r2, #1090	; 0x442
 8009eb6:	493b      	ldr	r1, [pc, #236]	; (8009fa4 <tcp_enqueue_flags+0x1d0>)
 8009eb8:	4837      	ldr	r0, [pc, #220]	; (8009f98 <tcp_enqueue_flags+0x1c4>)
 8009eba:	f004 fa61 	bl	800e380 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	891b      	ldrh	r3, [r3, #8]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d006      	beq.n	8009ed4 <tcp_enqueue_flags+0x100>
 8009ec6:	4b32      	ldr	r3, [pc, #200]	; (8009f90 <tcp_enqueue_flags+0x1bc>)
 8009ec8:	f240 4243 	movw	r2, #1091	; 0x443
 8009ecc:	4936      	ldr	r1, [pc, #216]	; (8009fa8 <tcp_enqueue_flags+0x1d4>)
 8009ece:	4832      	ldr	r0, [pc, #200]	; (8009f98 <tcp_enqueue_flags+0x1c4>)
 8009ed0:	f004 fa56 	bl	800e380 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d103      	bne.n	8009ee4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	68fa      	ldr	r2, [r7, #12]
 8009ee0:	66da      	str	r2, [r3, #108]	; 0x6c
 8009ee2:	e00d      	b.n	8009f00 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ee8:	61bb      	str	r3, [r7, #24]
 8009eea:	e002      	b.n	8009ef2 <tcp_enqueue_flags+0x11e>
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	61bb      	str	r3, [r7, #24]
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1f8      	bne.n	8009eec <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009f08:	78fb      	ldrb	r3, [r7, #3]
 8009f0a:	f003 0302 	and.w	r3, r3, #2
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d104      	bne.n	8009f1c <tcp_enqueue_flags+0x148>
 8009f12:	78fb      	ldrb	r3, [r7, #3]
 8009f14:	f003 0301 	and.w	r3, r3, #1
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d004      	beq.n	8009f26 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f20:	1c5a      	adds	r2, r3, #1
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009f26:	78fb      	ldrb	r3, [r7, #3]
 8009f28:	f003 0301 	and.w	r3, r3, #1
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d006      	beq.n	8009f3e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	8b5b      	ldrh	r3, [r3, #26]
 8009f34:	f043 0320 	orr.w	r3, r3, #32
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fb fbaa 	bl	800569c <pbuf_clen>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009f52:	4413      	add	r3, r2
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00e      	beq.n	8009f84 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10a      	bne.n	8009f84 <tcp_enqueue_flags+0x1b0>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d106      	bne.n	8009f84 <tcp_enqueue_flags+0x1b0>
 8009f76:	4b06      	ldr	r3, [pc, #24]	; (8009f90 <tcp_enqueue_flags+0x1bc>)
 8009f78:	f240 4265 	movw	r2, #1125	; 0x465
 8009f7c:	490b      	ldr	r1, [pc, #44]	; (8009fac <tcp_enqueue_flags+0x1d8>)
 8009f7e:	4806      	ldr	r0, [pc, #24]	; (8009f98 <tcp_enqueue_flags+0x1c4>)
 8009f80:	f004 f9fe 	bl	800e380 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3720      	adds	r7, #32
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	08010df0 	.word	0x08010df0
 8009f94:	08011214 	.word	0x08011214
 8009f98:	08010e44 	.word	0x08010e44
 8009f9c:	0801126c 	.word	0x0801126c
 8009fa0:	0801128c 	.word	0x0801128c
 8009fa4:	080112c8 	.word	0x080112c8
 8009fa8:	080112e0 	.word	0x080112e0
 8009fac:	0801130c 	.word	0x0801130c

08009fb0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009fb0:	b5b0      	push	{r4, r5, r7, lr}
 8009fb2:	b08a      	sub	sp, #40	; 0x28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d106      	bne.n	8009fcc <tcp_output+0x1c>
 8009fbe:	4b9e      	ldr	r3, [pc, #632]	; (800a238 <tcp_output+0x288>)
 8009fc0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8009fc4:	499d      	ldr	r1, [pc, #628]	; (800a23c <tcp_output+0x28c>)
 8009fc6:	489e      	ldr	r0, [pc, #632]	; (800a240 <tcp_output+0x290>)
 8009fc8:	f004 f9da 	bl	800e380 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	7d1b      	ldrb	r3, [r3, #20]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d106      	bne.n	8009fe2 <tcp_output+0x32>
 8009fd4:	4b98      	ldr	r3, [pc, #608]	; (800a238 <tcp_output+0x288>)
 8009fd6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8009fda:	499a      	ldr	r1, [pc, #616]	; (800a244 <tcp_output+0x294>)
 8009fdc:	4898      	ldr	r0, [pc, #608]	; (800a240 <tcp_output+0x290>)
 8009fde:	f004 f9cf 	bl	800e380 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009fe2:	4b99      	ldr	r3, [pc, #612]	; (800a248 <tcp_output+0x298>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d101      	bne.n	8009ff0 <tcp_output+0x40>
    return ERR_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	e1ce      	b.n	800a38e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	bf28      	it	cs
 800a000:	4613      	movcs	r3, r2
 800a002:	b29b      	uxth	r3, r3
 800a004:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a00a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10b      	bne.n	800a02a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	8b5b      	ldrh	r3, [r3, #26]
 800a016:	f003 0302 	and.w	r3, r3, #2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 81aa 	beq.w	800a374 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 fdcb 	bl	800abbc <tcp_send_empty_ack>
 800a026:	4603      	mov	r3, r0
 800a028:	e1b1      	b.n	800a38e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	3304      	adds	r3, #4
 800a030:	461a      	mov	r2, r3
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f7ff fc7c 	bl	8009930 <tcp_route>
 800a038:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d102      	bne.n	800a046 <tcp_output+0x96>
    return ERR_RTE;
 800a040:	f06f 0303 	mvn.w	r3, #3
 800a044:	e1a3      	b.n	800a38e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d003      	beq.n	800a054 <tcp_output+0xa4>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d111      	bne.n	800a078 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d002      	beq.n	800a060 <tcp_output+0xb0>
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	3304      	adds	r3, #4
 800a05e:	e000      	b.n	800a062 <tcp_output+0xb2>
 800a060:	2300      	movs	r3, #0
 800a062:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d102      	bne.n	800a070 <tcp_output+0xc0>
      return ERR_RTE;
 800a06a:	f06f 0303 	mvn.w	r3, #3
 800a06e:	e18e      	b.n	800a38e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	4618      	mov	r0, r3
 800a080:	f7f9 ffe5 	bl	800404e <lwip_htonl>
 800a084:	4602      	mov	r2, r0
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a08e:	8912      	ldrh	r2, [r2, #8]
 800a090:	4413      	add	r3, r2
 800a092:	69ba      	ldr	r2, [r7, #24]
 800a094:	429a      	cmp	r2, r3
 800a096:	d227      	bcs.n	800a0e8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a09e:	461a      	mov	r2, r3
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d114      	bne.n	800a0d0 <tcp_output+0x120>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d110      	bne.n	800a0d0 <tcp_output+0x120>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10b      	bne.n	800a0d0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	8b5b      	ldrh	r3, [r3, #26]
 800a0d4:	f003 0302 	and.w	r3, r3, #2
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f000 814d 	beq.w	800a378 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 fd6c 	bl	800abbc <tcp_send_empty_ack>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	e152      	b.n	800a38e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0f4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a0f6:	6a3b      	ldr	r3, [r7, #32]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 811c 	beq.w	800a336 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a0fe:	e002      	b.n	800a106 <tcp_output+0x156>
 800a100:	6a3b      	ldr	r3, [r7, #32]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	623b      	str	r3, [r7, #32]
 800a106:	6a3b      	ldr	r3, [r7, #32]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d1f8      	bne.n	800a100 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a10e:	e112      	b.n	800a336 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	899b      	ldrh	r3, [r3, #12]
 800a116:	b29b      	uxth	r3, r3
 800a118:	4618      	mov	r0, r3
 800a11a:	f7f9 ff83 	bl	8004024 <lwip_htons>
 800a11e:	4603      	mov	r3, r0
 800a120:	b2db      	uxtb	r3, r3
 800a122:	f003 0304 	and.w	r3, r3, #4
 800a126:	2b00      	cmp	r3, #0
 800a128:	d006      	beq.n	800a138 <tcp_output+0x188>
 800a12a:	4b43      	ldr	r3, [pc, #268]	; (800a238 <tcp_output+0x288>)
 800a12c:	f240 5236 	movw	r2, #1334	; 0x536
 800a130:	4946      	ldr	r1, [pc, #280]	; (800a24c <tcp_output+0x29c>)
 800a132:	4843      	ldr	r0, [pc, #268]	; (800a240 <tcp_output+0x290>)
 800a134:	f004 f924 	bl	800e380 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d01f      	beq.n	800a180 <tcp_output+0x1d0>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	8b5b      	ldrh	r3, [r3, #26]
 800a144:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d119      	bne.n	800a180 <tcp_output+0x1d0>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00b      	beq.n	800a16c <tcp_output+0x1bc>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d110      	bne.n	800a180 <tcp_output+0x1d0>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a162:	891a      	ldrh	r2, [r3, #8]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a168:	429a      	cmp	r2, r3
 800a16a:	d209      	bcs.n	800a180 <tcp_output+0x1d0>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a172:	2b00      	cmp	r3, #0
 800a174:	d004      	beq.n	800a180 <tcp_output+0x1d0>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a17c:	2b08      	cmp	r3, #8
 800a17e:	d901      	bls.n	800a184 <tcp_output+0x1d4>
 800a180:	2301      	movs	r3, #1
 800a182:	e000      	b.n	800a186 <tcp_output+0x1d6>
 800a184:	2300      	movs	r3, #0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d106      	bne.n	800a198 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	8b5b      	ldrh	r3, [r3, #26]
 800a18e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a192:	2b00      	cmp	r3, #0
 800a194:	f000 80e4 	beq.w	800a360 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	7d1b      	ldrb	r3, [r3, #20]
 800a19c:	2b02      	cmp	r3, #2
 800a19e:	d00d      	beq.n	800a1bc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	899b      	ldrh	r3, [r3, #12]
 800a1a6:	b29c      	uxth	r4, r3
 800a1a8:	2010      	movs	r0, #16
 800a1aa:	f7f9 ff3b 	bl	8004024 <lwip_htons>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	4322      	orrs	r2, r4
 800a1b8:	b292      	uxth	r2, r2
 800a1ba:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	6879      	ldr	r1, [r7, #4]
 800a1c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1c2:	f000 f909 	bl	800a3d8 <tcp_output_segment>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a1ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d009      	beq.n	800a1e6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	8b5b      	ldrh	r3, [r3, #26]
 800a1d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	835a      	strh	r2, [r3, #26]
      return err;
 800a1e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1e4:	e0d3      	b.n	800a38e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	7d1b      	ldrb	r3, [r3, #20]
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d006      	beq.n	800a204 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	8b5b      	ldrh	r3, [r3, #26]
 800a1fa:	f023 0303 	bic.w	r3, r3, #3
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7f9 ff1f 	bl	800404e <lwip_htonl>
 800a210:	4604      	mov	r4, r0
 800a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a214:	891b      	ldrh	r3, [r3, #8]
 800a216:	461d      	mov	r5, r3
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	899b      	ldrh	r3, [r3, #12]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	4618      	mov	r0, r3
 800a222:	f7f9 feff 	bl	8004024 <lwip_htons>
 800a226:	4603      	mov	r3, r0
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	f003 0303 	and.w	r3, r3, #3
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00e      	beq.n	800a250 <tcp_output+0x2a0>
 800a232:	2301      	movs	r3, #1
 800a234:	e00d      	b.n	800a252 <tcp_output+0x2a2>
 800a236:	bf00      	nop
 800a238:	08010df0 	.word	0x08010df0
 800a23c:	08011334 	.word	0x08011334
 800a240:	08010e44 	.word	0x08010e44
 800a244:	0801134c 	.word	0x0801134c
 800a248:	20008b08 	.word	0x20008b08
 800a24c:	08011374 	.word	0x08011374
 800a250:	2300      	movs	r3, #0
 800a252:	442b      	add	r3, r5
 800a254:	4423      	add	r3, r4
 800a256:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	1ad3      	subs	r3, r2, r3
 800a260:	2b00      	cmp	r3, #0
 800a262:	da02      	bge.n	800a26a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	891b      	ldrh	r3, [r3, #8]
 800a26e:	461c      	mov	r4, r3
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	899b      	ldrh	r3, [r3, #12]
 800a276:	b29b      	uxth	r3, r3
 800a278:	4618      	mov	r0, r3
 800a27a:	f7f9 fed3 	bl	8004024 <lwip_htons>
 800a27e:	4603      	mov	r3, r0
 800a280:	b2db      	uxtb	r3, r3
 800a282:	f003 0303 	and.w	r3, r3, #3
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <tcp_output+0x2de>
 800a28a:	2301      	movs	r3, #1
 800a28c:	e000      	b.n	800a290 <tcp_output+0x2e0>
 800a28e:	2300      	movs	r3, #0
 800a290:	4423      	add	r3, r4
 800a292:	2b00      	cmp	r3, #0
 800a294:	d049      	beq.n	800a32a <tcp_output+0x37a>
      seg->next = NULL;
 800a296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a298:	2200      	movs	r2, #0
 800a29a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d105      	bne.n	800a2b0 <tcp_output+0x300>
        pcb->unacked = seg;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ac:	623b      	str	r3, [r7, #32]
 800a2ae:	e03f      	b.n	800a330 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7f9 fec9 	bl	800404e <lwip_htonl>
 800a2bc:	4604      	mov	r4, r0
 800a2be:	6a3b      	ldr	r3, [r7, #32]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7f9 fec2 	bl	800404e <lwip_htonl>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	1ae3      	subs	r3, r4, r3
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	da24      	bge.n	800a31c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	3370      	adds	r3, #112	; 0x70
 800a2d6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a2d8:	e002      	b.n	800a2e0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d011      	beq.n	800a30c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7f9 feac 	bl	800404e <lwip_htonl>
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7f9 fea5 	bl	800404e <lwip_htonl>
 800a304:	4603      	mov	r3, r0
 800a306:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a308:	2b00      	cmp	r3, #0
 800a30a:	dbe6      	blt.n	800a2da <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a312:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a318:	601a      	str	r2, [r3, #0]
 800a31a:	e009      	b.n	800a330 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a320:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a322:	6a3b      	ldr	r3, [r7, #32]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	623b      	str	r3, [r7, #32]
 800a328:	e002      	b.n	800a330 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a32a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a32c:	f7fc fc43 	bl	8006bb6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a334:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d012      	beq.n	800a362 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	4618      	mov	r0, r3
 800a344:	f7f9 fe83 	bl	800404e <lwip_htonl>
 800a348:	4602      	mov	r2, r0
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a34e:	1ad3      	subs	r3, r2, r3
 800a350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a352:	8912      	ldrh	r2, [r2, #8]
 800a354:	4413      	add	r3, r2
  while (seg != NULL &&
 800a356:	69ba      	ldr	r2, [r7, #24]
 800a358:	429a      	cmp	r2, r3
 800a35a:	f4bf aed9 	bcs.w	800a110 <tcp_output+0x160>
 800a35e:	e000      	b.n	800a362 <tcp_output+0x3b2>
      break;
 800a360:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a366:	2b00      	cmp	r3, #0
 800a368:	d108      	bne.n	800a37c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a372:	e004      	b.n	800a37e <tcp_output+0x3ce>
    goto output_done;
 800a374:	bf00      	nop
 800a376:	e002      	b.n	800a37e <tcp_output+0x3ce>
    goto output_done;
 800a378:	bf00      	nop
 800a37a:	e000      	b.n	800a37e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a37c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	8b5b      	ldrh	r3, [r3, #26]
 800a382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a386:	b29a      	uxth	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3728      	adds	r7, #40	; 0x28
 800a392:	46bd      	mov	sp, r7
 800a394:	bdb0      	pop	{r4, r5, r7, pc}
 800a396:	bf00      	nop

0800a398 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d106      	bne.n	800a3b4 <tcp_output_segment_busy+0x1c>
 800a3a6:	4b09      	ldr	r3, [pc, #36]	; (800a3cc <tcp_output_segment_busy+0x34>)
 800a3a8:	f240 529a 	movw	r2, #1434	; 0x59a
 800a3ac:	4908      	ldr	r1, [pc, #32]	; (800a3d0 <tcp_output_segment_busy+0x38>)
 800a3ae:	4809      	ldr	r0, [pc, #36]	; (800a3d4 <tcp_output_segment_busy+0x3c>)
 800a3b0:	f003 ffe6 	bl	800e380 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	7b9b      	ldrb	r3, [r3, #14]
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d001      	beq.n	800a3c2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e000      	b.n	800a3c4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	08010df0 	.word	0x08010df0
 800a3d0:	0801138c 	.word	0x0801138c
 800a3d4:	08010e44 	.word	0x08010e44

0800a3d8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a3d8:	b5b0      	push	{r4, r5, r7, lr}
 800a3da:	b08c      	sub	sp, #48	; 0x30
 800a3dc:	af04      	add	r7, sp, #16
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d106      	bne.n	800a3f8 <tcp_output_segment+0x20>
 800a3ea:	4b63      	ldr	r3, [pc, #396]	; (800a578 <tcp_output_segment+0x1a0>)
 800a3ec:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800a3f0:	4962      	ldr	r1, [pc, #392]	; (800a57c <tcp_output_segment+0x1a4>)
 800a3f2:	4863      	ldr	r0, [pc, #396]	; (800a580 <tcp_output_segment+0x1a8>)
 800a3f4:	f003 ffc4 	bl	800e380 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d106      	bne.n	800a40c <tcp_output_segment+0x34>
 800a3fe:	4b5e      	ldr	r3, [pc, #376]	; (800a578 <tcp_output_segment+0x1a0>)
 800a400:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a404:	495f      	ldr	r1, [pc, #380]	; (800a584 <tcp_output_segment+0x1ac>)
 800a406:	485e      	ldr	r0, [pc, #376]	; (800a580 <tcp_output_segment+0x1a8>)
 800a408:	f003 ffba 	bl	800e380 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d106      	bne.n	800a420 <tcp_output_segment+0x48>
 800a412:	4b59      	ldr	r3, [pc, #356]	; (800a578 <tcp_output_segment+0x1a0>)
 800a414:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800a418:	495b      	ldr	r1, [pc, #364]	; (800a588 <tcp_output_segment+0x1b0>)
 800a41a:	4859      	ldr	r0, [pc, #356]	; (800a580 <tcp_output_segment+0x1a8>)
 800a41c:	f003 ffb0 	bl	800e380 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f7ff ffb9 	bl	800a398 <tcp_output_segment_busy>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a42c:	2300      	movs	r3, #0
 800a42e:	e09f      	b.n	800a570 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	68dc      	ldr	r4, [r3, #12]
 800a438:	4610      	mov	r0, r2
 800a43a:	f7f9 fe08 	bl	800404e <lwip_htonl>
 800a43e:	4603      	mov	r3, r0
 800a440:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	68dc      	ldr	r4, [r3, #12]
 800a44a:	4610      	mov	r0, r2
 800a44c:	f7f9 fdea 	bl	8004024 <lwip_htons>
 800a450:	4603      	mov	r3, r0
 800a452:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a458:	68ba      	ldr	r2, [r7, #8]
 800a45a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a45c:	441a      	add	r2, r3
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	3314      	adds	r3, #20
 800a468:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	7a9b      	ldrb	r3, [r3, #10]
 800a46e:	f003 0301 	and.w	r3, r3, #1
 800a472:	2b00      	cmp	r3, #0
 800a474:	d015      	beq.n	800a4a2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	3304      	adds	r3, #4
 800a47a:	461a      	mov	r2, r3
 800a47c:	6879      	ldr	r1, [r7, #4]
 800a47e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a482:	f7fc fe8f 	bl	80071a4 <tcp_eff_send_mss_netif>
 800a486:	4603      	mov	r3, r0
 800a488:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a48a:	8b7b      	ldrh	r3, [r7, #26]
 800a48c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a490:	4618      	mov	r0, r3
 800a492:	f7f9 fddc 	bl	800404e <lwip_htonl>
 800a496:	4602      	mov	r2, r0
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	3304      	adds	r3, #4
 800a4a0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	da02      	bge.n	800a4b2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10c      	bne.n	800a4d4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a4ba:	4b34      	ldr	r3, [pc, #208]	; (800a58c <tcp_output_segment+0x1b4>)
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7f9 fdc0 	bl	800404e <lwip_htonl>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	68da      	ldr	r2, [r3, #12]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	8959      	ldrh	r1, [r3, #10]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	8b3a      	ldrh	r2, [r7, #24]
 800a4ee:	1a8a      	subs	r2, r1, r2
 800a4f0:	b292      	uxth	r2, r2
 800a4f2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	8919      	ldrh	r1, [r3, #8]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	8b3a      	ldrh	r2, [r7, #24]
 800a500:	1a8a      	subs	r2, r1, r2
 800a502:	b292      	uxth	r2, r2
 800a504:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	68d2      	ldr	r2, [r2, #12]
 800a50e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	2200      	movs	r2, #0
 800a516:	741a      	strb	r2, [r3, #16]
 800a518:	2200      	movs	r2, #0
 800a51a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	f103 0214 	add.w	r2, r3, #20
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	7a9b      	ldrb	r3, [r3, #10]
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	f003 0304 	and.w	r3, r3, #4
 800a52e:	4413      	add	r3, r2
 800a530:	69fa      	ldr	r2, [r7, #28]
 800a532:	429a      	cmp	r2, r3
 800a534:	d006      	beq.n	800a544 <tcp_output_segment+0x16c>
 800a536:	4b10      	ldr	r3, [pc, #64]	; (800a578 <tcp_output_segment+0x1a0>)
 800a538:	f240 621c 	movw	r2, #1564	; 0x61c
 800a53c:	4914      	ldr	r1, [pc, #80]	; (800a590 <tcp_output_segment+0x1b8>)
 800a53e:	4810      	ldr	r0, [pc, #64]	; (800a580 <tcp_output_segment+0x1a8>)
 800a540:	f003 ff1e 	bl	800e380 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6858      	ldr	r0, [r3, #4]
 800a548:	68b9      	ldr	r1, [r7, #8]
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	1d1c      	adds	r4, r3, #4
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	7add      	ldrb	r5, [r3, #11]
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	7a9b      	ldrb	r3, [r3, #10]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	9202      	str	r2, [sp, #8]
 800a55a:	2206      	movs	r2, #6
 800a55c:	9201      	str	r2, [sp, #4]
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	462b      	mov	r3, r5
 800a562:	4622      	mov	r2, r4
 800a564:	f002 fdf0 	bl	800d148 <ip4_output_if>
 800a568:	4603      	mov	r3, r0
 800a56a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a56c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3720      	adds	r7, #32
 800a574:	46bd      	mov	sp, r7
 800a576:	bdb0      	pop	{r4, r5, r7, pc}
 800a578:	08010df0 	.word	0x08010df0
 800a57c:	080113b4 	.word	0x080113b4
 800a580:	08010e44 	.word	0x08010e44
 800a584:	080113d4 	.word	0x080113d4
 800a588:	080113f4 	.word	0x080113f4
 800a58c:	20008af8 	.word	0x20008af8
 800a590:	08011418 	.word	0x08011418

0800a594 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a594:	b5b0      	push	{r4, r5, r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d106      	bne.n	800a5b0 <tcp_rexmit_rto_prepare+0x1c>
 800a5a2:	4b31      	ldr	r3, [pc, #196]	; (800a668 <tcp_rexmit_rto_prepare+0xd4>)
 800a5a4:	f240 6263 	movw	r2, #1635	; 0x663
 800a5a8:	4930      	ldr	r1, [pc, #192]	; (800a66c <tcp_rexmit_rto_prepare+0xd8>)
 800a5aa:	4831      	ldr	r0, [pc, #196]	; (800a670 <tcp_rexmit_rto_prepare+0xdc>)
 800a5ac:	f003 fee8 	bl	800e380 <iprintf>

  if (pcb->unacked == NULL) {
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d102      	bne.n	800a5be <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a5b8:	f06f 0305 	mvn.w	r3, #5
 800a5bc:	e050      	b.n	800a660 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5c2:	60fb      	str	r3, [r7, #12]
 800a5c4:	e00b      	b.n	800a5de <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f7ff fee6 	bl	800a398 <tcp_output_segment_busy>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d002      	beq.n	800a5d8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a5d2:	f06f 0305 	mvn.w	r3, #5
 800a5d6:	e043      	b.n	800a660 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	60fb      	str	r3, [r7, #12]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d1ef      	bne.n	800a5c6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f7ff fed6 	bl	800a398 <tcp_output_segment_busy>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d002      	beq.n	800a5f8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a5f2:	f06f 0305 	mvn.w	r3, #5
 800a5f6:	e033      	b.n	800a660 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	8b5b      	ldrh	r3, [r3, #26]
 800a612:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a616:	b29a      	uxth	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	4618      	mov	r0, r3
 800a624:	f7f9 fd13 	bl	800404e <lwip_htonl>
 800a628:	4604      	mov	r4, r0
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	891b      	ldrh	r3, [r3, #8]
 800a62e:	461d      	mov	r5, r3
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	899b      	ldrh	r3, [r3, #12]
 800a636:	b29b      	uxth	r3, r3
 800a638:	4618      	mov	r0, r3
 800a63a:	f7f9 fcf3 	bl	8004024 <lwip_htons>
 800a63e:	4603      	mov	r3, r0
 800a640:	b2db      	uxtb	r3, r3
 800a642:	f003 0303 	and.w	r3, r3, #3
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <tcp_rexmit_rto_prepare+0xba>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e000      	b.n	800a650 <tcp_rexmit_rto_prepare+0xbc>
 800a64e:	2300      	movs	r3, #0
 800a650:	442b      	add	r3, r5
 800a652:	18e2      	adds	r2, r4, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bdb0      	pop	{r4, r5, r7, pc}
 800a668:	08010df0 	.word	0x08010df0
 800a66c:	0801142c 	.word	0x0801142c
 800a670:	08010e44 	.word	0x08010e44

0800a674 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d106      	bne.n	800a690 <tcp_rexmit_rto_commit+0x1c>
 800a682:	4b0d      	ldr	r3, [pc, #52]	; (800a6b8 <tcp_rexmit_rto_commit+0x44>)
 800a684:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a688:	490c      	ldr	r1, [pc, #48]	; (800a6bc <tcp_rexmit_rto_commit+0x48>)
 800a68a:	480d      	ldr	r0, [pc, #52]	; (800a6c0 <tcp_rexmit_rto_commit+0x4c>)
 800a68c:	f003 fe78 	bl	800e380 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a696:	2bff      	cmp	r3, #255	; 0xff
 800a698:	d007      	beq.n	800a6aa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	b2da      	uxtb	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f7ff fc80 	bl	8009fb0 <tcp_output>
}
 800a6b0:	bf00      	nop
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	08010df0 	.word	0x08010df0
 800a6bc:	08011450 	.word	0x08011450
 800a6c0:	08010e44 	.word	0x08010e44

0800a6c4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d106      	bne.n	800a6e0 <tcp_rexmit_rto+0x1c>
 800a6d2:	4b0a      	ldr	r3, [pc, #40]	; (800a6fc <tcp_rexmit_rto+0x38>)
 800a6d4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a6d8:	4909      	ldr	r1, [pc, #36]	; (800a700 <tcp_rexmit_rto+0x3c>)
 800a6da:	480a      	ldr	r0, [pc, #40]	; (800a704 <tcp_rexmit_rto+0x40>)
 800a6dc:	f003 fe50 	bl	800e380 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f7ff ff57 	bl	800a594 <tcp_rexmit_rto_prepare>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d102      	bne.n	800a6f2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f7ff ffc1 	bl	800a674 <tcp_rexmit_rto_commit>
  }
}
 800a6f2:	bf00      	nop
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	08010df0 	.word	0x08010df0
 800a700:	08011474 	.word	0x08011474
 800a704:	08010e44 	.word	0x08010e44

0800a708 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a708:	b590      	push	{r4, r7, lr}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d106      	bne.n	800a724 <tcp_rexmit+0x1c>
 800a716:	4b2f      	ldr	r3, [pc, #188]	; (800a7d4 <tcp_rexmit+0xcc>)
 800a718:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a71c:	492e      	ldr	r1, [pc, #184]	; (800a7d8 <tcp_rexmit+0xd0>)
 800a71e:	482f      	ldr	r0, [pc, #188]	; (800a7dc <tcp_rexmit+0xd4>)
 800a720:	f003 fe2e 	bl	800e380 <iprintf>

  if (pcb->unacked == NULL) {
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d102      	bne.n	800a732 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a72c:	f06f 0305 	mvn.w	r3, #5
 800a730:	e04c      	b.n	800a7cc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a736:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a738:	68b8      	ldr	r0, [r7, #8]
 800a73a:	f7ff fe2d 	bl	800a398 <tcp_output_segment_busy>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d002      	beq.n	800a74a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a744:	f06f 0305 	mvn.w	r3, #5
 800a748:	e040      	b.n	800a7cc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	336c      	adds	r3, #108	; 0x6c
 800a756:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a758:	e002      	b.n	800a760 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d011      	beq.n	800a78c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68db      	ldr	r3, [r3, #12]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	4618      	mov	r0, r3
 800a772:	f7f9 fc6c 	bl	800404e <lwip_htonl>
 800a776:	4604      	mov	r4, r0
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	4618      	mov	r0, r3
 800a780:	f7f9 fc65 	bl	800404e <lwip_htonl>
 800a784:	4603      	mov	r3, r0
 800a786:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a788:	2b00      	cmp	r3, #0
 800a78a:	dbe6      	blt.n	800a75a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	68ba      	ldr	r2, [r7, #8]
 800a798:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d103      	bne.n	800a7aa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a7b0:	2bff      	cmp	r3, #255	; 0xff
 800a7b2:	d007      	beq.n	800a7c4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	b2da      	uxtb	r2, r3
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3714      	adds	r7, #20
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd90      	pop	{r4, r7, pc}
 800a7d4:	08010df0 	.word	0x08010df0
 800a7d8:	08011490 	.word	0x08011490
 800a7dc:	08010e44 	.word	0x08010e44

0800a7e0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d106      	bne.n	800a7fc <tcp_rexmit_fast+0x1c>
 800a7ee:	4b2a      	ldr	r3, [pc, #168]	; (800a898 <tcp_rexmit_fast+0xb8>)
 800a7f0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a7f4:	4929      	ldr	r1, [pc, #164]	; (800a89c <tcp_rexmit_fast+0xbc>)
 800a7f6:	482a      	ldr	r0, [pc, #168]	; (800a8a0 <tcp_rexmit_fast+0xc0>)
 800a7f8:	f003 fdc2 	bl	800e380 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a800:	2b00      	cmp	r3, #0
 800a802:	d045      	beq.n	800a890 <tcp_rexmit_fast+0xb0>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	8b5b      	ldrh	r3, [r3, #26]
 800a808:	f003 0304 	and.w	r3, r3, #4
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d13f      	bne.n	800a890 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7ff ff79 	bl	800a708 <tcp_rexmit>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d139      	bne.n	800a890 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a828:	4293      	cmp	r3, r2
 800a82a:	bf28      	it	cs
 800a82c:	4613      	movcs	r3, r2
 800a82e:	b29b      	uxth	r3, r3
 800a830:	2b00      	cmp	r3, #0
 800a832:	da00      	bge.n	800a836 <tcp_rexmit_fast+0x56>
 800a834:	3301      	adds	r3, #1
 800a836:	105b      	asrs	r3, r3, #1
 800a838:	b29a      	uxth	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a846:	461a      	mov	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a84c:	005b      	lsls	r3, r3, #1
 800a84e:	429a      	cmp	r2, r3
 800a850:	d206      	bcs.n	800a860 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a856:	005b      	lsls	r3, r3, #1
 800a858:	b29a      	uxth	r2, r3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a86a:	4619      	mov	r1, r3
 800a86c:	0049      	lsls	r1, r1, #1
 800a86e:	440b      	add	r3, r1
 800a870:	b29b      	uxth	r3, r3
 800a872:	4413      	add	r3, r2
 800a874:	b29a      	uxth	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	8b5b      	ldrh	r3, [r3, #26]
 800a880:	f043 0304 	orr.w	r3, r3, #4
 800a884:	b29a      	uxth	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a890:	bf00      	nop
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	08010df0 	.word	0x08010df0
 800a89c:	080114a8 	.word	0x080114a8
 800a8a0:	08010e44 	.word	0x08010e44

0800a8a4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	607b      	str	r3, [r7, #4]
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	817b      	strh	r3, [r7, #10]
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a8b6:	897a      	ldrh	r2, [r7, #10]
 800a8b8:	893b      	ldrh	r3, [r7, #8]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	3314      	adds	r3, #20
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	2022      	movs	r0, #34	; 0x22
 800a8ca:	f7fa fb7b 	bl	8004fc4 <pbuf_alloc>
 800a8ce:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d04d      	beq.n	800a972 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a8d6:	897b      	ldrh	r3, [r7, #10]
 800a8d8:	3313      	adds	r3, #19
 800a8da:	697a      	ldr	r2, [r7, #20]
 800a8dc:	8952      	ldrh	r2, [r2, #10]
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	db06      	blt.n	800a8f0 <tcp_output_alloc_header_common+0x4c>
 800a8e2:	4b26      	ldr	r3, [pc, #152]	; (800a97c <tcp_output_alloc_header_common+0xd8>)
 800a8e4:	f240 7223 	movw	r2, #1827	; 0x723
 800a8e8:	4925      	ldr	r1, [pc, #148]	; (800a980 <tcp_output_alloc_header_common+0xdc>)
 800a8ea:	4826      	ldr	r0, [pc, #152]	; (800a984 <tcp_output_alloc_header_common+0xe0>)
 800a8ec:	f003 fd48 	bl	800e380 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a8f6:	8c3b      	ldrh	r3, [r7, #32]
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7f9 fb93 	bl	8004024 <lwip_htons>
 800a8fe:	4603      	mov	r3, r0
 800a900:	461a      	mov	r2, r3
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a908:	4618      	mov	r0, r3
 800a90a:	f7f9 fb8b 	bl	8004024 <lwip_htons>
 800a90e:	4603      	mov	r3, r0
 800a910:	461a      	mov	r2, r3
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f7f9 fb96 	bl	800404e <lwip_htonl>
 800a922:	4602      	mov	r2, r0
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a928:	897b      	ldrh	r3, [r7, #10]
 800a92a:	089b      	lsrs	r3, r3, #2
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	3305      	adds	r3, #5
 800a930:	b29b      	uxth	r3, r3
 800a932:	031b      	lsls	r3, r3, #12
 800a934:	b29a      	uxth	r2, r3
 800a936:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	4313      	orrs	r3, r2
 800a93e:	b29b      	uxth	r3, r3
 800a940:	4618      	mov	r0, r3
 800a942:	f7f9 fb6f 	bl	8004024 <lwip_htons>
 800a946:	4603      	mov	r3, r0
 800a948:	461a      	mov	r2, r3
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a94e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a950:	4618      	mov	r0, r3
 800a952:	f7f9 fb67 	bl	8004024 <lwip_htons>
 800a956:	4603      	mov	r3, r0
 800a958:	461a      	mov	r2, r3
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	2200      	movs	r2, #0
 800a962:	741a      	strb	r2, [r3, #16]
 800a964:	2200      	movs	r2, #0
 800a966:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	2200      	movs	r2, #0
 800a96c:	749a      	strb	r2, [r3, #18]
 800a96e:	2200      	movs	r2, #0
 800a970:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a972:	697b      	ldr	r3, [r7, #20]
}
 800a974:	4618      	mov	r0, r3
 800a976:	3718      	adds	r7, #24
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	08010df0 	.word	0x08010df0
 800a980:	080114c8 	.word	0x080114c8
 800a984:	08010e44 	.word	0x08010e44

0800a988 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a988:	b5b0      	push	{r4, r5, r7, lr}
 800a98a:	b08a      	sub	sp, #40	; 0x28
 800a98c:	af04      	add	r7, sp, #16
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	607b      	str	r3, [r7, #4]
 800a992:	460b      	mov	r3, r1
 800a994:	817b      	strh	r3, [r7, #10]
 800a996:	4613      	mov	r3, r2
 800a998:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d106      	bne.n	800a9ae <tcp_output_alloc_header+0x26>
 800a9a0:	4b15      	ldr	r3, [pc, #84]	; (800a9f8 <tcp_output_alloc_header+0x70>)
 800a9a2:	f240 7242 	movw	r2, #1858	; 0x742
 800a9a6:	4915      	ldr	r1, [pc, #84]	; (800a9fc <tcp_output_alloc_header+0x74>)
 800a9a8:	4815      	ldr	r0, [pc, #84]	; (800aa00 <tcp_output_alloc_header+0x78>)
 800a9aa:	f003 fce9 	bl	800e380 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	8adb      	ldrh	r3, [r3, #22]
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	8b12      	ldrh	r2, [r2, #24]
 800a9ba:	68f9      	ldr	r1, [r7, #12]
 800a9bc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800a9be:	893d      	ldrh	r5, [r7, #8]
 800a9c0:	897c      	ldrh	r4, [r7, #10]
 800a9c2:	9103      	str	r1, [sp, #12]
 800a9c4:	2110      	movs	r1, #16
 800a9c6:	9102      	str	r1, [sp, #8]
 800a9c8:	9201      	str	r2, [sp, #4]
 800a9ca:	9300      	str	r3, [sp, #0]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	462a      	mov	r2, r5
 800a9d0:	4621      	mov	r1, r4
 800a9d2:	f7ff ff67 	bl	800a8a4 <tcp_output_alloc_header_common>
 800a9d6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d006      	beq.n	800a9ec <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a9e6:	441a      	add	r2, r3
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a9ec:	697b      	ldr	r3, [r7, #20]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3718      	adds	r7, #24
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bdb0      	pop	{r4, r5, r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	08010df0 	.word	0x08010df0
 800a9fc:	080114f8 	.word	0x080114f8
 800aa00:	08010e44 	.word	0x08010e44

0800aa04 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b088      	sub	sp, #32
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	4611      	mov	r1, r2
 800aa10:	461a      	mov	r2, r3
 800aa12:	460b      	mov	r3, r1
 800aa14:	71fb      	strb	r3, [r7, #7]
 800aa16:	4613      	mov	r3, r2
 800aa18:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d106      	bne.n	800aa32 <tcp_output_fill_options+0x2e>
 800aa24:	4b13      	ldr	r3, [pc, #76]	; (800aa74 <tcp_output_fill_options+0x70>)
 800aa26:	f240 7256 	movw	r2, #1878	; 0x756
 800aa2a:	4913      	ldr	r1, [pc, #76]	; (800aa78 <tcp_output_fill_options+0x74>)
 800aa2c:	4813      	ldr	r0, [pc, #76]	; (800aa7c <tcp_output_fill_options+0x78>)
 800aa2e:	f003 fca7 	bl	800e380 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	3314      	adds	r3, #20
 800aa3c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	f103 0214 	add.w	r2, r3, #20
 800aa44:	8bfb      	ldrh	r3, [r7, #30]
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	4619      	mov	r1, r3
 800aa4a:	79fb      	ldrb	r3, [r7, #7]
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	f003 0304 	and.w	r3, r3, #4
 800aa52:	440b      	add	r3, r1
 800aa54:	4413      	add	r3, r2
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d006      	beq.n	800aa6a <tcp_output_fill_options+0x66>
 800aa5c:	4b05      	ldr	r3, [pc, #20]	; (800aa74 <tcp_output_fill_options+0x70>)
 800aa5e:	f240 7275 	movw	r2, #1909	; 0x775
 800aa62:	4907      	ldr	r1, [pc, #28]	; (800aa80 <tcp_output_fill_options+0x7c>)
 800aa64:	4805      	ldr	r0, [pc, #20]	; (800aa7c <tcp_output_fill_options+0x78>)
 800aa66:	f003 fc8b 	bl	800e380 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800aa6a:	bf00      	nop
 800aa6c:	3720      	adds	r7, #32
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	08010df0 	.word	0x08010df0
 800aa78:	08011520 	.word	0x08011520
 800aa7c:	08010e44 	.word	0x08010e44
 800aa80:	08011418 	.word	0x08011418

0800aa84 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b08a      	sub	sp, #40	; 0x28
 800aa88:	af04      	add	r7, sp, #16
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
 800aa90:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d106      	bne.n	800aaa6 <tcp_output_control_segment+0x22>
 800aa98:	4b1c      	ldr	r3, [pc, #112]	; (800ab0c <tcp_output_control_segment+0x88>)
 800aa9a:	f240 7287 	movw	r2, #1927	; 0x787
 800aa9e:	491c      	ldr	r1, [pc, #112]	; (800ab10 <tcp_output_control_segment+0x8c>)
 800aaa0:	481c      	ldr	r0, [pc, #112]	; (800ab14 <tcp_output_control_segment+0x90>)
 800aaa2:	f003 fc6d 	bl	800e380 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	6879      	ldr	r1, [r7, #4]
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f7fe ff40 	bl	8009930 <tcp_route>
 800aab0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d102      	bne.n	800aabe <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800aab8:	23fc      	movs	r3, #252	; 0xfc
 800aaba:	75fb      	strb	r3, [r7, #23]
 800aabc:	e01c      	b.n	800aaf8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d006      	beq.n	800aad2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	7adb      	ldrb	r3, [r3, #11]
 800aac8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	7a9b      	ldrb	r3, [r3, #10]
 800aace:	757b      	strb	r3, [r7, #21]
 800aad0:	e003      	b.n	800aada <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800aad2:	23ff      	movs	r3, #255	; 0xff
 800aad4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800aada:	7dba      	ldrb	r2, [r7, #22]
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	9302      	str	r3, [sp, #8]
 800aae0:	2306      	movs	r3, #6
 800aae2:	9301      	str	r3, [sp, #4]
 800aae4:	7d7b      	ldrb	r3, [r7, #21]
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	4613      	mov	r3, r2
 800aaea:	683a      	ldr	r2, [r7, #0]
 800aaec:	6879      	ldr	r1, [r7, #4]
 800aaee:	68b8      	ldr	r0, [r7, #8]
 800aaf0:	f002 fb2a 	bl	800d148 <ip4_output_if>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800aaf8:	68b8      	ldr	r0, [r7, #8]
 800aafa:	f7fa fd47 	bl	800558c <pbuf_free>
  return err;
 800aafe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3718      	adds	r7, #24
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	08010df0 	.word	0x08010df0
 800ab10:	08011548 	.word	0x08011548
 800ab14:	08010e44 	.word	0x08010e44

0800ab18 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ab18:	b590      	push	{r4, r7, lr}
 800ab1a:	b08b      	sub	sp, #44	; 0x2c
 800ab1c:	af04      	add	r7, sp, #16
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]
 800ab24:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d106      	bne.n	800ab3a <tcp_rst+0x22>
 800ab2c:	4b1f      	ldr	r3, [pc, #124]	; (800abac <tcp_rst+0x94>)
 800ab2e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800ab32:	491f      	ldr	r1, [pc, #124]	; (800abb0 <tcp_rst+0x98>)
 800ab34:	481f      	ldr	r0, [pc, #124]	; (800abb4 <tcp_rst+0x9c>)
 800ab36:	f003 fc23 	bl	800e380 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ab3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d106      	bne.n	800ab4e <tcp_rst+0x36>
 800ab40:	4b1a      	ldr	r3, [pc, #104]	; (800abac <tcp_rst+0x94>)
 800ab42:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ab46:	491c      	ldr	r1, [pc, #112]	; (800abb8 <tcp_rst+0xa0>)
 800ab48:	481a      	ldr	r0, [pc, #104]	; (800abb4 <tcp_rst+0x9c>)
 800ab4a:	f003 fc19 	bl	800e380 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ab4e:	2300      	movs	r3, #0
 800ab50:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ab52:	f246 0308 	movw	r3, #24584	; 0x6008
 800ab56:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ab58:	7dfb      	ldrb	r3, [r7, #23]
 800ab5a:	b29c      	uxth	r4, r3
 800ab5c:	68b8      	ldr	r0, [r7, #8]
 800ab5e:	f7f9 fa76 	bl	800404e <lwip_htonl>
 800ab62:	4602      	mov	r2, r0
 800ab64:	8abb      	ldrh	r3, [r7, #20]
 800ab66:	9303      	str	r3, [sp, #12]
 800ab68:	2314      	movs	r3, #20
 800ab6a:	9302      	str	r3, [sp, #8]
 800ab6c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ab6e:	9301      	str	r3, [sp, #4]
 800ab70:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ab72:	9300      	str	r3, [sp, #0]
 800ab74:	4613      	mov	r3, r2
 800ab76:	2200      	movs	r2, #0
 800ab78:	4621      	mov	r1, r4
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f7ff fe92 	bl	800a8a4 <tcp_output_alloc_header_common>
 800ab80:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00c      	beq.n	800aba2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ab88:	7dfb      	ldrb	r3, [r7, #23]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	6939      	ldr	r1, [r7, #16]
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	f7ff ff38 	bl	800aa04 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ab94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab96:	683a      	ldr	r2, [r7, #0]
 800ab98:	6939      	ldr	r1, [r7, #16]
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f7ff ff72 	bl	800aa84 <tcp_output_control_segment>
 800aba0:	e000      	b.n	800aba4 <tcp_rst+0x8c>
    return;
 800aba2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800aba4:	371c      	adds	r7, #28
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd90      	pop	{r4, r7, pc}
 800abaa:	bf00      	nop
 800abac:	08010df0 	.word	0x08010df0
 800abb0:	08011574 	.word	0x08011574
 800abb4:	08010e44 	.word	0x08010e44
 800abb8:	08011590 	.word	0x08011590

0800abbc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800abbc:	b590      	push	{r4, r7, lr}
 800abbe:	b087      	sub	sp, #28
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800abc4:	2300      	movs	r3, #0
 800abc6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800abc8:	2300      	movs	r3, #0
 800abca:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d106      	bne.n	800abe0 <tcp_send_empty_ack+0x24>
 800abd2:	4b28      	ldr	r3, [pc, #160]	; (800ac74 <tcp_send_empty_ack+0xb8>)
 800abd4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800abd8:	4927      	ldr	r1, [pc, #156]	; (800ac78 <tcp_send_empty_ack+0xbc>)
 800abda:	4828      	ldr	r0, [pc, #160]	; (800ac7c <tcp_send_empty_ack+0xc0>)
 800abdc:	f003 fbd0 	bl	800e380 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800abe0:	7dfb      	ldrb	r3, [r7, #23]
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	f003 0304 	and.w	r3, r3, #4
 800abea:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800abec:	7d7b      	ldrb	r3, [r7, #21]
 800abee:	b29c      	uxth	r4, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7f9 fa2a 	bl	800404e <lwip_htonl>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2200      	movs	r2, #0
 800abfe:	4621      	mov	r1, r4
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7ff fec1 	bl	800a988 <tcp_output_alloc_header>
 800ac06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d109      	bne.n	800ac22 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	8b5b      	ldrh	r3, [r3, #26]
 800ac12:	f043 0303 	orr.w	r3, r3, #3
 800ac16:	b29a      	uxth	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ac1c:	f06f 0301 	mvn.w	r3, #1
 800ac20:	e023      	b.n	800ac6a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ac22:	7dbb      	ldrb	r3, [r7, #22]
 800ac24:	7dfa      	ldrb	r2, [r7, #23]
 800ac26:	6939      	ldr	r1, [r7, #16]
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f7ff feeb 	bl	800aa04 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	3304      	adds	r3, #4
 800ac34:	6939      	ldr	r1, [r7, #16]
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f7ff ff24 	bl	800aa84 <tcp_output_control_segment>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ac40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d007      	beq.n	800ac58 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	8b5b      	ldrh	r3, [r3, #26]
 800ac4c:	f043 0303 	orr.w	r3, r3, #3
 800ac50:	b29a      	uxth	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	835a      	strh	r2, [r3, #26]
 800ac56:	e006      	b.n	800ac66 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	8b5b      	ldrh	r3, [r3, #26]
 800ac5c:	f023 0303 	bic.w	r3, r3, #3
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ac66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	371c      	adds	r7, #28
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd90      	pop	{r4, r7, pc}
 800ac72:	bf00      	nop
 800ac74:	08010df0 	.word	0x08010df0
 800ac78:	080115ac 	.word	0x080115ac
 800ac7c:	08010e44 	.word	0x08010e44

0800ac80 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ac80:	b590      	push	{r4, r7, lr}
 800ac82:	b087      	sub	sp, #28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ac88:	2300      	movs	r3, #0
 800ac8a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d106      	bne.n	800aca0 <tcp_keepalive+0x20>
 800ac92:	4b18      	ldr	r3, [pc, #96]	; (800acf4 <tcp_keepalive+0x74>)
 800ac94:	f640 0224 	movw	r2, #2084	; 0x824
 800ac98:	4917      	ldr	r1, [pc, #92]	; (800acf8 <tcp_keepalive+0x78>)
 800ac9a:	4818      	ldr	r0, [pc, #96]	; (800acfc <tcp_keepalive+0x7c>)
 800ac9c:	f003 fb70 	bl	800e380 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800aca0:	7dfb      	ldrb	r3, [r7, #23]
 800aca2:	b29c      	uxth	r4, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aca8:	3b01      	subs	r3, #1
 800acaa:	4618      	mov	r0, r3
 800acac:	f7f9 f9cf 	bl	800404e <lwip_htonl>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2200      	movs	r2, #0
 800acb4:	4621      	mov	r1, r4
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7ff fe66 	bl	800a988 <tcp_output_alloc_header>
 800acbc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d102      	bne.n	800acca <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800acc4:	f04f 33ff 	mov.w	r3, #4294967295
 800acc8:	e010      	b.n	800acec <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800acca:	7dfb      	ldrb	r3, [r7, #23]
 800accc:	2200      	movs	r2, #0
 800acce:	6939      	ldr	r1, [r7, #16]
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7ff fe97 	bl	800aa04 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	3304      	adds	r3, #4
 800acdc:	6939      	ldr	r1, [r7, #16]
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f7ff fed0 	bl	800aa84 <tcp_output_control_segment>
 800ace4:	4603      	mov	r3, r0
 800ace6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ace8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800acec:	4618      	mov	r0, r3
 800acee:	371c      	adds	r7, #28
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd90      	pop	{r4, r7, pc}
 800acf4:	08010df0 	.word	0x08010df0
 800acf8:	080115cc 	.word	0x080115cc
 800acfc:	08010e44 	.word	0x08010e44

0800ad00 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ad00:	b590      	push	{r4, r7, lr}
 800ad02:	b08b      	sub	sp, #44	; 0x2c
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d106      	bne.n	800ad22 <tcp_zero_window_probe+0x22>
 800ad14:	4b4c      	ldr	r3, [pc, #304]	; (800ae48 <tcp_zero_window_probe+0x148>)
 800ad16:	f640 024f 	movw	r2, #2127	; 0x84f
 800ad1a:	494c      	ldr	r1, [pc, #304]	; (800ae4c <tcp_zero_window_probe+0x14c>)
 800ad1c:	484c      	ldr	r0, [pc, #304]	; (800ae50 <tcp_zero_window_probe+0x150>)
 800ad1e:	f003 fb2f 	bl	800e380 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad26:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ad28:	6a3b      	ldr	r3, [r7, #32]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d101      	bne.n	800ad32 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	e086      	b.n	800ae40 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ad38:	2bff      	cmp	r3, #255	; 0xff
 800ad3a:	d007      	beq.n	800ad4c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ad42:	3301      	adds	r3, #1
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ad4c:	6a3b      	ldr	r3, [r7, #32]
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	899b      	ldrh	r3, [r3, #12]
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7f9 f965 	bl	8004024 <lwip_htons>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	f003 0301 	and.w	r3, r3, #1
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d005      	beq.n	800ad72 <tcp_zero_window_probe+0x72>
 800ad66:	6a3b      	ldr	r3, [r7, #32]
 800ad68:	891b      	ldrh	r3, [r3, #8]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d101      	bne.n	800ad72 <tcp_zero_window_probe+0x72>
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e000      	b.n	800ad74 <tcp_zero_window_probe+0x74>
 800ad72:	2300      	movs	r3, #0
 800ad74:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ad76:	7ffb      	ldrb	r3, [r7, #31]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	bf0c      	ite	eq
 800ad7c:	2301      	moveq	r3, #1
 800ad7e:	2300      	movne	r3, #0
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ad84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad88:	b299      	uxth	r1, r3
 800ad8a:	6a3b      	ldr	r3, [r7, #32]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	8bba      	ldrh	r2, [r7, #28]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7ff fdf8 	bl	800a988 <tcp_output_alloc_header>
 800ad98:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d102      	bne.n	800ada6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ada0:	f04f 33ff 	mov.w	r3, #4294967295
 800ada4:	e04c      	b.n	800ae40 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800adac:	7ffb      	ldrb	r3, [r7, #31]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d011      	beq.n	800add6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	899b      	ldrh	r3, [r3, #12]
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	b21b      	sxth	r3, r3
 800adba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800adbe:	b21c      	sxth	r4, r3
 800adc0:	2011      	movs	r0, #17
 800adc2:	f7f9 f92f 	bl	8004024 <lwip_htons>
 800adc6:	4603      	mov	r3, r0
 800adc8:	b21b      	sxth	r3, r3
 800adca:	4323      	orrs	r3, r4
 800adcc:	b21b      	sxth	r3, r3
 800adce:	b29a      	uxth	r2, r3
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	819a      	strh	r2, [r3, #12]
 800add4:	e010      	b.n	800adf8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	3314      	adds	r3, #20
 800addc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800adde:	6a3b      	ldr	r3, [r7, #32]
 800ade0:	6858      	ldr	r0, [r3, #4]
 800ade2:	6a3b      	ldr	r3, [r7, #32]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	891a      	ldrh	r2, [r3, #8]
 800ade8:	6a3b      	ldr	r3, [r7, #32]
 800adea:	891b      	ldrh	r3, [r3, #8]
 800adec:	1ad3      	subs	r3, r2, r3
 800adee:	b29b      	uxth	r3, r3
 800adf0:	2201      	movs	r2, #1
 800adf2:	6939      	ldr	r1, [r7, #16]
 800adf4:	f7fa fdc4 	bl	8005980 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800adf8:	6a3b      	ldr	r3, [r7, #32]
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7f9 f925 	bl	800404e <lwip_htonl>
 800ae04:	4603      	mov	r3, r0
 800ae06:	3301      	adds	r3, #1
 800ae08:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	da02      	bge.n	800ae1c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ae1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae20:	2200      	movs	r2, #0
 800ae22:	69b9      	ldr	r1, [r7, #24]
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f7ff fded 	bl	800aa04 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	3304      	adds	r3, #4
 800ae30:	69b9      	ldr	r1, [r7, #24]
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff fe26 	bl	800aa84 <tcp_output_control_segment>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ae3c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	372c      	adds	r7, #44	; 0x2c
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd90      	pop	{r4, r7, pc}
 800ae48:	08010df0 	.word	0x08010df0
 800ae4c:	080115e8 	.word	0x080115e8
 800ae50:	08010e44 	.word	0x08010e44

0800ae54 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ae5c:	f7fa ff10 	bl	8005c80 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ae60:	4b0a      	ldr	r3, [pc, #40]	; (800ae8c <tcpip_tcp_timer+0x38>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d103      	bne.n	800ae70 <tcpip_tcp_timer+0x1c>
 800ae68:	4b09      	ldr	r3, [pc, #36]	; (800ae90 <tcpip_tcp_timer+0x3c>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d005      	beq.n	800ae7c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ae70:	2200      	movs	r2, #0
 800ae72:	4908      	ldr	r1, [pc, #32]	; (800ae94 <tcpip_tcp_timer+0x40>)
 800ae74:	20fa      	movs	r0, #250	; 0xfa
 800ae76:	f000 f8f3 	bl	800b060 <sys_timeout>
 800ae7a:	e003      	b.n	800ae84 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ae7c:	4b06      	ldr	r3, [pc, #24]	; (800ae98 <tcpip_tcp_timer+0x44>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	601a      	str	r2, [r3, #0]
  }
}
 800ae82:	bf00      	nop
 800ae84:	bf00      	nop
 800ae86:	3708      	adds	r7, #8
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	20008af4 	.word	0x20008af4
 800ae90:	20008b04 	.word	0x20008b04
 800ae94:	0800ae55 	.word	0x0800ae55
 800ae98:	20000108 	.word	0x20000108

0800ae9c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800aea0:	4b0a      	ldr	r3, [pc, #40]	; (800aecc <tcp_timer_needed+0x30>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d10f      	bne.n	800aec8 <tcp_timer_needed+0x2c>
 800aea8:	4b09      	ldr	r3, [pc, #36]	; (800aed0 <tcp_timer_needed+0x34>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d103      	bne.n	800aeb8 <tcp_timer_needed+0x1c>
 800aeb0:	4b08      	ldr	r3, [pc, #32]	; (800aed4 <tcp_timer_needed+0x38>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d007      	beq.n	800aec8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800aeb8:	4b04      	ldr	r3, [pc, #16]	; (800aecc <tcp_timer_needed+0x30>)
 800aeba:	2201      	movs	r2, #1
 800aebc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800aebe:	2200      	movs	r2, #0
 800aec0:	4905      	ldr	r1, [pc, #20]	; (800aed8 <tcp_timer_needed+0x3c>)
 800aec2:	20fa      	movs	r0, #250	; 0xfa
 800aec4:	f000 f8cc 	bl	800b060 <sys_timeout>
  }
}
 800aec8:	bf00      	nop
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	20000108 	.word	0x20000108
 800aed0:	20008af4 	.word	0x20008af4
 800aed4:	20008b04 	.word	0x20008b04
 800aed8:	0800ae55 	.word	0x0800ae55

0800aedc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800aee8:	2006      	movs	r0, #6
 800aeea:	f7f9 fcf1 	bl	80048d0 <memp_malloc>
 800aeee:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d109      	bne.n	800af0a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d151      	bne.n	800afa0 <sys_timeout_abs+0xc4>
 800aefc:	4b2a      	ldr	r3, [pc, #168]	; (800afa8 <sys_timeout_abs+0xcc>)
 800aefe:	22be      	movs	r2, #190	; 0xbe
 800af00:	492a      	ldr	r1, [pc, #168]	; (800afac <sys_timeout_abs+0xd0>)
 800af02:	482b      	ldr	r0, [pc, #172]	; (800afb0 <sys_timeout_abs+0xd4>)
 800af04:	f003 fa3c 	bl	800e380 <iprintf>
    return;
 800af08:	e04a      	b.n	800afa0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	2200      	movs	r2, #0
 800af0e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800af22:	4b24      	ldr	r3, [pc, #144]	; (800afb4 <sys_timeout_abs+0xd8>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d103      	bne.n	800af32 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800af2a:	4a22      	ldr	r2, [pc, #136]	; (800afb4 <sys_timeout_abs+0xd8>)
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	6013      	str	r3, [r2, #0]
    return;
 800af30:	e037      	b.n	800afa2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	685a      	ldr	r2, [r3, #4]
 800af36:	4b1f      	ldr	r3, [pc, #124]	; (800afb4 <sys_timeout_abs+0xd8>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	0fdb      	lsrs	r3, r3, #31
 800af40:	f003 0301 	and.w	r3, r3, #1
 800af44:	b2db      	uxtb	r3, r3
 800af46:	2b00      	cmp	r3, #0
 800af48:	d007      	beq.n	800af5a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800af4a:	4b1a      	ldr	r3, [pc, #104]	; (800afb4 <sys_timeout_abs+0xd8>)
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800af52:	4a18      	ldr	r2, [pc, #96]	; (800afb4 <sys_timeout_abs+0xd8>)
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	6013      	str	r3, [r2, #0]
 800af58:	e023      	b.n	800afa2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800af5a:	4b16      	ldr	r3, [pc, #88]	; (800afb4 <sys_timeout_abs+0xd8>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	617b      	str	r3, [r7, #20]
 800af60:	e01a      	b.n	800af98 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00b      	beq.n	800af82 <sys_timeout_abs+0xa6>
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	685a      	ldr	r2, [r3, #4]
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	1ad3      	subs	r3, r2, r3
 800af76:	0fdb      	lsrs	r3, r3, #31
 800af78:	f003 0301 	and.w	r3, r3, #1
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d007      	beq.n	800af92 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	693a      	ldr	r2, [r7, #16]
 800af8e:	601a      	str	r2, [r3, #0]
        break;
 800af90:	e007      	b.n	800afa2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	617b      	str	r3, [r7, #20]
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d1e1      	bne.n	800af62 <sys_timeout_abs+0x86>
 800af9e:	e000      	b.n	800afa2 <sys_timeout_abs+0xc6>
    return;
 800afa0:	bf00      	nop
      }
    }
  }
}
 800afa2:	3718      	adds	r7, #24
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	0801160c 	.word	0x0801160c
 800afac:	08011640 	.word	0x08011640
 800afb0:	08011680 	.word	0x08011680
 800afb4:	20000100 	.word	0x20000100

0800afb8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b086      	sub	sp, #24
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	4798      	blx	r3

  now = sys_now();
 800afca:	f7f8 ff9d 	bl	8003f08 <sys_now>
 800afce:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	4b0f      	ldr	r3, [pc, #60]	; (800b014 <lwip_cyclic_timer+0x5c>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4413      	add	r3, r2
 800afda:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	1ad3      	subs	r3, r2, r3
 800afe2:	0fdb      	lsrs	r3, r3, #31
 800afe4:	f003 0301 	and.w	r3, r3, #1
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	2b00      	cmp	r3, #0
 800afec:	d009      	beq.n	800b002 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	4413      	add	r3, r2
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	4907      	ldr	r1, [pc, #28]	; (800b018 <lwip_cyclic_timer+0x60>)
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff ff6e 	bl	800aedc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b000:	e004      	b.n	800b00c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	4904      	ldr	r1, [pc, #16]	; (800b018 <lwip_cyclic_timer+0x60>)
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f7ff ff68 	bl	800aedc <sys_timeout_abs>
}
 800b00c:	bf00      	nop
 800b00e:	3718      	adds	r7, #24
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	20000104 	.word	0x20000104
 800b018:	0800afb9 	.word	0x0800afb9

0800b01c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b022:	2301      	movs	r3, #1
 800b024:	607b      	str	r3, [r7, #4]
 800b026:	e00e      	b.n	800b046 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b028:	4a0b      	ldr	r2, [pc, #44]	; (800b058 <sys_timeouts_init+0x3c>)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	00db      	lsls	r3, r3, #3
 800b034:	4a08      	ldr	r2, [pc, #32]	; (800b058 <sys_timeouts_init+0x3c>)
 800b036:	4413      	add	r3, r2
 800b038:	461a      	mov	r2, r3
 800b03a:	4908      	ldr	r1, [pc, #32]	; (800b05c <sys_timeouts_init+0x40>)
 800b03c:	f000 f810 	bl	800b060 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	3301      	adds	r3, #1
 800b044:	607b      	str	r3, [r7, #4]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2b02      	cmp	r3, #2
 800b04a:	d9ed      	bls.n	800b028 <sys_timeouts_init+0xc>
  }
}
 800b04c:	bf00      	nop
 800b04e:	bf00      	nop
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	080121ec 	.word	0x080121ec
 800b05c:	0800afb9 	.word	0x0800afb9

0800b060 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b086      	sub	sp, #24
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b072:	d306      	bcc.n	800b082 <sys_timeout+0x22>
 800b074:	4b0a      	ldr	r3, [pc, #40]	; (800b0a0 <sys_timeout+0x40>)
 800b076:	f240 1229 	movw	r2, #297	; 0x129
 800b07a:	490a      	ldr	r1, [pc, #40]	; (800b0a4 <sys_timeout+0x44>)
 800b07c:	480a      	ldr	r0, [pc, #40]	; (800b0a8 <sys_timeout+0x48>)
 800b07e:	f003 f97f 	bl	800e380 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b082:	f7f8 ff41 	bl	8003f08 <sys_now>
 800b086:	4602      	mov	r2, r0
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	4413      	add	r3, r2
 800b08c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	68b9      	ldr	r1, [r7, #8]
 800b092:	6978      	ldr	r0, [r7, #20]
 800b094:	f7ff ff22 	bl	800aedc <sys_timeout_abs>
#endif
}
 800b098:	bf00      	nop
 800b09a:	3718      	adds	r7, #24
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	0801160c 	.word	0x0801160c
 800b0a4:	080116a8 	.word	0x080116a8
 800b0a8:	08011680 	.word	0x08011680

0800b0ac <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b0b2:	f7f8 ff29 	bl	8003f08 <sys_now>
 800b0b6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b0b8:	4b1a      	ldr	r3, [pc, #104]	; (800b124 <sys_check_timeouts+0x78>)
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d001      	beq.n	800b0c6 <sys_check_timeouts+0x1a>
 800b0c2:	f7f9 ff29 	bl	8004f18 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b0c6:	4b18      	ldr	r3, [pc, #96]	; (800b128 <sys_check_timeouts+0x7c>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d022      	beq.n	800b118 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	68fa      	ldr	r2, [r7, #12]
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	0fdb      	lsrs	r3, r3, #31
 800b0dc:	f003 0301 	and.w	r3, r3, #1
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d11a      	bne.n	800b11c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a0f      	ldr	r2, [pc, #60]	; (800b128 <sys_check_timeouts+0x7c>)
 800b0ec:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	4a0b      	ldr	r2, [pc, #44]	; (800b12c <sys_check_timeouts+0x80>)
 800b100:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b102:	68b9      	ldr	r1, [r7, #8]
 800b104:	2006      	movs	r0, #6
 800b106:	f7f9 fc2f 	bl	8004968 <memp_free>
    if (handler != NULL) {
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d0d3      	beq.n	800b0b8 <sys_check_timeouts+0xc>
      handler(arg);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6838      	ldr	r0, [r7, #0]
 800b114:	4798      	blx	r3
  do {
 800b116:	e7cf      	b.n	800b0b8 <sys_check_timeouts+0xc>
      return;
 800b118:	bf00      	nop
 800b11a:	e000      	b.n	800b11e <sys_check_timeouts+0x72>
      return;
 800b11c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	20008aec 	.word	0x20008aec
 800b128:	20000100 	.word	0x20000100
 800b12c:	20000104 	.word	0x20000104

0800b130 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b134:	f003 f93c 	bl	800e3b0 <rand>
 800b138:	4603      	mov	r3, r0
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b140:	b29b      	uxth	r3, r3
 800b142:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b146:	b29a      	uxth	r2, r3
 800b148:	4b01      	ldr	r3, [pc, #4]	; (800b150 <udp_init+0x20>)
 800b14a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b14c:	bf00      	nop
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	20000010 	.word	0x20000010

0800b154 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b15a:	2300      	movs	r3, #0
 800b15c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b15e:	4b17      	ldr	r3, [pc, #92]	; (800b1bc <udp_new_port+0x68>)
 800b160:	881b      	ldrh	r3, [r3, #0]
 800b162:	1c5a      	adds	r2, r3, #1
 800b164:	b291      	uxth	r1, r2
 800b166:	4a15      	ldr	r2, [pc, #84]	; (800b1bc <udp_new_port+0x68>)
 800b168:	8011      	strh	r1, [r2, #0]
 800b16a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b16e:	4293      	cmp	r3, r2
 800b170:	d103      	bne.n	800b17a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b172:	4b12      	ldr	r3, [pc, #72]	; (800b1bc <udp_new_port+0x68>)
 800b174:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b178:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b17a:	4b11      	ldr	r3, [pc, #68]	; (800b1c0 <udp_new_port+0x6c>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	603b      	str	r3, [r7, #0]
 800b180:	e011      	b.n	800b1a6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	8a5a      	ldrh	r2, [r3, #18]
 800b186:	4b0d      	ldr	r3, [pc, #52]	; (800b1bc <udp_new_port+0x68>)
 800b188:	881b      	ldrh	r3, [r3, #0]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d108      	bne.n	800b1a0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b18e:	88fb      	ldrh	r3, [r7, #6]
 800b190:	3301      	adds	r3, #1
 800b192:	80fb      	strh	r3, [r7, #6]
 800b194:	88fb      	ldrh	r3, [r7, #6]
 800b196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b19a:	d3e0      	bcc.n	800b15e <udp_new_port+0xa>
        return 0;
 800b19c:	2300      	movs	r3, #0
 800b19e:	e007      	b.n	800b1b0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	603b      	str	r3, [r7, #0]
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d1ea      	bne.n	800b182 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b1ac:	4b03      	ldr	r3, [pc, #12]	; (800b1bc <udp_new_port+0x68>)
 800b1ae:	881b      	ldrh	r3, [r3, #0]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr
 800b1bc:	20000010 	.word	0x20000010
 800b1c0:	20008b0c 	.word	0x20008b0c

0800b1c4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d105      	bne.n	800b1e4 <udp_input_local_match+0x20>
 800b1d8:	4b27      	ldr	r3, [pc, #156]	; (800b278 <udp_input_local_match+0xb4>)
 800b1da:	2287      	movs	r2, #135	; 0x87
 800b1dc:	4927      	ldr	r1, [pc, #156]	; (800b27c <udp_input_local_match+0xb8>)
 800b1de:	4828      	ldr	r0, [pc, #160]	; (800b280 <udp_input_local_match+0xbc>)
 800b1e0:	f003 f8ce 	bl	800e380 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d105      	bne.n	800b1f6 <udp_input_local_match+0x32>
 800b1ea:	4b23      	ldr	r3, [pc, #140]	; (800b278 <udp_input_local_match+0xb4>)
 800b1ec:	2288      	movs	r2, #136	; 0x88
 800b1ee:	4925      	ldr	r1, [pc, #148]	; (800b284 <udp_input_local_match+0xc0>)
 800b1f0:	4823      	ldr	r0, [pc, #140]	; (800b280 <udp_input_local_match+0xbc>)
 800b1f2:	f003 f8c5 	bl	800e380 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	7a1b      	ldrb	r3, [r3, #8]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d00b      	beq.n	800b216 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	7a1a      	ldrb	r2, [r3, #8]
 800b202:	4b21      	ldr	r3, [pc, #132]	; (800b288 <udp_input_local_match+0xc4>)
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b20a:	3301      	adds	r3, #1
 800b20c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b20e:	429a      	cmp	r2, r3
 800b210:	d001      	beq.n	800b216 <udp_input_local_match+0x52>
    return 0;
 800b212:	2300      	movs	r3, #0
 800b214:	e02b      	b.n	800b26e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b216:	79fb      	ldrb	r3, [r7, #7]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d018      	beq.n	800b24e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d013      	beq.n	800b24a <udp_input_local_match+0x86>
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00f      	beq.n	800b24a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b22a:	4b17      	ldr	r3, [pc, #92]	; (800b288 <udp_input_local_match+0xc4>)
 800b22c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b232:	d00a      	beq.n	800b24a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	4b13      	ldr	r3, [pc, #76]	; (800b288 <udp_input_local_match+0xc4>)
 800b23a:	695b      	ldr	r3, [r3, #20]
 800b23c:	405a      	eors	r2, r3
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	3308      	adds	r3, #8
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b246:	2b00      	cmp	r3, #0
 800b248:	d110      	bne.n	800b26c <udp_input_local_match+0xa8>
          return 1;
 800b24a:	2301      	movs	r3, #1
 800b24c:	e00f      	b.n	800b26e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d009      	beq.n	800b268 <udp_input_local_match+0xa4>
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d005      	beq.n	800b268 <udp_input_local_match+0xa4>
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	4b09      	ldr	r3, [pc, #36]	; (800b288 <udp_input_local_match+0xc4>)
 800b262:	695b      	ldr	r3, [r3, #20]
 800b264:	429a      	cmp	r2, r3
 800b266:	d101      	bne.n	800b26c <udp_input_local_match+0xa8>
        return 1;
 800b268:	2301      	movs	r3, #1
 800b26a:	e000      	b.n	800b26e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3710      	adds	r7, #16
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	080116f4 	.word	0x080116f4
 800b27c:	08011724 	.word	0x08011724
 800b280:	08011748 	.word	0x08011748
 800b284:	08011770 	.word	0x08011770
 800b288:	200033f0 	.word	0x200033f0

0800b28c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b28c:	b590      	push	{r4, r7, lr}
 800b28e:	b08d      	sub	sp, #52	; 0x34
 800b290:	af02      	add	r7, sp, #8
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b296:	2300      	movs	r3, #0
 800b298:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d105      	bne.n	800b2ac <udp_input+0x20>
 800b2a0:	4b7c      	ldr	r3, [pc, #496]	; (800b494 <udp_input+0x208>)
 800b2a2:	22cf      	movs	r2, #207	; 0xcf
 800b2a4:	497c      	ldr	r1, [pc, #496]	; (800b498 <udp_input+0x20c>)
 800b2a6:	487d      	ldr	r0, [pc, #500]	; (800b49c <udp_input+0x210>)
 800b2a8:	f003 f86a 	bl	800e380 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d105      	bne.n	800b2be <udp_input+0x32>
 800b2b2:	4b78      	ldr	r3, [pc, #480]	; (800b494 <udp_input+0x208>)
 800b2b4:	22d0      	movs	r2, #208	; 0xd0
 800b2b6:	497a      	ldr	r1, [pc, #488]	; (800b4a0 <udp_input+0x214>)
 800b2b8:	4878      	ldr	r0, [pc, #480]	; (800b49c <udp_input+0x210>)
 800b2ba:	f003 f861 	bl	800e380 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	895b      	ldrh	r3, [r3, #10]
 800b2c2:	2b07      	cmp	r3, #7
 800b2c4:	d803      	bhi.n	800b2ce <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f7fa f960 	bl	800558c <pbuf_free>
    goto end;
 800b2cc:	e0de      	b.n	800b48c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b2d4:	4b73      	ldr	r3, [pc, #460]	; (800b4a4 <udp_input+0x218>)
 800b2d6:	695b      	ldr	r3, [r3, #20]
 800b2d8:	4a72      	ldr	r2, [pc, #456]	; (800b4a4 <udp_input+0x218>)
 800b2da:	6812      	ldr	r2, [r2, #0]
 800b2dc:	4611      	mov	r1, r2
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f002 f80a 	bl	800d2f8 <ip4_addr_isbroadcast_u32>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	881b      	ldrh	r3, [r3, #0]
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7f8 fe98 	bl	8004024 <lwip_htons>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	885b      	ldrh	r3, [r3, #2]
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7f8 fe90 	bl	8004024 <lwip_htons>
 800b304:	4603      	mov	r3, r0
 800b306:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b308:	2300      	movs	r3, #0
 800b30a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b30c:	2300      	movs	r3, #0
 800b30e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b310:	2300      	movs	r3, #0
 800b312:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b314:	4b64      	ldr	r3, [pc, #400]	; (800b4a8 <udp_input+0x21c>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	627b      	str	r3, [r7, #36]	; 0x24
 800b31a:	e054      	b.n	800b3c6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31e:	8a5b      	ldrh	r3, [r3, #18]
 800b320:	89fa      	ldrh	r2, [r7, #14]
 800b322:	429a      	cmp	r2, r3
 800b324:	d14a      	bne.n	800b3bc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b326:	7cfb      	ldrb	r3, [r7, #19]
 800b328:	461a      	mov	r2, r3
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b32e:	f7ff ff49 	bl	800b1c4 <udp_input_local_match>
 800b332:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b334:	2b00      	cmp	r3, #0
 800b336:	d041      	beq.n	800b3bc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33a:	7c1b      	ldrb	r3, [r3, #16]
 800b33c:	f003 0304 	and.w	r3, r3, #4
 800b340:	2b00      	cmp	r3, #0
 800b342:	d11d      	bne.n	800b380 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d102      	bne.n	800b350 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34c:	61fb      	str	r3, [r7, #28]
 800b34e:	e017      	b.n	800b380 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b350:	7cfb      	ldrb	r3, [r7, #19]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d014      	beq.n	800b380 <udp_input+0xf4>
 800b356:	4b53      	ldr	r3, [pc, #332]	; (800b4a4 <udp_input+0x218>)
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b35e:	d10f      	bne.n	800b380 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	3304      	adds	r3, #4
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d008      	beq.n	800b380 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	3304      	adds	r3, #4
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d101      	bne.n	800b380 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b382:	8a9b      	ldrh	r3, [r3, #20]
 800b384:	8a3a      	ldrh	r2, [r7, #16]
 800b386:	429a      	cmp	r2, r3
 800b388:	d118      	bne.n	800b3bc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d005      	beq.n	800b39e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b394:	685a      	ldr	r2, [r3, #4]
 800b396:	4b43      	ldr	r3, [pc, #268]	; (800b4a4 <udp_input+0x218>)
 800b398:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d10e      	bne.n	800b3bc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b39e:	6a3b      	ldr	r3, [r7, #32]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d014      	beq.n	800b3ce <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a6:	68da      	ldr	r2, [r3, #12]
 800b3a8:	6a3b      	ldr	r3, [r7, #32]
 800b3aa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b3ac:	4b3e      	ldr	r3, [pc, #248]	; (800b4a8 <udp_input+0x21c>)
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b3b4:	4a3c      	ldr	r2, [pc, #240]	; (800b4a8 <udp_input+0x21c>)
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b3ba:	e008      	b.n	800b3ce <udp_input+0x142>
      }
    }

    prev = pcb;
 800b3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3be:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d1a7      	bne.n	800b31c <udp_input+0x90>
 800b3cc:	e000      	b.n	800b3d0 <udp_input+0x144>
        break;
 800b3ce:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d101      	bne.n	800b3da <udp_input+0x14e>
    pcb = uncon_pcb;
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d002      	beq.n	800b3e6 <udp_input+0x15a>
    for_us = 1;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	76fb      	strb	r3, [r7, #27]
 800b3e4:	e00a      	b.n	800b3fc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	3304      	adds	r3, #4
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	4b2d      	ldr	r3, [pc, #180]	; (800b4a4 <udp_input+0x218>)
 800b3ee:	695b      	ldr	r3, [r3, #20]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	bf0c      	ite	eq
 800b3f4:	2301      	moveq	r3, #1
 800b3f6:	2300      	movne	r3, #0
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b3fc:	7efb      	ldrb	r3, [r7, #27]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d041      	beq.n	800b486 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b402:	2108      	movs	r1, #8
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f7fa f83b 	bl	8005480 <pbuf_remove_header>
 800b40a:	4603      	mov	r3, r0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d00a      	beq.n	800b426 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b410:	4b20      	ldr	r3, [pc, #128]	; (800b494 <udp_input+0x208>)
 800b412:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b416:	4925      	ldr	r1, [pc, #148]	; (800b4ac <udp_input+0x220>)
 800b418:	4820      	ldr	r0, [pc, #128]	; (800b49c <udp_input+0x210>)
 800b41a:	f002 ffb1 	bl	800e380 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f7fa f8b4 	bl	800558c <pbuf_free>
      goto end;
 800b424:	e032      	b.n	800b48c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d012      	beq.n	800b452 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42e:	699b      	ldr	r3, [r3, #24]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00a      	beq.n	800b44a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b436:	699c      	ldr	r4, [r3, #24]
 800b438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43a:	69d8      	ldr	r0, [r3, #28]
 800b43c:	8a3b      	ldrh	r3, [r7, #16]
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	4b1b      	ldr	r3, [pc, #108]	; (800b4b0 <udp_input+0x224>)
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b446:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b448:	e021      	b.n	800b48e <udp_input+0x202>
        pbuf_free(p);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7fa f89e 	bl	800558c <pbuf_free>
        goto end;
 800b450:	e01c      	b.n	800b48c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b452:	7cfb      	ldrb	r3, [r7, #19]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d112      	bne.n	800b47e <udp_input+0x1f2>
 800b458:	4b12      	ldr	r3, [pc, #72]	; (800b4a4 <udp_input+0x218>)
 800b45a:	695b      	ldr	r3, [r3, #20]
 800b45c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b460:	2be0      	cmp	r3, #224	; 0xe0
 800b462:	d00c      	beq.n	800b47e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b464:	4b0f      	ldr	r3, [pc, #60]	; (800b4a4 <udp_input+0x218>)
 800b466:	899b      	ldrh	r3, [r3, #12]
 800b468:	3308      	adds	r3, #8
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	b21b      	sxth	r3, r3
 800b46e:	4619      	mov	r1, r3
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7fa f878 	bl	8005566 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b476:	2103      	movs	r1, #3
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f001 fc1d 	bl	800ccb8 <icmp_dest_unreach>
      pbuf_free(p);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f7fa f884 	bl	800558c <pbuf_free>
  return;
 800b484:	e003      	b.n	800b48e <udp_input+0x202>
    pbuf_free(p);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f7fa f880 	bl	800558c <pbuf_free>
  return;
 800b48c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b48e:	372c      	adds	r7, #44	; 0x2c
 800b490:	46bd      	mov	sp, r7
 800b492:	bd90      	pop	{r4, r7, pc}
 800b494:	080116f4 	.word	0x080116f4
 800b498:	08011798 	.word	0x08011798
 800b49c:	08011748 	.word	0x08011748
 800b4a0:	080117b0 	.word	0x080117b0
 800b4a4:	200033f0 	.word	0x200033f0
 800b4a8:	20008b0c 	.word	0x20008b0c
 800b4ac:	080117cc 	.word	0x080117cc
 800b4b0:	20003400 	.word	0x20003400

0800b4b4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d109      	bne.n	800b4d8 <udp_send+0x24>
 800b4c4:	4b11      	ldr	r3, [pc, #68]	; (800b50c <udp_send+0x58>)
 800b4c6:	f240 12d5 	movw	r2, #469	; 0x1d5
 800b4ca:	4911      	ldr	r1, [pc, #68]	; (800b510 <udp_send+0x5c>)
 800b4cc:	4811      	ldr	r0, [pc, #68]	; (800b514 <udp_send+0x60>)
 800b4ce:	f002 ff57 	bl	800e380 <iprintf>
 800b4d2:	f06f 030f 	mvn.w	r3, #15
 800b4d6:	e015      	b.n	800b504 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d109      	bne.n	800b4f2 <udp_send+0x3e>
 800b4de:	4b0b      	ldr	r3, [pc, #44]	; (800b50c <udp_send+0x58>)
 800b4e0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b4e4:	490c      	ldr	r1, [pc, #48]	; (800b518 <udp_send+0x64>)
 800b4e6:	480b      	ldr	r0, [pc, #44]	; (800b514 <udp_send+0x60>)
 800b4e8:	f002 ff4a 	bl	800e380 <iprintf>
 800b4ec:	f06f 030f 	mvn.w	r3, #15
 800b4f0:	e008      	b.n	800b504 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	1d1a      	adds	r2, r3, #4
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	8a9b      	ldrh	r3, [r3, #20]
 800b4fa:	6839      	ldr	r1, [r7, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 f80d 	bl	800b51c <udp_sendto>
 800b502:	4603      	mov	r3, r0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3708      	adds	r7, #8
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	080116f4 	.word	0x080116f4
 800b510:	080117e8 	.word	0x080117e8
 800b514:	08011748 	.word	0x08011748
 800b518:	08011800 	.word	0x08011800

0800b51c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b088      	sub	sp, #32
 800b520:	af02      	add	r7, sp, #8
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
 800b528:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d109      	bne.n	800b544 <udp_sendto+0x28>
 800b530:	4b23      	ldr	r3, [pc, #140]	; (800b5c0 <udp_sendto+0xa4>)
 800b532:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b536:	4923      	ldr	r1, [pc, #140]	; (800b5c4 <udp_sendto+0xa8>)
 800b538:	4823      	ldr	r0, [pc, #140]	; (800b5c8 <udp_sendto+0xac>)
 800b53a:	f002 ff21 	bl	800e380 <iprintf>
 800b53e:	f06f 030f 	mvn.w	r3, #15
 800b542:	e038      	b.n	800b5b6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d109      	bne.n	800b55e <udp_sendto+0x42>
 800b54a:	4b1d      	ldr	r3, [pc, #116]	; (800b5c0 <udp_sendto+0xa4>)
 800b54c:	f240 2219 	movw	r2, #537	; 0x219
 800b550:	491e      	ldr	r1, [pc, #120]	; (800b5cc <udp_sendto+0xb0>)
 800b552:	481d      	ldr	r0, [pc, #116]	; (800b5c8 <udp_sendto+0xac>)
 800b554:	f002 ff14 	bl	800e380 <iprintf>
 800b558:	f06f 030f 	mvn.w	r3, #15
 800b55c:	e02b      	b.n	800b5b6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d109      	bne.n	800b578 <udp_sendto+0x5c>
 800b564:	4b16      	ldr	r3, [pc, #88]	; (800b5c0 <udp_sendto+0xa4>)
 800b566:	f240 221a 	movw	r2, #538	; 0x21a
 800b56a:	4919      	ldr	r1, [pc, #100]	; (800b5d0 <udp_sendto+0xb4>)
 800b56c:	4816      	ldr	r0, [pc, #88]	; (800b5c8 <udp_sendto+0xac>)
 800b56e:	f002 ff07 	bl	800e380 <iprintf>
 800b572:	f06f 030f 	mvn.w	r3, #15
 800b576:	e01e      	b.n	800b5b6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	7a1b      	ldrb	r3, [r3, #8]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d006      	beq.n	800b58e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	7a1b      	ldrb	r3, [r3, #8]
 800b584:	4618      	mov	r0, r3
 800b586:	f7f9 fca1 	bl	8004ecc <netif_get_by_index>
 800b58a:	6178      	str	r0, [r7, #20]
 800b58c:	e003      	b.n	800b596 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f001 fc1c 	bl	800cdcc <ip4_route>
 800b594:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d102      	bne.n	800b5a2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800b59c:	f06f 0303 	mvn.w	r3, #3
 800b5a0:	e009      	b.n	800b5b6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800b5a2:	887a      	ldrh	r2, [r7, #2]
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	68b9      	ldr	r1, [r7, #8]
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f000 f810 	bl	800b5d4 <udp_sendto_if>
 800b5b4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3718      	adds	r7, #24
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	080116f4 	.word	0x080116f4
 800b5c4:	08011818 	.word	0x08011818
 800b5c8:	08011748 	.word	0x08011748
 800b5cc:	08011830 	.word	0x08011830
 800b5d0:	0801184c 	.word	0x0801184c

0800b5d4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b088      	sub	sp, #32
 800b5d8:	af02      	add	r7, sp, #8
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	607a      	str	r2, [r7, #4]
 800b5e0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d109      	bne.n	800b5fc <udp_sendto_if+0x28>
 800b5e8:	4b2e      	ldr	r3, [pc, #184]	; (800b6a4 <udp_sendto_if+0xd0>)
 800b5ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b5ee:	492e      	ldr	r1, [pc, #184]	; (800b6a8 <udp_sendto_if+0xd4>)
 800b5f0:	482e      	ldr	r0, [pc, #184]	; (800b6ac <udp_sendto_if+0xd8>)
 800b5f2:	f002 fec5 	bl	800e380 <iprintf>
 800b5f6:	f06f 030f 	mvn.w	r3, #15
 800b5fa:	e04f      	b.n	800b69c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d109      	bne.n	800b616 <udp_sendto_if+0x42>
 800b602:	4b28      	ldr	r3, [pc, #160]	; (800b6a4 <udp_sendto_if+0xd0>)
 800b604:	f240 2281 	movw	r2, #641	; 0x281
 800b608:	4929      	ldr	r1, [pc, #164]	; (800b6b0 <udp_sendto_if+0xdc>)
 800b60a:	4828      	ldr	r0, [pc, #160]	; (800b6ac <udp_sendto_if+0xd8>)
 800b60c:	f002 feb8 	bl	800e380 <iprintf>
 800b610:	f06f 030f 	mvn.w	r3, #15
 800b614:	e042      	b.n	800b69c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d109      	bne.n	800b630 <udp_sendto_if+0x5c>
 800b61c:	4b21      	ldr	r3, [pc, #132]	; (800b6a4 <udp_sendto_if+0xd0>)
 800b61e:	f240 2282 	movw	r2, #642	; 0x282
 800b622:	4924      	ldr	r1, [pc, #144]	; (800b6b4 <udp_sendto_if+0xe0>)
 800b624:	4821      	ldr	r0, [pc, #132]	; (800b6ac <udp_sendto_if+0xd8>)
 800b626:	f002 feab 	bl	800e380 <iprintf>
 800b62a:	f06f 030f 	mvn.w	r3, #15
 800b62e:	e035      	b.n	800b69c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b630:	6a3b      	ldr	r3, [r7, #32]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d109      	bne.n	800b64a <udp_sendto_if+0x76>
 800b636:	4b1b      	ldr	r3, [pc, #108]	; (800b6a4 <udp_sendto_if+0xd0>)
 800b638:	f240 2283 	movw	r2, #643	; 0x283
 800b63c:	491e      	ldr	r1, [pc, #120]	; (800b6b8 <udp_sendto_if+0xe4>)
 800b63e:	481b      	ldr	r0, [pc, #108]	; (800b6ac <udp_sendto_if+0xd8>)
 800b640:	f002 fe9e 	bl	800e380 <iprintf>
 800b644:	f06f 030f 	mvn.w	r3, #15
 800b648:	e028      	b.n	800b69c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d009      	beq.n	800b664 <udp_sendto_if+0x90>
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d005      	beq.n	800b664 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b660:	2be0      	cmp	r3, #224	; 0xe0
 800b662:	d103      	bne.n	800b66c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800b664:	6a3b      	ldr	r3, [r7, #32]
 800b666:	3304      	adds	r3, #4
 800b668:	617b      	str	r3, [r7, #20]
 800b66a:	e00b      	b.n	800b684 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	6a3b      	ldr	r3, [r7, #32]
 800b672:	3304      	adds	r3, #4
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	429a      	cmp	r2, r3
 800b678:	d002      	beq.n	800b680 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800b67a:	f06f 0303 	mvn.w	r3, #3
 800b67e:	e00d      	b.n	800b69c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b684:	887a      	ldrh	r2, [r7, #2]
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	9301      	str	r3, [sp, #4]
 800b68a:	6a3b      	ldr	r3, [r7, #32]
 800b68c:	9300      	str	r3, [sp, #0]
 800b68e:	4613      	mov	r3, r2
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	68b9      	ldr	r1, [r7, #8]
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f000 f811 	bl	800b6bc <udp_sendto_if_src>
 800b69a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3718      	adds	r7, #24
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	080116f4 	.word	0x080116f4
 800b6a8:	08011868 	.word	0x08011868
 800b6ac:	08011748 	.word	0x08011748
 800b6b0:	08011884 	.word	0x08011884
 800b6b4:	080118a0 	.word	0x080118a0
 800b6b8:	080118c0 	.word	0x080118c0

0800b6bc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b08c      	sub	sp, #48	; 0x30
 800b6c0:	af04      	add	r7, sp, #16
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
 800b6c8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d109      	bne.n	800b6e4 <udp_sendto_if_src+0x28>
 800b6d0:	4b65      	ldr	r3, [pc, #404]	; (800b868 <udp_sendto_if_src+0x1ac>)
 800b6d2:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b6d6:	4965      	ldr	r1, [pc, #404]	; (800b86c <udp_sendto_if_src+0x1b0>)
 800b6d8:	4865      	ldr	r0, [pc, #404]	; (800b870 <udp_sendto_if_src+0x1b4>)
 800b6da:	f002 fe51 	bl	800e380 <iprintf>
 800b6de:	f06f 030f 	mvn.w	r3, #15
 800b6e2:	e0bc      	b.n	800b85e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d109      	bne.n	800b6fe <udp_sendto_if_src+0x42>
 800b6ea:	4b5f      	ldr	r3, [pc, #380]	; (800b868 <udp_sendto_if_src+0x1ac>)
 800b6ec:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b6f0:	4960      	ldr	r1, [pc, #384]	; (800b874 <udp_sendto_if_src+0x1b8>)
 800b6f2:	485f      	ldr	r0, [pc, #380]	; (800b870 <udp_sendto_if_src+0x1b4>)
 800b6f4:	f002 fe44 	bl	800e380 <iprintf>
 800b6f8:	f06f 030f 	mvn.w	r3, #15
 800b6fc:	e0af      	b.n	800b85e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d109      	bne.n	800b718 <udp_sendto_if_src+0x5c>
 800b704:	4b58      	ldr	r3, [pc, #352]	; (800b868 <udp_sendto_if_src+0x1ac>)
 800b706:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b70a:	495b      	ldr	r1, [pc, #364]	; (800b878 <udp_sendto_if_src+0x1bc>)
 800b70c:	4858      	ldr	r0, [pc, #352]	; (800b870 <udp_sendto_if_src+0x1b4>)
 800b70e:	f002 fe37 	bl	800e380 <iprintf>
 800b712:	f06f 030f 	mvn.w	r3, #15
 800b716:	e0a2      	b.n	800b85e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800b718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d109      	bne.n	800b732 <udp_sendto_if_src+0x76>
 800b71e:	4b52      	ldr	r3, [pc, #328]	; (800b868 <udp_sendto_if_src+0x1ac>)
 800b720:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b724:	4955      	ldr	r1, [pc, #340]	; (800b87c <udp_sendto_if_src+0x1c0>)
 800b726:	4852      	ldr	r0, [pc, #328]	; (800b870 <udp_sendto_if_src+0x1b4>)
 800b728:	f002 fe2a 	bl	800e380 <iprintf>
 800b72c:	f06f 030f 	mvn.w	r3, #15
 800b730:	e095      	b.n	800b85e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800b732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b734:	2b00      	cmp	r3, #0
 800b736:	d109      	bne.n	800b74c <udp_sendto_if_src+0x90>
 800b738:	4b4b      	ldr	r3, [pc, #300]	; (800b868 <udp_sendto_if_src+0x1ac>)
 800b73a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800b73e:	4950      	ldr	r1, [pc, #320]	; (800b880 <udp_sendto_if_src+0x1c4>)
 800b740:	484b      	ldr	r0, [pc, #300]	; (800b870 <udp_sendto_if_src+0x1b4>)
 800b742:	f002 fe1d 	bl	800e380 <iprintf>
 800b746:	f06f 030f 	mvn.w	r3, #15
 800b74a:	e088      	b.n	800b85e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	8a5b      	ldrh	r3, [r3, #18]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d10f      	bne.n	800b774 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b754:	68f9      	ldr	r1, [r7, #12]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	8a5b      	ldrh	r3, [r3, #18]
 800b75a:	461a      	mov	r2, r3
 800b75c:	68f8      	ldr	r0, [r7, #12]
 800b75e:	f000 f893 	bl	800b888 <udp_bind>
 800b762:	4603      	mov	r3, r0
 800b764:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b766:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d002      	beq.n	800b774 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b76e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b772:	e074      	b.n	800b85e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	891b      	ldrh	r3, [r3, #8]
 800b778:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d902      	bls.n	800b786 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800b780:	f04f 33ff 	mov.w	r3, #4294967295
 800b784:	e06b      	b.n	800b85e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800b786:	2108      	movs	r1, #8
 800b788:	68b8      	ldr	r0, [r7, #8]
 800b78a:	f7f9 fe69 	bl	8005460 <pbuf_add_header>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d015      	beq.n	800b7c0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b794:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b798:	2108      	movs	r1, #8
 800b79a:	2022      	movs	r0, #34	; 0x22
 800b79c:	f7f9 fc12 	bl	8004fc4 <pbuf_alloc>
 800b7a0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d102      	bne.n	800b7ae <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b7a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ac:	e057      	b.n	800b85e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	891b      	ldrh	r3, [r3, #8]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d006      	beq.n	800b7c4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b7b6:	68b9      	ldr	r1, [r7, #8]
 800b7b8:	69f8      	ldr	r0, [r7, #28]
 800b7ba:	f7f9 ffff 	bl	80057bc <pbuf_chain>
 800b7be:	e001      	b.n	800b7c4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	895b      	ldrh	r3, [r3, #10]
 800b7c8:	2b07      	cmp	r3, #7
 800b7ca:	d806      	bhi.n	800b7da <udp_sendto_if_src+0x11e>
 800b7cc:	4b26      	ldr	r3, [pc, #152]	; (800b868 <udp_sendto_if_src+0x1ac>)
 800b7ce:	f240 320d 	movw	r2, #781	; 0x30d
 800b7d2:	492c      	ldr	r1, [pc, #176]	; (800b884 <udp_sendto_if_src+0x1c8>)
 800b7d4:	4826      	ldr	r0, [pc, #152]	; (800b870 <udp_sendto_if_src+0x1b4>)
 800b7d6:	f002 fdd3 	bl	800e380 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	8a5b      	ldrh	r3, [r3, #18]
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7f8 fc1d 	bl	8004024 <lwip_htons>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b7f2:	887b      	ldrh	r3, [r7, #2]
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7f8 fc15 	bl	8004024 <lwip_htons>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	2200      	movs	r2, #0
 800b806:	719a      	strb	r2, [r3, #6]
 800b808:	2200      	movs	r2, #0
 800b80a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	891b      	ldrh	r3, [r3, #8]
 800b810:	4618      	mov	r0, r3
 800b812:	f7f8 fc07 	bl	8004024 <lwip_htons>
 800b816:	4603      	mov	r3, r0
 800b818:	461a      	mov	r2, r3
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b81e:	2311      	movs	r3, #17
 800b820:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	7adb      	ldrb	r3, [r3, #11]
 800b826:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	7a9b      	ldrb	r3, [r3, #10]
 800b82c:	7cb9      	ldrb	r1, [r7, #18]
 800b82e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b830:	9202      	str	r2, [sp, #8]
 800b832:	7cfa      	ldrb	r2, [r7, #19]
 800b834:	9201      	str	r2, [sp, #4]
 800b836:	9300      	str	r3, [sp, #0]
 800b838:	460b      	mov	r3, r1
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b83e:	69f8      	ldr	r0, [r7, #28]
 800b840:	f001 fcac 	bl	800d19c <ip4_output_if_src>
 800b844:	4603      	mov	r3, r0
 800b846:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800b848:	69fa      	ldr	r2, [r7, #28]
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d004      	beq.n	800b85a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800b850:	69f8      	ldr	r0, [r7, #28]
 800b852:	f7f9 fe9b 	bl	800558c <pbuf_free>
    q = NULL;
 800b856:	2300      	movs	r3, #0
 800b858:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800b85a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3720      	adds	r7, #32
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	080116f4 	.word	0x080116f4
 800b86c:	080118e0 	.word	0x080118e0
 800b870:	08011748 	.word	0x08011748
 800b874:	08011900 	.word	0x08011900
 800b878:	08011920 	.word	0x08011920
 800b87c:	08011944 	.word	0x08011944
 800b880:	08011968 	.word	0x08011968
 800b884:	0801198c 	.word	0x0801198c

0800b888 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	4613      	mov	r3, r2
 800b894:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d101      	bne.n	800b8a0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b89c:	4b39      	ldr	r3, [pc, #228]	; (800b984 <udp_bind+0xfc>)
 800b89e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d109      	bne.n	800b8ba <udp_bind+0x32>
 800b8a6:	4b38      	ldr	r3, [pc, #224]	; (800b988 <udp_bind+0x100>)
 800b8a8:	f240 32b7 	movw	r2, #951	; 0x3b7
 800b8ac:	4937      	ldr	r1, [pc, #220]	; (800b98c <udp_bind+0x104>)
 800b8ae:	4838      	ldr	r0, [pc, #224]	; (800b990 <udp_bind+0x108>)
 800b8b0:	f002 fd66 	bl	800e380 <iprintf>
 800b8b4:	f06f 030f 	mvn.w	r3, #15
 800b8b8:	e060      	b.n	800b97c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b8be:	4b35      	ldr	r3, [pc, #212]	; (800b994 <udp_bind+0x10c>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	617b      	str	r3, [r7, #20]
 800b8c4:	e009      	b.n	800b8da <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d102      	bne.n	800b8d4 <udp_bind+0x4c>
      rebind = 1;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	74fb      	strb	r3, [r7, #19]
      break;
 800b8d2:	e005      	b.n	800b8e0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	617b      	str	r3, [r7, #20]
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d1f2      	bne.n	800b8c6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800b8e0:	88fb      	ldrh	r3, [r7, #6]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d109      	bne.n	800b8fa <udp_bind+0x72>
    port = udp_new_port();
 800b8e6:	f7ff fc35 	bl	800b154 <udp_new_port>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b8ee:	88fb      	ldrh	r3, [r7, #6]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d12c      	bne.n	800b94e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b8f4:	f06f 0307 	mvn.w	r3, #7
 800b8f8:	e040      	b.n	800b97c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b8fa:	4b26      	ldr	r3, [pc, #152]	; (800b994 <udp_bind+0x10c>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	617b      	str	r3, [r7, #20]
 800b900:	e022      	b.n	800b948 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	429a      	cmp	r2, r3
 800b908:	d01b      	beq.n	800b942 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	8a5b      	ldrh	r3, [r3, #18]
 800b90e:	88fa      	ldrh	r2, [r7, #6]
 800b910:	429a      	cmp	r2, r3
 800b912:	d116      	bne.n	800b942 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d00d      	beq.n	800b93c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d00a      	beq.n	800b93c <udp_bind+0xb4>
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d006      	beq.n	800b93c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b92e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b930:	2b00      	cmp	r3, #0
 800b932:	d003      	beq.n	800b93c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d102      	bne.n	800b942 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800b93c:	f06f 0307 	mvn.w	r3, #7
 800b940:	e01c      	b.n	800b97c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	617b      	str	r3, [r7, #20]
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d1d9      	bne.n	800b902 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d002      	beq.n	800b95a <udp_bind+0xd2>
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	e000      	b.n	800b95c <udp_bind+0xd4>
 800b95a:	2300      	movs	r3, #0
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	88fa      	ldrh	r2, [r7, #6]
 800b964:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b966:	7cfb      	ldrb	r3, [r7, #19]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d106      	bne.n	800b97a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b96c:	4b09      	ldr	r3, [pc, #36]	; (800b994 <udp_bind+0x10c>)
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800b974:	4a07      	ldr	r2, [pc, #28]	; (800b994 <udp_bind+0x10c>)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b97a:	2300      	movs	r3, #0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3718      	adds	r7, #24
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	08012204 	.word	0x08012204
 800b988:	080116f4 	.word	0x080116f4
 800b98c:	080119bc 	.word	0x080119bc
 800b990:	08011748 	.word	0x08011748
 800b994:	20008b0c 	.word	0x20008b0c

0800b998 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b086      	sub	sp, #24
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d109      	bne.n	800b9c0 <udp_connect+0x28>
 800b9ac:	4b2c      	ldr	r3, [pc, #176]	; (800ba60 <udp_connect+0xc8>)
 800b9ae:	f240 4235 	movw	r2, #1077	; 0x435
 800b9b2:	492c      	ldr	r1, [pc, #176]	; (800ba64 <udp_connect+0xcc>)
 800b9b4:	482c      	ldr	r0, [pc, #176]	; (800ba68 <udp_connect+0xd0>)
 800b9b6:	f002 fce3 	bl	800e380 <iprintf>
 800b9ba:	f06f 030f 	mvn.w	r3, #15
 800b9be:	e04b      	b.n	800ba58 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d109      	bne.n	800b9da <udp_connect+0x42>
 800b9c6:	4b26      	ldr	r3, [pc, #152]	; (800ba60 <udp_connect+0xc8>)
 800b9c8:	f240 4236 	movw	r2, #1078	; 0x436
 800b9cc:	4927      	ldr	r1, [pc, #156]	; (800ba6c <udp_connect+0xd4>)
 800b9ce:	4826      	ldr	r0, [pc, #152]	; (800ba68 <udp_connect+0xd0>)
 800b9d0:	f002 fcd6 	bl	800e380 <iprintf>
 800b9d4:	f06f 030f 	mvn.w	r3, #15
 800b9d8:	e03e      	b.n	800ba58 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	8a5b      	ldrh	r3, [r3, #18]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d10f      	bne.n	800ba02 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b9e2:	68f9      	ldr	r1, [r7, #12]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	8a5b      	ldrh	r3, [r3, #18]
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	f7ff ff4c 	bl	800b888 <udp_bind>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b9f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d002      	beq.n	800ba02 <udp_connect+0x6a>
      return err;
 800b9fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba00:	e02a      	b.n	800ba58 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d002      	beq.n	800ba0e <udp_connect+0x76>
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	e000      	b.n	800ba10 <udp_connect+0x78>
 800ba0e:	2300      	movs	r3, #0
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	88fa      	ldrh	r2, [r7, #6]
 800ba18:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	7c1b      	ldrb	r3, [r3, #16]
 800ba1e:	f043 0304 	orr.w	r3, r3, #4
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ba28:	4b11      	ldr	r3, [pc, #68]	; (800ba70 <udp_connect+0xd8>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	617b      	str	r3, [r7, #20]
 800ba2e:	e008      	b.n	800ba42 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d101      	bne.n	800ba3c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	e00d      	b.n	800ba58 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	617b      	str	r3, [r7, #20]
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d1f3      	bne.n	800ba30 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800ba48:	4b09      	ldr	r3, [pc, #36]	; (800ba70 <udp_connect+0xd8>)
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800ba50:	4a07      	ldr	r2, [pc, #28]	; (800ba70 <udp_connect+0xd8>)
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800ba56:	2300      	movs	r3, #0
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3718      	adds	r7, #24
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}
 800ba60:	080116f4 	.word	0x080116f4
 800ba64:	080119d4 	.word	0x080119d4
 800ba68:	08011748 	.word	0x08011748
 800ba6c:	080119f0 	.word	0x080119f0
 800ba70:	20008b0c 	.word	0x20008b0c

0800ba74 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d107      	bne.n	800ba92 <udp_disconnect+0x1e>
 800ba82:	4b0d      	ldr	r3, [pc, #52]	; (800bab8 <udp_disconnect+0x44>)
 800ba84:	f240 426a 	movw	r2, #1130	; 0x46a
 800ba88:	490c      	ldr	r1, [pc, #48]	; (800babc <udp_disconnect+0x48>)
 800ba8a:	480d      	ldr	r0, [pc, #52]	; (800bac0 <udp_disconnect+0x4c>)
 800ba8c:	f002 fc78 	bl	800e380 <iprintf>
 800ba90:	e00f      	b.n	800bab2 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2200      	movs	r2, #0
 800baa2:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	7c1b      	ldrb	r3, [r3, #16]
 800baa8:	f023 0304 	bic.w	r3, r3, #4
 800baac:	b2da      	uxtb	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	741a      	strb	r2, [r3, #16]
}
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	080116f4 	.word	0x080116f4
 800babc:	08011a0c 	.word	0x08011a0c
 800bac0:	08011748 	.word	0x08011748

0800bac4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d107      	bne.n	800bae6 <udp_recv+0x22>
 800bad6:	4b08      	ldr	r3, [pc, #32]	; (800baf8 <udp_recv+0x34>)
 800bad8:	f240 428a 	movw	r2, #1162	; 0x48a
 800badc:	4907      	ldr	r1, [pc, #28]	; (800bafc <udp_recv+0x38>)
 800bade:	4808      	ldr	r0, [pc, #32]	; (800bb00 <udp_recv+0x3c>)
 800bae0:	f002 fc4e 	bl	800e380 <iprintf>
 800bae4:	e005      	b.n	800baf2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	68ba      	ldr	r2, [r7, #8]
 800baea:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	61da      	str	r2, [r3, #28]
}
 800baf2:	3710      	adds	r7, #16
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	080116f4 	.word	0x080116f4
 800bafc:	08011a28 	.word	0x08011a28
 800bb00:	08011748 	.word	0x08011748

0800bb04 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d107      	bne.n	800bb22 <udp_remove+0x1e>
 800bb12:	4b19      	ldr	r3, [pc, #100]	; (800bb78 <udp_remove+0x74>)
 800bb14:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800bb18:	4918      	ldr	r1, [pc, #96]	; (800bb7c <udp_remove+0x78>)
 800bb1a:	4819      	ldr	r0, [pc, #100]	; (800bb80 <udp_remove+0x7c>)
 800bb1c:	f002 fc30 	bl	800e380 <iprintf>
 800bb20:	e026      	b.n	800bb70 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800bb22:	4b18      	ldr	r3, [pc, #96]	; (800bb84 <udp_remove+0x80>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d105      	bne.n	800bb38 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800bb2c:	4b15      	ldr	r3, [pc, #84]	; (800bb84 <udp_remove+0x80>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	4a14      	ldr	r2, [pc, #80]	; (800bb84 <udp_remove+0x80>)
 800bb34:	6013      	str	r3, [r2, #0]
 800bb36:	e017      	b.n	800bb68 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800bb38:	4b12      	ldr	r3, [pc, #72]	; (800bb84 <udp_remove+0x80>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	60fb      	str	r3, [r7, #12]
 800bb3e:	e010      	b.n	800bb62 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d009      	beq.n	800bb5c <udp_remove+0x58>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d104      	bne.n	800bb5c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	68da      	ldr	r2, [r3, #12]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	60da      	str	r2, [r3, #12]
        break;
 800bb5a:	e005      	b.n	800bb68 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	60fb      	str	r3, [r7, #12]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d1eb      	bne.n	800bb40 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800bb68:	6879      	ldr	r1, [r7, #4]
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	f7f8 fefc 	bl	8004968 <memp_free>
}
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	080116f4 	.word	0x080116f4
 800bb7c:	08011a40 	.word	0x08011a40
 800bb80:	08011748 	.word	0x08011748
 800bb84:	20008b0c 	.word	0x20008b0c

0800bb88 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800bb8e:	2000      	movs	r0, #0
 800bb90:	f7f8 fe9e 	bl	80048d0 <memp_malloc>
 800bb94:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d007      	beq.n	800bbac <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800bb9c:	2220      	movs	r2, #32
 800bb9e:	2100      	movs	r1, #0
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f002 fbe5 	bl	800e370 <memset>
    pcb->ttl = UDP_TTL;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	22ff      	movs	r2, #255	; 0xff
 800bbaa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800bbac:	687b      	ldr	r3, [r7, #4]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
	...

0800bbb8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d01e      	beq.n	800bc06 <udp_netif_ip_addr_changed+0x4e>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d01a      	beq.n	800bc06 <udp_netif_ip_addr_changed+0x4e>
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d017      	beq.n	800bc06 <udp_netif_ip_addr_changed+0x4e>
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d013      	beq.n	800bc06 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bbde:	4b0d      	ldr	r3, [pc, #52]	; (800bc14 <udp_netif_ip_addr_changed+0x5c>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	60fb      	str	r3, [r7, #12]
 800bbe4:	e00c      	b.n	800bc00 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d103      	bne.n	800bbfa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	60fb      	str	r3, [r7, #12]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d1ef      	bne.n	800bbe6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800bc06:	bf00      	nop
 800bc08:	3714      	adds	r7, #20
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	20008b0c 	.word	0x20008b0c

0800bc18 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800bc20:	4915      	ldr	r1, [pc, #84]	; (800bc78 <etharp_free_entry+0x60>)
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	4613      	mov	r3, r2
 800bc26:	005b      	lsls	r3, r3, #1
 800bc28:	4413      	add	r3, r2
 800bc2a:	00db      	lsls	r3, r3, #3
 800bc2c:	440b      	add	r3, r1
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d013      	beq.n	800bc5c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800bc34:	4910      	ldr	r1, [pc, #64]	; (800bc78 <etharp_free_entry+0x60>)
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	4613      	mov	r3, r2
 800bc3a:	005b      	lsls	r3, r3, #1
 800bc3c:	4413      	add	r3, r2
 800bc3e:	00db      	lsls	r3, r3, #3
 800bc40:	440b      	add	r3, r1
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7f9 fca1 	bl	800558c <pbuf_free>
    arp_table[i].q = NULL;
 800bc4a:	490b      	ldr	r1, [pc, #44]	; (800bc78 <etharp_free_entry+0x60>)
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	4613      	mov	r3, r2
 800bc50:	005b      	lsls	r3, r3, #1
 800bc52:	4413      	add	r3, r2
 800bc54:	00db      	lsls	r3, r3, #3
 800bc56:	440b      	add	r3, r1
 800bc58:	2200      	movs	r2, #0
 800bc5a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800bc5c:	4906      	ldr	r1, [pc, #24]	; (800bc78 <etharp_free_entry+0x60>)
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	4613      	mov	r3, r2
 800bc62:	005b      	lsls	r3, r3, #1
 800bc64:	4413      	add	r3, r2
 800bc66:	00db      	lsls	r3, r3, #3
 800bc68:	440b      	add	r3, r1
 800bc6a:	3314      	adds	r3, #20
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800bc70:	bf00      	nop
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	2000010c 	.word	0x2000010c

0800bc7c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bc82:	2300      	movs	r3, #0
 800bc84:	607b      	str	r3, [r7, #4]
 800bc86:	e096      	b.n	800bdb6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800bc88:	494f      	ldr	r1, [pc, #316]	; (800bdc8 <etharp_tmr+0x14c>)
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	4413      	add	r3, r2
 800bc92:	00db      	lsls	r3, r3, #3
 800bc94:	440b      	add	r3, r1
 800bc96:	3314      	adds	r3, #20
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800bc9c:	78fb      	ldrb	r3, [r7, #3]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	f000 8086 	beq.w	800bdb0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800bca4:	4948      	ldr	r1, [pc, #288]	; (800bdc8 <etharp_tmr+0x14c>)
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	4613      	mov	r3, r2
 800bcaa:	005b      	lsls	r3, r3, #1
 800bcac:	4413      	add	r3, r2
 800bcae:	00db      	lsls	r3, r3, #3
 800bcb0:	440b      	add	r3, r1
 800bcb2:	3312      	adds	r3, #18
 800bcb4:	881b      	ldrh	r3, [r3, #0]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	b298      	uxth	r0, r3
 800bcba:	4943      	ldr	r1, [pc, #268]	; (800bdc8 <etharp_tmr+0x14c>)
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	4613      	mov	r3, r2
 800bcc0:	005b      	lsls	r3, r3, #1
 800bcc2:	4413      	add	r3, r2
 800bcc4:	00db      	lsls	r3, r3, #3
 800bcc6:	440b      	add	r3, r1
 800bcc8:	3312      	adds	r3, #18
 800bcca:	4602      	mov	r2, r0
 800bccc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bcce:	493e      	ldr	r1, [pc, #248]	; (800bdc8 <etharp_tmr+0x14c>)
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	005b      	lsls	r3, r3, #1
 800bcd6:	4413      	add	r3, r2
 800bcd8:	00db      	lsls	r3, r3, #3
 800bcda:	440b      	add	r3, r1
 800bcdc:	3312      	adds	r3, #18
 800bcde:	881b      	ldrh	r3, [r3, #0]
 800bce0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800bce4:	d215      	bcs.n	800bd12 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bce6:	4938      	ldr	r1, [pc, #224]	; (800bdc8 <etharp_tmr+0x14c>)
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	4613      	mov	r3, r2
 800bcec:	005b      	lsls	r3, r3, #1
 800bcee:	4413      	add	r3, r2
 800bcf0:	00db      	lsls	r3, r3, #3
 800bcf2:	440b      	add	r3, r1
 800bcf4:	3314      	adds	r3, #20
 800bcf6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d10e      	bne.n	800bd1a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800bcfc:	4932      	ldr	r1, [pc, #200]	; (800bdc8 <etharp_tmr+0x14c>)
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	4613      	mov	r3, r2
 800bd02:	005b      	lsls	r3, r3, #1
 800bd04:	4413      	add	r3, r2
 800bd06:	00db      	lsls	r3, r3, #3
 800bd08:	440b      	add	r3, r1
 800bd0a:	3312      	adds	r3, #18
 800bd0c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bd0e:	2b04      	cmp	r3, #4
 800bd10:	d903      	bls.n	800bd1a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f7ff ff80 	bl	800bc18 <etharp_free_entry>
 800bd18:	e04a      	b.n	800bdb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800bd1a:	492b      	ldr	r1, [pc, #172]	; (800bdc8 <etharp_tmr+0x14c>)
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	005b      	lsls	r3, r3, #1
 800bd22:	4413      	add	r3, r2
 800bd24:	00db      	lsls	r3, r3, #3
 800bd26:	440b      	add	r3, r1
 800bd28:	3314      	adds	r3, #20
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	2b03      	cmp	r3, #3
 800bd2e:	d10a      	bne.n	800bd46 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800bd30:	4925      	ldr	r1, [pc, #148]	; (800bdc8 <etharp_tmr+0x14c>)
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	4613      	mov	r3, r2
 800bd36:	005b      	lsls	r3, r3, #1
 800bd38:	4413      	add	r3, r2
 800bd3a:	00db      	lsls	r3, r3, #3
 800bd3c:	440b      	add	r3, r1
 800bd3e:	3314      	adds	r3, #20
 800bd40:	2204      	movs	r2, #4
 800bd42:	701a      	strb	r2, [r3, #0]
 800bd44:	e034      	b.n	800bdb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800bd46:	4920      	ldr	r1, [pc, #128]	; (800bdc8 <etharp_tmr+0x14c>)
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	005b      	lsls	r3, r3, #1
 800bd4e:	4413      	add	r3, r2
 800bd50:	00db      	lsls	r3, r3, #3
 800bd52:	440b      	add	r3, r1
 800bd54:	3314      	adds	r3, #20
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	2b04      	cmp	r3, #4
 800bd5a:	d10a      	bne.n	800bd72 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bd5c:	491a      	ldr	r1, [pc, #104]	; (800bdc8 <etharp_tmr+0x14c>)
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	4613      	mov	r3, r2
 800bd62:	005b      	lsls	r3, r3, #1
 800bd64:	4413      	add	r3, r2
 800bd66:	00db      	lsls	r3, r3, #3
 800bd68:	440b      	add	r3, r1
 800bd6a:	3314      	adds	r3, #20
 800bd6c:	2202      	movs	r2, #2
 800bd6e:	701a      	strb	r2, [r3, #0]
 800bd70:	e01e      	b.n	800bdb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bd72:	4915      	ldr	r1, [pc, #84]	; (800bdc8 <etharp_tmr+0x14c>)
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	4613      	mov	r3, r2
 800bd78:	005b      	lsls	r3, r3, #1
 800bd7a:	4413      	add	r3, r2
 800bd7c:	00db      	lsls	r3, r3, #3
 800bd7e:	440b      	add	r3, r1
 800bd80:	3314      	adds	r3, #20
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d113      	bne.n	800bdb0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800bd88:	490f      	ldr	r1, [pc, #60]	; (800bdc8 <etharp_tmr+0x14c>)
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	005b      	lsls	r3, r3, #1
 800bd90:	4413      	add	r3, r2
 800bd92:	00db      	lsls	r3, r3, #3
 800bd94:	440b      	add	r3, r1
 800bd96:	3308      	adds	r3, #8
 800bd98:	6818      	ldr	r0, [r3, #0]
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	4613      	mov	r3, r2
 800bd9e:	005b      	lsls	r3, r3, #1
 800bda0:	4413      	add	r3, r2
 800bda2:	00db      	lsls	r3, r3, #3
 800bda4:	4a08      	ldr	r2, [pc, #32]	; (800bdc8 <etharp_tmr+0x14c>)
 800bda6:	4413      	add	r3, r2
 800bda8:	3304      	adds	r3, #4
 800bdaa:	4619      	mov	r1, r3
 800bdac:	f000 fe6e 	bl	800ca8c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	607b      	str	r3, [r7, #4]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b09      	cmp	r3, #9
 800bdba:	f77f af65 	ble.w	800bc88 <etharp_tmr+0xc>
      }
    }
  }
}
 800bdbe:	bf00      	nop
 800bdc0:	bf00      	nop
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	2000010c 	.word	0x2000010c

0800bdcc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b08a      	sub	sp, #40	; 0x28
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	607a      	str	r2, [r7, #4]
 800bdd8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bdda:	230a      	movs	r3, #10
 800bddc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bdde:	230a      	movs	r3, #10
 800bde0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800bde2:	230a      	movs	r3, #10
 800bde4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800bde6:	2300      	movs	r3, #0
 800bde8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800bdea:	230a      	movs	r3, #10
 800bdec:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	83bb      	strh	r3, [r7, #28]
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	837b      	strh	r3, [r7, #26]
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	843b      	strh	r3, [r7, #32]
 800bdfe:	e0ae      	b.n	800bf5e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800be00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be04:	49a6      	ldr	r1, [pc, #664]	; (800c0a0 <etharp_find_entry+0x2d4>)
 800be06:	4613      	mov	r3, r2
 800be08:	005b      	lsls	r3, r3, #1
 800be0a:	4413      	add	r3, r2
 800be0c:	00db      	lsls	r3, r3, #3
 800be0e:	440b      	add	r3, r1
 800be10:	3314      	adds	r3, #20
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800be16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800be1a:	2b0a      	cmp	r3, #10
 800be1c:	d105      	bne.n	800be2a <etharp_find_entry+0x5e>
 800be1e:	7dfb      	ldrb	r3, [r7, #23]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d102      	bne.n	800be2a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800be24:	8c3b      	ldrh	r3, [r7, #32]
 800be26:	847b      	strh	r3, [r7, #34]	; 0x22
 800be28:	e095      	b.n	800bf56 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800be2a:	7dfb      	ldrb	r3, [r7, #23]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f000 8092 	beq.w	800bf56 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800be32:	7dfb      	ldrb	r3, [r7, #23]
 800be34:	2b01      	cmp	r3, #1
 800be36:	d009      	beq.n	800be4c <etharp_find_entry+0x80>
 800be38:	7dfb      	ldrb	r3, [r7, #23]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d806      	bhi.n	800be4c <etharp_find_entry+0x80>
 800be3e:	4b99      	ldr	r3, [pc, #612]	; (800c0a4 <etharp_find_entry+0x2d8>)
 800be40:	f240 1223 	movw	r2, #291	; 0x123
 800be44:	4998      	ldr	r1, [pc, #608]	; (800c0a8 <etharp_find_entry+0x2dc>)
 800be46:	4899      	ldr	r0, [pc, #612]	; (800c0ac <etharp_find_entry+0x2e0>)
 800be48:	f002 fa9a 	bl	800e380 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d020      	beq.n	800be94 <etharp_find_entry+0xc8>
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	6819      	ldr	r1, [r3, #0]
 800be56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be5a:	4891      	ldr	r0, [pc, #580]	; (800c0a0 <etharp_find_entry+0x2d4>)
 800be5c:	4613      	mov	r3, r2
 800be5e:	005b      	lsls	r3, r3, #1
 800be60:	4413      	add	r3, r2
 800be62:	00db      	lsls	r3, r3, #3
 800be64:	4403      	add	r3, r0
 800be66:	3304      	adds	r3, #4
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4299      	cmp	r1, r3
 800be6c:	d112      	bne.n	800be94 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d00c      	beq.n	800be8e <etharp_find_entry+0xc2>
 800be74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be78:	4989      	ldr	r1, [pc, #548]	; (800c0a0 <etharp_find_entry+0x2d4>)
 800be7a:	4613      	mov	r3, r2
 800be7c:	005b      	lsls	r3, r3, #1
 800be7e:	4413      	add	r3, r2
 800be80:	00db      	lsls	r3, r3, #3
 800be82:	440b      	add	r3, r1
 800be84:	3308      	adds	r3, #8
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d102      	bne.n	800be94 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800be8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800be92:	e100      	b.n	800c096 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800be94:	7dfb      	ldrb	r3, [r7, #23]
 800be96:	2b01      	cmp	r3, #1
 800be98:	d140      	bne.n	800bf1c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800be9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be9e:	4980      	ldr	r1, [pc, #512]	; (800c0a0 <etharp_find_entry+0x2d4>)
 800bea0:	4613      	mov	r3, r2
 800bea2:	005b      	lsls	r3, r3, #1
 800bea4:	4413      	add	r3, r2
 800bea6:	00db      	lsls	r3, r3, #3
 800bea8:	440b      	add	r3, r1
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d01a      	beq.n	800bee6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800beb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800beb4:	497a      	ldr	r1, [pc, #488]	; (800c0a0 <etharp_find_entry+0x2d4>)
 800beb6:	4613      	mov	r3, r2
 800beb8:	005b      	lsls	r3, r3, #1
 800beba:	4413      	add	r3, r2
 800bebc:	00db      	lsls	r3, r3, #3
 800bebe:	440b      	add	r3, r1
 800bec0:	3312      	adds	r3, #18
 800bec2:	881b      	ldrh	r3, [r3, #0]
 800bec4:	8bba      	ldrh	r2, [r7, #28]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d845      	bhi.n	800bf56 <etharp_find_entry+0x18a>
            old_queue = i;
 800beca:	8c3b      	ldrh	r3, [r7, #32]
 800becc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800bece:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bed2:	4973      	ldr	r1, [pc, #460]	; (800c0a0 <etharp_find_entry+0x2d4>)
 800bed4:	4613      	mov	r3, r2
 800bed6:	005b      	lsls	r3, r3, #1
 800bed8:	4413      	add	r3, r2
 800beda:	00db      	lsls	r3, r3, #3
 800bedc:	440b      	add	r3, r1
 800bede:	3312      	adds	r3, #18
 800bee0:	881b      	ldrh	r3, [r3, #0]
 800bee2:	83bb      	strh	r3, [r7, #28]
 800bee4:	e037      	b.n	800bf56 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800bee6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800beea:	496d      	ldr	r1, [pc, #436]	; (800c0a0 <etharp_find_entry+0x2d4>)
 800beec:	4613      	mov	r3, r2
 800beee:	005b      	lsls	r3, r3, #1
 800bef0:	4413      	add	r3, r2
 800bef2:	00db      	lsls	r3, r3, #3
 800bef4:	440b      	add	r3, r1
 800bef6:	3312      	adds	r3, #18
 800bef8:	881b      	ldrh	r3, [r3, #0]
 800befa:	8b7a      	ldrh	r2, [r7, #26]
 800befc:	429a      	cmp	r2, r3
 800befe:	d82a      	bhi.n	800bf56 <etharp_find_entry+0x18a>
            old_pending = i;
 800bf00:	8c3b      	ldrh	r3, [r7, #32]
 800bf02:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800bf04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf08:	4965      	ldr	r1, [pc, #404]	; (800c0a0 <etharp_find_entry+0x2d4>)
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	005b      	lsls	r3, r3, #1
 800bf0e:	4413      	add	r3, r2
 800bf10:	00db      	lsls	r3, r3, #3
 800bf12:	440b      	add	r3, r1
 800bf14:	3312      	adds	r3, #18
 800bf16:	881b      	ldrh	r3, [r3, #0]
 800bf18:	837b      	strh	r3, [r7, #26]
 800bf1a:	e01c      	b.n	800bf56 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800bf1c:	7dfb      	ldrb	r3, [r7, #23]
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	d919      	bls.n	800bf56 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800bf22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf26:	495e      	ldr	r1, [pc, #376]	; (800c0a0 <etharp_find_entry+0x2d4>)
 800bf28:	4613      	mov	r3, r2
 800bf2a:	005b      	lsls	r3, r3, #1
 800bf2c:	4413      	add	r3, r2
 800bf2e:	00db      	lsls	r3, r3, #3
 800bf30:	440b      	add	r3, r1
 800bf32:	3312      	adds	r3, #18
 800bf34:	881b      	ldrh	r3, [r3, #0]
 800bf36:	8b3a      	ldrh	r2, [r7, #24]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d80c      	bhi.n	800bf56 <etharp_find_entry+0x18a>
            old_stable = i;
 800bf3c:	8c3b      	ldrh	r3, [r7, #32]
 800bf3e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800bf40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf44:	4956      	ldr	r1, [pc, #344]	; (800c0a0 <etharp_find_entry+0x2d4>)
 800bf46:	4613      	mov	r3, r2
 800bf48:	005b      	lsls	r3, r3, #1
 800bf4a:	4413      	add	r3, r2
 800bf4c:	00db      	lsls	r3, r3, #3
 800bf4e:	440b      	add	r3, r1
 800bf50:	3312      	adds	r3, #18
 800bf52:	881b      	ldrh	r3, [r3, #0]
 800bf54:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bf56:	8c3b      	ldrh	r3, [r7, #32]
 800bf58:	3301      	adds	r3, #1
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	843b      	strh	r3, [r7, #32]
 800bf5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bf62:	2b09      	cmp	r3, #9
 800bf64:	f77f af4c 	ble.w	800be00 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800bf68:	7afb      	ldrb	r3, [r7, #11]
 800bf6a:	f003 0302 	and.w	r3, r3, #2
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d108      	bne.n	800bf84 <etharp_find_entry+0x1b8>
 800bf72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bf76:	2b0a      	cmp	r3, #10
 800bf78:	d107      	bne.n	800bf8a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800bf7a:	7afb      	ldrb	r3, [r7, #11]
 800bf7c:	f003 0301 	and.w	r3, r3, #1
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d102      	bne.n	800bf8a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800bf84:	f04f 33ff 	mov.w	r3, #4294967295
 800bf88:	e085      	b.n	800c096 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800bf8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bf8e:	2b09      	cmp	r3, #9
 800bf90:	dc02      	bgt.n	800bf98 <etharp_find_entry+0x1cc>
    i = empty;
 800bf92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf94:	843b      	strh	r3, [r7, #32]
 800bf96:	e039      	b.n	800c00c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800bf98:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bf9c:	2b09      	cmp	r3, #9
 800bf9e:	dc14      	bgt.n	800bfca <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800bfa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfa2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800bfa4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfa8:	493d      	ldr	r1, [pc, #244]	; (800c0a0 <etharp_find_entry+0x2d4>)
 800bfaa:	4613      	mov	r3, r2
 800bfac:	005b      	lsls	r3, r3, #1
 800bfae:	4413      	add	r3, r2
 800bfb0:	00db      	lsls	r3, r3, #3
 800bfb2:	440b      	add	r3, r1
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d018      	beq.n	800bfec <etharp_find_entry+0x220>
 800bfba:	4b3a      	ldr	r3, [pc, #232]	; (800c0a4 <etharp_find_entry+0x2d8>)
 800bfbc:	f240 126d 	movw	r2, #365	; 0x16d
 800bfc0:	493b      	ldr	r1, [pc, #236]	; (800c0b0 <etharp_find_entry+0x2e4>)
 800bfc2:	483a      	ldr	r0, [pc, #232]	; (800c0ac <etharp_find_entry+0x2e0>)
 800bfc4:	f002 f9dc 	bl	800e380 <iprintf>
 800bfc8:	e010      	b.n	800bfec <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800bfca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bfce:	2b09      	cmp	r3, #9
 800bfd0:	dc02      	bgt.n	800bfd8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800bfd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bfd4:	843b      	strh	r3, [r7, #32]
 800bfd6:	e009      	b.n	800bfec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800bfd8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bfdc:	2b09      	cmp	r3, #9
 800bfde:	dc02      	bgt.n	800bfe6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800bfe0:	8bfb      	ldrh	r3, [r7, #30]
 800bfe2:	843b      	strh	r3, [r7, #32]
 800bfe4:	e002      	b.n	800bfec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800bfe6:	f04f 33ff 	mov.w	r3, #4294967295
 800bfea:	e054      	b.n	800c096 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bfec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bff0:	2b09      	cmp	r3, #9
 800bff2:	dd06      	ble.n	800c002 <etharp_find_entry+0x236>
 800bff4:	4b2b      	ldr	r3, [pc, #172]	; (800c0a4 <etharp_find_entry+0x2d8>)
 800bff6:	f240 127f 	movw	r2, #383	; 0x17f
 800bffa:	492e      	ldr	r1, [pc, #184]	; (800c0b4 <etharp_find_entry+0x2e8>)
 800bffc:	482b      	ldr	r0, [pc, #172]	; (800c0ac <etharp_find_entry+0x2e0>)
 800bffe:	f002 f9bf 	bl	800e380 <iprintf>
    etharp_free_entry(i);
 800c002:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c006:	4618      	mov	r0, r3
 800c008:	f7ff fe06 	bl	800bc18 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c00c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c010:	2b09      	cmp	r3, #9
 800c012:	dd06      	ble.n	800c022 <etharp_find_entry+0x256>
 800c014:	4b23      	ldr	r3, [pc, #140]	; (800c0a4 <etharp_find_entry+0x2d8>)
 800c016:	f240 1283 	movw	r2, #387	; 0x183
 800c01a:	4926      	ldr	r1, [pc, #152]	; (800c0b4 <etharp_find_entry+0x2e8>)
 800c01c:	4823      	ldr	r0, [pc, #140]	; (800c0ac <etharp_find_entry+0x2e0>)
 800c01e:	f002 f9af 	bl	800e380 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c022:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c026:	491e      	ldr	r1, [pc, #120]	; (800c0a0 <etharp_find_entry+0x2d4>)
 800c028:	4613      	mov	r3, r2
 800c02a:	005b      	lsls	r3, r3, #1
 800c02c:	4413      	add	r3, r2
 800c02e:	00db      	lsls	r3, r3, #3
 800c030:	440b      	add	r3, r1
 800c032:	3314      	adds	r3, #20
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d006      	beq.n	800c048 <etharp_find_entry+0x27c>
 800c03a:	4b1a      	ldr	r3, [pc, #104]	; (800c0a4 <etharp_find_entry+0x2d8>)
 800c03c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c040:	491d      	ldr	r1, [pc, #116]	; (800c0b8 <etharp_find_entry+0x2ec>)
 800c042:	481a      	ldr	r0, [pc, #104]	; (800c0ac <etharp_find_entry+0x2e0>)
 800c044:	f002 f99c 	bl	800e380 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d00b      	beq.n	800c066 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c04e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6819      	ldr	r1, [r3, #0]
 800c056:	4812      	ldr	r0, [pc, #72]	; (800c0a0 <etharp_find_entry+0x2d4>)
 800c058:	4613      	mov	r3, r2
 800c05a:	005b      	lsls	r3, r3, #1
 800c05c:	4413      	add	r3, r2
 800c05e:	00db      	lsls	r3, r3, #3
 800c060:	4403      	add	r3, r0
 800c062:	3304      	adds	r3, #4
 800c064:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c066:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c06a:	490d      	ldr	r1, [pc, #52]	; (800c0a0 <etharp_find_entry+0x2d4>)
 800c06c:	4613      	mov	r3, r2
 800c06e:	005b      	lsls	r3, r3, #1
 800c070:	4413      	add	r3, r2
 800c072:	00db      	lsls	r3, r3, #3
 800c074:	440b      	add	r3, r1
 800c076:	3312      	adds	r3, #18
 800c078:	2200      	movs	r2, #0
 800c07a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c07c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c080:	4907      	ldr	r1, [pc, #28]	; (800c0a0 <etharp_find_entry+0x2d4>)
 800c082:	4613      	mov	r3, r2
 800c084:	005b      	lsls	r3, r3, #1
 800c086:	4413      	add	r3, r2
 800c088:	00db      	lsls	r3, r3, #3
 800c08a:	440b      	add	r3, r1
 800c08c:	3308      	adds	r3, #8
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c092:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3728      	adds	r7, #40	; 0x28
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	2000010c 	.word	0x2000010c
 800c0a4:	08011a58 	.word	0x08011a58
 800c0a8:	08011a90 	.word	0x08011a90
 800c0ac:	08011ad0 	.word	0x08011ad0
 800c0b0:	08011af8 	.word	0x08011af8
 800c0b4:	08011b10 	.word	0x08011b10
 800c0b8:	08011b24 	.word	0x08011b24

0800c0bc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b088      	sub	sp, #32
 800c0c0:	af02      	add	r7, sp, #8
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	607a      	str	r2, [r7, #4]
 800c0c8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c0d0:	2b06      	cmp	r3, #6
 800c0d2:	d006      	beq.n	800c0e2 <etharp_update_arp_entry+0x26>
 800c0d4:	4b48      	ldr	r3, [pc, #288]	; (800c1f8 <etharp_update_arp_entry+0x13c>)
 800c0d6:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c0da:	4948      	ldr	r1, [pc, #288]	; (800c1fc <etharp_update_arp_entry+0x140>)
 800c0dc:	4848      	ldr	r0, [pc, #288]	; (800c200 <etharp_update_arp_entry+0x144>)
 800c0de:	f002 f94f 	bl	800e380 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d012      	beq.n	800c10e <etharp_update_arp_entry+0x52>
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00e      	beq.n	800c10e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	68f9      	ldr	r1, [r7, #12]
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f001 f8fe 	bl	800d2f8 <ip4_addr_isbroadcast_u32>
 800c0fc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d105      	bne.n	800c10e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c10a:	2be0      	cmp	r3, #224	; 0xe0
 800c10c:	d102      	bne.n	800c114 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c10e:	f06f 030f 	mvn.w	r3, #15
 800c112:	e06c      	b.n	800c1ee <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c114:	78fb      	ldrb	r3, [r7, #3]
 800c116:	68fa      	ldr	r2, [r7, #12]
 800c118:	4619      	mov	r1, r3
 800c11a:	68b8      	ldr	r0, [r7, #8]
 800c11c:	f7ff fe56 	bl	800bdcc <etharp_find_entry>
 800c120:	4603      	mov	r3, r0
 800c122:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c124:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	da02      	bge.n	800c132 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c12c:	8afb      	ldrh	r3, [r7, #22]
 800c12e:	b25b      	sxtb	r3, r3
 800c130:	e05d      	b.n	800c1ee <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c132:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c136:	4933      	ldr	r1, [pc, #204]	; (800c204 <etharp_update_arp_entry+0x148>)
 800c138:	4613      	mov	r3, r2
 800c13a:	005b      	lsls	r3, r3, #1
 800c13c:	4413      	add	r3, r2
 800c13e:	00db      	lsls	r3, r3, #3
 800c140:	440b      	add	r3, r1
 800c142:	3314      	adds	r3, #20
 800c144:	2202      	movs	r2, #2
 800c146:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c148:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c14c:	492d      	ldr	r1, [pc, #180]	; (800c204 <etharp_update_arp_entry+0x148>)
 800c14e:	4613      	mov	r3, r2
 800c150:	005b      	lsls	r3, r3, #1
 800c152:	4413      	add	r3, r2
 800c154:	00db      	lsls	r3, r3, #3
 800c156:	440b      	add	r3, r1
 800c158:	3308      	adds	r3, #8
 800c15a:	68fa      	ldr	r2, [r7, #12]
 800c15c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c15e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c162:	4613      	mov	r3, r2
 800c164:	005b      	lsls	r3, r3, #1
 800c166:	4413      	add	r3, r2
 800c168:	00db      	lsls	r3, r3, #3
 800c16a:	3308      	adds	r3, #8
 800c16c:	4a25      	ldr	r2, [pc, #148]	; (800c204 <etharp_update_arp_entry+0x148>)
 800c16e:	4413      	add	r3, r2
 800c170:	3304      	adds	r3, #4
 800c172:	2206      	movs	r2, #6
 800c174:	6879      	ldr	r1, [r7, #4]
 800c176:	4618      	mov	r0, r3
 800c178:	f002 f8d2 	bl	800e320 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c17c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c180:	4920      	ldr	r1, [pc, #128]	; (800c204 <etharp_update_arp_entry+0x148>)
 800c182:	4613      	mov	r3, r2
 800c184:	005b      	lsls	r3, r3, #1
 800c186:	4413      	add	r3, r2
 800c188:	00db      	lsls	r3, r3, #3
 800c18a:	440b      	add	r3, r1
 800c18c:	3312      	adds	r3, #18
 800c18e:	2200      	movs	r2, #0
 800c190:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c192:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c196:	491b      	ldr	r1, [pc, #108]	; (800c204 <etharp_update_arp_entry+0x148>)
 800c198:	4613      	mov	r3, r2
 800c19a:	005b      	lsls	r3, r3, #1
 800c19c:	4413      	add	r3, r2
 800c19e:	00db      	lsls	r3, r3, #3
 800c1a0:	440b      	add	r3, r1
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d021      	beq.n	800c1ec <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c1a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c1ac:	4915      	ldr	r1, [pc, #84]	; (800c204 <etharp_update_arp_entry+0x148>)
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	005b      	lsls	r3, r3, #1
 800c1b2:	4413      	add	r3, r2
 800c1b4:	00db      	lsls	r3, r3, #3
 800c1b6:	440b      	add	r3, r1
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c1bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c1c0:	4910      	ldr	r1, [pc, #64]	; (800c204 <etharp_update_arp_entry+0x148>)
 800c1c2:	4613      	mov	r3, r2
 800c1c4:	005b      	lsls	r3, r3, #1
 800c1c6:	4413      	add	r3, r2
 800c1c8:	00db      	lsls	r3, r3, #3
 800c1ca:	440b      	add	r3, r1
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c1d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c1da:	9300      	str	r3, [sp, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6939      	ldr	r1, [r7, #16]
 800c1e0:	68f8      	ldr	r0, [r7, #12]
 800c1e2:	f002 f823 	bl	800e22c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c1e6:	6938      	ldr	r0, [r7, #16]
 800c1e8:	f7f9 f9d0 	bl	800558c <pbuf_free>
  }
  return ERR_OK;
 800c1ec:	2300      	movs	r3, #0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3718      	adds	r7, #24
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	08011a58 	.word	0x08011a58
 800c1fc:	08011b50 	.word	0x08011b50
 800c200:	08011ad0 	.word	0x08011ad0
 800c204:	2000010c 	.word	0x2000010c

0800c208 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c210:	2300      	movs	r3, #0
 800c212:	60fb      	str	r3, [r7, #12]
 800c214:	e01e      	b.n	800c254 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c216:	4913      	ldr	r1, [pc, #76]	; (800c264 <etharp_cleanup_netif+0x5c>)
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	4613      	mov	r3, r2
 800c21c:	005b      	lsls	r3, r3, #1
 800c21e:	4413      	add	r3, r2
 800c220:	00db      	lsls	r3, r3, #3
 800c222:	440b      	add	r3, r1
 800c224:	3314      	adds	r3, #20
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c22a:	7afb      	ldrb	r3, [r7, #11]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00e      	beq.n	800c24e <etharp_cleanup_netif+0x46>
 800c230:	490c      	ldr	r1, [pc, #48]	; (800c264 <etharp_cleanup_netif+0x5c>)
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	4613      	mov	r3, r2
 800c236:	005b      	lsls	r3, r3, #1
 800c238:	4413      	add	r3, r2
 800c23a:	00db      	lsls	r3, r3, #3
 800c23c:	440b      	add	r3, r1
 800c23e:	3308      	adds	r3, #8
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	429a      	cmp	r2, r3
 800c246:	d102      	bne.n	800c24e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f7ff fce5 	bl	800bc18 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	3301      	adds	r3, #1
 800c252:	60fb      	str	r3, [r7, #12]
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2b09      	cmp	r3, #9
 800c258:	dddd      	ble.n	800c216 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c25a:	bf00      	nop
 800c25c:	bf00      	nop
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	2000010c 	.word	0x2000010c

0800c268 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c268:	b5b0      	push	{r4, r5, r7, lr}
 800c26a:	b08a      	sub	sp, #40	; 0x28
 800c26c:	af04      	add	r7, sp, #16
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d107      	bne.n	800c288 <etharp_input+0x20>
 800c278:	4b3d      	ldr	r3, [pc, #244]	; (800c370 <etharp_input+0x108>)
 800c27a:	f240 228a 	movw	r2, #650	; 0x28a
 800c27e:	493d      	ldr	r1, [pc, #244]	; (800c374 <etharp_input+0x10c>)
 800c280:	483d      	ldr	r0, [pc, #244]	; (800c378 <etharp_input+0x110>)
 800c282:	f002 f87d 	bl	800e380 <iprintf>
 800c286:	e06f      	b.n	800c368 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	881b      	ldrh	r3, [r3, #0]
 800c292:	b29b      	uxth	r3, r3
 800c294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c298:	d10c      	bne.n	800c2b4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c29e:	2b06      	cmp	r3, #6
 800c2a0:	d108      	bne.n	800c2b4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c2a6:	2b04      	cmp	r3, #4
 800c2a8:	d104      	bne.n	800c2b4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	885b      	ldrh	r3, [r3, #2]
 800c2ae:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c2b0:	2b08      	cmp	r3, #8
 800c2b2:	d003      	beq.n	800c2bc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f7f9 f969 	bl	800558c <pbuf_free>
    return;
 800c2ba:	e055      	b.n	800c368 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	330e      	adds	r3, #14
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	3318      	adds	r3, #24
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	3304      	adds	r3, #4
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d102      	bne.n	800c2dc <etharp_input+0x74>
    for_us = 0;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	75fb      	strb	r3, [r7, #23]
 800c2da:	e009      	b.n	800c2f0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	3304      	adds	r3, #4
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	bf0c      	ite	eq
 800c2e8:	2301      	moveq	r3, #1
 800c2ea:	2300      	movne	r3, #0
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	f103 0208 	add.w	r2, r3, #8
 800c2f6:	7dfb      	ldrb	r3, [r7, #23]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d001      	beq.n	800c300 <etharp_input+0x98>
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	e000      	b.n	800c302 <etharp_input+0x9a>
 800c300:	2302      	movs	r3, #2
 800c302:	f107 010c 	add.w	r1, r7, #12
 800c306:	6838      	ldr	r0, [r7, #0]
 800c308:	f7ff fed8 	bl	800c0bc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	88db      	ldrh	r3, [r3, #6]
 800c310:	b29b      	uxth	r3, r3
 800c312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c316:	d003      	beq.n	800c320 <etharp_input+0xb8>
 800c318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c31c:	d01e      	beq.n	800c35c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c31e:	e020      	b.n	800c362 <etharp_input+0xfa>
      if (for_us) {
 800c320:	7dfb      	ldrb	r3, [r7, #23]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d01c      	beq.n	800c360 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c33c:	693a      	ldr	r2, [r7, #16]
 800c33e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c340:	2102      	movs	r1, #2
 800c342:	9103      	str	r1, [sp, #12]
 800c344:	f107 010c 	add.w	r1, r7, #12
 800c348:	9102      	str	r1, [sp, #8]
 800c34a:	9201      	str	r2, [sp, #4]
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	462b      	mov	r3, r5
 800c350:	4622      	mov	r2, r4
 800c352:	4601      	mov	r1, r0
 800c354:	6838      	ldr	r0, [r7, #0]
 800c356:	f000 faeb 	bl	800c930 <etharp_raw>
      break;
 800c35a:	e001      	b.n	800c360 <etharp_input+0xf8>
      break;
 800c35c:	bf00      	nop
 800c35e:	e000      	b.n	800c362 <etharp_input+0xfa>
      break;
 800c360:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f7f9 f912 	bl	800558c <pbuf_free>
}
 800c368:	3718      	adds	r7, #24
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bdb0      	pop	{r4, r5, r7, pc}
 800c36e:	bf00      	nop
 800c370:	08011a58 	.word	0x08011a58
 800c374:	08011ba8 	.word	0x08011ba8
 800c378:	08011ad0 	.word	0x08011ad0

0800c37c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b086      	sub	sp, #24
 800c380:	af02      	add	r7, sp, #8
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	4613      	mov	r3, r2
 800c388:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c38a:	79fa      	ldrb	r2, [r7, #7]
 800c38c:	4944      	ldr	r1, [pc, #272]	; (800c4a0 <etharp_output_to_arp_index+0x124>)
 800c38e:	4613      	mov	r3, r2
 800c390:	005b      	lsls	r3, r3, #1
 800c392:	4413      	add	r3, r2
 800c394:	00db      	lsls	r3, r3, #3
 800c396:	440b      	add	r3, r1
 800c398:	3314      	adds	r3, #20
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d806      	bhi.n	800c3ae <etharp_output_to_arp_index+0x32>
 800c3a0:	4b40      	ldr	r3, [pc, #256]	; (800c4a4 <etharp_output_to_arp_index+0x128>)
 800c3a2:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c3a6:	4940      	ldr	r1, [pc, #256]	; (800c4a8 <etharp_output_to_arp_index+0x12c>)
 800c3a8:	4840      	ldr	r0, [pc, #256]	; (800c4ac <etharp_output_to_arp_index+0x130>)
 800c3aa:	f001 ffe9 	bl	800e380 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c3ae:	79fa      	ldrb	r2, [r7, #7]
 800c3b0:	493b      	ldr	r1, [pc, #236]	; (800c4a0 <etharp_output_to_arp_index+0x124>)
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	005b      	lsls	r3, r3, #1
 800c3b6:	4413      	add	r3, r2
 800c3b8:	00db      	lsls	r3, r3, #3
 800c3ba:	440b      	add	r3, r1
 800c3bc:	3314      	adds	r3, #20
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	2b02      	cmp	r3, #2
 800c3c2:	d153      	bne.n	800c46c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c3c4:	79fa      	ldrb	r2, [r7, #7]
 800c3c6:	4936      	ldr	r1, [pc, #216]	; (800c4a0 <etharp_output_to_arp_index+0x124>)
 800c3c8:	4613      	mov	r3, r2
 800c3ca:	005b      	lsls	r3, r3, #1
 800c3cc:	4413      	add	r3, r2
 800c3ce:	00db      	lsls	r3, r3, #3
 800c3d0:	440b      	add	r3, r1
 800c3d2:	3312      	adds	r3, #18
 800c3d4:	881b      	ldrh	r3, [r3, #0]
 800c3d6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c3da:	d919      	bls.n	800c410 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c3dc:	79fa      	ldrb	r2, [r7, #7]
 800c3de:	4613      	mov	r3, r2
 800c3e0:	005b      	lsls	r3, r3, #1
 800c3e2:	4413      	add	r3, r2
 800c3e4:	00db      	lsls	r3, r3, #3
 800c3e6:	4a2e      	ldr	r2, [pc, #184]	; (800c4a0 <etharp_output_to_arp_index+0x124>)
 800c3e8:	4413      	add	r3, r2
 800c3ea:	3304      	adds	r3, #4
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f000 fb4c 	bl	800ca8c <etharp_request>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d138      	bne.n	800c46c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c3fa:	79fa      	ldrb	r2, [r7, #7]
 800c3fc:	4928      	ldr	r1, [pc, #160]	; (800c4a0 <etharp_output_to_arp_index+0x124>)
 800c3fe:	4613      	mov	r3, r2
 800c400:	005b      	lsls	r3, r3, #1
 800c402:	4413      	add	r3, r2
 800c404:	00db      	lsls	r3, r3, #3
 800c406:	440b      	add	r3, r1
 800c408:	3314      	adds	r3, #20
 800c40a:	2203      	movs	r2, #3
 800c40c:	701a      	strb	r2, [r3, #0]
 800c40e:	e02d      	b.n	800c46c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c410:	79fa      	ldrb	r2, [r7, #7]
 800c412:	4923      	ldr	r1, [pc, #140]	; (800c4a0 <etharp_output_to_arp_index+0x124>)
 800c414:	4613      	mov	r3, r2
 800c416:	005b      	lsls	r3, r3, #1
 800c418:	4413      	add	r3, r2
 800c41a:	00db      	lsls	r3, r3, #3
 800c41c:	440b      	add	r3, r1
 800c41e:	3312      	adds	r3, #18
 800c420:	881b      	ldrh	r3, [r3, #0]
 800c422:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c426:	d321      	bcc.n	800c46c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c428:	79fa      	ldrb	r2, [r7, #7]
 800c42a:	4613      	mov	r3, r2
 800c42c:	005b      	lsls	r3, r3, #1
 800c42e:	4413      	add	r3, r2
 800c430:	00db      	lsls	r3, r3, #3
 800c432:	4a1b      	ldr	r2, [pc, #108]	; (800c4a0 <etharp_output_to_arp_index+0x124>)
 800c434:	4413      	add	r3, r2
 800c436:	1d19      	adds	r1, r3, #4
 800c438:	79fa      	ldrb	r2, [r7, #7]
 800c43a:	4613      	mov	r3, r2
 800c43c:	005b      	lsls	r3, r3, #1
 800c43e:	4413      	add	r3, r2
 800c440:	00db      	lsls	r3, r3, #3
 800c442:	3308      	adds	r3, #8
 800c444:	4a16      	ldr	r2, [pc, #88]	; (800c4a0 <etharp_output_to_arp_index+0x124>)
 800c446:	4413      	add	r3, r2
 800c448:	3304      	adds	r3, #4
 800c44a:	461a      	mov	r2, r3
 800c44c:	68f8      	ldr	r0, [r7, #12]
 800c44e:	f000 fafb 	bl	800ca48 <etharp_request_dst>
 800c452:	4603      	mov	r3, r0
 800c454:	2b00      	cmp	r3, #0
 800c456:	d109      	bne.n	800c46c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c458:	79fa      	ldrb	r2, [r7, #7]
 800c45a:	4911      	ldr	r1, [pc, #68]	; (800c4a0 <etharp_output_to_arp_index+0x124>)
 800c45c:	4613      	mov	r3, r2
 800c45e:	005b      	lsls	r3, r3, #1
 800c460:	4413      	add	r3, r2
 800c462:	00db      	lsls	r3, r3, #3
 800c464:	440b      	add	r3, r1
 800c466:	3314      	adds	r3, #20
 800c468:	2203      	movs	r2, #3
 800c46a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c472:	79fa      	ldrb	r2, [r7, #7]
 800c474:	4613      	mov	r3, r2
 800c476:	005b      	lsls	r3, r3, #1
 800c478:	4413      	add	r3, r2
 800c47a:	00db      	lsls	r3, r3, #3
 800c47c:	3308      	adds	r3, #8
 800c47e:	4a08      	ldr	r2, [pc, #32]	; (800c4a0 <etharp_output_to_arp_index+0x124>)
 800c480:	4413      	add	r3, r2
 800c482:	3304      	adds	r3, #4
 800c484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c488:	9200      	str	r2, [sp, #0]
 800c48a:	460a      	mov	r2, r1
 800c48c:	68b9      	ldr	r1, [r7, #8]
 800c48e:	68f8      	ldr	r0, [r7, #12]
 800c490:	f001 fecc 	bl	800e22c <ethernet_output>
 800c494:	4603      	mov	r3, r0
}
 800c496:	4618      	mov	r0, r3
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	2000010c 	.word	0x2000010c
 800c4a4:	08011a58 	.word	0x08011a58
 800c4a8:	08011bc8 	.word	0x08011bc8
 800c4ac:	08011ad0 	.word	0x08011ad0

0800c4b0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b08a      	sub	sp, #40	; 0x28
 800c4b4:	af02      	add	r7, sp, #8
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d106      	bne.n	800c4d4 <etharp_output+0x24>
 800c4c6:	4b73      	ldr	r3, [pc, #460]	; (800c694 <etharp_output+0x1e4>)
 800c4c8:	f240 321e 	movw	r2, #798	; 0x31e
 800c4cc:	4972      	ldr	r1, [pc, #456]	; (800c698 <etharp_output+0x1e8>)
 800c4ce:	4873      	ldr	r0, [pc, #460]	; (800c69c <etharp_output+0x1ec>)
 800c4d0:	f001 ff56 	bl	800e380 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d106      	bne.n	800c4e8 <etharp_output+0x38>
 800c4da:	4b6e      	ldr	r3, [pc, #440]	; (800c694 <etharp_output+0x1e4>)
 800c4dc:	f240 321f 	movw	r2, #799	; 0x31f
 800c4e0:	496f      	ldr	r1, [pc, #444]	; (800c6a0 <etharp_output+0x1f0>)
 800c4e2:	486e      	ldr	r0, [pc, #440]	; (800c69c <etharp_output+0x1ec>)
 800c4e4:	f001 ff4c 	bl	800e380 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d106      	bne.n	800c4fc <etharp_output+0x4c>
 800c4ee:	4b69      	ldr	r3, [pc, #420]	; (800c694 <etharp_output+0x1e4>)
 800c4f0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c4f4:	496b      	ldr	r1, [pc, #428]	; (800c6a4 <etharp_output+0x1f4>)
 800c4f6:	4869      	ldr	r0, [pc, #420]	; (800c69c <etharp_output+0x1ec>)
 800c4f8:	f001 ff42 	bl	800e380 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	68f9      	ldr	r1, [r7, #12]
 800c502:	4618      	mov	r0, r3
 800c504:	f000 fef8 	bl	800d2f8 <ip4_addr_isbroadcast_u32>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d002      	beq.n	800c514 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c50e:	4b66      	ldr	r3, [pc, #408]	; (800c6a8 <etharp_output+0x1f8>)
 800c510:	61fb      	str	r3, [r7, #28]
 800c512:	e0af      	b.n	800c674 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c51c:	2be0      	cmp	r3, #224	; 0xe0
 800c51e:	d118      	bne.n	800c552 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c520:	2301      	movs	r3, #1
 800c522:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c524:	2300      	movs	r3, #0
 800c526:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c528:	235e      	movs	r3, #94	; 0x5e
 800c52a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	3301      	adds	r3, #1
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c536:	b2db      	uxtb	r3, r3
 800c538:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	3302      	adds	r3, #2
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	3303      	adds	r3, #3
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c54a:	f107 0310 	add.w	r3, r7, #16
 800c54e:	61fb      	str	r3, [r7, #28]
 800c550:	e090      	b.n	800c674 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681a      	ldr	r2, [r3, #0]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	3304      	adds	r3, #4
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	405a      	eors	r2, r3
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	3308      	adds	r3, #8
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4013      	ands	r3, r2
 800c566:	2b00      	cmp	r3, #0
 800c568:	d012      	beq.n	800c590 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c570:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c574:	4293      	cmp	r3, r2
 800c576:	d00b      	beq.n	800c590 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	330c      	adds	r3, #12
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d003      	beq.n	800c58a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	330c      	adds	r3, #12
 800c586:	61bb      	str	r3, [r7, #24]
 800c588:	e002      	b.n	800c590 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c58a:	f06f 0303 	mvn.w	r3, #3
 800c58e:	e07d      	b.n	800c68c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c590:	4b46      	ldr	r3, [pc, #280]	; (800c6ac <etharp_output+0x1fc>)
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	4619      	mov	r1, r3
 800c596:	4a46      	ldr	r2, [pc, #280]	; (800c6b0 <etharp_output+0x200>)
 800c598:	460b      	mov	r3, r1
 800c59a:	005b      	lsls	r3, r3, #1
 800c59c:	440b      	add	r3, r1
 800c59e:	00db      	lsls	r3, r3, #3
 800c5a0:	4413      	add	r3, r2
 800c5a2:	3314      	adds	r3, #20
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d925      	bls.n	800c5f6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c5aa:	4b40      	ldr	r3, [pc, #256]	; (800c6ac <etharp_output+0x1fc>)
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	4a3f      	ldr	r2, [pc, #252]	; (800c6b0 <etharp_output+0x200>)
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	005b      	lsls	r3, r3, #1
 800c5b6:	440b      	add	r3, r1
 800c5b8:	00db      	lsls	r3, r3, #3
 800c5ba:	4413      	add	r3, r2
 800c5bc:	3308      	adds	r3, #8
 800c5be:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c5c0:	68fa      	ldr	r2, [r7, #12]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d117      	bne.n	800c5f6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c5c6:	69bb      	ldr	r3, [r7, #24]
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	4b38      	ldr	r3, [pc, #224]	; (800c6ac <etharp_output+0x1fc>)
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	4937      	ldr	r1, [pc, #220]	; (800c6b0 <etharp_output+0x200>)
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	005b      	lsls	r3, r3, #1
 800c5d6:	4403      	add	r3, r0
 800c5d8:	00db      	lsls	r3, r3, #3
 800c5da:	440b      	add	r3, r1
 800c5dc:	3304      	adds	r3, #4
 800c5de:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d108      	bne.n	800c5f6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c5e4:	4b31      	ldr	r3, [pc, #196]	; (800c6ac <etharp_output+0x1fc>)
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	68b9      	ldr	r1, [r7, #8]
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	f7ff fec5 	bl	800c37c <etharp_output_to_arp_index>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	e04a      	b.n	800c68c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	75fb      	strb	r3, [r7, #23]
 800c5fa:	e031      	b.n	800c660 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c5fc:	7dfa      	ldrb	r2, [r7, #23]
 800c5fe:	492c      	ldr	r1, [pc, #176]	; (800c6b0 <etharp_output+0x200>)
 800c600:	4613      	mov	r3, r2
 800c602:	005b      	lsls	r3, r3, #1
 800c604:	4413      	add	r3, r2
 800c606:	00db      	lsls	r3, r3, #3
 800c608:	440b      	add	r3, r1
 800c60a:	3314      	adds	r3, #20
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d923      	bls.n	800c65a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c612:	7dfa      	ldrb	r2, [r7, #23]
 800c614:	4926      	ldr	r1, [pc, #152]	; (800c6b0 <etharp_output+0x200>)
 800c616:	4613      	mov	r3, r2
 800c618:	005b      	lsls	r3, r3, #1
 800c61a:	4413      	add	r3, r2
 800c61c:	00db      	lsls	r3, r3, #3
 800c61e:	440b      	add	r3, r1
 800c620:	3308      	adds	r3, #8
 800c622:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	429a      	cmp	r2, r3
 800c628:	d117      	bne.n	800c65a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c62a:	69bb      	ldr	r3, [r7, #24]
 800c62c:	6819      	ldr	r1, [r3, #0]
 800c62e:	7dfa      	ldrb	r2, [r7, #23]
 800c630:	481f      	ldr	r0, [pc, #124]	; (800c6b0 <etharp_output+0x200>)
 800c632:	4613      	mov	r3, r2
 800c634:	005b      	lsls	r3, r3, #1
 800c636:	4413      	add	r3, r2
 800c638:	00db      	lsls	r3, r3, #3
 800c63a:	4403      	add	r3, r0
 800c63c:	3304      	adds	r3, #4
 800c63e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c640:	4299      	cmp	r1, r3
 800c642:	d10a      	bne.n	800c65a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c644:	4a19      	ldr	r2, [pc, #100]	; (800c6ac <etharp_output+0x1fc>)
 800c646:	7dfb      	ldrb	r3, [r7, #23]
 800c648:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c64a:	7dfb      	ldrb	r3, [r7, #23]
 800c64c:	461a      	mov	r2, r3
 800c64e:	68b9      	ldr	r1, [r7, #8]
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f7ff fe93 	bl	800c37c <etharp_output_to_arp_index>
 800c656:	4603      	mov	r3, r0
 800c658:	e018      	b.n	800c68c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c65a:	7dfb      	ldrb	r3, [r7, #23]
 800c65c:	3301      	adds	r3, #1
 800c65e:	75fb      	strb	r3, [r7, #23]
 800c660:	7dfb      	ldrb	r3, [r7, #23]
 800c662:	2b09      	cmp	r3, #9
 800c664:	d9ca      	bls.n	800c5fc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c666:	68ba      	ldr	r2, [r7, #8]
 800c668:	69b9      	ldr	r1, [r7, #24]
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	f000 f822 	bl	800c6b4 <etharp_query>
 800c670:	4603      	mov	r3, r0
 800c672:	e00b      	b.n	800c68c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c67a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	68b9      	ldr	r1, [r7, #8]
 800c684:	68f8      	ldr	r0, [r7, #12]
 800c686:	f001 fdd1 	bl	800e22c <ethernet_output>
 800c68a:	4603      	mov	r3, r0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3720      	adds	r7, #32
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	08011a58 	.word	0x08011a58
 800c698:	08011ba8 	.word	0x08011ba8
 800c69c:	08011ad0 	.word	0x08011ad0
 800c6a0:	08011bf8 	.word	0x08011bf8
 800c6a4:	08011b98 	.word	0x08011b98
 800c6a8:	08012208 	.word	0x08012208
 800c6ac:	200001fc 	.word	0x200001fc
 800c6b0:	2000010c 	.word	0x2000010c

0800c6b4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b08c      	sub	sp, #48	; 0x30
 800c6b8:	af02      	add	r7, sp, #8
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	3326      	adds	r3, #38	; 0x26
 800c6c4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c6c6:	23ff      	movs	r3, #255	; 0xff
 800c6c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	68f9      	ldr	r1, [r7, #12]
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f000 fe0e 	bl	800d2f8 <ip4_addr_isbroadcast_u32>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d10c      	bne.n	800c6fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c6ea:	2be0      	cmp	r3, #224	; 0xe0
 800c6ec:	d006      	beq.n	800c6fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d003      	beq.n	800c6fc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d102      	bne.n	800c702 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c6fc:	f06f 030f 	mvn.w	r3, #15
 800c700:	e101      	b.n	800c906 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	2101      	movs	r1, #1
 800c706:	68b8      	ldr	r0, [r7, #8]
 800c708:	f7ff fb60 	bl	800bdcc <etharp_find_entry>
 800c70c:	4603      	mov	r3, r0
 800c70e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c710:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c714:	2b00      	cmp	r3, #0
 800c716:	da02      	bge.n	800c71e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c718:	8a7b      	ldrh	r3, [r7, #18]
 800c71a:	b25b      	sxtb	r3, r3
 800c71c:	e0f3      	b.n	800c906 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c71e:	8a7b      	ldrh	r3, [r7, #18]
 800c720:	2b7e      	cmp	r3, #126	; 0x7e
 800c722:	d906      	bls.n	800c732 <etharp_query+0x7e>
 800c724:	4b7a      	ldr	r3, [pc, #488]	; (800c910 <etharp_query+0x25c>)
 800c726:	f240 32c1 	movw	r2, #961	; 0x3c1
 800c72a:	497a      	ldr	r1, [pc, #488]	; (800c914 <etharp_query+0x260>)
 800c72c:	487a      	ldr	r0, [pc, #488]	; (800c918 <etharp_query+0x264>)
 800c72e:	f001 fe27 	bl	800e380 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c732:	8a7b      	ldrh	r3, [r7, #18]
 800c734:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c736:	7c7a      	ldrb	r2, [r7, #17]
 800c738:	4978      	ldr	r1, [pc, #480]	; (800c91c <etharp_query+0x268>)
 800c73a:	4613      	mov	r3, r2
 800c73c:	005b      	lsls	r3, r3, #1
 800c73e:	4413      	add	r3, r2
 800c740:	00db      	lsls	r3, r3, #3
 800c742:	440b      	add	r3, r1
 800c744:	3314      	adds	r3, #20
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d115      	bne.n	800c778 <etharp_query+0xc4>
    is_new_entry = 1;
 800c74c:	2301      	movs	r3, #1
 800c74e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c750:	7c7a      	ldrb	r2, [r7, #17]
 800c752:	4972      	ldr	r1, [pc, #456]	; (800c91c <etharp_query+0x268>)
 800c754:	4613      	mov	r3, r2
 800c756:	005b      	lsls	r3, r3, #1
 800c758:	4413      	add	r3, r2
 800c75a:	00db      	lsls	r3, r3, #3
 800c75c:	440b      	add	r3, r1
 800c75e:	3314      	adds	r3, #20
 800c760:	2201      	movs	r2, #1
 800c762:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c764:	7c7a      	ldrb	r2, [r7, #17]
 800c766:	496d      	ldr	r1, [pc, #436]	; (800c91c <etharp_query+0x268>)
 800c768:	4613      	mov	r3, r2
 800c76a:	005b      	lsls	r3, r3, #1
 800c76c:	4413      	add	r3, r2
 800c76e:	00db      	lsls	r3, r3, #3
 800c770:	440b      	add	r3, r1
 800c772:	3308      	adds	r3, #8
 800c774:	68fa      	ldr	r2, [r7, #12]
 800c776:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c778:	7c7a      	ldrb	r2, [r7, #17]
 800c77a:	4968      	ldr	r1, [pc, #416]	; (800c91c <etharp_query+0x268>)
 800c77c:	4613      	mov	r3, r2
 800c77e:	005b      	lsls	r3, r3, #1
 800c780:	4413      	add	r3, r2
 800c782:	00db      	lsls	r3, r3, #3
 800c784:	440b      	add	r3, r1
 800c786:	3314      	adds	r3, #20
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d011      	beq.n	800c7b2 <etharp_query+0xfe>
 800c78e:	7c7a      	ldrb	r2, [r7, #17]
 800c790:	4962      	ldr	r1, [pc, #392]	; (800c91c <etharp_query+0x268>)
 800c792:	4613      	mov	r3, r2
 800c794:	005b      	lsls	r3, r3, #1
 800c796:	4413      	add	r3, r2
 800c798:	00db      	lsls	r3, r3, #3
 800c79a:	440b      	add	r3, r1
 800c79c:	3314      	adds	r3, #20
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d806      	bhi.n	800c7b2 <etharp_query+0xfe>
 800c7a4:	4b5a      	ldr	r3, [pc, #360]	; (800c910 <etharp_query+0x25c>)
 800c7a6:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c7aa:	495d      	ldr	r1, [pc, #372]	; (800c920 <etharp_query+0x26c>)
 800c7ac:	485a      	ldr	r0, [pc, #360]	; (800c918 <etharp_query+0x264>)
 800c7ae:	f001 fde7 	bl	800e380 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c7b2:	6a3b      	ldr	r3, [r7, #32]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d102      	bne.n	800c7be <etharp_query+0x10a>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d10c      	bne.n	800c7d8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c7be:	68b9      	ldr	r1, [r7, #8]
 800c7c0:	68f8      	ldr	r0, [r7, #12]
 800c7c2:	f000 f963 	bl	800ca8c <etharp_request>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d102      	bne.n	800c7d8 <etharp_query+0x124>
      return result;
 800c7d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7d6:	e096      	b.n	800c906 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d106      	bne.n	800c7ec <etharp_query+0x138>
 800c7de:	4b4c      	ldr	r3, [pc, #304]	; (800c910 <etharp_query+0x25c>)
 800c7e0:	f240 32e1 	movw	r2, #993	; 0x3e1
 800c7e4:	494f      	ldr	r1, [pc, #316]	; (800c924 <etharp_query+0x270>)
 800c7e6:	484c      	ldr	r0, [pc, #304]	; (800c918 <etharp_query+0x264>)
 800c7e8:	f001 fdca 	bl	800e380 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c7ec:	7c7a      	ldrb	r2, [r7, #17]
 800c7ee:	494b      	ldr	r1, [pc, #300]	; (800c91c <etharp_query+0x268>)
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	005b      	lsls	r3, r3, #1
 800c7f4:	4413      	add	r3, r2
 800c7f6:	00db      	lsls	r3, r3, #3
 800c7f8:	440b      	add	r3, r1
 800c7fa:	3314      	adds	r3, #20
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d917      	bls.n	800c832 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c802:	4a49      	ldr	r2, [pc, #292]	; (800c928 <etharp_query+0x274>)
 800c804:	7c7b      	ldrb	r3, [r7, #17]
 800c806:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c808:	7c7a      	ldrb	r2, [r7, #17]
 800c80a:	4613      	mov	r3, r2
 800c80c:	005b      	lsls	r3, r3, #1
 800c80e:	4413      	add	r3, r2
 800c810:	00db      	lsls	r3, r3, #3
 800c812:	3308      	adds	r3, #8
 800c814:	4a41      	ldr	r2, [pc, #260]	; (800c91c <etharp_query+0x268>)
 800c816:	4413      	add	r3, r2
 800c818:	3304      	adds	r3, #4
 800c81a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c81e:	9200      	str	r2, [sp, #0]
 800c820:	697a      	ldr	r2, [r7, #20]
 800c822:	6879      	ldr	r1, [r7, #4]
 800c824:	68f8      	ldr	r0, [r7, #12]
 800c826:	f001 fd01 	bl	800e22c <ethernet_output>
 800c82a:	4603      	mov	r3, r0
 800c82c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c830:	e067      	b.n	800c902 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c832:	7c7a      	ldrb	r2, [r7, #17]
 800c834:	4939      	ldr	r1, [pc, #228]	; (800c91c <etharp_query+0x268>)
 800c836:	4613      	mov	r3, r2
 800c838:	005b      	lsls	r3, r3, #1
 800c83a:	4413      	add	r3, r2
 800c83c:	00db      	lsls	r3, r3, #3
 800c83e:	440b      	add	r3, r1
 800c840:	3314      	adds	r3, #20
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	2b01      	cmp	r3, #1
 800c846:	d15c      	bne.n	800c902 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c848:	2300      	movs	r3, #0
 800c84a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c850:	e01c      	b.n	800c88c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c852:	69fb      	ldr	r3, [r7, #28]
 800c854:	895a      	ldrh	r2, [r3, #10]
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	891b      	ldrh	r3, [r3, #8]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d10a      	bne.n	800c874 <etharp_query+0x1c0>
 800c85e:	69fb      	ldr	r3, [r7, #28]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d006      	beq.n	800c874 <etharp_query+0x1c0>
 800c866:	4b2a      	ldr	r3, [pc, #168]	; (800c910 <etharp_query+0x25c>)
 800c868:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800c86c:	492f      	ldr	r1, [pc, #188]	; (800c92c <etharp_query+0x278>)
 800c86e:	482a      	ldr	r0, [pc, #168]	; (800c918 <etharp_query+0x264>)
 800c870:	f001 fd86 	bl	800e380 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	7b1b      	ldrb	r3, [r3, #12]
 800c878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d002      	beq.n	800c886 <etharp_query+0x1d2>
        copy_needed = 1;
 800c880:	2301      	movs	r3, #1
 800c882:	61bb      	str	r3, [r7, #24]
        break;
 800c884:	e005      	b.n	800c892 <etharp_query+0x1de>
      }
      p = p->next;
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c88c:	69fb      	ldr	r3, [r7, #28]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d1df      	bne.n	800c852 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d007      	beq.n	800c8a8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800c89e:	200e      	movs	r0, #14
 800c8a0:	f7f9 f972 	bl	8005b88 <pbuf_clone>
 800c8a4:	61f8      	str	r0, [r7, #28]
 800c8a6:	e004      	b.n	800c8b2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c8ac:	69f8      	ldr	r0, [r7, #28]
 800c8ae:	f7f8 ff0d 	bl	80056cc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d021      	beq.n	800c8fc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c8b8:	7c7a      	ldrb	r2, [r7, #17]
 800c8ba:	4918      	ldr	r1, [pc, #96]	; (800c91c <etharp_query+0x268>)
 800c8bc:	4613      	mov	r3, r2
 800c8be:	005b      	lsls	r3, r3, #1
 800c8c0:	4413      	add	r3, r2
 800c8c2:	00db      	lsls	r3, r3, #3
 800c8c4:	440b      	add	r3, r1
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d00a      	beq.n	800c8e2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c8cc:	7c7a      	ldrb	r2, [r7, #17]
 800c8ce:	4913      	ldr	r1, [pc, #76]	; (800c91c <etharp_query+0x268>)
 800c8d0:	4613      	mov	r3, r2
 800c8d2:	005b      	lsls	r3, r3, #1
 800c8d4:	4413      	add	r3, r2
 800c8d6:	00db      	lsls	r3, r3, #3
 800c8d8:	440b      	add	r3, r1
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f7f8 fe55 	bl	800558c <pbuf_free>
      }
      arp_table[i].q = p;
 800c8e2:	7c7a      	ldrb	r2, [r7, #17]
 800c8e4:	490d      	ldr	r1, [pc, #52]	; (800c91c <etharp_query+0x268>)
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	005b      	lsls	r3, r3, #1
 800c8ea:	4413      	add	r3, r2
 800c8ec:	00db      	lsls	r3, r3, #3
 800c8ee:	440b      	add	r3, r1
 800c8f0:	69fa      	ldr	r2, [r7, #28]
 800c8f2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c8fa:	e002      	b.n	800c902 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c8fc:	23ff      	movs	r3, #255	; 0xff
 800c8fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c902:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c906:	4618      	mov	r0, r3
 800c908:	3728      	adds	r7, #40	; 0x28
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	08011a58 	.word	0x08011a58
 800c914:	08011c04 	.word	0x08011c04
 800c918:	08011ad0 	.word	0x08011ad0
 800c91c:	2000010c 	.word	0x2000010c
 800c920:	08011c14 	.word	0x08011c14
 800c924:	08011bf8 	.word	0x08011bf8
 800c928:	200001fc 	.word	0x200001fc
 800c92c:	08011c3c 	.word	0x08011c3c

0800c930 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b08a      	sub	sp, #40	; 0x28
 800c934:	af02      	add	r7, sp, #8
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]
 800c93c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c93e:	2300      	movs	r3, #0
 800c940:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d106      	bne.n	800c956 <etharp_raw+0x26>
 800c948:	4b3a      	ldr	r3, [pc, #232]	; (800ca34 <etharp_raw+0x104>)
 800c94a:	f240 4257 	movw	r2, #1111	; 0x457
 800c94e:	493a      	ldr	r1, [pc, #232]	; (800ca38 <etharp_raw+0x108>)
 800c950:	483a      	ldr	r0, [pc, #232]	; (800ca3c <etharp_raw+0x10c>)
 800c952:	f001 fd15 	bl	800e380 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c956:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c95a:	211c      	movs	r1, #28
 800c95c:	200e      	movs	r0, #14
 800c95e:	f7f8 fb31 	bl	8004fc4 <pbuf_alloc>
 800c962:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d102      	bne.n	800c970 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c96a:	f04f 33ff 	mov.w	r3, #4294967295
 800c96e:	e05d      	b.n	800ca2c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	895b      	ldrh	r3, [r3, #10]
 800c974:	2b1b      	cmp	r3, #27
 800c976:	d806      	bhi.n	800c986 <etharp_raw+0x56>
 800c978:	4b2e      	ldr	r3, [pc, #184]	; (800ca34 <etharp_raw+0x104>)
 800c97a:	f240 4262 	movw	r2, #1122	; 0x462
 800c97e:	4930      	ldr	r1, [pc, #192]	; (800ca40 <etharp_raw+0x110>)
 800c980:	482e      	ldr	r0, [pc, #184]	; (800ca3c <etharp_raw+0x10c>)
 800c982:	f001 fcfd 	bl	800e380 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c98c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c98e:	4618      	mov	r0, r3
 800c990:	f7f7 fb48 	bl	8004024 <lwip_htons>
 800c994:	4603      	mov	r3, r0
 800c996:	461a      	mov	r2, r3
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c9a2:	2b06      	cmp	r3, #6
 800c9a4:	d006      	beq.n	800c9b4 <etharp_raw+0x84>
 800c9a6:	4b23      	ldr	r3, [pc, #140]	; (800ca34 <etharp_raw+0x104>)
 800c9a8:	f240 4269 	movw	r2, #1129	; 0x469
 800c9ac:	4925      	ldr	r1, [pc, #148]	; (800ca44 <etharp_raw+0x114>)
 800c9ae:	4823      	ldr	r0, [pc, #140]	; (800ca3c <etharp_raw+0x10c>)
 800c9b0:	f001 fce6 	bl	800e380 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	3308      	adds	r3, #8
 800c9b8:	2206      	movs	r2, #6
 800c9ba:	6839      	ldr	r1, [r7, #0]
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f001 fcaf 	bl	800e320 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	3312      	adds	r3, #18
 800c9c6:	2206      	movs	r2, #6
 800c9c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f001 fca8 	bl	800e320 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	330e      	adds	r3, #14
 800c9d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9d6:	6812      	ldr	r2, [r2, #0]
 800c9d8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	3318      	adds	r3, #24
 800c9de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9e0:	6812      	ldr	r2, [r2, #0]
 800c9e2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	701a      	strb	r2, [r3, #0]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f042 0201 	orr.w	r2, r2, #1
 800c9f0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f042 0208 	orr.w	r2, r2, #8
 800c9fa:	709a      	strb	r2, [r3, #2]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	2206      	movs	r2, #6
 800ca04:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	2204      	movs	r2, #4
 800ca0a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ca0c:	f640 0306 	movw	r3, #2054	; 0x806
 800ca10:	9300      	str	r3, [sp, #0]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	68ba      	ldr	r2, [r7, #8]
 800ca16:	69b9      	ldr	r1, [r7, #24]
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	f001 fc07 	bl	800e22c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ca1e:	69b8      	ldr	r0, [r7, #24]
 800ca20:	f7f8 fdb4 	bl	800558c <pbuf_free>
  p = NULL;
 800ca24:	2300      	movs	r3, #0
 800ca26:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ca28:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3720      	adds	r7, #32
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	08011a58 	.word	0x08011a58
 800ca38:	08011ba8 	.word	0x08011ba8
 800ca3c:	08011ad0 	.word	0x08011ad0
 800ca40:	08011c58 	.word	0x08011c58
 800ca44:	08011c8c 	.word	0x08011c8c

0800ca48 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b088      	sub	sp, #32
 800ca4c:	af04      	add	r7, sp, #16
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ca64:	2201      	movs	r2, #1
 800ca66:	9203      	str	r2, [sp, #12]
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	9202      	str	r2, [sp, #8]
 800ca6c:	4a06      	ldr	r2, [pc, #24]	; (800ca88 <etharp_request_dst+0x40>)
 800ca6e:	9201      	str	r2, [sp, #4]
 800ca70:	9300      	str	r3, [sp, #0]
 800ca72:	4603      	mov	r3, r0
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	f7ff ff5a 	bl	800c930 <etharp_raw>
 800ca7c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3710      	adds	r7, #16
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	08012210 	.word	0x08012210

0800ca8c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ca96:	4a05      	ldr	r2, [pc, #20]	; (800caac <etharp_request+0x20>)
 800ca98:	6839      	ldr	r1, [r7, #0]
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f7ff ffd4 	bl	800ca48 <etharp_request_dst>
 800caa0:	4603      	mov	r3, r0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3708      	adds	r7, #8
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	08012208 	.word	0x08012208

0800cab0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b08e      	sub	sp, #56	; 0x38
 800cab4:	af04      	add	r7, sp, #16
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800caba:	4b79      	ldr	r3, [pc, #484]	; (800cca0 <icmp_input+0x1f0>)
 800cabc:	689b      	ldr	r3, [r3, #8]
 800cabe:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800cac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	f003 030f 	and.w	r3, r3, #15
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800cad0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cad2:	2b13      	cmp	r3, #19
 800cad4:	f240 80cd 	bls.w	800cc72 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	895b      	ldrh	r3, [r3, #10]
 800cadc:	2b03      	cmp	r3, #3
 800cade:	f240 80ca 	bls.w	800cc76 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800caec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	f000 80b7 	beq.w	800cc64 <icmp_input+0x1b4>
 800caf6:	2b08      	cmp	r3, #8
 800caf8:	f040 80b7 	bne.w	800cc6a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800cafc:	4b69      	ldr	r3, [pc, #420]	; (800cca4 <icmp_input+0x1f4>)
 800cafe:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cb00:	4b67      	ldr	r3, [pc, #412]	; (800cca0 <icmp_input+0x1f0>)
 800cb02:	695b      	ldr	r3, [r3, #20]
 800cb04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb08:	2be0      	cmp	r3, #224	; 0xe0
 800cb0a:	f000 80bb 	beq.w	800cc84 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800cb0e:	4b64      	ldr	r3, [pc, #400]	; (800cca0 <icmp_input+0x1f0>)
 800cb10:	695b      	ldr	r3, [r3, #20]
 800cb12:	4a63      	ldr	r2, [pc, #396]	; (800cca0 <icmp_input+0x1f0>)
 800cb14:	6812      	ldr	r2, [r2, #0]
 800cb16:	4611      	mov	r1, r2
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f000 fbed 	bl	800d2f8 <ip4_addr_isbroadcast_u32>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f040 80b1 	bne.w	800cc88 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	891b      	ldrh	r3, [r3, #8]
 800cb2a:	2b07      	cmp	r3, #7
 800cb2c:	f240 80a5 	bls.w	800cc7a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cb30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb32:	330e      	adds	r3, #14
 800cb34:	4619      	mov	r1, r3
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7f8 fc92 	bl	8005460 <pbuf_add_header>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d04b      	beq.n	800cbda <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	891a      	ldrh	r2, [r3, #8]
 800cb46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb48:	4413      	add	r3, r2
 800cb4a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	891b      	ldrh	r3, [r3, #8]
 800cb50:	8b7a      	ldrh	r2, [r7, #26]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	f0c0 809a 	bcc.w	800cc8c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800cb58:	8b7b      	ldrh	r3, [r7, #26]
 800cb5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cb5e:	4619      	mov	r1, r3
 800cb60:	200e      	movs	r0, #14
 800cb62:	f7f8 fa2f 	bl	8004fc4 <pbuf_alloc>
 800cb66:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	f000 8090 	beq.w	800cc90 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	895b      	ldrh	r3, [r3, #10]
 800cb74:	461a      	mov	r2, r3
 800cb76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb78:	3308      	adds	r3, #8
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d203      	bcs.n	800cb86 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800cb7e:	6978      	ldr	r0, [r7, #20]
 800cb80:	f7f8 fd04 	bl	800558c <pbuf_free>
          goto icmperr;
 800cb84:	e085      	b.n	800cc92 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cb8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f001 fbc6 	bl	800e320 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800cb94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb96:	4619      	mov	r1, r3
 800cb98:	6978      	ldr	r0, [r7, #20]
 800cb9a:	f7f8 fc71 	bl	8005480 <pbuf_remove_header>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d009      	beq.n	800cbb8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cba4:	4b40      	ldr	r3, [pc, #256]	; (800cca8 <icmp_input+0x1f8>)
 800cba6:	22b6      	movs	r2, #182	; 0xb6
 800cba8:	4940      	ldr	r1, [pc, #256]	; (800ccac <icmp_input+0x1fc>)
 800cbaa:	4841      	ldr	r0, [pc, #260]	; (800ccb0 <icmp_input+0x200>)
 800cbac:	f001 fbe8 	bl	800e380 <iprintf>
          pbuf_free(r);
 800cbb0:	6978      	ldr	r0, [r7, #20]
 800cbb2:	f7f8 fceb 	bl	800558c <pbuf_free>
          goto icmperr;
 800cbb6:	e06c      	b.n	800cc92 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800cbb8:	6879      	ldr	r1, [r7, #4]
 800cbba:	6978      	ldr	r0, [r7, #20]
 800cbbc:	f7f8 fe0e 	bl	80057dc <pbuf_copy>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d003      	beq.n	800cbce <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800cbc6:	6978      	ldr	r0, [r7, #20]
 800cbc8:	f7f8 fce0 	bl	800558c <pbuf_free>
          goto icmperr;
 800cbcc:	e061      	b.n	800cc92 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f7f8 fcdc 	bl	800558c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	607b      	str	r3, [r7, #4]
 800cbd8:	e00f      	b.n	800cbfa <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cbda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbdc:	330e      	adds	r3, #14
 800cbde:	4619      	mov	r1, r3
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f7f8 fc4d 	bl	8005480 <pbuf_remove_header>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d006      	beq.n	800cbfa <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cbec:	4b2e      	ldr	r3, [pc, #184]	; (800cca8 <icmp_input+0x1f8>)
 800cbee:	22c7      	movs	r2, #199	; 0xc7
 800cbf0:	4930      	ldr	r1, [pc, #192]	; (800ccb4 <icmp_input+0x204>)
 800cbf2:	482f      	ldr	r0, [pc, #188]	; (800ccb0 <icmp_input+0x200>)
 800cbf4:	f001 fbc4 	bl	800e380 <iprintf>
          goto icmperr;
 800cbf8:	e04b      	b.n	800cc92 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800cc00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc02:	4619      	mov	r1, r3
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f7f8 fc2b 	bl	8005460 <pbuf_add_header>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d12b      	bne.n	800cc68 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cc1e:	4b20      	ldr	r3, [pc, #128]	; (800cca0 <icmp_input+0x1f0>)
 800cc20:	691a      	ldr	r2, [r3, #16]
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	709a      	strb	r2, [r3, #2]
 800cc32:	2200      	movs	r2, #0
 800cc34:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	22ff      	movs	r2, #255	; 0xff
 800cc3a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	729a      	strb	r2, [r3, #10]
 800cc42:	2200      	movs	r2, #0
 800cc44:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	9302      	str	r3, [sp, #8]
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	9301      	str	r3, [sp, #4]
 800cc4e:	2300      	movs	r3, #0
 800cc50:	9300      	str	r3, [sp, #0]
 800cc52:	23ff      	movs	r3, #255	; 0xff
 800cc54:	2200      	movs	r2, #0
 800cc56:	69f9      	ldr	r1, [r7, #28]
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 fa75 	bl	800d148 <ip4_output_if>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800cc62:	e001      	b.n	800cc68 <icmp_input+0x1b8>
      break;
 800cc64:	bf00      	nop
 800cc66:	e000      	b.n	800cc6a <icmp_input+0x1ba>
      break;
 800cc68:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f7f8 fc8e 	bl	800558c <pbuf_free>
  return;
 800cc70:	e013      	b.n	800cc9a <icmp_input+0x1ea>
    goto lenerr;
 800cc72:	bf00      	nop
 800cc74:	e002      	b.n	800cc7c <icmp_input+0x1cc>
    goto lenerr;
 800cc76:	bf00      	nop
 800cc78:	e000      	b.n	800cc7c <icmp_input+0x1cc>
        goto lenerr;
 800cc7a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f7f8 fc85 	bl	800558c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cc82:	e00a      	b.n	800cc9a <icmp_input+0x1ea>
        goto icmperr;
 800cc84:	bf00      	nop
 800cc86:	e004      	b.n	800cc92 <icmp_input+0x1e2>
        goto icmperr;
 800cc88:	bf00      	nop
 800cc8a:	e002      	b.n	800cc92 <icmp_input+0x1e2>
          goto icmperr;
 800cc8c:	bf00      	nop
 800cc8e:	e000      	b.n	800cc92 <icmp_input+0x1e2>
          goto icmperr;
 800cc90:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f7f8 fc7a 	bl	800558c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cc98:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800cc9a:	3728      	adds	r7, #40	; 0x28
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	200033f0 	.word	0x200033f0
 800cca4:	20003404 	.word	0x20003404
 800cca8:	08011cd0 	.word	0x08011cd0
 800ccac:	08011d08 	.word	0x08011d08
 800ccb0:	08011d40 	.word	0x08011d40
 800ccb4:	08011d68 	.word	0x08011d68

0800ccb8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ccc4:	78fb      	ldrb	r3, [r7, #3]
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	2103      	movs	r1, #3
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 f814 	bl	800ccf8 <icmp_send_response>
}
 800ccd0:	bf00      	nop
 800ccd2:	3708      	adds	r7, #8
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	460b      	mov	r3, r1
 800cce2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800cce4:	78fb      	ldrb	r3, [r7, #3]
 800cce6:	461a      	mov	r2, r3
 800cce8:	210b      	movs	r1, #11
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f000 f804 	bl	800ccf8 <icmp_send_response>
}
 800ccf0:	bf00      	nop
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b08c      	sub	sp, #48	; 0x30
 800ccfc:	af04      	add	r7, sp, #16
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	460b      	mov	r3, r1
 800cd02:	70fb      	strb	r3, [r7, #3]
 800cd04:	4613      	mov	r3, r2
 800cd06:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cd08:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd0c:	2124      	movs	r1, #36	; 0x24
 800cd0e:	2022      	movs	r0, #34	; 0x22
 800cd10:	f7f8 f958 	bl	8004fc4 <pbuf_alloc>
 800cd14:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d04c      	beq.n	800cdb6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	895b      	ldrh	r3, [r3, #10]
 800cd20:	2b23      	cmp	r3, #35	; 0x23
 800cd22:	d806      	bhi.n	800cd32 <icmp_send_response+0x3a>
 800cd24:	4b26      	ldr	r3, [pc, #152]	; (800cdc0 <icmp_send_response+0xc8>)
 800cd26:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800cd2a:	4926      	ldr	r1, [pc, #152]	; (800cdc4 <icmp_send_response+0xcc>)
 800cd2c:	4826      	ldr	r0, [pc, #152]	; (800cdc8 <icmp_send_response+0xd0>)
 800cd2e:	f001 fb27 	bl	800e380 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	78fa      	ldrb	r2, [r7, #3]
 800cd42:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	78ba      	ldrb	r2, [r7, #2]
 800cd48:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	711a      	strb	r2, [r3, #4]
 800cd50:	2200      	movs	r2, #0
 800cd52:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	2200      	movs	r2, #0
 800cd58:	719a      	strb	r2, [r3, #6]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cd5e:	69fb      	ldr	r3, [r7, #28]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	f103 0008 	add.w	r0, r3, #8
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	221c      	movs	r2, #28
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	f001 fad7 	bl	800e320 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	68db      	ldr	r3, [r3, #12]
 800cd76:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cd78:	f107 030c 	add.w	r3, r7, #12
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f000 f825 	bl	800cdcc <ip4_route>
 800cd82:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d011      	beq.n	800cdae <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	709a      	strb	r2, [r3, #2]
 800cd90:	2200      	movs	r2, #0
 800cd92:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cd94:	f107 020c 	add.w	r2, r7, #12
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	9302      	str	r3, [sp, #8]
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	9301      	str	r3, [sp, #4]
 800cda0:	2300      	movs	r3, #0
 800cda2:	9300      	str	r3, [sp, #0]
 800cda4:	23ff      	movs	r3, #255	; 0xff
 800cda6:	2100      	movs	r1, #0
 800cda8:	69f8      	ldr	r0, [r7, #28]
 800cdaa:	f000 f9cd 	bl	800d148 <ip4_output_if>
  }
  pbuf_free(q);
 800cdae:	69f8      	ldr	r0, [r7, #28]
 800cdb0:	f7f8 fbec 	bl	800558c <pbuf_free>
 800cdb4:	e000      	b.n	800cdb8 <icmp_send_response+0xc0>
    return;
 800cdb6:	bf00      	nop
}
 800cdb8:	3720      	adds	r7, #32
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	08011cd0 	.word	0x08011cd0
 800cdc4:	08011d9c 	.word	0x08011d9c
 800cdc8:	08011d40 	.word	0x08011d40

0800cdcc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b085      	sub	sp, #20
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800cdd4:	4b33      	ldr	r3, [pc, #204]	; (800cea4 <ip4_route+0xd8>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	60fb      	str	r3, [r7, #12]
 800cdda:	e036      	b.n	800ce4a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cde2:	f003 0301 	and.w	r3, r3, #1
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d02b      	beq.n	800ce44 <ip4_route+0x78>
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cdf2:	089b      	lsrs	r3, r3, #2
 800cdf4:	f003 0301 	and.w	r3, r3, #1
 800cdf8:	b2db      	uxtb	r3, r3
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d022      	beq.n	800ce44 <ip4_route+0x78>
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	3304      	adds	r3, #4
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d01d      	beq.n	800ce44 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	3304      	adds	r3, #4
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	405a      	eors	r2, r3
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	3308      	adds	r3, #8
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4013      	ands	r3, r2
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d101      	bne.n	800ce24 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	e038      	b.n	800ce96 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce2a:	f003 0302 	and.w	r3, r3, #2
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d108      	bne.n	800ce44 <ip4_route+0x78>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	330c      	adds	r3, #12
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d101      	bne.n	800ce44 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	e028      	b.n	800ce96 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	60fb      	str	r3, [r7, #12]
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1c5      	bne.n	800cddc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ce50:	4b15      	ldr	r3, [pc, #84]	; (800cea8 <ip4_route+0xdc>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d01a      	beq.n	800ce8e <ip4_route+0xc2>
 800ce58:	4b13      	ldr	r3, [pc, #76]	; (800cea8 <ip4_route+0xdc>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce60:	f003 0301 	and.w	r3, r3, #1
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d012      	beq.n	800ce8e <ip4_route+0xc2>
 800ce68:	4b0f      	ldr	r3, [pc, #60]	; (800cea8 <ip4_route+0xdc>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce70:	f003 0304 	and.w	r3, r3, #4
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00a      	beq.n	800ce8e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ce78:	4b0b      	ldr	r3, [pc, #44]	; (800cea8 <ip4_route+0xdc>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	3304      	adds	r3, #4
 800ce7e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d004      	beq.n	800ce8e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	b2db      	uxtb	r3, r3
 800ce8a:	2b7f      	cmp	r3, #127	; 0x7f
 800ce8c:	d101      	bne.n	800ce92 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	e001      	b.n	800ce96 <ip4_route+0xca>
  }

  return netif_default;
 800ce92:	4b05      	ldr	r3, [pc, #20]	; (800cea8 <ip4_route+0xdc>)
 800ce94:	681b      	ldr	r3, [r3, #0]
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3714      	adds	r7, #20
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	20008ae4 	.word	0x20008ae4
 800cea8:	20008ae8 	.word	0x20008ae8

0800ceac <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ceba:	f003 0301 	and.w	r3, r3, #1
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d016      	beq.n	800cef2 <ip4_input_accept+0x46>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	3304      	adds	r3, #4
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d011      	beq.n	800cef2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cece:	4b0b      	ldr	r3, [pc, #44]	; (800cefc <ip4_input_accept+0x50>)
 800ced0:	695a      	ldr	r2, [r3, #20]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	3304      	adds	r3, #4
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d008      	beq.n	800ceee <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800cedc:	4b07      	ldr	r3, [pc, #28]	; (800cefc <ip4_input_accept+0x50>)
 800cede:	695b      	ldr	r3, [r3, #20]
 800cee0:	6879      	ldr	r1, [r7, #4]
 800cee2:	4618      	mov	r0, r3
 800cee4:	f000 fa08 	bl	800d2f8 <ip4_addr_isbroadcast_u32>
 800cee8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d001      	beq.n	800cef2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800ceee:	2301      	movs	r3, #1
 800cef0:	e000      	b.n	800cef4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800cef2:	2300      	movs	r3, #0
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3708      	adds	r7, #8
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	200033f0 	.word	0x200033f0

0800cf00 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b086      	sub	sp, #24
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	091b      	lsrs	r3, r3, #4
 800cf16:	b2db      	uxtb	r3, r3
 800cf18:	2b04      	cmp	r3, #4
 800cf1a:	d004      	beq.n	800cf26 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f7f8 fb35 	bl	800558c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800cf22:	2300      	movs	r3, #0
 800cf24:	e107      	b.n	800d136 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	f003 030f 	and.w	r3, r3, #15
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	885b      	ldrh	r3, [r3, #2]
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7f7 f871 	bl	8004024 <lwip_htons>
 800cf42:	4603      	mov	r3, r0
 800cf44:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	891b      	ldrh	r3, [r3, #8]
 800cf4a:	89ba      	ldrh	r2, [r7, #12]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d204      	bcs.n	800cf5a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800cf50:	89bb      	ldrh	r3, [r7, #12]
 800cf52:	4619      	mov	r1, r3
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f7f8 f993 	bl	8005280 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	895b      	ldrh	r3, [r3, #10]
 800cf5e:	89fa      	ldrh	r2, [r7, #14]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d807      	bhi.n	800cf74 <ip4_input+0x74>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	891b      	ldrh	r3, [r3, #8]
 800cf68:	89ba      	ldrh	r2, [r7, #12]
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d802      	bhi.n	800cf74 <ip4_input+0x74>
 800cf6e:	89fb      	ldrh	r3, [r7, #14]
 800cf70:	2b13      	cmp	r3, #19
 800cf72:	d804      	bhi.n	800cf7e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f7f8 fb09 	bl	800558c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	e0db      	b.n	800d136 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	691b      	ldr	r3, [r3, #16]
 800cf82:	4a6f      	ldr	r2, [pc, #444]	; (800d140 <ip4_input+0x240>)
 800cf84:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	68db      	ldr	r3, [r3, #12]
 800cf8a:	4a6d      	ldr	r2, [pc, #436]	; (800d140 <ip4_input+0x240>)
 800cf8c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cf8e:	4b6c      	ldr	r3, [pc, #432]	; (800d140 <ip4_input+0x240>)
 800cf90:	695b      	ldr	r3, [r3, #20]
 800cf92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf96:	2be0      	cmp	r3, #224	; 0xe0
 800cf98:	d112      	bne.n	800cfc0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfa0:	f003 0301 	and.w	r3, r3, #1
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d007      	beq.n	800cfba <ip4_input+0xba>
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	3304      	adds	r3, #4
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d002      	beq.n	800cfba <ip4_input+0xba>
      netif = inp;
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	613b      	str	r3, [r7, #16]
 800cfb8:	e02a      	b.n	800d010 <ip4_input+0x110>
    } else {
      netif = NULL;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	613b      	str	r3, [r7, #16]
 800cfbe:	e027      	b.n	800d010 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800cfc0:	6838      	ldr	r0, [r7, #0]
 800cfc2:	f7ff ff73 	bl	800ceac <ip4_input_accept>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d002      	beq.n	800cfd2 <ip4_input+0xd2>
      netif = inp;
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	613b      	str	r3, [r7, #16]
 800cfd0:	e01e      	b.n	800d010 <ip4_input+0x110>
    } else {
      netif = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800cfd6:	4b5a      	ldr	r3, [pc, #360]	; (800d140 <ip4_input+0x240>)
 800cfd8:	695b      	ldr	r3, [r3, #20]
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b7f      	cmp	r3, #127	; 0x7f
 800cfde:	d017      	beq.n	800d010 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800cfe0:	4b58      	ldr	r3, [pc, #352]	; (800d144 <ip4_input+0x244>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	613b      	str	r3, [r7, #16]
 800cfe6:	e00e      	b.n	800d006 <ip4_input+0x106>
          if (netif == inp) {
 800cfe8:	693a      	ldr	r2, [r7, #16]
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d006      	beq.n	800cffe <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800cff0:	6938      	ldr	r0, [r7, #16]
 800cff2:	f7ff ff5b 	bl	800ceac <ip4_input_accept>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d108      	bne.n	800d00e <ip4_input+0x10e>
 800cffc:	e000      	b.n	800d000 <ip4_input+0x100>
            continue;
 800cffe:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	613b      	str	r3, [r7, #16]
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d1ed      	bne.n	800cfe8 <ip4_input+0xe8>
 800d00c:	e000      	b.n	800d010 <ip4_input+0x110>
            break;
 800d00e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d010:	4b4b      	ldr	r3, [pc, #300]	; (800d140 <ip4_input+0x240>)
 800d012:	691b      	ldr	r3, [r3, #16]
 800d014:	6839      	ldr	r1, [r7, #0]
 800d016:	4618      	mov	r0, r3
 800d018:	f000 f96e 	bl	800d2f8 <ip4_addr_isbroadcast_u32>
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d105      	bne.n	800d02e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d022:	4b47      	ldr	r3, [pc, #284]	; (800d140 <ip4_input+0x240>)
 800d024:	691b      	ldr	r3, [r3, #16]
 800d026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d02a:	2be0      	cmp	r3, #224	; 0xe0
 800d02c:	d104      	bne.n	800d038 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f7f8 faac 	bl	800558c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d034:	2300      	movs	r3, #0
 800d036:	e07e      	b.n	800d136 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d104      	bne.n	800d048 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f7f8 faa4 	bl	800558c <pbuf_free>
    return ERR_OK;
 800d044:	2300      	movs	r3, #0
 800d046:	e076      	b.n	800d136 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	88db      	ldrh	r3, [r3, #6]
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	461a      	mov	r2, r3
 800d050:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d054:	4013      	ands	r3, r2
 800d056:	2b00      	cmp	r3, #0
 800d058:	d00b      	beq.n	800d072 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 fd24 	bl	800daa8 <ip4_reass>
 800d060:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d101      	bne.n	800d06c <ip4_input+0x16c>
      return ERR_OK;
 800d068:	2300      	movs	r3, #0
 800d06a:	e064      	b.n	800d136 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d072:	4a33      	ldr	r2, [pc, #204]	; (800d140 <ip4_input+0x240>)
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d078:	4a31      	ldr	r2, [pc, #196]	; (800d140 <ip4_input+0x240>)
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d07e:	4a30      	ldr	r2, [pc, #192]	; (800d140 <ip4_input+0x240>)
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	f003 030f 	and.w	r3, r3, #15
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	b2db      	uxtb	r3, r3
 800d092:	b29a      	uxth	r2, r3
 800d094:	4b2a      	ldr	r3, [pc, #168]	; (800d140 <ip4_input+0x240>)
 800d096:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d098:	89fb      	ldrh	r3, [r7, #14]
 800d09a:	4619      	mov	r1, r3
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f7f8 f9ef 	bl	8005480 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	7a5b      	ldrb	r3, [r3, #9]
 800d0a6:	2b11      	cmp	r3, #17
 800d0a8:	d006      	beq.n	800d0b8 <ip4_input+0x1b8>
 800d0aa:	2b11      	cmp	r3, #17
 800d0ac:	dc13      	bgt.n	800d0d6 <ip4_input+0x1d6>
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d00c      	beq.n	800d0cc <ip4_input+0x1cc>
 800d0b2:	2b06      	cmp	r3, #6
 800d0b4:	d005      	beq.n	800d0c2 <ip4_input+0x1c2>
 800d0b6:	e00e      	b.n	800d0d6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d0b8:	6839      	ldr	r1, [r7, #0]
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7fe f8e6 	bl	800b28c <udp_input>
        break;
 800d0c0:	e026      	b.n	800d110 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d0c2:	6839      	ldr	r1, [r7, #0]
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f7fa f92b 	bl	8007320 <tcp_input>
        break;
 800d0ca:	e021      	b.n	800d110 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d0cc:	6839      	ldr	r1, [r7, #0]
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f7ff fcee 	bl	800cab0 <icmp_input>
        break;
 800d0d4:	e01c      	b.n	800d110 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d0d6:	4b1a      	ldr	r3, [pc, #104]	; (800d140 <ip4_input+0x240>)
 800d0d8:	695b      	ldr	r3, [r3, #20]
 800d0da:	6939      	ldr	r1, [r7, #16]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f000 f90b 	bl	800d2f8 <ip4_addr_isbroadcast_u32>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d10f      	bne.n	800d108 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d0e8:	4b15      	ldr	r3, [pc, #84]	; (800d140 <ip4_input+0x240>)
 800d0ea:	695b      	ldr	r3, [r3, #20]
 800d0ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d0f0:	2be0      	cmp	r3, #224	; 0xe0
 800d0f2:	d009      	beq.n	800d108 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d0f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7f8 fa33 	bl	8005566 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d100:	2102      	movs	r1, #2
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f7ff fdd8 	bl	800ccb8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f7f8 fa3f 	bl	800558c <pbuf_free>
        break;
 800d10e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d110:	4b0b      	ldr	r3, [pc, #44]	; (800d140 <ip4_input+0x240>)
 800d112:	2200      	movs	r2, #0
 800d114:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d116:	4b0a      	ldr	r3, [pc, #40]	; (800d140 <ip4_input+0x240>)
 800d118:	2200      	movs	r2, #0
 800d11a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d11c:	4b08      	ldr	r3, [pc, #32]	; (800d140 <ip4_input+0x240>)
 800d11e:	2200      	movs	r2, #0
 800d120:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d122:	4b07      	ldr	r3, [pc, #28]	; (800d140 <ip4_input+0x240>)
 800d124:	2200      	movs	r2, #0
 800d126:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d128:	4b05      	ldr	r3, [pc, #20]	; (800d140 <ip4_input+0x240>)
 800d12a:	2200      	movs	r2, #0
 800d12c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d12e:	4b04      	ldr	r3, [pc, #16]	; (800d140 <ip4_input+0x240>)
 800d130:	2200      	movs	r2, #0
 800d132:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d134:	2300      	movs	r3, #0
}
 800d136:	4618      	mov	r0, r3
 800d138:	3718      	adds	r7, #24
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	200033f0 	.word	0x200033f0
 800d144:	20008ae4 	.word	0x20008ae4

0800d148 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b08a      	sub	sp, #40	; 0x28
 800d14c:	af04      	add	r7, sp, #16
 800d14e:	60f8      	str	r0, [r7, #12]
 800d150:	60b9      	str	r1, [r7, #8]
 800d152:	607a      	str	r2, [r7, #4]
 800d154:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d009      	beq.n	800d174 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d003      	beq.n	800d16e <ip4_output_if+0x26>
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d102      	bne.n	800d174 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d170:	3304      	adds	r3, #4
 800d172:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d174:	78fa      	ldrb	r2, [r7, #3]
 800d176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d178:	9302      	str	r3, [sp, #8]
 800d17a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d17e:	9301      	str	r3, [sp, #4]
 800d180:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d184:	9300      	str	r3, [sp, #0]
 800d186:	4613      	mov	r3, r2
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	6979      	ldr	r1, [r7, #20]
 800d18c:	68f8      	ldr	r0, [r7, #12]
 800d18e:	f000 f805 	bl	800d19c <ip4_output_if_src>
 800d192:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d194:	4618      	mov	r0, r3
 800d196:	3718      	adds	r7, #24
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b088      	sub	sp, #32
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	60f8      	str	r0, [r7, #12]
 800d1a4:	60b9      	str	r1, [r7, #8]
 800d1a6:	607a      	str	r2, [r7, #4]
 800d1a8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	7b9b      	ldrb	r3, [r3, #14]
 800d1ae:	2b01      	cmp	r3, #1
 800d1b0:	d006      	beq.n	800d1c0 <ip4_output_if_src+0x24>
 800d1b2:	4b4b      	ldr	r3, [pc, #300]	; (800d2e0 <ip4_output_if_src+0x144>)
 800d1b4:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d1b8:	494a      	ldr	r1, [pc, #296]	; (800d2e4 <ip4_output_if_src+0x148>)
 800d1ba:	484b      	ldr	r0, [pc, #300]	; (800d2e8 <ip4_output_if_src+0x14c>)
 800d1bc:	f001 f8e0 	bl	800e380 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d060      	beq.n	800d288 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d1c6:	2314      	movs	r3, #20
 800d1c8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d1ca:	2114      	movs	r1, #20
 800d1cc:	68f8      	ldr	r0, [r7, #12]
 800d1ce:	f7f8 f947 	bl	8005460 <pbuf_add_header>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d002      	beq.n	800d1de <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d1d8:	f06f 0301 	mvn.w	r3, #1
 800d1dc:	e07c      	b.n	800d2d8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	895b      	ldrh	r3, [r3, #10]
 800d1e8:	2b13      	cmp	r3, #19
 800d1ea:	d806      	bhi.n	800d1fa <ip4_output_if_src+0x5e>
 800d1ec:	4b3c      	ldr	r3, [pc, #240]	; (800d2e0 <ip4_output_if_src+0x144>)
 800d1ee:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d1f2:	493e      	ldr	r1, [pc, #248]	; (800d2ec <ip4_output_if_src+0x150>)
 800d1f4:	483c      	ldr	r0, [pc, #240]	; (800d2e8 <ip4_output_if_src+0x14c>)
 800d1f6:	f001 f8c3 	bl	800e380 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	78fa      	ldrb	r2, [r7, #3]
 800d1fe:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d206:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d210:	8b7b      	ldrh	r3, [r7, #26]
 800d212:	089b      	lsrs	r3, r3, #2
 800d214:	b29b      	uxth	r3, r3
 800d216:	b2db      	uxtb	r3, r3
 800d218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d21c:	b2da      	uxtb	r2, r3
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d228:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	891b      	ldrh	r3, [r3, #8]
 800d22e:	4618      	mov	r0, r3
 800d230:	f7f6 fef8 	bl	8004024 <lwip_htons>
 800d234:	4603      	mov	r3, r0
 800d236:	461a      	mov	r2, r3
 800d238:	69fb      	ldr	r3, [r7, #28]
 800d23a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	2200      	movs	r2, #0
 800d240:	719a      	strb	r2, [r3, #6]
 800d242:	2200      	movs	r2, #0
 800d244:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d246:	4b2a      	ldr	r3, [pc, #168]	; (800d2f0 <ip4_output_if_src+0x154>)
 800d248:	881b      	ldrh	r3, [r3, #0]
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7f6 feea 	bl	8004024 <lwip_htons>
 800d250:	4603      	mov	r3, r0
 800d252:	461a      	mov	r2, r3
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d258:	4b25      	ldr	r3, [pc, #148]	; (800d2f0 <ip4_output_if_src+0x154>)
 800d25a:	881b      	ldrh	r3, [r3, #0]
 800d25c:	3301      	adds	r3, #1
 800d25e:	b29a      	uxth	r2, r3
 800d260:	4b23      	ldr	r3, [pc, #140]	; (800d2f0 <ip4_output_if_src+0x154>)
 800d262:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d104      	bne.n	800d274 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d26a:	4b22      	ldr	r3, [pc, #136]	; (800d2f4 <ip4_output_if_src+0x158>)
 800d26c:	681a      	ldr	r2, [r3, #0]
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	60da      	str	r2, [r3, #12]
 800d272:	e003      	b.n	800d27c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	2200      	movs	r2, #0
 800d280:	729a      	strb	r2, [r3, #10]
 800d282:	2200      	movs	r2, #0
 800d284:	72da      	strb	r2, [r3, #11]
 800d286:	e00f      	b.n	800d2a8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	895b      	ldrh	r3, [r3, #10]
 800d28c:	2b13      	cmp	r3, #19
 800d28e:	d802      	bhi.n	800d296 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d290:	f06f 0301 	mvn.w	r3, #1
 800d294:	e020      	b.n	800d2d8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d29c:	69fb      	ldr	r3, [r7, #28]
 800d29e:	691b      	ldr	r3, [r3, #16]
 800d2a0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d2a2:	f107 0314 	add.w	r3, r7, #20
 800d2a6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d00c      	beq.n	800d2ca <ip4_output_if_src+0x12e>
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	891a      	ldrh	r2, [r3, #8]
 800d2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d906      	bls.n	800d2ca <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2c0:	68f8      	ldr	r0, [r7, #12]
 800d2c2:	f000 fddf 	bl	800de84 <ip4_frag>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	e006      	b.n	800d2d8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2cc:	695b      	ldr	r3, [r3, #20]
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	68f9      	ldr	r1, [r7, #12]
 800d2d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2d4:	4798      	blx	r3
 800d2d6:	4603      	mov	r3, r0
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3720      	adds	r7, #32
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	08011dc8 	.word	0x08011dc8
 800d2e4:	08011dfc 	.word	0x08011dfc
 800d2e8:	08011e08 	.word	0x08011e08
 800d2ec:	08011e30 	.word	0x08011e30
 800d2f0:	200001fe 	.word	0x200001fe
 800d2f4:	08012204 	.word	0x08012204

0800d2f8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d30c:	d002      	beq.n	800d314 <ip4_addr_isbroadcast_u32+0x1c>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d101      	bne.n	800d318 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d314:	2301      	movs	r3, #1
 800d316:	e02a      	b.n	800d36e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d31e:	f003 0302 	and.w	r3, r3, #2
 800d322:	2b00      	cmp	r3, #0
 800d324:	d101      	bne.n	800d32a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d326:	2300      	movs	r3, #0
 800d328:	e021      	b.n	800d36e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	3304      	adds	r3, #4
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	687a      	ldr	r2, [r7, #4]
 800d332:	429a      	cmp	r2, r3
 800d334:	d101      	bne.n	800d33a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d336:	2300      	movs	r3, #0
 800d338:	e019      	b.n	800d36e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d33a:	68fa      	ldr	r2, [r7, #12]
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	3304      	adds	r3, #4
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	405a      	eors	r2, r3
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	3308      	adds	r3, #8
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4013      	ands	r3, r2
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d10d      	bne.n	800d36c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	3308      	adds	r3, #8
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	43da      	mvns	r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	3308      	adds	r3, #8
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d364:	429a      	cmp	r2, r3
 800d366:	d101      	bne.n	800d36c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d368:	2301      	movs	r3, #1
 800d36a:	e000      	b.n	800d36e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d36c:	2300      	movs	r3, #0
  }
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3714      	adds	r7, #20
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr
	...

0800d37c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800d384:	2210      	movs	r2, #16
 800d386:	4904      	ldr	r1, [pc, #16]	; (800d398 <ip4addr_ntoa+0x1c>)
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f000 f807 	bl	800d39c <ip4addr_ntoa_r>
 800d38e:	4603      	mov	r3, r0
}
 800d390:	4618      	mov	r0, r3
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}
 800d398:	20000200 	.word	0x20000200

0800d39c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b08d      	sub	sp, #52	; 0x34
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800d3b6:	f107 0318 	add.w	r3, r7, #24
 800d3ba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800d3bc:	2300      	movs	r3, #0
 800d3be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d3c2:	e059      	b.n	800d478 <ip4addr_ntoa_r+0xdc>
    i = 0;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800d3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3cc:	781a      	ldrb	r2, [r3, #0]
 800d3ce:	4b33      	ldr	r3, [pc, #204]	; (800d49c <ip4addr_ntoa_r+0x100>)
 800d3d0:	fba3 1302 	umull	r1, r3, r3, r2
 800d3d4:	08d9      	lsrs	r1, r3, #3
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	009b      	lsls	r3, r3, #2
 800d3da:	440b      	add	r3, r1
 800d3dc:	005b      	lsls	r3, r3, #1
 800d3de:	1ad3      	subs	r3, r2, r3
 800d3e0:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800d3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	4a2d      	ldr	r2, [pc, #180]	; (800d49c <ip4addr_ntoa_r+0x100>)
 800d3e8:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ec:	08db      	lsrs	r3, r3, #3
 800d3ee:	b2da      	uxtb	r2, r3
 800d3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f2:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800d3f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3f8:	1c5a      	adds	r2, r3, #1
 800d3fa:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800d3fe:	4619      	mov	r1, r3
 800d400:	7ffb      	ldrb	r3, [r7, #31]
 800d402:	3330      	adds	r3, #48	; 0x30
 800d404:	b2da      	uxtb	r2, r3
 800d406:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d40a:	440b      	add	r3, r1
 800d40c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800d410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1d8      	bne.n	800d3ca <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800d418:	e012      	b.n	800d440 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 800d41a:	6a3b      	ldr	r3, [r7, #32]
 800d41c:	1c5a      	adds	r2, r3, #1
 800d41e:	623a      	str	r2, [r7, #32]
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	429a      	cmp	r2, r3
 800d424:	dc01      	bgt.n	800d42a <ip4addr_ntoa_r+0x8e>
        return NULL;
 800d426:	2300      	movs	r3, #0
 800d428:	e031      	b.n	800d48e <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 800d42a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d430:	1c59      	adds	r1, r3, #1
 800d432:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d434:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800d438:	440a      	add	r2, r1
 800d43a:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800d43e:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800d440:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d444:	1e5a      	subs	r2, r3, #1
 800d446:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d1e5      	bne.n	800d41a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800d44e:	6a3b      	ldr	r3, [r7, #32]
 800d450:	1c5a      	adds	r2, r3, #1
 800d452:	623a      	str	r2, [r7, #32]
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	429a      	cmp	r2, r3
 800d458:	dc01      	bgt.n	800d45e <ip4addr_ntoa_r+0xc2>
      return NULL;
 800d45a:	2300      	movs	r3, #0
 800d45c:	e017      	b.n	800d48e <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 800d45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d460:	1c5a      	adds	r2, r3, #1
 800d462:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d464:	222e      	movs	r2, #46	; 0x2e
 800d466:	701a      	strb	r2, [r3, #0]
    ap++;
 800d468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d46a:	3301      	adds	r3, #1
 800d46c:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800d46e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d472:	3301      	adds	r3, #1
 800d474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d47c:	2b03      	cmp	r3, #3
 800d47e:	d9a1      	bls.n	800d3c4 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800d480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d482:	3b01      	subs	r3, #1
 800d484:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d488:	2200      	movs	r2, #0
 800d48a:	701a      	strb	r2, [r3, #0]
  return buf;
 800d48c:	68bb      	ldr	r3, [r7, #8]
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3734      	adds	r7, #52	; 0x34
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr
 800d49a:	bf00      	nop
 800d49c:	cccccccd 	.word	0xcccccccd

0800d4a0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d4aa:	4b12      	ldr	r3, [pc, #72]	; (800d4f4 <ip_reass_tmr+0x54>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d4b0:	e018      	b.n	800d4e4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	7fdb      	ldrb	r3, [r3, #31]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00b      	beq.n	800d4d2 <ip_reass_tmr+0x32>
      r->timer--;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	7fdb      	ldrb	r3, [r3, #31]
 800d4be:	3b01      	subs	r3, #1
 800d4c0:	b2da      	uxtb	r2, r3
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	60fb      	str	r3, [r7, #12]
 800d4d0:	e008      	b.n	800d4e4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d4dc:	68b9      	ldr	r1, [r7, #8]
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 f80a 	bl	800d4f8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d1e3      	bne.n	800d4b2 <ip_reass_tmr+0x12>
    }
  }
}
 800d4ea:	bf00      	nop
 800d4ec:	bf00      	nop
 800d4ee:	3710      	adds	r7, #16
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	20000210 	.word	0x20000210

0800d4f8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b088      	sub	sp, #32
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d502:	2300      	movs	r3, #0
 800d504:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d506:	683a      	ldr	r2, [r7, #0]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d105      	bne.n	800d51a <ip_reass_free_complete_datagram+0x22>
 800d50e:	4b45      	ldr	r3, [pc, #276]	; (800d624 <ip_reass_free_complete_datagram+0x12c>)
 800d510:	22ab      	movs	r2, #171	; 0xab
 800d512:	4945      	ldr	r1, [pc, #276]	; (800d628 <ip_reass_free_complete_datagram+0x130>)
 800d514:	4845      	ldr	r0, [pc, #276]	; (800d62c <ip_reass_free_complete_datagram+0x134>)
 800d516:	f000 ff33 	bl	800e380 <iprintf>
  if (prev != NULL) {
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d00a      	beq.n	800d536 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	429a      	cmp	r2, r3
 800d528:	d005      	beq.n	800d536 <ip_reass_free_complete_datagram+0x3e>
 800d52a:	4b3e      	ldr	r3, [pc, #248]	; (800d624 <ip_reass_free_complete_datagram+0x12c>)
 800d52c:	22ad      	movs	r2, #173	; 0xad
 800d52e:	4940      	ldr	r1, [pc, #256]	; (800d630 <ip_reass_free_complete_datagram+0x138>)
 800d530:	483e      	ldr	r0, [pc, #248]	; (800d62c <ip_reass_free_complete_datagram+0x134>)
 800d532:	f000 ff25 	bl	800e380 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	889b      	ldrh	r3, [r3, #4]
 800d542:	b29b      	uxth	r3, r3
 800d544:	2b00      	cmp	r3, #0
 800d546:	d12a      	bne.n	800d59e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	681a      	ldr	r2, [r3, #0]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	6858      	ldr	r0, [r3, #4]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	3308      	adds	r3, #8
 800d55e:	2214      	movs	r2, #20
 800d560:	4619      	mov	r1, r3
 800d562:	f000 fedd 	bl	800e320 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d566:	2101      	movs	r1, #1
 800d568:	69b8      	ldr	r0, [r7, #24]
 800d56a:	f7ff fbb5 	bl	800ccd8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d56e:	69b8      	ldr	r0, [r7, #24]
 800d570:	f7f8 f894 	bl	800569c <pbuf_clen>
 800d574:	4603      	mov	r3, r0
 800d576:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d578:	8bfa      	ldrh	r2, [r7, #30]
 800d57a:	8a7b      	ldrh	r3, [r7, #18]
 800d57c:	4413      	add	r3, r2
 800d57e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d582:	db05      	blt.n	800d590 <ip_reass_free_complete_datagram+0x98>
 800d584:	4b27      	ldr	r3, [pc, #156]	; (800d624 <ip_reass_free_complete_datagram+0x12c>)
 800d586:	22bc      	movs	r2, #188	; 0xbc
 800d588:	492a      	ldr	r1, [pc, #168]	; (800d634 <ip_reass_free_complete_datagram+0x13c>)
 800d58a:	4828      	ldr	r0, [pc, #160]	; (800d62c <ip_reass_free_complete_datagram+0x134>)
 800d58c:	f000 fef8 	bl	800e380 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d590:	8bfa      	ldrh	r2, [r7, #30]
 800d592:	8a7b      	ldrh	r3, [r7, #18]
 800d594:	4413      	add	r3, r2
 800d596:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d598:	69b8      	ldr	r0, [r7, #24]
 800d59a:	f7f7 fff7 	bl	800558c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d5a4:	e01f      	b.n	800d5e6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d5ac:	69bb      	ldr	r3, [r7, #24]
 800d5ae:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d5b6:	68f8      	ldr	r0, [r7, #12]
 800d5b8:	f7f8 f870 	bl	800569c <pbuf_clen>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d5c0:	8bfa      	ldrh	r2, [r7, #30]
 800d5c2:	8a7b      	ldrh	r3, [r7, #18]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5ca:	db05      	blt.n	800d5d8 <ip_reass_free_complete_datagram+0xe0>
 800d5cc:	4b15      	ldr	r3, [pc, #84]	; (800d624 <ip_reass_free_complete_datagram+0x12c>)
 800d5ce:	22cc      	movs	r2, #204	; 0xcc
 800d5d0:	4918      	ldr	r1, [pc, #96]	; (800d634 <ip_reass_free_complete_datagram+0x13c>)
 800d5d2:	4816      	ldr	r0, [pc, #88]	; (800d62c <ip_reass_free_complete_datagram+0x134>)
 800d5d4:	f000 fed4 	bl	800e380 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d5d8:	8bfa      	ldrh	r2, [r7, #30]
 800d5da:	8a7b      	ldrh	r3, [r7, #18]
 800d5dc:	4413      	add	r3, r2
 800d5de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	f7f7 ffd3 	bl	800558c <pbuf_free>
  while (p != NULL) {
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d1dc      	bne.n	800d5a6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d5ec:	6839      	ldr	r1, [r7, #0]
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 f8c2 	bl	800d778 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d5f4:	4b10      	ldr	r3, [pc, #64]	; (800d638 <ip_reass_free_complete_datagram+0x140>)
 800d5f6:	881b      	ldrh	r3, [r3, #0]
 800d5f8:	8bfa      	ldrh	r2, [r7, #30]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d905      	bls.n	800d60a <ip_reass_free_complete_datagram+0x112>
 800d5fe:	4b09      	ldr	r3, [pc, #36]	; (800d624 <ip_reass_free_complete_datagram+0x12c>)
 800d600:	22d2      	movs	r2, #210	; 0xd2
 800d602:	490e      	ldr	r1, [pc, #56]	; (800d63c <ip_reass_free_complete_datagram+0x144>)
 800d604:	4809      	ldr	r0, [pc, #36]	; (800d62c <ip_reass_free_complete_datagram+0x134>)
 800d606:	f000 febb 	bl	800e380 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d60a:	4b0b      	ldr	r3, [pc, #44]	; (800d638 <ip_reass_free_complete_datagram+0x140>)
 800d60c:	881a      	ldrh	r2, [r3, #0]
 800d60e:	8bfb      	ldrh	r3, [r7, #30]
 800d610:	1ad3      	subs	r3, r2, r3
 800d612:	b29a      	uxth	r2, r3
 800d614:	4b08      	ldr	r3, [pc, #32]	; (800d638 <ip_reass_free_complete_datagram+0x140>)
 800d616:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d618:	8bfb      	ldrh	r3, [r7, #30]
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3720      	adds	r7, #32
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	08011e60 	.word	0x08011e60
 800d628:	08011e9c 	.word	0x08011e9c
 800d62c:	08011ea8 	.word	0x08011ea8
 800d630:	08011ed0 	.word	0x08011ed0
 800d634:	08011ee4 	.word	0x08011ee4
 800d638:	20000214 	.word	0x20000214
 800d63c:	08011f04 	.word	0x08011f04

0800d640 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b08a      	sub	sp, #40	; 0x28
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d64a:	2300      	movs	r3, #0
 800d64c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d64e:	2300      	movs	r3, #0
 800d650:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d652:	2300      	movs	r3, #0
 800d654:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d656:	2300      	movs	r3, #0
 800d658:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d65a:	2300      	movs	r3, #0
 800d65c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d65e:	4b28      	ldr	r3, [pc, #160]	; (800d700 <ip_reass_remove_oldest_datagram+0xc0>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d664:	e030      	b.n	800d6c8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d668:	695a      	ldr	r2, [r3, #20]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	68db      	ldr	r3, [r3, #12]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d10c      	bne.n	800d68c <ip_reass_remove_oldest_datagram+0x4c>
 800d672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d674:	699a      	ldr	r2, [r3, #24]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	691b      	ldr	r3, [r3, #16]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d106      	bne.n	800d68c <ip_reass_remove_oldest_datagram+0x4c>
 800d67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d680:	899a      	ldrh	r2, [r3, #12]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	889b      	ldrh	r3, [r3, #4]
 800d686:	b29b      	uxth	r3, r3
 800d688:	429a      	cmp	r2, r3
 800d68a:	d014      	beq.n	800d6b6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d68c:	693b      	ldr	r3, [r7, #16]
 800d68e:	3301      	adds	r3, #1
 800d690:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d692:	6a3b      	ldr	r3, [r7, #32]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d104      	bne.n	800d6a2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d69c:	69fb      	ldr	r3, [r7, #28]
 800d69e:	61bb      	str	r3, [r7, #24]
 800d6a0:	e009      	b.n	800d6b6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a4:	7fda      	ldrb	r2, [r3, #31]
 800d6a6:	6a3b      	ldr	r3, [r7, #32]
 800d6a8:	7fdb      	ldrb	r3, [r3, #31]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d803      	bhi.n	800d6b6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d001      	beq.n	800d6c2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d1cb      	bne.n	800d666 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d6ce:	6a3b      	ldr	r3, [r7, #32]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d008      	beq.n	800d6e6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d6d4:	69b9      	ldr	r1, [r7, #24]
 800d6d6:	6a38      	ldr	r0, [r7, #32]
 800d6d8:	f7ff ff0e 	bl	800d4f8 <ip_reass_free_complete_datagram>
 800d6dc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d6de:	697a      	ldr	r2, [r7, #20]
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	4413      	add	r3, r2
 800d6e4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d6e6:	697a      	ldr	r2, [r7, #20]
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	da02      	bge.n	800d6f4 <ip_reass_remove_oldest_datagram+0xb4>
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	dcac      	bgt.n	800d64e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d6f4:	697b      	ldr	r3, [r7, #20]
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3728      	adds	r7, #40	; 0x28
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	20000210 	.word	0x20000210

0800d704 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d70e:	2004      	movs	r0, #4
 800d710:	f7f7 f8de 	bl	80048d0 <memp_malloc>
 800d714:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d110      	bne.n	800d73e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d71c:	6839      	ldr	r1, [r7, #0]
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f7ff ff8e 	bl	800d640 <ip_reass_remove_oldest_datagram>
 800d724:	4602      	mov	r2, r0
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	4293      	cmp	r3, r2
 800d72a:	dc03      	bgt.n	800d734 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d72c:	2004      	movs	r0, #4
 800d72e:	f7f7 f8cf 	bl	80048d0 <memp_malloc>
 800d732:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d101      	bne.n	800d73e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d73a:	2300      	movs	r3, #0
 800d73c:	e016      	b.n	800d76c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d73e:	2220      	movs	r2, #32
 800d740:	2100      	movs	r1, #0
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f000 fe14 	bl	800e370 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	220f      	movs	r2, #15
 800d74c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d74e:	4b09      	ldr	r3, [pc, #36]	; (800d774 <ip_reass_enqueue_new_datagram+0x70>)
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d756:	4a07      	ldr	r2, [pc, #28]	; (800d774 <ip_reass_enqueue_new_datagram+0x70>)
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	3308      	adds	r3, #8
 800d760:	2214      	movs	r2, #20
 800d762:	6879      	ldr	r1, [r7, #4]
 800d764:	4618      	mov	r0, r3
 800d766:	f000 fddb 	bl	800e320 <memcpy>
  return ipr;
 800d76a:	68fb      	ldr	r3, [r7, #12]
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3710      	adds	r7, #16
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}
 800d774:	20000210 	.word	0x20000210

0800d778 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d782:	4b10      	ldr	r3, [pc, #64]	; (800d7c4 <ip_reass_dequeue_datagram+0x4c>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	429a      	cmp	r2, r3
 800d78a:	d104      	bne.n	800d796 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4a0c      	ldr	r2, [pc, #48]	; (800d7c4 <ip_reass_dequeue_datagram+0x4c>)
 800d792:	6013      	str	r3, [r2, #0]
 800d794:	e00d      	b.n	800d7b2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d106      	bne.n	800d7aa <ip_reass_dequeue_datagram+0x32>
 800d79c:	4b0a      	ldr	r3, [pc, #40]	; (800d7c8 <ip_reass_dequeue_datagram+0x50>)
 800d79e:	f240 1245 	movw	r2, #325	; 0x145
 800d7a2:	490a      	ldr	r1, [pc, #40]	; (800d7cc <ip_reass_dequeue_datagram+0x54>)
 800d7a4:	480a      	ldr	r0, [pc, #40]	; (800d7d0 <ip_reass_dequeue_datagram+0x58>)
 800d7a6:	f000 fdeb 	bl	800e380 <iprintf>
    prev->next = ipr->next;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681a      	ldr	r2, [r3, #0]
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d7b2:	6879      	ldr	r1, [r7, #4]
 800d7b4:	2004      	movs	r0, #4
 800d7b6:	f7f7 f8d7 	bl	8004968 <memp_free>
}
 800d7ba:	bf00      	nop
 800d7bc:	3708      	adds	r7, #8
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	20000210 	.word	0x20000210
 800d7c8:	08011e60 	.word	0x08011e60
 800d7cc:	08011f28 	.word	0x08011f28
 800d7d0:	08011ea8 	.word	0x08011ea8

0800d7d4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b08c      	sub	sp, #48	; 0x30
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	60b9      	str	r1, [r7, #8]
 800d7de:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d7ee:	69fb      	ldr	r3, [r7, #28]
 800d7f0:	885b      	ldrh	r3, [r3, #2]
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7f6 fc15 	bl	8004024 <lwip_htons>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	f003 030f 	and.w	r3, r3, #15
 800d806:	b2db      	uxtb	r3, r3
 800d808:	009b      	lsls	r3, r3, #2
 800d80a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d80c:	7e7b      	ldrb	r3, [r7, #25]
 800d80e:	b29b      	uxth	r3, r3
 800d810:	8b7a      	ldrh	r2, [r7, #26]
 800d812:	429a      	cmp	r2, r3
 800d814:	d202      	bcs.n	800d81c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d816:	f04f 33ff 	mov.w	r3, #4294967295
 800d81a:	e135      	b.n	800da88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d81c:	7e7b      	ldrb	r3, [r7, #25]
 800d81e:	b29b      	uxth	r3, r3
 800d820:	8b7a      	ldrh	r2, [r7, #26]
 800d822:	1ad3      	subs	r3, r2, r3
 800d824:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d826:	69fb      	ldr	r3, [r7, #28]
 800d828:	88db      	ldrh	r3, [r3, #6]
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7f6 fbf9 	bl	8004024 <lwip_htons>
 800d832:	4603      	mov	r3, r0
 800d834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d838:	b29b      	uxth	r3, r3
 800d83a:	00db      	lsls	r3, r3, #3
 800d83c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d846:	2200      	movs	r2, #0
 800d848:	701a      	strb	r2, [r3, #0]
 800d84a:	2200      	movs	r2, #0
 800d84c:	705a      	strb	r2, [r3, #1]
 800d84e:	2200      	movs	r2, #0
 800d850:	709a      	strb	r2, [r3, #2]
 800d852:	2200      	movs	r2, #0
 800d854:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d858:	8afa      	ldrh	r2, [r7, #22]
 800d85a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d85c:	8afa      	ldrh	r2, [r7, #22]
 800d85e:	8b7b      	ldrh	r3, [r7, #26]
 800d860:	4413      	add	r3, r2
 800d862:	b29a      	uxth	r2, r3
 800d864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d866:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86a:	88db      	ldrh	r3, [r3, #6]
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	8afa      	ldrh	r2, [r7, #22]
 800d870:	429a      	cmp	r2, r3
 800d872:	d902      	bls.n	800d87a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d874:	f04f 33ff 	mov.w	r3, #4294967295
 800d878:	e106      	b.n	800da88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	627b      	str	r3, [r7, #36]	; 0x24
 800d880:	e068      	b.n	800d954 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88a:	889b      	ldrh	r3, [r3, #4]
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	889b      	ldrh	r3, [r3, #4]
 800d892:	b29b      	uxth	r3, r3
 800d894:	429a      	cmp	r2, r3
 800d896:	d235      	bcs.n	800d904 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d89c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d020      	beq.n	800d8e6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a6:	889b      	ldrh	r3, [r3, #4]
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ac:	88db      	ldrh	r3, [r3, #6]
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d307      	bcc.n	800d8c4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b6:	88db      	ldrh	r3, [r3, #6]
 800d8b8:	b29a      	uxth	r2, r3
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	889b      	ldrh	r3, [r3, #4]
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d902      	bls.n	800d8ca <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d8c8:	e0de      	b.n	800da88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8cc:	68ba      	ldr	r2, [r7, #8]
 800d8ce:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d2:	88db      	ldrh	r3, [r3, #6]
 800d8d4:	b29a      	uxth	r2, r3
 800d8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d8:	889b      	ldrh	r3, [r3, #4]
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d03d      	beq.n	800d95c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d8e4:	e03a      	b.n	800d95c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e8:	88db      	ldrh	r3, [r3, #6]
 800d8ea:	b29a      	uxth	r2, r3
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	889b      	ldrh	r3, [r3, #4]
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d902      	bls.n	800d8fc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d8f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8fa:	e0c5      	b.n	800da88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	68ba      	ldr	r2, [r7, #8]
 800d900:	605a      	str	r2, [r3, #4]
      break;
 800d902:	e02b      	b.n	800d95c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d906:	889b      	ldrh	r3, [r3, #4]
 800d908:	b29a      	uxth	r2, r3
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	889b      	ldrh	r3, [r3, #4]
 800d90e:	b29b      	uxth	r3, r3
 800d910:	429a      	cmp	r2, r3
 800d912:	d102      	bne.n	800d91a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d914:	f04f 33ff 	mov.w	r3, #4294967295
 800d918:	e0b6      	b.n	800da88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91c:	889b      	ldrh	r3, [r3, #4]
 800d91e:	b29a      	uxth	r2, r3
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	88db      	ldrh	r3, [r3, #6]
 800d924:	b29b      	uxth	r3, r3
 800d926:	429a      	cmp	r2, r3
 800d928:	d202      	bcs.n	800d930 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d92a:	f04f 33ff 	mov.w	r3, #4294967295
 800d92e:	e0ab      	b.n	800da88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d932:	2b00      	cmp	r3, #0
 800d934:	d009      	beq.n	800d94a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d938:	88db      	ldrh	r3, [r3, #6]
 800d93a:	b29a      	uxth	r2, r3
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	889b      	ldrh	r3, [r3, #4]
 800d940:	b29b      	uxth	r3, r3
 800d942:	429a      	cmp	r2, r3
 800d944:	d001      	beq.n	800d94a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d946:	2300      	movs	r3, #0
 800d948:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d956:	2b00      	cmp	r3, #0
 800d958:	d193      	bne.n	800d882 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d95a:	e000      	b.n	800d95e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d95c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d960:	2b00      	cmp	r3, #0
 800d962:	d12d      	bne.n	800d9c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d966:	2b00      	cmp	r3, #0
 800d968:	d01c      	beq.n	800d9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d96c:	88db      	ldrh	r3, [r3, #6]
 800d96e:	b29a      	uxth	r2, r3
 800d970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d972:	889b      	ldrh	r3, [r3, #4]
 800d974:	b29b      	uxth	r3, r3
 800d976:	429a      	cmp	r2, r3
 800d978:	d906      	bls.n	800d988 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d97a:	4b45      	ldr	r3, [pc, #276]	; (800da90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d97c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800d980:	4944      	ldr	r1, [pc, #272]	; (800da94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d982:	4845      	ldr	r0, [pc, #276]	; (800da98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d984:	f000 fcfc 	bl	800e380 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98a:	68ba      	ldr	r2, [r7, #8]
 800d98c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d990:	88db      	ldrh	r3, [r3, #6]
 800d992:	b29a      	uxth	r2, r3
 800d994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d996:	889b      	ldrh	r3, [r3, #4]
 800d998:	b29b      	uxth	r3, r3
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d010      	beq.n	800d9c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	623b      	str	r3, [r7, #32]
 800d9a2:	e00d      	b.n	800d9c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d006      	beq.n	800d9ba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d9ac:	4b38      	ldr	r3, [pc, #224]	; (800da90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d9ae:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800d9b2:	493a      	ldr	r1, [pc, #232]	; (800da9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d9b4:	4838      	ldr	r0, [pc, #224]	; (800da98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d9b6:	f000 fce3 	bl	800e380 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	68ba      	ldr	r2, [r7, #8]
 800d9be:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d105      	bne.n	800d9d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	7f9b      	ldrb	r3, [r3, #30]
 800d9ca:	f003 0301 	and.w	r3, r3, #1
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d059      	beq.n	800da86 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d9d2:	6a3b      	ldr	r3, [r7, #32]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d04f      	beq.n	800da78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d006      	beq.n	800d9ee <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	889b      	ldrh	r3, [r3, #4]
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d002      	beq.n	800d9f4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	623b      	str	r3, [r7, #32]
 800d9f2:	e041      	b.n	800da78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d9fe:	e012      	b.n	800da26 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800da00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da02:	685b      	ldr	r3, [r3, #4]
 800da04:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800da06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da08:	88db      	ldrh	r3, [r3, #6]
 800da0a:	b29a      	uxth	r2, r3
 800da0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da0e:	889b      	ldrh	r3, [r3, #4]
 800da10:	b29b      	uxth	r3, r3
 800da12:	429a      	cmp	r2, r3
 800da14:	d002      	beq.n	800da1c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800da16:	2300      	movs	r3, #0
 800da18:	623b      	str	r3, [r7, #32]
            break;
 800da1a:	e007      	b.n	800da2c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800da1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800da20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800da26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d1e9      	bne.n	800da00 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800da2c:	6a3b      	ldr	r3, [r7, #32]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d022      	beq.n	800da78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d106      	bne.n	800da48 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800da3a:	4b15      	ldr	r3, [pc, #84]	; (800da90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800da3c:	f240 12df 	movw	r2, #479	; 0x1df
 800da40:	4917      	ldr	r1, [pc, #92]	; (800daa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800da42:	4815      	ldr	r0, [pc, #84]	; (800da98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800da44:	f000 fc9c 	bl	800e380 <iprintf>
          LWIP_ASSERT("sanity check",
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da50:	429a      	cmp	r2, r3
 800da52:	d106      	bne.n	800da62 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800da54:	4b0e      	ldr	r3, [pc, #56]	; (800da90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800da56:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800da5a:	4911      	ldr	r1, [pc, #68]	; (800daa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800da5c:	480e      	ldr	r0, [pc, #56]	; (800da98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800da5e:	f000 fc8f 	bl	800e380 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800da62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d006      	beq.n	800da78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800da6a:	4b09      	ldr	r3, [pc, #36]	; (800da90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800da6c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800da70:	490c      	ldr	r1, [pc, #48]	; (800daa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800da72:	4809      	ldr	r0, [pc, #36]	; (800da98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800da74:	f000 fc84 	bl	800e380 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800da78:	6a3b      	ldr	r3, [r7, #32]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	bf14      	ite	ne
 800da7e:	2301      	movne	r3, #1
 800da80:	2300      	moveq	r3, #0
 800da82:	b2db      	uxtb	r3, r3
 800da84:	e000      	b.n	800da88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800da86:	2300      	movs	r3, #0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3730      	adds	r7, #48	; 0x30
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	08011e60 	.word	0x08011e60
 800da94:	08011f44 	.word	0x08011f44
 800da98:	08011ea8 	.word	0x08011ea8
 800da9c:	08011f64 	.word	0x08011f64
 800daa0:	08011f9c 	.word	0x08011f9c
 800daa4:	08011fac 	.word	0x08011fac

0800daa8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b08e      	sub	sp, #56	; 0x38
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	685b      	ldr	r3, [r3, #4]
 800dab4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800dab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	f003 030f 	and.w	r3, r3, #15
 800dabe:	b2db      	uxtb	r3, r3
 800dac0:	009b      	lsls	r3, r3, #2
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	2b14      	cmp	r3, #20
 800dac6:	f040 8167 	bne.w	800dd98 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800daca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dacc:	88db      	ldrh	r3, [r3, #6]
 800dace:	b29b      	uxth	r3, r3
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7f6 faa7 	bl	8004024 <lwip_htons>
 800dad6:	4603      	mov	r3, r0
 800dad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dadc:	b29b      	uxth	r3, r3
 800dade:	00db      	lsls	r3, r3, #3
 800dae0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae4:	885b      	ldrh	r3, [r3, #2]
 800dae6:	b29b      	uxth	r3, r3
 800dae8:	4618      	mov	r0, r3
 800daea:	f7f6 fa9b 	bl	8004024 <lwip_htons>
 800daee:	4603      	mov	r3, r0
 800daf0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800daf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	f003 030f 	and.w	r3, r3, #15
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	009b      	lsls	r3, r3, #2
 800dafe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800db02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db06:	b29b      	uxth	r3, r3
 800db08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db0a:	429a      	cmp	r2, r3
 800db0c:	f0c0 8146 	bcc.w	800dd9c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800db10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db14:	b29b      	uxth	r3, r3
 800db16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db18:	1ad3      	subs	r3, r2, r3
 800db1a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f7f7 fdbd 	bl	800569c <pbuf_clen>
 800db22:	4603      	mov	r3, r0
 800db24:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800db26:	4b9f      	ldr	r3, [pc, #636]	; (800dda4 <ip4_reass+0x2fc>)
 800db28:	881b      	ldrh	r3, [r3, #0]
 800db2a:	461a      	mov	r2, r3
 800db2c:	8c3b      	ldrh	r3, [r7, #32]
 800db2e:	4413      	add	r3, r2
 800db30:	2b0a      	cmp	r3, #10
 800db32:	dd10      	ble.n	800db56 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800db34:	8c3b      	ldrh	r3, [r7, #32]
 800db36:	4619      	mov	r1, r3
 800db38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db3a:	f7ff fd81 	bl	800d640 <ip_reass_remove_oldest_datagram>
 800db3e:	4603      	mov	r3, r0
 800db40:	2b00      	cmp	r3, #0
 800db42:	f000 812d 	beq.w	800dda0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800db46:	4b97      	ldr	r3, [pc, #604]	; (800dda4 <ip4_reass+0x2fc>)
 800db48:	881b      	ldrh	r3, [r3, #0]
 800db4a:	461a      	mov	r2, r3
 800db4c:	8c3b      	ldrh	r3, [r7, #32]
 800db4e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800db50:	2b0a      	cmp	r3, #10
 800db52:	f300 8125 	bgt.w	800dda0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800db56:	4b94      	ldr	r3, [pc, #592]	; (800dda8 <ip4_reass+0x300>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	633b      	str	r3, [r7, #48]	; 0x30
 800db5c:	e015      	b.n	800db8a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800db5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db60:	695a      	ldr	r2, [r3, #20]
 800db62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db64:	68db      	ldr	r3, [r3, #12]
 800db66:	429a      	cmp	r2, r3
 800db68:	d10c      	bne.n	800db84 <ip4_reass+0xdc>
 800db6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6c:	699a      	ldr	r2, [r3, #24]
 800db6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db70:	691b      	ldr	r3, [r3, #16]
 800db72:	429a      	cmp	r2, r3
 800db74:	d106      	bne.n	800db84 <ip4_reass+0xdc>
 800db76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db78:	899a      	ldrh	r2, [r3, #12]
 800db7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7c:	889b      	ldrh	r3, [r3, #4]
 800db7e:	b29b      	uxth	r3, r3
 800db80:	429a      	cmp	r2, r3
 800db82:	d006      	beq.n	800db92 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800db84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	633b      	str	r3, [r7, #48]	; 0x30
 800db8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d1e6      	bne.n	800db5e <ip4_reass+0xb6>
 800db90:	e000      	b.n	800db94 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800db92:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800db94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db96:	2b00      	cmp	r3, #0
 800db98:	d109      	bne.n	800dbae <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800db9a:	8c3b      	ldrh	r3, [r7, #32]
 800db9c:	4619      	mov	r1, r3
 800db9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dba0:	f7ff fdb0 	bl	800d704 <ip_reass_enqueue_new_datagram>
 800dba4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800dba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d11c      	bne.n	800dbe6 <ip4_reass+0x13e>
      goto nullreturn;
 800dbac:	e109      	b.n	800ddc2 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb0:	88db      	ldrh	r3, [r3, #6]
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7f6 fa35 	bl	8004024 <lwip_htons>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d110      	bne.n	800dbe6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800dbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc6:	89db      	ldrh	r3, [r3, #14]
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7f6 fa2b 	bl	8004024 <lwip_htons>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d006      	beq.n	800dbe6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800dbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbda:	3308      	adds	r3, #8
 800dbdc:	2214      	movs	r2, #20
 800dbde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f000 fb9d 	bl	800e320 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800dbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe8:	88db      	ldrh	r3, [r3, #6]
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	f003 0320 	and.w	r3, r3, #32
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	bf0c      	ite	eq
 800dbf4:	2301      	moveq	r3, #1
 800dbf6:	2300      	movne	r3, #0
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800dbfc:	69fb      	ldr	r3, [r7, #28]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d00e      	beq.n	800dc20 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800dc02:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dc04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc06:	4413      	add	r3, r2
 800dc08:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800dc0a:	8b7a      	ldrh	r2, [r7, #26]
 800dc0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	f0c0 80a0 	bcc.w	800dd54 <ip4_reass+0x2ac>
 800dc14:	8b7b      	ldrh	r3, [r7, #26]
 800dc16:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	f200 809a 	bhi.w	800dd54 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800dc20:	69fa      	ldr	r2, [r7, #28]
 800dc22:	6879      	ldr	r1, [r7, #4]
 800dc24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc26:	f7ff fdd5 	bl	800d7d4 <ip_reass_chain_frag_into_datagram_and_validate>
 800dc2a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc32:	f000 8091 	beq.w	800dd58 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800dc36:	4b5b      	ldr	r3, [pc, #364]	; (800dda4 <ip4_reass+0x2fc>)
 800dc38:	881a      	ldrh	r2, [r3, #0]
 800dc3a:	8c3b      	ldrh	r3, [r7, #32]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	b29a      	uxth	r2, r3
 800dc40:	4b58      	ldr	r3, [pc, #352]	; (800dda4 <ip4_reass+0x2fc>)
 800dc42:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800dc44:	69fb      	ldr	r3, [r7, #28]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d00d      	beq.n	800dc66 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800dc4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dc4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc4e:	4413      	add	r3, r2
 800dc50:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800dc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc54:	8a7a      	ldrh	r2, [r7, #18]
 800dc56:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5a:	7f9b      	ldrb	r3, [r3, #30]
 800dc5c:	f043 0301 	orr.w	r3, r3, #1
 800dc60:	b2da      	uxtb	r2, r3
 800dc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc64:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d171      	bne.n	800dd50 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800dc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc6e:	8b9b      	ldrh	r3, [r3, #28]
 800dc70:	3314      	adds	r3, #20
 800dc72:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800dc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800dc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800dc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc88:	3308      	adds	r3, #8
 800dc8a:	2214      	movs	r2, #20
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc90:	f000 fb46 	bl	800e320 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800dc94:	8a3b      	ldrh	r3, [r7, #16]
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7f6 f9c4 	bl	8004024 <lwip_htons>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	461a      	mov	r2, r3
 800dca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800dca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca6:	2200      	movs	r2, #0
 800dca8:	719a      	strb	r2, [r3, #6]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800dcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	729a      	strb	r2, [r3, #10]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800dcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800dcbe:	e00d      	b.n	800dcdc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800dcc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800dcc6:	2114      	movs	r1, #20
 800dcc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dcca:	f7f7 fbd9 	bl	8005480 <pbuf_remove_header>
      pbuf_cat(p, r);
 800dcce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f7f7 fd1d 	bl	8005710 <pbuf_cat>
      r = iprh->next_pbuf;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800dcdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d1ee      	bne.n	800dcc0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800dce2:	4b31      	ldr	r3, [pc, #196]	; (800dda8 <ip4_reass+0x300>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d102      	bne.n	800dcf2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800dcec:	2300      	movs	r3, #0
 800dcee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dcf0:	e010      	b.n	800dd14 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dcf2:	4b2d      	ldr	r3, [pc, #180]	; (800dda8 <ip4_reass+0x300>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dcf8:	e007      	b.n	800dd0a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800dcfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d006      	beq.n	800dd12 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d1f4      	bne.n	800dcfa <ip4_reass+0x252>
 800dd10:	e000      	b.n	800dd14 <ip4_reass+0x26c>
          break;
 800dd12:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800dd14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd18:	f7ff fd2e 	bl	800d778 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f7f7 fcbd 	bl	800569c <pbuf_clen>
 800dd22:	4603      	mov	r3, r0
 800dd24:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800dd26:	4b1f      	ldr	r3, [pc, #124]	; (800dda4 <ip4_reass+0x2fc>)
 800dd28:	881b      	ldrh	r3, [r3, #0]
 800dd2a:	8c3a      	ldrh	r2, [r7, #32]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d906      	bls.n	800dd3e <ip4_reass+0x296>
 800dd30:	4b1e      	ldr	r3, [pc, #120]	; (800ddac <ip4_reass+0x304>)
 800dd32:	f240 229b 	movw	r2, #667	; 0x29b
 800dd36:	491e      	ldr	r1, [pc, #120]	; (800ddb0 <ip4_reass+0x308>)
 800dd38:	481e      	ldr	r0, [pc, #120]	; (800ddb4 <ip4_reass+0x30c>)
 800dd3a:	f000 fb21 	bl	800e380 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800dd3e:	4b19      	ldr	r3, [pc, #100]	; (800dda4 <ip4_reass+0x2fc>)
 800dd40:	881a      	ldrh	r2, [r3, #0]
 800dd42:	8c3b      	ldrh	r3, [r7, #32]
 800dd44:	1ad3      	subs	r3, r2, r3
 800dd46:	b29a      	uxth	r2, r3
 800dd48:	4b16      	ldr	r3, [pc, #88]	; (800dda4 <ip4_reass+0x2fc>)
 800dd4a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	e03c      	b.n	800ddca <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800dd50:	2300      	movs	r3, #0
 800dd52:	e03a      	b.n	800ddca <ip4_reass+0x322>
      goto nullreturn_ipr;
 800dd54:	bf00      	nop
 800dd56:	e000      	b.n	800dd5a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800dd58:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800dd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d106      	bne.n	800dd6e <ip4_reass+0x2c6>
 800dd60:	4b12      	ldr	r3, [pc, #72]	; (800ddac <ip4_reass+0x304>)
 800dd62:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800dd66:	4914      	ldr	r1, [pc, #80]	; (800ddb8 <ip4_reass+0x310>)
 800dd68:	4812      	ldr	r0, [pc, #72]	; (800ddb4 <ip4_reass+0x30c>)
 800dd6a:	f000 fb09 	bl	800e380 <iprintf>
  if (ipr->p == NULL) {
 800dd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d124      	bne.n	800ddc0 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800dd76:	4b0c      	ldr	r3, [pc, #48]	; (800dda8 <ip4_reass+0x300>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d006      	beq.n	800dd8e <ip4_reass+0x2e6>
 800dd80:	4b0a      	ldr	r3, [pc, #40]	; (800ddac <ip4_reass+0x304>)
 800dd82:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dd86:	490d      	ldr	r1, [pc, #52]	; (800ddbc <ip4_reass+0x314>)
 800dd88:	480a      	ldr	r0, [pc, #40]	; (800ddb4 <ip4_reass+0x30c>)
 800dd8a:	f000 faf9 	bl	800e380 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800dd8e:	2100      	movs	r1, #0
 800dd90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd92:	f7ff fcf1 	bl	800d778 <ip_reass_dequeue_datagram>
 800dd96:	e014      	b.n	800ddc2 <ip4_reass+0x31a>
    goto nullreturn;
 800dd98:	bf00      	nop
 800dd9a:	e012      	b.n	800ddc2 <ip4_reass+0x31a>
    goto nullreturn;
 800dd9c:	bf00      	nop
 800dd9e:	e010      	b.n	800ddc2 <ip4_reass+0x31a>
      goto nullreturn;
 800dda0:	bf00      	nop
 800dda2:	e00e      	b.n	800ddc2 <ip4_reass+0x31a>
 800dda4:	20000214 	.word	0x20000214
 800dda8:	20000210 	.word	0x20000210
 800ddac:	08011e60 	.word	0x08011e60
 800ddb0:	08011fd0 	.word	0x08011fd0
 800ddb4:	08011ea8 	.word	0x08011ea8
 800ddb8:	08011fec 	.word	0x08011fec
 800ddbc:	08011ff8 	.word	0x08011ff8
  }

nullreturn:
 800ddc0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f7f7 fbe2 	bl	800558c <pbuf_free>
  return NULL;
 800ddc8:	2300      	movs	r3, #0
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3738      	adds	r7, #56	; 0x38
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop

0800ddd4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ddd8:	2005      	movs	r0, #5
 800ddda:	f7f6 fd79 	bl	80048d0 <memp_malloc>
 800ddde:	4603      	mov	r3, r0
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d106      	bne.n	800de00 <ip_frag_free_pbuf_custom_ref+0x1c>
 800ddf2:	4b07      	ldr	r3, [pc, #28]	; (800de10 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ddf4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800ddf8:	4906      	ldr	r1, [pc, #24]	; (800de14 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ddfa:	4807      	ldr	r0, [pc, #28]	; (800de18 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ddfc:	f000 fac0 	bl	800e380 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800de00:	6879      	ldr	r1, [r7, #4]
 800de02:	2005      	movs	r0, #5
 800de04:	f7f6 fdb0 	bl	8004968 <memp_free>
}
 800de08:	bf00      	nop
 800de0a:	3708      	adds	r7, #8
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	08011e60 	.word	0x08011e60
 800de14:	08012018 	.word	0x08012018
 800de18:	08011ea8 	.word	0x08011ea8

0800de1c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d106      	bne.n	800de3c <ipfrag_free_pbuf_custom+0x20>
 800de2e:	4b11      	ldr	r3, [pc, #68]	; (800de74 <ipfrag_free_pbuf_custom+0x58>)
 800de30:	f240 22ce 	movw	r2, #718	; 0x2ce
 800de34:	4910      	ldr	r1, [pc, #64]	; (800de78 <ipfrag_free_pbuf_custom+0x5c>)
 800de36:	4811      	ldr	r0, [pc, #68]	; (800de7c <ipfrag_free_pbuf_custom+0x60>)
 800de38:	f000 faa2 	bl	800e380 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800de3c:	68fa      	ldr	r2, [r7, #12]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	429a      	cmp	r2, r3
 800de42:	d006      	beq.n	800de52 <ipfrag_free_pbuf_custom+0x36>
 800de44:	4b0b      	ldr	r3, [pc, #44]	; (800de74 <ipfrag_free_pbuf_custom+0x58>)
 800de46:	f240 22cf 	movw	r2, #719	; 0x2cf
 800de4a:	490d      	ldr	r1, [pc, #52]	; (800de80 <ipfrag_free_pbuf_custom+0x64>)
 800de4c:	480b      	ldr	r0, [pc, #44]	; (800de7c <ipfrag_free_pbuf_custom+0x60>)
 800de4e:	f000 fa97 	bl	800e380 <iprintf>
  if (pcr->original != NULL) {
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	695b      	ldr	r3, [r3, #20]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d004      	beq.n	800de64 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	695b      	ldr	r3, [r3, #20]
 800de5e:	4618      	mov	r0, r3
 800de60:	f7f7 fb94 	bl	800558c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800de64:	68f8      	ldr	r0, [r7, #12]
 800de66:	f7ff ffbd 	bl	800dde4 <ip_frag_free_pbuf_custom_ref>
}
 800de6a:	bf00      	nop
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	08011e60 	.word	0x08011e60
 800de78:	08012024 	.word	0x08012024
 800de7c:	08011ea8 	.word	0x08011ea8
 800de80:	08012030 	.word	0x08012030

0800de84 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b094      	sub	sp, #80	; 0x50
 800de88:	af02      	add	r7, sp, #8
 800de8a:	60f8      	str	r0, [r7, #12]
 800de8c:	60b9      	str	r1, [r7, #8]
 800de8e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800de90:	2300      	movs	r3, #0
 800de92:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800de9a:	3b14      	subs	r3, #20
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	da00      	bge.n	800dea2 <ip4_frag+0x1e>
 800dea0:	3307      	adds	r3, #7
 800dea2:	10db      	asrs	r3, r3, #3
 800dea4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800dea6:	2314      	movs	r3, #20
 800dea8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800deb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deb2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800deb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	f003 030f 	and.w	r3, r3, #15
 800debc:	b2db      	uxtb	r3, r3
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	2b14      	cmp	r3, #20
 800dec4:	d002      	beq.n	800decc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800dec6:	f06f 0305 	mvn.w	r3, #5
 800deca:	e110      	b.n	800e0ee <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	895b      	ldrh	r3, [r3, #10]
 800ded0:	2b13      	cmp	r3, #19
 800ded2:	d809      	bhi.n	800dee8 <ip4_frag+0x64>
 800ded4:	4b88      	ldr	r3, [pc, #544]	; (800e0f8 <ip4_frag+0x274>)
 800ded6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800deda:	4988      	ldr	r1, [pc, #544]	; (800e0fc <ip4_frag+0x278>)
 800dedc:	4888      	ldr	r0, [pc, #544]	; (800e100 <ip4_frag+0x27c>)
 800dede:	f000 fa4f 	bl	800e380 <iprintf>
 800dee2:	f06f 0305 	mvn.w	r3, #5
 800dee6:	e102      	b.n	800e0ee <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800dee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deea:	88db      	ldrh	r3, [r3, #6]
 800deec:	b29b      	uxth	r3, r3
 800deee:	4618      	mov	r0, r3
 800def0:	f7f6 f898 	bl	8004024 <lwip_htons>
 800def4:	4603      	mov	r3, r0
 800def6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800def8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800defa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800defe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800df02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800df04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df08:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	891b      	ldrh	r3, [r3, #8]
 800df0e:	3b14      	subs	r3, #20
 800df10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800df14:	e0e1      	b.n	800e0da <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800df16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800df18:	00db      	lsls	r3, r3, #3
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df20:	4293      	cmp	r3, r2
 800df22:	bf28      	it	cs
 800df24:	4613      	movcs	r3, r2
 800df26:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800df28:	f44f 7220 	mov.w	r2, #640	; 0x280
 800df2c:	2114      	movs	r1, #20
 800df2e:	200e      	movs	r0, #14
 800df30:	f7f7 f848 	bl	8004fc4 <pbuf_alloc>
 800df34:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800df36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df38:	2b00      	cmp	r3, #0
 800df3a:	f000 80d5 	beq.w	800e0e8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800df3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df40:	895b      	ldrh	r3, [r3, #10]
 800df42:	2b13      	cmp	r3, #19
 800df44:	d806      	bhi.n	800df54 <ip4_frag+0xd0>
 800df46:	4b6c      	ldr	r3, [pc, #432]	; (800e0f8 <ip4_frag+0x274>)
 800df48:	f44f 7249 	mov.w	r2, #804	; 0x324
 800df4c:	496d      	ldr	r1, [pc, #436]	; (800e104 <ip4_frag+0x280>)
 800df4e:	486c      	ldr	r0, [pc, #432]	; (800e100 <ip4_frag+0x27c>)
 800df50:	f000 fa16 	bl	800e380 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800df54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	2214      	movs	r2, #20
 800df5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800df5c:	4618      	mov	r0, r3
 800df5e:	f000 f9df 	bl	800e320 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800df62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800df68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800df6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800df6e:	e064      	b.n	800e03a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	895a      	ldrh	r2, [r3, #10]
 800df74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800df76:	1ad3      	subs	r3, r2, r3
 800df78:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	895b      	ldrh	r3, [r3, #10]
 800df7e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800df80:	429a      	cmp	r2, r3
 800df82:	d906      	bls.n	800df92 <ip4_frag+0x10e>
 800df84:	4b5c      	ldr	r3, [pc, #368]	; (800e0f8 <ip4_frag+0x274>)
 800df86:	f240 322d 	movw	r2, #813	; 0x32d
 800df8a:	495f      	ldr	r1, [pc, #380]	; (800e108 <ip4_frag+0x284>)
 800df8c:	485c      	ldr	r0, [pc, #368]	; (800e100 <ip4_frag+0x27c>)
 800df8e:	f000 f9f7 	bl	800e380 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800df92:	8bfa      	ldrh	r2, [r7, #30]
 800df94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800df98:	4293      	cmp	r3, r2
 800df9a:	bf28      	it	cs
 800df9c:	4613      	movcs	r3, r2
 800df9e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800dfa2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d105      	bne.n	800dfb6 <ip4_frag+0x132>
        poff = 0;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	60fb      	str	r3, [r7, #12]
        continue;
 800dfb4:	e041      	b.n	800e03a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800dfb6:	f7ff ff0d 	bl	800ddd4 <ip_frag_alloc_pbuf_custom_ref>
 800dfba:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800dfbc:	69bb      	ldr	r3, [r7, #24]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d103      	bne.n	800dfca <ip4_frag+0x146>
        pbuf_free(rambuf);
 800dfc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfc4:	f7f7 fae2 	bl	800558c <pbuf_free>
        goto memerr;
 800dfc8:	e08f      	b.n	800e0ea <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dfca:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dfd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dfd2:	4413      	add	r3, r2
 800dfd4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800dfd8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800dfdc:	9201      	str	r2, [sp, #4]
 800dfde:	9300      	str	r3, [sp, #0]
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	2241      	movs	r2, #65	; 0x41
 800dfe4:	2000      	movs	r0, #0
 800dfe6:	f7f7 f917 	bl	8005218 <pbuf_alloced_custom>
 800dfea:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d106      	bne.n	800e000 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800dff2:	69b8      	ldr	r0, [r7, #24]
 800dff4:	f7ff fef6 	bl	800dde4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800dff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dffa:	f7f7 fac7 	bl	800558c <pbuf_free>
        goto memerr;
 800dffe:	e074      	b.n	800e0ea <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e000:	68f8      	ldr	r0, [r7, #12]
 800e002:	f7f7 fb63 	bl	80056cc <pbuf_ref>
      pcr->original = p;
 800e006:	69bb      	ldr	r3, [r7, #24]
 800e008:	68fa      	ldr	r2, [r7, #12]
 800e00a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e00c:	69bb      	ldr	r3, [r7, #24]
 800e00e:	4a3f      	ldr	r2, [pc, #252]	; (800e10c <ip4_frag+0x288>)
 800e010:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e012:	6979      	ldr	r1, [r7, #20]
 800e014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e016:	f7f7 fb7b 	bl	8005710 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e01a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e01e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e022:	1ad3      	subs	r3, r2, r3
 800e024:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e028:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d004      	beq.n	800e03a <ip4_frag+0x1b6>
        poff = 0;
 800e030:	2300      	movs	r3, #0
 800e032:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e03a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d196      	bne.n	800df70 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e042:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e044:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e048:	4413      	add	r3, r2
 800e04a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e050:	f1a3 0213 	sub.w	r2, r3, #19
 800e054:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e058:	429a      	cmp	r2, r3
 800e05a:	bfcc      	ite	gt
 800e05c:	2301      	movgt	r3, #1
 800e05e:	2300      	movle	r3, #0
 800e060:	b2db      	uxtb	r3, r3
 800e062:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e064:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e06c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e06e:	6a3b      	ldr	r3, [r7, #32]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d002      	beq.n	800e07a <ip4_frag+0x1f6>
 800e074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e076:	2b00      	cmp	r3, #0
 800e078:	d003      	beq.n	800e082 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e07a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e07c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e080:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e082:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e084:	4618      	mov	r0, r3
 800e086:	f7f5 ffcd 	bl	8004024 <lwip_htons>
 800e08a:	4603      	mov	r3, r0
 800e08c:	461a      	mov	r2, r3
 800e08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e090:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e092:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e094:	3314      	adds	r3, #20
 800e096:	b29b      	uxth	r3, r3
 800e098:	4618      	mov	r0, r3
 800e09a:	f7f5 ffc3 	bl	8004024 <lwip_htons>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	729a      	strb	r2, [r3, #10]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	695b      	ldr	r3, [r3, #20]
 800e0b4:	687a      	ldr	r2, [r7, #4]
 800e0b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0b8:	68b8      	ldr	r0, [r7, #8]
 800e0ba:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e0bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0be:	f7f7 fa65 	bl	800558c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e0c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e0c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e0c8:	1ad3      	subs	r3, r2, r3
 800e0ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e0ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e0d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e0d4:	4413      	add	r3, r2
 800e0d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e0da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	f47f af19 	bne.w	800df16 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	e002      	b.n	800e0ee <ip4_frag+0x26a>
      goto memerr;
 800e0e8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e0ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3748      	adds	r7, #72	; 0x48
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	08011e60 	.word	0x08011e60
 800e0fc:	0801203c 	.word	0x0801203c
 800e100:	08011ea8 	.word	0x08011ea8
 800e104:	08012058 	.word	0x08012058
 800e108:	08012078 	.word	0x08012078
 800e10c:	0800de1d 	.word	0x0800de1d

0800e110 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b086      	sub	sp, #24
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e11a:	230e      	movs	r3, #14
 800e11c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	895b      	ldrh	r3, [r3, #10]
 800e122:	2b0e      	cmp	r3, #14
 800e124:	d96e      	bls.n	800e204 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	7bdb      	ldrb	r3, [r3, #15]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d106      	bne.n	800e13c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e134:	3301      	adds	r3, #1
 800e136:	b2da      	uxtb	r2, r3
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	7b1a      	ldrb	r2, [r3, #12]
 800e146:	7b5b      	ldrb	r3, [r3, #13]
 800e148:	021b      	lsls	r3, r3, #8
 800e14a:	4313      	orrs	r3, r2
 800e14c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	f003 0301 	and.w	r3, r3, #1
 800e156:	2b00      	cmp	r3, #0
 800e158:	d023      	beq.n	800e1a2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	2b01      	cmp	r3, #1
 800e160:	d10f      	bne.n	800e182 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	785b      	ldrb	r3, [r3, #1]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d11b      	bne.n	800e1a2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e16e:	2b5e      	cmp	r3, #94	; 0x5e
 800e170:	d117      	bne.n	800e1a2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	7b5b      	ldrb	r3, [r3, #13]
 800e176:	f043 0310 	orr.w	r3, r3, #16
 800e17a:	b2da      	uxtb	r2, r3
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	735a      	strb	r2, [r3, #13]
 800e180:	e00f      	b.n	800e1a2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	2206      	movs	r2, #6
 800e186:	4928      	ldr	r1, [pc, #160]	; (800e228 <ethernet_input+0x118>)
 800e188:	4618      	mov	r0, r3
 800e18a:	f000 f8bb 	bl	800e304 <memcmp>
 800e18e:	4603      	mov	r3, r0
 800e190:	2b00      	cmp	r3, #0
 800e192:	d106      	bne.n	800e1a2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	7b5b      	ldrb	r3, [r3, #13]
 800e198:	f043 0308 	orr.w	r3, r3, #8
 800e19c:	b2da      	uxtb	r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e1a2:	89fb      	ldrh	r3, [r7, #14]
 800e1a4:	2b08      	cmp	r3, #8
 800e1a6:	d003      	beq.n	800e1b0 <ethernet_input+0xa0>
 800e1a8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e1ac:	d014      	beq.n	800e1d8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e1ae:	e032      	b.n	800e216 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e1b6:	f003 0308 	and.w	r3, r3, #8
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d024      	beq.n	800e208 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e1be:	8afb      	ldrh	r3, [r7, #22]
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f7f7 f95c 	bl	8005480 <pbuf_remove_header>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d11e      	bne.n	800e20c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e1ce:	6839      	ldr	r1, [r7, #0]
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f7fe fe95 	bl	800cf00 <ip4_input>
      break;
 800e1d6:	e013      	b.n	800e200 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e1de:	f003 0308 	and.w	r3, r3, #8
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d014      	beq.n	800e210 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e1e6:	8afb      	ldrh	r3, [r7, #22]
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f7f7 f948 	bl	8005480 <pbuf_remove_header>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d10e      	bne.n	800e214 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e1f6:	6839      	ldr	r1, [r7, #0]
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f7fe f835 	bl	800c268 <etharp_input>
      break;
 800e1fe:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e200:	2300      	movs	r3, #0
 800e202:	e00c      	b.n	800e21e <ethernet_input+0x10e>
    goto free_and_return;
 800e204:	bf00      	nop
 800e206:	e006      	b.n	800e216 <ethernet_input+0x106>
        goto free_and_return;
 800e208:	bf00      	nop
 800e20a:	e004      	b.n	800e216 <ethernet_input+0x106>
        goto free_and_return;
 800e20c:	bf00      	nop
 800e20e:	e002      	b.n	800e216 <ethernet_input+0x106>
        goto free_and_return;
 800e210:	bf00      	nop
 800e212:	e000      	b.n	800e216 <ethernet_input+0x106>
        goto free_and_return;
 800e214:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f7f7 f9b8 	bl	800558c <pbuf_free>
  return ERR_OK;
 800e21c:	2300      	movs	r3, #0
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3718      	adds	r7, #24
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	08012208 	.word	0x08012208

0800e22c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b086      	sub	sp, #24
 800e230:	af00      	add	r7, sp, #0
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	60b9      	str	r1, [r7, #8]
 800e236:	607a      	str	r2, [r7, #4]
 800e238:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e23a:	8c3b      	ldrh	r3, [r7, #32]
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7f5 fef1 	bl	8004024 <lwip_htons>
 800e242:	4603      	mov	r3, r0
 800e244:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e246:	210e      	movs	r1, #14
 800e248:	68b8      	ldr	r0, [r7, #8]
 800e24a:	f7f7 f909 	bl	8005460 <pbuf_add_header>
 800e24e:	4603      	mov	r3, r0
 800e250:	2b00      	cmp	r3, #0
 800e252:	d125      	bne.n	800e2a0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	8afa      	ldrh	r2, [r7, #22]
 800e25e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	2206      	movs	r2, #6
 800e264:	6839      	ldr	r1, [r7, #0]
 800e266:	4618      	mov	r0, r3
 800e268:	f000 f85a 	bl	800e320 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	3306      	adds	r3, #6
 800e270:	2206      	movs	r2, #6
 800e272:	6879      	ldr	r1, [r7, #4]
 800e274:	4618      	mov	r0, r3
 800e276:	f000 f853 	bl	800e320 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e280:	2b06      	cmp	r3, #6
 800e282:	d006      	beq.n	800e292 <ethernet_output+0x66>
 800e284:	4b0a      	ldr	r3, [pc, #40]	; (800e2b0 <ethernet_output+0x84>)
 800e286:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e28a:	490a      	ldr	r1, [pc, #40]	; (800e2b4 <ethernet_output+0x88>)
 800e28c:	480a      	ldr	r0, [pc, #40]	; (800e2b8 <ethernet_output+0x8c>)
 800e28e:	f000 f877 	bl	800e380 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	699b      	ldr	r3, [r3, #24]
 800e296:	68b9      	ldr	r1, [r7, #8]
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	4798      	blx	r3
 800e29c:	4603      	mov	r3, r0
 800e29e:	e002      	b.n	800e2a6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e2a0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e2a2:	f06f 0301 	mvn.w	r3, #1
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3718      	adds	r7, #24
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
 800e2ae:	bf00      	nop
 800e2b0:	08012088 	.word	0x08012088
 800e2b4:	080120c0 	.word	0x080120c0
 800e2b8:	080120f4 	.word	0x080120f4

0800e2bc <__libc_init_array>:
 800e2bc:	b570      	push	{r4, r5, r6, lr}
 800e2be:	4d0d      	ldr	r5, [pc, #52]	; (800e2f4 <__libc_init_array+0x38>)
 800e2c0:	4c0d      	ldr	r4, [pc, #52]	; (800e2f8 <__libc_init_array+0x3c>)
 800e2c2:	1b64      	subs	r4, r4, r5
 800e2c4:	10a4      	asrs	r4, r4, #2
 800e2c6:	2600      	movs	r6, #0
 800e2c8:	42a6      	cmp	r6, r4
 800e2ca:	d109      	bne.n	800e2e0 <__libc_init_array+0x24>
 800e2cc:	4d0b      	ldr	r5, [pc, #44]	; (800e2fc <__libc_init_array+0x40>)
 800e2ce:	4c0c      	ldr	r4, [pc, #48]	; (800e300 <__libc_init_array+0x44>)
 800e2d0:	f001 fa1a 	bl	800f708 <_init>
 800e2d4:	1b64      	subs	r4, r4, r5
 800e2d6:	10a4      	asrs	r4, r4, #2
 800e2d8:	2600      	movs	r6, #0
 800e2da:	42a6      	cmp	r6, r4
 800e2dc:	d105      	bne.n	800e2ea <__libc_init_array+0x2e>
 800e2de:	bd70      	pop	{r4, r5, r6, pc}
 800e2e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2e4:	4798      	blx	r3
 800e2e6:	3601      	adds	r6, #1
 800e2e8:	e7ee      	b.n	800e2c8 <__libc_init_array+0xc>
 800e2ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2ee:	4798      	blx	r3
 800e2f0:	3601      	adds	r6, #1
 800e2f2:	e7f2      	b.n	800e2da <__libc_init_array+0x1e>
 800e2f4:	0801236c 	.word	0x0801236c
 800e2f8:	0801236c 	.word	0x0801236c
 800e2fc:	0801236c 	.word	0x0801236c
 800e300:	08012370 	.word	0x08012370

0800e304 <memcmp>:
 800e304:	b530      	push	{r4, r5, lr}
 800e306:	3901      	subs	r1, #1
 800e308:	2400      	movs	r4, #0
 800e30a:	42a2      	cmp	r2, r4
 800e30c:	d101      	bne.n	800e312 <memcmp+0xe>
 800e30e:	2000      	movs	r0, #0
 800e310:	e005      	b.n	800e31e <memcmp+0x1a>
 800e312:	5d03      	ldrb	r3, [r0, r4]
 800e314:	3401      	adds	r4, #1
 800e316:	5d0d      	ldrb	r5, [r1, r4]
 800e318:	42ab      	cmp	r3, r5
 800e31a:	d0f6      	beq.n	800e30a <memcmp+0x6>
 800e31c:	1b58      	subs	r0, r3, r5
 800e31e:	bd30      	pop	{r4, r5, pc}

0800e320 <memcpy>:
 800e320:	440a      	add	r2, r1
 800e322:	4291      	cmp	r1, r2
 800e324:	f100 33ff 	add.w	r3, r0, #4294967295
 800e328:	d100      	bne.n	800e32c <memcpy+0xc>
 800e32a:	4770      	bx	lr
 800e32c:	b510      	push	{r4, lr}
 800e32e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e332:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e336:	4291      	cmp	r1, r2
 800e338:	d1f9      	bne.n	800e32e <memcpy+0xe>
 800e33a:	bd10      	pop	{r4, pc}

0800e33c <memmove>:
 800e33c:	4288      	cmp	r0, r1
 800e33e:	b510      	push	{r4, lr}
 800e340:	eb01 0402 	add.w	r4, r1, r2
 800e344:	d902      	bls.n	800e34c <memmove+0x10>
 800e346:	4284      	cmp	r4, r0
 800e348:	4623      	mov	r3, r4
 800e34a:	d807      	bhi.n	800e35c <memmove+0x20>
 800e34c:	1e43      	subs	r3, r0, #1
 800e34e:	42a1      	cmp	r1, r4
 800e350:	d008      	beq.n	800e364 <memmove+0x28>
 800e352:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e356:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e35a:	e7f8      	b.n	800e34e <memmove+0x12>
 800e35c:	4402      	add	r2, r0
 800e35e:	4601      	mov	r1, r0
 800e360:	428a      	cmp	r2, r1
 800e362:	d100      	bne.n	800e366 <memmove+0x2a>
 800e364:	bd10      	pop	{r4, pc}
 800e366:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e36a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e36e:	e7f7      	b.n	800e360 <memmove+0x24>

0800e370 <memset>:
 800e370:	4402      	add	r2, r0
 800e372:	4603      	mov	r3, r0
 800e374:	4293      	cmp	r3, r2
 800e376:	d100      	bne.n	800e37a <memset+0xa>
 800e378:	4770      	bx	lr
 800e37a:	f803 1b01 	strb.w	r1, [r3], #1
 800e37e:	e7f9      	b.n	800e374 <memset+0x4>

0800e380 <iprintf>:
 800e380:	b40f      	push	{r0, r1, r2, r3}
 800e382:	4b0a      	ldr	r3, [pc, #40]	; (800e3ac <iprintf+0x2c>)
 800e384:	b513      	push	{r0, r1, r4, lr}
 800e386:	681c      	ldr	r4, [r3, #0]
 800e388:	b124      	cbz	r4, 800e394 <iprintf+0x14>
 800e38a:	69a3      	ldr	r3, [r4, #24]
 800e38c:	b913      	cbnz	r3, 800e394 <iprintf+0x14>
 800e38e:	4620      	mov	r0, r4
 800e390:	f000 f8e4 	bl	800e55c <__sinit>
 800e394:	ab05      	add	r3, sp, #20
 800e396:	9a04      	ldr	r2, [sp, #16]
 800e398:	68a1      	ldr	r1, [r4, #8]
 800e39a:	9301      	str	r3, [sp, #4]
 800e39c:	4620      	mov	r0, r4
 800e39e:	f000 fbc7 	bl	800eb30 <_vfiprintf_r>
 800e3a2:	b002      	add	sp, #8
 800e3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3a8:	b004      	add	sp, #16
 800e3aa:	4770      	bx	lr
 800e3ac:	20000014 	.word	0x20000014

0800e3b0 <rand>:
 800e3b0:	4b17      	ldr	r3, [pc, #92]	; (800e410 <rand+0x60>)
 800e3b2:	b510      	push	{r4, lr}
 800e3b4:	681c      	ldr	r4, [r3, #0]
 800e3b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e3b8:	b9b3      	cbnz	r3, 800e3e8 <rand+0x38>
 800e3ba:	2018      	movs	r0, #24
 800e3bc:	f000 f980 	bl	800e6c0 <malloc>
 800e3c0:	63a0      	str	r0, [r4, #56]	; 0x38
 800e3c2:	b928      	cbnz	r0, 800e3d0 <rand+0x20>
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	4b13      	ldr	r3, [pc, #76]	; (800e414 <rand+0x64>)
 800e3c8:	4813      	ldr	r0, [pc, #76]	; (800e418 <rand+0x68>)
 800e3ca:	214e      	movs	r1, #78	; 0x4e
 800e3cc:	f000 f850 	bl	800e470 <__assert_func>
 800e3d0:	4a12      	ldr	r2, [pc, #72]	; (800e41c <rand+0x6c>)
 800e3d2:	4b13      	ldr	r3, [pc, #76]	; (800e420 <rand+0x70>)
 800e3d4:	e9c0 2300 	strd	r2, r3, [r0]
 800e3d8:	4b12      	ldr	r3, [pc, #72]	; (800e424 <rand+0x74>)
 800e3da:	6083      	str	r3, [r0, #8]
 800e3dc:	230b      	movs	r3, #11
 800e3de:	8183      	strh	r3, [r0, #12]
 800e3e0:	2201      	movs	r2, #1
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e3e8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e3ea:	480f      	ldr	r0, [pc, #60]	; (800e428 <rand+0x78>)
 800e3ec:	690a      	ldr	r2, [r1, #16]
 800e3ee:	694b      	ldr	r3, [r1, #20]
 800e3f0:	4c0e      	ldr	r4, [pc, #56]	; (800e42c <rand+0x7c>)
 800e3f2:	4350      	muls	r0, r2
 800e3f4:	fb04 0003 	mla	r0, r4, r3, r0
 800e3f8:	fba2 3404 	umull	r3, r4, r2, r4
 800e3fc:	1c5a      	adds	r2, r3, #1
 800e3fe:	4404      	add	r4, r0
 800e400:	f144 0000 	adc.w	r0, r4, #0
 800e404:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800e408:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e40c:	bd10      	pop	{r4, pc}
 800e40e:	bf00      	nop
 800e410:	20000014 	.word	0x20000014
 800e414:	0801221c 	.word	0x0801221c
 800e418:	08012233 	.word	0x08012233
 800e41c:	abcd330e 	.word	0xabcd330e
 800e420:	e66d1234 	.word	0xe66d1234
 800e424:	0005deec 	.word	0x0005deec
 800e428:	5851f42d 	.word	0x5851f42d
 800e42c:	4c957f2d 	.word	0x4c957f2d

0800e430 <siprintf>:
 800e430:	b40e      	push	{r1, r2, r3}
 800e432:	b500      	push	{lr}
 800e434:	b09c      	sub	sp, #112	; 0x70
 800e436:	ab1d      	add	r3, sp, #116	; 0x74
 800e438:	9002      	str	r0, [sp, #8]
 800e43a:	9006      	str	r0, [sp, #24]
 800e43c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e440:	4809      	ldr	r0, [pc, #36]	; (800e468 <siprintf+0x38>)
 800e442:	9107      	str	r1, [sp, #28]
 800e444:	9104      	str	r1, [sp, #16]
 800e446:	4909      	ldr	r1, [pc, #36]	; (800e46c <siprintf+0x3c>)
 800e448:	f853 2b04 	ldr.w	r2, [r3], #4
 800e44c:	9105      	str	r1, [sp, #20]
 800e44e:	6800      	ldr	r0, [r0, #0]
 800e450:	9301      	str	r3, [sp, #4]
 800e452:	a902      	add	r1, sp, #8
 800e454:	f000 fa42 	bl	800e8dc <_svfiprintf_r>
 800e458:	9b02      	ldr	r3, [sp, #8]
 800e45a:	2200      	movs	r2, #0
 800e45c:	701a      	strb	r2, [r3, #0]
 800e45e:	b01c      	add	sp, #112	; 0x70
 800e460:	f85d eb04 	ldr.w	lr, [sp], #4
 800e464:	b003      	add	sp, #12
 800e466:	4770      	bx	lr
 800e468:	20000014 	.word	0x20000014
 800e46c:	ffff0208 	.word	0xffff0208

0800e470 <__assert_func>:
 800e470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e472:	4614      	mov	r4, r2
 800e474:	461a      	mov	r2, r3
 800e476:	4b09      	ldr	r3, [pc, #36]	; (800e49c <__assert_func+0x2c>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	4605      	mov	r5, r0
 800e47c:	68d8      	ldr	r0, [r3, #12]
 800e47e:	b14c      	cbz	r4, 800e494 <__assert_func+0x24>
 800e480:	4b07      	ldr	r3, [pc, #28]	; (800e4a0 <__assert_func+0x30>)
 800e482:	9100      	str	r1, [sp, #0]
 800e484:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e488:	4906      	ldr	r1, [pc, #24]	; (800e4a4 <__assert_func+0x34>)
 800e48a:	462b      	mov	r3, r5
 800e48c:	f000 f8e4 	bl	800e658 <fiprintf>
 800e490:	f000 ff38 	bl	800f304 <abort>
 800e494:	4b04      	ldr	r3, [pc, #16]	; (800e4a8 <__assert_func+0x38>)
 800e496:	461c      	mov	r4, r3
 800e498:	e7f3      	b.n	800e482 <__assert_func+0x12>
 800e49a:	bf00      	nop
 800e49c:	20000014 	.word	0x20000014
 800e4a0:	08012292 	.word	0x08012292
 800e4a4:	0801229f 	.word	0x0801229f
 800e4a8:	080122cd 	.word	0x080122cd

0800e4ac <std>:
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	b510      	push	{r4, lr}
 800e4b0:	4604      	mov	r4, r0
 800e4b2:	e9c0 3300 	strd	r3, r3, [r0]
 800e4b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e4ba:	6083      	str	r3, [r0, #8]
 800e4bc:	8181      	strh	r1, [r0, #12]
 800e4be:	6643      	str	r3, [r0, #100]	; 0x64
 800e4c0:	81c2      	strh	r2, [r0, #14]
 800e4c2:	6183      	str	r3, [r0, #24]
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	2208      	movs	r2, #8
 800e4c8:	305c      	adds	r0, #92	; 0x5c
 800e4ca:	f7ff ff51 	bl	800e370 <memset>
 800e4ce:	4b05      	ldr	r3, [pc, #20]	; (800e4e4 <std+0x38>)
 800e4d0:	6263      	str	r3, [r4, #36]	; 0x24
 800e4d2:	4b05      	ldr	r3, [pc, #20]	; (800e4e8 <std+0x3c>)
 800e4d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e4d6:	4b05      	ldr	r3, [pc, #20]	; (800e4ec <std+0x40>)
 800e4d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e4da:	4b05      	ldr	r3, [pc, #20]	; (800e4f0 <std+0x44>)
 800e4dc:	6224      	str	r4, [r4, #32]
 800e4de:	6323      	str	r3, [r4, #48]	; 0x30
 800e4e0:	bd10      	pop	{r4, pc}
 800e4e2:	bf00      	nop
 800e4e4:	0800f0d9 	.word	0x0800f0d9
 800e4e8:	0800f0fb 	.word	0x0800f0fb
 800e4ec:	0800f133 	.word	0x0800f133
 800e4f0:	0800f157 	.word	0x0800f157

0800e4f4 <_cleanup_r>:
 800e4f4:	4901      	ldr	r1, [pc, #4]	; (800e4fc <_cleanup_r+0x8>)
 800e4f6:	f000 b8c1 	b.w	800e67c <_fwalk_reent>
 800e4fa:	bf00      	nop
 800e4fc:	0800f441 	.word	0x0800f441

0800e500 <__sfmoreglue>:
 800e500:	b570      	push	{r4, r5, r6, lr}
 800e502:	1e4a      	subs	r2, r1, #1
 800e504:	2568      	movs	r5, #104	; 0x68
 800e506:	4355      	muls	r5, r2
 800e508:	460e      	mov	r6, r1
 800e50a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e50e:	f000 f92f 	bl	800e770 <_malloc_r>
 800e512:	4604      	mov	r4, r0
 800e514:	b140      	cbz	r0, 800e528 <__sfmoreglue+0x28>
 800e516:	2100      	movs	r1, #0
 800e518:	e9c0 1600 	strd	r1, r6, [r0]
 800e51c:	300c      	adds	r0, #12
 800e51e:	60a0      	str	r0, [r4, #8]
 800e520:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e524:	f7ff ff24 	bl	800e370 <memset>
 800e528:	4620      	mov	r0, r4
 800e52a:	bd70      	pop	{r4, r5, r6, pc}

0800e52c <__sfp_lock_acquire>:
 800e52c:	4801      	ldr	r0, [pc, #4]	; (800e534 <__sfp_lock_acquire+0x8>)
 800e52e:	f000 b8c5 	b.w	800e6bc <__retarget_lock_acquire_recursive>
 800e532:	bf00      	nop
 800e534:	20008b1c 	.word	0x20008b1c

0800e538 <__sfp_lock_release>:
 800e538:	4801      	ldr	r0, [pc, #4]	; (800e540 <__sfp_lock_release+0x8>)
 800e53a:	f000 b8c0 	b.w	800e6be <__retarget_lock_release_recursive>
 800e53e:	bf00      	nop
 800e540:	20008b1c 	.word	0x20008b1c

0800e544 <__sinit_lock_acquire>:
 800e544:	4801      	ldr	r0, [pc, #4]	; (800e54c <__sinit_lock_acquire+0x8>)
 800e546:	f000 b8b9 	b.w	800e6bc <__retarget_lock_acquire_recursive>
 800e54a:	bf00      	nop
 800e54c:	20008b17 	.word	0x20008b17

0800e550 <__sinit_lock_release>:
 800e550:	4801      	ldr	r0, [pc, #4]	; (800e558 <__sinit_lock_release+0x8>)
 800e552:	f000 b8b4 	b.w	800e6be <__retarget_lock_release_recursive>
 800e556:	bf00      	nop
 800e558:	20008b17 	.word	0x20008b17

0800e55c <__sinit>:
 800e55c:	b510      	push	{r4, lr}
 800e55e:	4604      	mov	r4, r0
 800e560:	f7ff fff0 	bl	800e544 <__sinit_lock_acquire>
 800e564:	69a3      	ldr	r3, [r4, #24]
 800e566:	b11b      	cbz	r3, 800e570 <__sinit+0x14>
 800e568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e56c:	f7ff bff0 	b.w	800e550 <__sinit_lock_release>
 800e570:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e574:	6523      	str	r3, [r4, #80]	; 0x50
 800e576:	4b13      	ldr	r3, [pc, #76]	; (800e5c4 <__sinit+0x68>)
 800e578:	4a13      	ldr	r2, [pc, #76]	; (800e5c8 <__sinit+0x6c>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e57e:	42a3      	cmp	r3, r4
 800e580:	bf04      	itt	eq
 800e582:	2301      	moveq	r3, #1
 800e584:	61a3      	streq	r3, [r4, #24]
 800e586:	4620      	mov	r0, r4
 800e588:	f000 f820 	bl	800e5cc <__sfp>
 800e58c:	6060      	str	r0, [r4, #4]
 800e58e:	4620      	mov	r0, r4
 800e590:	f000 f81c 	bl	800e5cc <__sfp>
 800e594:	60a0      	str	r0, [r4, #8]
 800e596:	4620      	mov	r0, r4
 800e598:	f000 f818 	bl	800e5cc <__sfp>
 800e59c:	2200      	movs	r2, #0
 800e59e:	60e0      	str	r0, [r4, #12]
 800e5a0:	2104      	movs	r1, #4
 800e5a2:	6860      	ldr	r0, [r4, #4]
 800e5a4:	f7ff ff82 	bl	800e4ac <std>
 800e5a8:	68a0      	ldr	r0, [r4, #8]
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	2109      	movs	r1, #9
 800e5ae:	f7ff ff7d 	bl	800e4ac <std>
 800e5b2:	68e0      	ldr	r0, [r4, #12]
 800e5b4:	2202      	movs	r2, #2
 800e5b6:	2112      	movs	r1, #18
 800e5b8:	f7ff ff78 	bl	800e4ac <std>
 800e5bc:	2301      	movs	r3, #1
 800e5be:	61a3      	str	r3, [r4, #24]
 800e5c0:	e7d2      	b.n	800e568 <__sinit+0xc>
 800e5c2:	bf00      	nop
 800e5c4:	08012218 	.word	0x08012218
 800e5c8:	0800e4f5 	.word	0x0800e4f5

0800e5cc <__sfp>:
 800e5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ce:	4607      	mov	r7, r0
 800e5d0:	f7ff ffac 	bl	800e52c <__sfp_lock_acquire>
 800e5d4:	4b1e      	ldr	r3, [pc, #120]	; (800e650 <__sfp+0x84>)
 800e5d6:	681e      	ldr	r6, [r3, #0]
 800e5d8:	69b3      	ldr	r3, [r6, #24]
 800e5da:	b913      	cbnz	r3, 800e5e2 <__sfp+0x16>
 800e5dc:	4630      	mov	r0, r6
 800e5de:	f7ff ffbd 	bl	800e55c <__sinit>
 800e5e2:	3648      	adds	r6, #72	; 0x48
 800e5e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e5e8:	3b01      	subs	r3, #1
 800e5ea:	d503      	bpl.n	800e5f4 <__sfp+0x28>
 800e5ec:	6833      	ldr	r3, [r6, #0]
 800e5ee:	b30b      	cbz	r3, 800e634 <__sfp+0x68>
 800e5f0:	6836      	ldr	r6, [r6, #0]
 800e5f2:	e7f7      	b.n	800e5e4 <__sfp+0x18>
 800e5f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e5f8:	b9d5      	cbnz	r5, 800e630 <__sfp+0x64>
 800e5fa:	4b16      	ldr	r3, [pc, #88]	; (800e654 <__sfp+0x88>)
 800e5fc:	60e3      	str	r3, [r4, #12]
 800e5fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e602:	6665      	str	r5, [r4, #100]	; 0x64
 800e604:	f000 f859 	bl	800e6ba <__retarget_lock_init_recursive>
 800e608:	f7ff ff96 	bl	800e538 <__sfp_lock_release>
 800e60c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e610:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e614:	6025      	str	r5, [r4, #0]
 800e616:	61a5      	str	r5, [r4, #24]
 800e618:	2208      	movs	r2, #8
 800e61a:	4629      	mov	r1, r5
 800e61c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e620:	f7ff fea6 	bl	800e370 <memset>
 800e624:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e628:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e62c:	4620      	mov	r0, r4
 800e62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e630:	3468      	adds	r4, #104	; 0x68
 800e632:	e7d9      	b.n	800e5e8 <__sfp+0x1c>
 800e634:	2104      	movs	r1, #4
 800e636:	4638      	mov	r0, r7
 800e638:	f7ff ff62 	bl	800e500 <__sfmoreglue>
 800e63c:	4604      	mov	r4, r0
 800e63e:	6030      	str	r0, [r6, #0]
 800e640:	2800      	cmp	r0, #0
 800e642:	d1d5      	bne.n	800e5f0 <__sfp+0x24>
 800e644:	f7ff ff78 	bl	800e538 <__sfp_lock_release>
 800e648:	230c      	movs	r3, #12
 800e64a:	603b      	str	r3, [r7, #0]
 800e64c:	e7ee      	b.n	800e62c <__sfp+0x60>
 800e64e:	bf00      	nop
 800e650:	08012218 	.word	0x08012218
 800e654:	ffff0001 	.word	0xffff0001

0800e658 <fiprintf>:
 800e658:	b40e      	push	{r1, r2, r3}
 800e65a:	b503      	push	{r0, r1, lr}
 800e65c:	4601      	mov	r1, r0
 800e65e:	ab03      	add	r3, sp, #12
 800e660:	4805      	ldr	r0, [pc, #20]	; (800e678 <fiprintf+0x20>)
 800e662:	f853 2b04 	ldr.w	r2, [r3], #4
 800e666:	6800      	ldr	r0, [r0, #0]
 800e668:	9301      	str	r3, [sp, #4]
 800e66a:	f000 fa61 	bl	800eb30 <_vfiprintf_r>
 800e66e:	b002      	add	sp, #8
 800e670:	f85d eb04 	ldr.w	lr, [sp], #4
 800e674:	b003      	add	sp, #12
 800e676:	4770      	bx	lr
 800e678:	20000014 	.word	0x20000014

0800e67c <_fwalk_reent>:
 800e67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e680:	4606      	mov	r6, r0
 800e682:	4688      	mov	r8, r1
 800e684:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e688:	2700      	movs	r7, #0
 800e68a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e68e:	f1b9 0901 	subs.w	r9, r9, #1
 800e692:	d505      	bpl.n	800e6a0 <_fwalk_reent+0x24>
 800e694:	6824      	ldr	r4, [r4, #0]
 800e696:	2c00      	cmp	r4, #0
 800e698:	d1f7      	bne.n	800e68a <_fwalk_reent+0xe>
 800e69a:	4638      	mov	r0, r7
 800e69c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6a0:	89ab      	ldrh	r3, [r5, #12]
 800e6a2:	2b01      	cmp	r3, #1
 800e6a4:	d907      	bls.n	800e6b6 <_fwalk_reent+0x3a>
 800e6a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	d003      	beq.n	800e6b6 <_fwalk_reent+0x3a>
 800e6ae:	4629      	mov	r1, r5
 800e6b0:	4630      	mov	r0, r6
 800e6b2:	47c0      	blx	r8
 800e6b4:	4307      	orrs	r7, r0
 800e6b6:	3568      	adds	r5, #104	; 0x68
 800e6b8:	e7e9      	b.n	800e68e <_fwalk_reent+0x12>

0800e6ba <__retarget_lock_init_recursive>:
 800e6ba:	4770      	bx	lr

0800e6bc <__retarget_lock_acquire_recursive>:
 800e6bc:	4770      	bx	lr

0800e6be <__retarget_lock_release_recursive>:
 800e6be:	4770      	bx	lr

0800e6c0 <malloc>:
 800e6c0:	4b02      	ldr	r3, [pc, #8]	; (800e6cc <malloc+0xc>)
 800e6c2:	4601      	mov	r1, r0
 800e6c4:	6818      	ldr	r0, [r3, #0]
 800e6c6:	f000 b853 	b.w	800e770 <_malloc_r>
 800e6ca:	bf00      	nop
 800e6cc:	20000014 	.word	0x20000014

0800e6d0 <_free_r>:
 800e6d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6d2:	2900      	cmp	r1, #0
 800e6d4:	d048      	beq.n	800e768 <_free_r+0x98>
 800e6d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6da:	9001      	str	r0, [sp, #4]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	f1a1 0404 	sub.w	r4, r1, #4
 800e6e2:	bfb8      	it	lt
 800e6e4:	18e4      	addlt	r4, r4, r3
 800e6e6:	f000 ff5d 	bl	800f5a4 <__malloc_lock>
 800e6ea:	4a20      	ldr	r2, [pc, #128]	; (800e76c <_free_r+0x9c>)
 800e6ec:	9801      	ldr	r0, [sp, #4]
 800e6ee:	6813      	ldr	r3, [r2, #0]
 800e6f0:	4615      	mov	r5, r2
 800e6f2:	b933      	cbnz	r3, 800e702 <_free_r+0x32>
 800e6f4:	6063      	str	r3, [r4, #4]
 800e6f6:	6014      	str	r4, [r2, #0]
 800e6f8:	b003      	add	sp, #12
 800e6fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6fe:	f000 bf57 	b.w	800f5b0 <__malloc_unlock>
 800e702:	42a3      	cmp	r3, r4
 800e704:	d90b      	bls.n	800e71e <_free_r+0x4e>
 800e706:	6821      	ldr	r1, [r4, #0]
 800e708:	1862      	adds	r2, r4, r1
 800e70a:	4293      	cmp	r3, r2
 800e70c:	bf04      	itt	eq
 800e70e:	681a      	ldreq	r2, [r3, #0]
 800e710:	685b      	ldreq	r3, [r3, #4]
 800e712:	6063      	str	r3, [r4, #4]
 800e714:	bf04      	itt	eq
 800e716:	1852      	addeq	r2, r2, r1
 800e718:	6022      	streq	r2, [r4, #0]
 800e71a:	602c      	str	r4, [r5, #0]
 800e71c:	e7ec      	b.n	800e6f8 <_free_r+0x28>
 800e71e:	461a      	mov	r2, r3
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	b10b      	cbz	r3, 800e728 <_free_r+0x58>
 800e724:	42a3      	cmp	r3, r4
 800e726:	d9fa      	bls.n	800e71e <_free_r+0x4e>
 800e728:	6811      	ldr	r1, [r2, #0]
 800e72a:	1855      	adds	r5, r2, r1
 800e72c:	42a5      	cmp	r5, r4
 800e72e:	d10b      	bne.n	800e748 <_free_r+0x78>
 800e730:	6824      	ldr	r4, [r4, #0]
 800e732:	4421      	add	r1, r4
 800e734:	1854      	adds	r4, r2, r1
 800e736:	42a3      	cmp	r3, r4
 800e738:	6011      	str	r1, [r2, #0]
 800e73a:	d1dd      	bne.n	800e6f8 <_free_r+0x28>
 800e73c:	681c      	ldr	r4, [r3, #0]
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	6053      	str	r3, [r2, #4]
 800e742:	4421      	add	r1, r4
 800e744:	6011      	str	r1, [r2, #0]
 800e746:	e7d7      	b.n	800e6f8 <_free_r+0x28>
 800e748:	d902      	bls.n	800e750 <_free_r+0x80>
 800e74a:	230c      	movs	r3, #12
 800e74c:	6003      	str	r3, [r0, #0]
 800e74e:	e7d3      	b.n	800e6f8 <_free_r+0x28>
 800e750:	6825      	ldr	r5, [r4, #0]
 800e752:	1961      	adds	r1, r4, r5
 800e754:	428b      	cmp	r3, r1
 800e756:	bf04      	itt	eq
 800e758:	6819      	ldreq	r1, [r3, #0]
 800e75a:	685b      	ldreq	r3, [r3, #4]
 800e75c:	6063      	str	r3, [r4, #4]
 800e75e:	bf04      	itt	eq
 800e760:	1949      	addeq	r1, r1, r5
 800e762:	6021      	streq	r1, [r4, #0]
 800e764:	6054      	str	r4, [r2, #4]
 800e766:	e7c7      	b.n	800e6f8 <_free_r+0x28>
 800e768:	b003      	add	sp, #12
 800e76a:	bd30      	pop	{r4, r5, pc}
 800e76c:	20000218 	.word	0x20000218

0800e770 <_malloc_r>:
 800e770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e772:	1ccd      	adds	r5, r1, #3
 800e774:	f025 0503 	bic.w	r5, r5, #3
 800e778:	3508      	adds	r5, #8
 800e77a:	2d0c      	cmp	r5, #12
 800e77c:	bf38      	it	cc
 800e77e:	250c      	movcc	r5, #12
 800e780:	2d00      	cmp	r5, #0
 800e782:	4606      	mov	r6, r0
 800e784:	db01      	blt.n	800e78a <_malloc_r+0x1a>
 800e786:	42a9      	cmp	r1, r5
 800e788:	d903      	bls.n	800e792 <_malloc_r+0x22>
 800e78a:	230c      	movs	r3, #12
 800e78c:	6033      	str	r3, [r6, #0]
 800e78e:	2000      	movs	r0, #0
 800e790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e792:	f000 ff07 	bl	800f5a4 <__malloc_lock>
 800e796:	4921      	ldr	r1, [pc, #132]	; (800e81c <_malloc_r+0xac>)
 800e798:	680a      	ldr	r2, [r1, #0]
 800e79a:	4614      	mov	r4, r2
 800e79c:	b99c      	cbnz	r4, 800e7c6 <_malloc_r+0x56>
 800e79e:	4f20      	ldr	r7, [pc, #128]	; (800e820 <_malloc_r+0xb0>)
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	b923      	cbnz	r3, 800e7ae <_malloc_r+0x3e>
 800e7a4:	4621      	mov	r1, r4
 800e7a6:	4630      	mov	r0, r6
 800e7a8:	f000 fc86 	bl	800f0b8 <_sbrk_r>
 800e7ac:	6038      	str	r0, [r7, #0]
 800e7ae:	4629      	mov	r1, r5
 800e7b0:	4630      	mov	r0, r6
 800e7b2:	f000 fc81 	bl	800f0b8 <_sbrk_r>
 800e7b6:	1c43      	adds	r3, r0, #1
 800e7b8:	d123      	bne.n	800e802 <_malloc_r+0x92>
 800e7ba:	230c      	movs	r3, #12
 800e7bc:	6033      	str	r3, [r6, #0]
 800e7be:	4630      	mov	r0, r6
 800e7c0:	f000 fef6 	bl	800f5b0 <__malloc_unlock>
 800e7c4:	e7e3      	b.n	800e78e <_malloc_r+0x1e>
 800e7c6:	6823      	ldr	r3, [r4, #0]
 800e7c8:	1b5b      	subs	r3, r3, r5
 800e7ca:	d417      	bmi.n	800e7fc <_malloc_r+0x8c>
 800e7cc:	2b0b      	cmp	r3, #11
 800e7ce:	d903      	bls.n	800e7d8 <_malloc_r+0x68>
 800e7d0:	6023      	str	r3, [r4, #0]
 800e7d2:	441c      	add	r4, r3
 800e7d4:	6025      	str	r5, [r4, #0]
 800e7d6:	e004      	b.n	800e7e2 <_malloc_r+0x72>
 800e7d8:	6863      	ldr	r3, [r4, #4]
 800e7da:	42a2      	cmp	r2, r4
 800e7dc:	bf0c      	ite	eq
 800e7de:	600b      	streq	r3, [r1, #0]
 800e7e0:	6053      	strne	r3, [r2, #4]
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	f000 fee4 	bl	800f5b0 <__malloc_unlock>
 800e7e8:	f104 000b 	add.w	r0, r4, #11
 800e7ec:	1d23      	adds	r3, r4, #4
 800e7ee:	f020 0007 	bic.w	r0, r0, #7
 800e7f2:	1ac2      	subs	r2, r0, r3
 800e7f4:	d0cc      	beq.n	800e790 <_malloc_r+0x20>
 800e7f6:	1a1b      	subs	r3, r3, r0
 800e7f8:	50a3      	str	r3, [r4, r2]
 800e7fa:	e7c9      	b.n	800e790 <_malloc_r+0x20>
 800e7fc:	4622      	mov	r2, r4
 800e7fe:	6864      	ldr	r4, [r4, #4]
 800e800:	e7cc      	b.n	800e79c <_malloc_r+0x2c>
 800e802:	1cc4      	adds	r4, r0, #3
 800e804:	f024 0403 	bic.w	r4, r4, #3
 800e808:	42a0      	cmp	r0, r4
 800e80a:	d0e3      	beq.n	800e7d4 <_malloc_r+0x64>
 800e80c:	1a21      	subs	r1, r4, r0
 800e80e:	4630      	mov	r0, r6
 800e810:	f000 fc52 	bl	800f0b8 <_sbrk_r>
 800e814:	3001      	adds	r0, #1
 800e816:	d1dd      	bne.n	800e7d4 <_malloc_r+0x64>
 800e818:	e7cf      	b.n	800e7ba <_malloc_r+0x4a>
 800e81a:	bf00      	nop
 800e81c:	20000218 	.word	0x20000218
 800e820:	2000021c 	.word	0x2000021c

0800e824 <__ssputs_r>:
 800e824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e828:	688e      	ldr	r6, [r1, #8]
 800e82a:	429e      	cmp	r6, r3
 800e82c:	4682      	mov	sl, r0
 800e82e:	460c      	mov	r4, r1
 800e830:	4690      	mov	r8, r2
 800e832:	461f      	mov	r7, r3
 800e834:	d838      	bhi.n	800e8a8 <__ssputs_r+0x84>
 800e836:	898a      	ldrh	r2, [r1, #12]
 800e838:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e83c:	d032      	beq.n	800e8a4 <__ssputs_r+0x80>
 800e83e:	6825      	ldr	r5, [r4, #0]
 800e840:	6909      	ldr	r1, [r1, #16]
 800e842:	eba5 0901 	sub.w	r9, r5, r1
 800e846:	6965      	ldr	r5, [r4, #20]
 800e848:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e84c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e850:	3301      	adds	r3, #1
 800e852:	444b      	add	r3, r9
 800e854:	106d      	asrs	r5, r5, #1
 800e856:	429d      	cmp	r5, r3
 800e858:	bf38      	it	cc
 800e85a:	461d      	movcc	r5, r3
 800e85c:	0553      	lsls	r3, r2, #21
 800e85e:	d531      	bpl.n	800e8c4 <__ssputs_r+0xa0>
 800e860:	4629      	mov	r1, r5
 800e862:	f7ff ff85 	bl	800e770 <_malloc_r>
 800e866:	4606      	mov	r6, r0
 800e868:	b950      	cbnz	r0, 800e880 <__ssputs_r+0x5c>
 800e86a:	230c      	movs	r3, #12
 800e86c:	f8ca 3000 	str.w	r3, [sl]
 800e870:	89a3      	ldrh	r3, [r4, #12]
 800e872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e876:	81a3      	strh	r3, [r4, #12]
 800e878:	f04f 30ff 	mov.w	r0, #4294967295
 800e87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e880:	6921      	ldr	r1, [r4, #16]
 800e882:	464a      	mov	r2, r9
 800e884:	f7ff fd4c 	bl	800e320 <memcpy>
 800e888:	89a3      	ldrh	r3, [r4, #12]
 800e88a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e88e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e892:	81a3      	strh	r3, [r4, #12]
 800e894:	6126      	str	r6, [r4, #16]
 800e896:	6165      	str	r5, [r4, #20]
 800e898:	444e      	add	r6, r9
 800e89a:	eba5 0509 	sub.w	r5, r5, r9
 800e89e:	6026      	str	r6, [r4, #0]
 800e8a0:	60a5      	str	r5, [r4, #8]
 800e8a2:	463e      	mov	r6, r7
 800e8a4:	42be      	cmp	r6, r7
 800e8a6:	d900      	bls.n	800e8aa <__ssputs_r+0x86>
 800e8a8:	463e      	mov	r6, r7
 800e8aa:	4632      	mov	r2, r6
 800e8ac:	6820      	ldr	r0, [r4, #0]
 800e8ae:	4641      	mov	r1, r8
 800e8b0:	f7ff fd44 	bl	800e33c <memmove>
 800e8b4:	68a3      	ldr	r3, [r4, #8]
 800e8b6:	6822      	ldr	r2, [r4, #0]
 800e8b8:	1b9b      	subs	r3, r3, r6
 800e8ba:	4432      	add	r2, r6
 800e8bc:	60a3      	str	r3, [r4, #8]
 800e8be:	6022      	str	r2, [r4, #0]
 800e8c0:	2000      	movs	r0, #0
 800e8c2:	e7db      	b.n	800e87c <__ssputs_r+0x58>
 800e8c4:	462a      	mov	r2, r5
 800e8c6:	f000 fe79 	bl	800f5bc <_realloc_r>
 800e8ca:	4606      	mov	r6, r0
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	d1e1      	bne.n	800e894 <__ssputs_r+0x70>
 800e8d0:	6921      	ldr	r1, [r4, #16]
 800e8d2:	4650      	mov	r0, sl
 800e8d4:	f7ff fefc 	bl	800e6d0 <_free_r>
 800e8d8:	e7c7      	b.n	800e86a <__ssputs_r+0x46>
	...

0800e8dc <_svfiprintf_r>:
 800e8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e0:	4698      	mov	r8, r3
 800e8e2:	898b      	ldrh	r3, [r1, #12]
 800e8e4:	061b      	lsls	r3, r3, #24
 800e8e6:	b09d      	sub	sp, #116	; 0x74
 800e8e8:	4607      	mov	r7, r0
 800e8ea:	460d      	mov	r5, r1
 800e8ec:	4614      	mov	r4, r2
 800e8ee:	d50e      	bpl.n	800e90e <_svfiprintf_r+0x32>
 800e8f0:	690b      	ldr	r3, [r1, #16]
 800e8f2:	b963      	cbnz	r3, 800e90e <_svfiprintf_r+0x32>
 800e8f4:	2140      	movs	r1, #64	; 0x40
 800e8f6:	f7ff ff3b 	bl	800e770 <_malloc_r>
 800e8fa:	6028      	str	r0, [r5, #0]
 800e8fc:	6128      	str	r0, [r5, #16]
 800e8fe:	b920      	cbnz	r0, 800e90a <_svfiprintf_r+0x2e>
 800e900:	230c      	movs	r3, #12
 800e902:	603b      	str	r3, [r7, #0]
 800e904:	f04f 30ff 	mov.w	r0, #4294967295
 800e908:	e0d1      	b.n	800eaae <_svfiprintf_r+0x1d2>
 800e90a:	2340      	movs	r3, #64	; 0x40
 800e90c:	616b      	str	r3, [r5, #20]
 800e90e:	2300      	movs	r3, #0
 800e910:	9309      	str	r3, [sp, #36]	; 0x24
 800e912:	2320      	movs	r3, #32
 800e914:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e918:	f8cd 800c 	str.w	r8, [sp, #12]
 800e91c:	2330      	movs	r3, #48	; 0x30
 800e91e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eac8 <_svfiprintf_r+0x1ec>
 800e922:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e926:	f04f 0901 	mov.w	r9, #1
 800e92a:	4623      	mov	r3, r4
 800e92c:	469a      	mov	sl, r3
 800e92e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e932:	b10a      	cbz	r2, 800e938 <_svfiprintf_r+0x5c>
 800e934:	2a25      	cmp	r2, #37	; 0x25
 800e936:	d1f9      	bne.n	800e92c <_svfiprintf_r+0x50>
 800e938:	ebba 0b04 	subs.w	fp, sl, r4
 800e93c:	d00b      	beq.n	800e956 <_svfiprintf_r+0x7a>
 800e93e:	465b      	mov	r3, fp
 800e940:	4622      	mov	r2, r4
 800e942:	4629      	mov	r1, r5
 800e944:	4638      	mov	r0, r7
 800e946:	f7ff ff6d 	bl	800e824 <__ssputs_r>
 800e94a:	3001      	adds	r0, #1
 800e94c:	f000 80aa 	beq.w	800eaa4 <_svfiprintf_r+0x1c8>
 800e950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e952:	445a      	add	r2, fp
 800e954:	9209      	str	r2, [sp, #36]	; 0x24
 800e956:	f89a 3000 	ldrb.w	r3, [sl]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	f000 80a2 	beq.w	800eaa4 <_svfiprintf_r+0x1c8>
 800e960:	2300      	movs	r3, #0
 800e962:	f04f 32ff 	mov.w	r2, #4294967295
 800e966:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e96a:	f10a 0a01 	add.w	sl, sl, #1
 800e96e:	9304      	str	r3, [sp, #16]
 800e970:	9307      	str	r3, [sp, #28]
 800e972:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e976:	931a      	str	r3, [sp, #104]	; 0x68
 800e978:	4654      	mov	r4, sl
 800e97a:	2205      	movs	r2, #5
 800e97c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e980:	4851      	ldr	r0, [pc, #324]	; (800eac8 <_svfiprintf_r+0x1ec>)
 800e982:	f7f1 fc45 	bl	8000210 <memchr>
 800e986:	9a04      	ldr	r2, [sp, #16]
 800e988:	b9d8      	cbnz	r0, 800e9c2 <_svfiprintf_r+0xe6>
 800e98a:	06d0      	lsls	r0, r2, #27
 800e98c:	bf44      	itt	mi
 800e98e:	2320      	movmi	r3, #32
 800e990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e994:	0711      	lsls	r1, r2, #28
 800e996:	bf44      	itt	mi
 800e998:	232b      	movmi	r3, #43	; 0x2b
 800e99a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e99e:	f89a 3000 	ldrb.w	r3, [sl]
 800e9a2:	2b2a      	cmp	r3, #42	; 0x2a
 800e9a4:	d015      	beq.n	800e9d2 <_svfiprintf_r+0xf6>
 800e9a6:	9a07      	ldr	r2, [sp, #28]
 800e9a8:	4654      	mov	r4, sl
 800e9aa:	2000      	movs	r0, #0
 800e9ac:	f04f 0c0a 	mov.w	ip, #10
 800e9b0:	4621      	mov	r1, r4
 800e9b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9b6:	3b30      	subs	r3, #48	; 0x30
 800e9b8:	2b09      	cmp	r3, #9
 800e9ba:	d94e      	bls.n	800ea5a <_svfiprintf_r+0x17e>
 800e9bc:	b1b0      	cbz	r0, 800e9ec <_svfiprintf_r+0x110>
 800e9be:	9207      	str	r2, [sp, #28]
 800e9c0:	e014      	b.n	800e9ec <_svfiprintf_r+0x110>
 800e9c2:	eba0 0308 	sub.w	r3, r0, r8
 800e9c6:	fa09 f303 	lsl.w	r3, r9, r3
 800e9ca:	4313      	orrs	r3, r2
 800e9cc:	9304      	str	r3, [sp, #16]
 800e9ce:	46a2      	mov	sl, r4
 800e9d0:	e7d2      	b.n	800e978 <_svfiprintf_r+0x9c>
 800e9d2:	9b03      	ldr	r3, [sp, #12]
 800e9d4:	1d19      	adds	r1, r3, #4
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	9103      	str	r1, [sp, #12]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	bfbb      	ittet	lt
 800e9de:	425b      	neglt	r3, r3
 800e9e0:	f042 0202 	orrlt.w	r2, r2, #2
 800e9e4:	9307      	strge	r3, [sp, #28]
 800e9e6:	9307      	strlt	r3, [sp, #28]
 800e9e8:	bfb8      	it	lt
 800e9ea:	9204      	strlt	r2, [sp, #16]
 800e9ec:	7823      	ldrb	r3, [r4, #0]
 800e9ee:	2b2e      	cmp	r3, #46	; 0x2e
 800e9f0:	d10c      	bne.n	800ea0c <_svfiprintf_r+0x130>
 800e9f2:	7863      	ldrb	r3, [r4, #1]
 800e9f4:	2b2a      	cmp	r3, #42	; 0x2a
 800e9f6:	d135      	bne.n	800ea64 <_svfiprintf_r+0x188>
 800e9f8:	9b03      	ldr	r3, [sp, #12]
 800e9fa:	1d1a      	adds	r2, r3, #4
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	9203      	str	r2, [sp, #12]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	bfb8      	it	lt
 800ea04:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea08:	3402      	adds	r4, #2
 800ea0a:	9305      	str	r3, [sp, #20]
 800ea0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ead8 <_svfiprintf_r+0x1fc>
 800ea10:	7821      	ldrb	r1, [r4, #0]
 800ea12:	2203      	movs	r2, #3
 800ea14:	4650      	mov	r0, sl
 800ea16:	f7f1 fbfb 	bl	8000210 <memchr>
 800ea1a:	b140      	cbz	r0, 800ea2e <_svfiprintf_r+0x152>
 800ea1c:	2340      	movs	r3, #64	; 0x40
 800ea1e:	eba0 000a 	sub.w	r0, r0, sl
 800ea22:	fa03 f000 	lsl.w	r0, r3, r0
 800ea26:	9b04      	ldr	r3, [sp, #16]
 800ea28:	4303      	orrs	r3, r0
 800ea2a:	3401      	adds	r4, #1
 800ea2c:	9304      	str	r3, [sp, #16]
 800ea2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea32:	4826      	ldr	r0, [pc, #152]	; (800eacc <_svfiprintf_r+0x1f0>)
 800ea34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea38:	2206      	movs	r2, #6
 800ea3a:	f7f1 fbe9 	bl	8000210 <memchr>
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	d038      	beq.n	800eab4 <_svfiprintf_r+0x1d8>
 800ea42:	4b23      	ldr	r3, [pc, #140]	; (800ead0 <_svfiprintf_r+0x1f4>)
 800ea44:	bb1b      	cbnz	r3, 800ea8e <_svfiprintf_r+0x1b2>
 800ea46:	9b03      	ldr	r3, [sp, #12]
 800ea48:	3307      	adds	r3, #7
 800ea4a:	f023 0307 	bic.w	r3, r3, #7
 800ea4e:	3308      	adds	r3, #8
 800ea50:	9303      	str	r3, [sp, #12]
 800ea52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea54:	4433      	add	r3, r6
 800ea56:	9309      	str	r3, [sp, #36]	; 0x24
 800ea58:	e767      	b.n	800e92a <_svfiprintf_r+0x4e>
 800ea5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea5e:	460c      	mov	r4, r1
 800ea60:	2001      	movs	r0, #1
 800ea62:	e7a5      	b.n	800e9b0 <_svfiprintf_r+0xd4>
 800ea64:	2300      	movs	r3, #0
 800ea66:	3401      	adds	r4, #1
 800ea68:	9305      	str	r3, [sp, #20]
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	f04f 0c0a 	mov.w	ip, #10
 800ea70:	4620      	mov	r0, r4
 800ea72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea76:	3a30      	subs	r2, #48	; 0x30
 800ea78:	2a09      	cmp	r2, #9
 800ea7a:	d903      	bls.n	800ea84 <_svfiprintf_r+0x1a8>
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d0c5      	beq.n	800ea0c <_svfiprintf_r+0x130>
 800ea80:	9105      	str	r1, [sp, #20]
 800ea82:	e7c3      	b.n	800ea0c <_svfiprintf_r+0x130>
 800ea84:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea88:	4604      	mov	r4, r0
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	e7f0      	b.n	800ea70 <_svfiprintf_r+0x194>
 800ea8e:	ab03      	add	r3, sp, #12
 800ea90:	9300      	str	r3, [sp, #0]
 800ea92:	462a      	mov	r2, r5
 800ea94:	4b0f      	ldr	r3, [pc, #60]	; (800ead4 <_svfiprintf_r+0x1f8>)
 800ea96:	a904      	add	r1, sp, #16
 800ea98:	4638      	mov	r0, r7
 800ea9a:	f3af 8000 	nop.w
 800ea9e:	1c42      	adds	r2, r0, #1
 800eaa0:	4606      	mov	r6, r0
 800eaa2:	d1d6      	bne.n	800ea52 <_svfiprintf_r+0x176>
 800eaa4:	89ab      	ldrh	r3, [r5, #12]
 800eaa6:	065b      	lsls	r3, r3, #25
 800eaa8:	f53f af2c 	bmi.w	800e904 <_svfiprintf_r+0x28>
 800eaac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eaae:	b01d      	add	sp, #116	; 0x74
 800eab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eab4:	ab03      	add	r3, sp, #12
 800eab6:	9300      	str	r3, [sp, #0]
 800eab8:	462a      	mov	r2, r5
 800eaba:	4b06      	ldr	r3, [pc, #24]	; (800ead4 <_svfiprintf_r+0x1f8>)
 800eabc:	a904      	add	r1, sp, #16
 800eabe:	4638      	mov	r0, r7
 800eac0:	f000 f9d4 	bl	800ee6c <_printf_i>
 800eac4:	e7eb      	b.n	800ea9e <_svfiprintf_r+0x1c2>
 800eac6:	bf00      	nop
 800eac8:	08012330 	.word	0x08012330
 800eacc:	0801233a 	.word	0x0801233a
 800ead0:	00000000 	.word	0x00000000
 800ead4:	0800e825 	.word	0x0800e825
 800ead8:	08012336 	.word	0x08012336

0800eadc <__sfputc_r>:
 800eadc:	6893      	ldr	r3, [r2, #8]
 800eade:	3b01      	subs	r3, #1
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	b410      	push	{r4}
 800eae4:	6093      	str	r3, [r2, #8]
 800eae6:	da08      	bge.n	800eafa <__sfputc_r+0x1e>
 800eae8:	6994      	ldr	r4, [r2, #24]
 800eaea:	42a3      	cmp	r3, r4
 800eaec:	db01      	blt.n	800eaf2 <__sfputc_r+0x16>
 800eaee:	290a      	cmp	r1, #10
 800eaf0:	d103      	bne.n	800eafa <__sfputc_r+0x1e>
 800eaf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eaf6:	f000 bb33 	b.w	800f160 <__swbuf_r>
 800eafa:	6813      	ldr	r3, [r2, #0]
 800eafc:	1c58      	adds	r0, r3, #1
 800eafe:	6010      	str	r0, [r2, #0]
 800eb00:	7019      	strb	r1, [r3, #0]
 800eb02:	4608      	mov	r0, r1
 800eb04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb08:	4770      	bx	lr

0800eb0a <__sfputs_r>:
 800eb0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb0c:	4606      	mov	r6, r0
 800eb0e:	460f      	mov	r7, r1
 800eb10:	4614      	mov	r4, r2
 800eb12:	18d5      	adds	r5, r2, r3
 800eb14:	42ac      	cmp	r4, r5
 800eb16:	d101      	bne.n	800eb1c <__sfputs_r+0x12>
 800eb18:	2000      	movs	r0, #0
 800eb1a:	e007      	b.n	800eb2c <__sfputs_r+0x22>
 800eb1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb20:	463a      	mov	r2, r7
 800eb22:	4630      	mov	r0, r6
 800eb24:	f7ff ffda 	bl	800eadc <__sfputc_r>
 800eb28:	1c43      	adds	r3, r0, #1
 800eb2a:	d1f3      	bne.n	800eb14 <__sfputs_r+0xa>
 800eb2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb30 <_vfiprintf_r>:
 800eb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb34:	460d      	mov	r5, r1
 800eb36:	b09d      	sub	sp, #116	; 0x74
 800eb38:	4614      	mov	r4, r2
 800eb3a:	4698      	mov	r8, r3
 800eb3c:	4606      	mov	r6, r0
 800eb3e:	b118      	cbz	r0, 800eb48 <_vfiprintf_r+0x18>
 800eb40:	6983      	ldr	r3, [r0, #24]
 800eb42:	b90b      	cbnz	r3, 800eb48 <_vfiprintf_r+0x18>
 800eb44:	f7ff fd0a 	bl	800e55c <__sinit>
 800eb48:	4b89      	ldr	r3, [pc, #548]	; (800ed70 <_vfiprintf_r+0x240>)
 800eb4a:	429d      	cmp	r5, r3
 800eb4c:	d11b      	bne.n	800eb86 <_vfiprintf_r+0x56>
 800eb4e:	6875      	ldr	r5, [r6, #4]
 800eb50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb52:	07d9      	lsls	r1, r3, #31
 800eb54:	d405      	bmi.n	800eb62 <_vfiprintf_r+0x32>
 800eb56:	89ab      	ldrh	r3, [r5, #12]
 800eb58:	059a      	lsls	r2, r3, #22
 800eb5a:	d402      	bmi.n	800eb62 <_vfiprintf_r+0x32>
 800eb5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb5e:	f7ff fdad 	bl	800e6bc <__retarget_lock_acquire_recursive>
 800eb62:	89ab      	ldrh	r3, [r5, #12]
 800eb64:	071b      	lsls	r3, r3, #28
 800eb66:	d501      	bpl.n	800eb6c <_vfiprintf_r+0x3c>
 800eb68:	692b      	ldr	r3, [r5, #16]
 800eb6a:	b9eb      	cbnz	r3, 800eba8 <_vfiprintf_r+0x78>
 800eb6c:	4629      	mov	r1, r5
 800eb6e:	4630      	mov	r0, r6
 800eb70:	f000 fb5a 	bl	800f228 <__swsetup_r>
 800eb74:	b1c0      	cbz	r0, 800eba8 <_vfiprintf_r+0x78>
 800eb76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb78:	07dc      	lsls	r4, r3, #31
 800eb7a:	d50e      	bpl.n	800eb9a <_vfiprintf_r+0x6a>
 800eb7c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb80:	b01d      	add	sp, #116	; 0x74
 800eb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb86:	4b7b      	ldr	r3, [pc, #492]	; (800ed74 <_vfiprintf_r+0x244>)
 800eb88:	429d      	cmp	r5, r3
 800eb8a:	d101      	bne.n	800eb90 <_vfiprintf_r+0x60>
 800eb8c:	68b5      	ldr	r5, [r6, #8]
 800eb8e:	e7df      	b.n	800eb50 <_vfiprintf_r+0x20>
 800eb90:	4b79      	ldr	r3, [pc, #484]	; (800ed78 <_vfiprintf_r+0x248>)
 800eb92:	429d      	cmp	r5, r3
 800eb94:	bf08      	it	eq
 800eb96:	68f5      	ldreq	r5, [r6, #12]
 800eb98:	e7da      	b.n	800eb50 <_vfiprintf_r+0x20>
 800eb9a:	89ab      	ldrh	r3, [r5, #12]
 800eb9c:	0598      	lsls	r0, r3, #22
 800eb9e:	d4ed      	bmi.n	800eb7c <_vfiprintf_r+0x4c>
 800eba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eba2:	f7ff fd8c 	bl	800e6be <__retarget_lock_release_recursive>
 800eba6:	e7e9      	b.n	800eb7c <_vfiprintf_r+0x4c>
 800eba8:	2300      	movs	r3, #0
 800ebaa:	9309      	str	r3, [sp, #36]	; 0x24
 800ebac:	2320      	movs	r3, #32
 800ebae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ebb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebb6:	2330      	movs	r3, #48	; 0x30
 800ebb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ed7c <_vfiprintf_r+0x24c>
 800ebbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ebc0:	f04f 0901 	mov.w	r9, #1
 800ebc4:	4623      	mov	r3, r4
 800ebc6:	469a      	mov	sl, r3
 800ebc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebcc:	b10a      	cbz	r2, 800ebd2 <_vfiprintf_r+0xa2>
 800ebce:	2a25      	cmp	r2, #37	; 0x25
 800ebd0:	d1f9      	bne.n	800ebc6 <_vfiprintf_r+0x96>
 800ebd2:	ebba 0b04 	subs.w	fp, sl, r4
 800ebd6:	d00b      	beq.n	800ebf0 <_vfiprintf_r+0xc0>
 800ebd8:	465b      	mov	r3, fp
 800ebda:	4622      	mov	r2, r4
 800ebdc:	4629      	mov	r1, r5
 800ebde:	4630      	mov	r0, r6
 800ebe0:	f7ff ff93 	bl	800eb0a <__sfputs_r>
 800ebe4:	3001      	adds	r0, #1
 800ebe6:	f000 80aa 	beq.w	800ed3e <_vfiprintf_r+0x20e>
 800ebea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebec:	445a      	add	r2, fp
 800ebee:	9209      	str	r2, [sp, #36]	; 0x24
 800ebf0:	f89a 3000 	ldrb.w	r3, [sl]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	f000 80a2 	beq.w	800ed3e <_vfiprintf_r+0x20e>
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	f04f 32ff 	mov.w	r2, #4294967295
 800ec00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec04:	f10a 0a01 	add.w	sl, sl, #1
 800ec08:	9304      	str	r3, [sp, #16]
 800ec0a:	9307      	str	r3, [sp, #28]
 800ec0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec10:	931a      	str	r3, [sp, #104]	; 0x68
 800ec12:	4654      	mov	r4, sl
 800ec14:	2205      	movs	r2, #5
 800ec16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec1a:	4858      	ldr	r0, [pc, #352]	; (800ed7c <_vfiprintf_r+0x24c>)
 800ec1c:	f7f1 faf8 	bl	8000210 <memchr>
 800ec20:	9a04      	ldr	r2, [sp, #16]
 800ec22:	b9d8      	cbnz	r0, 800ec5c <_vfiprintf_r+0x12c>
 800ec24:	06d1      	lsls	r1, r2, #27
 800ec26:	bf44      	itt	mi
 800ec28:	2320      	movmi	r3, #32
 800ec2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec2e:	0713      	lsls	r3, r2, #28
 800ec30:	bf44      	itt	mi
 800ec32:	232b      	movmi	r3, #43	; 0x2b
 800ec34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec38:	f89a 3000 	ldrb.w	r3, [sl]
 800ec3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ec3e:	d015      	beq.n	800ec6c <_vfiprintf_r+0x13c>
 800ec40:	9a07      	ldr	r2, [sp, #28]
 800ec42:	4654      	mov	r4, sl
 800ec44:	2000      	movs	r0, #0
 800ec46:	f04f 0c0a 	mov.w	ip, #10
 800ec4a:	4621      	mov	r1, r4
 800ec4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec50:	3b30      	subs	r3, #48	; 0x30
 800ec52:	2b09      	cmp	r3, #9
 800ec54:	d94e      	bls.n	800ecf4 <_vfiprintf_r+0x1c4>
 800ec56:	b1b0      	cbz	r0, 800ec86 <_vfiprintf_r+0x156>
 800ec58:	9207      	str	r2, [sp, #28]
 800ec5a:	e014      	b.n	800ec86 <_vfiprintf_r+0x156>
 800ec5c:	eba0 0308 	sub.w	r3, r0, r8
 800ec60:	fa09 f303 	lsl.w	r3, r9, r3
 800ec64:	4313      	orrs	r3, r2
 800ec66:	9304      	str	r3, [sp, #16]
 800ec68:	46a2      	mov	sl, r4
 800ec6a:	e7d2      	b.n	800ec12 <_vfiprintf_r+0xe2>
 800ec6c:	9b03      	ldr	r3, [sp, #12]
 800ec6e:	1d19      	adds	r1, r3, #4
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	9103      	str	r1, [sp, #12]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	bfbb      	ittet	lt
 800ec78:	425b      	neglt	r3, r3
 800ec7a:	f042 0202 	orrlt.w	r2, r2, #2
 800ec7e:	9307      	strge	r3, [sp, #28]
 800ec80:	9307      	strlt	r3, [sp, #28]
 800ec82:	bfb8      	it	lt
 800ec84:	9204      	strlt	r2, [sp, #16]
 800ec86:	7823      	ldrb	r3, [r4, #0]
 800ec88:	2b2e      	cmp	r3, #46	; 0x2e
 800ec8a:	d10c      	bne.n	800eca6 <_vfiprintf_r+0x176>
 800ec8c:	7863      	ldrb	r3, [r4, #1]
 800ec8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ec90:	d135      	bne.n	800ecfe <_vfiprintf_r+0x1ce>
 800ec92:	9b03      	ldr	r3, [sp, #12]
 800ec94:	1d1a      	adds	r2, r3, #4
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	9203      	str	r2, [sp, #12]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	bfb8      	it	lt
 800ec9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800eca2:	3402      	adds	r4, #2
 800eca4:	9305      	str	r3, [sp, #20]
 800eca6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ed8c <_vfiprintf_r+0x25c>
 800ecaa:	7821      	ldrb	r1, [r4, #0]
 800ecac:	2203      	movs	r2, #3
 800ecae:	4650      	mov	r0, sl
 800ecb0:	f7f1 faae 	bl	8000210 <memchr>
 800ecb4:	b140      	cbz	r0, 800ecc8 <_vfiprintf_r+0x198>
 800ecb6:	2340      	movs	r3, #64	; 0x40
 800ecb8:	eba0 000a 	sub.w	r0, r0, sl
 800ecbc:	fa03 f000 	lsl.w	r0, r3, r0
 800ecc0:	9b04      	ldr	r3, [sp, #16]
 800ecc2:	4303      	orrs	r3, r0
 800ecc4:	3401      	adds	r4, #1
 800ecc6:	9304      	str	r3, [sp, #16]
 800ecc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eccc:	482c      	ldr	r0, [pc, #176]	; (800ed80 <_vfiprintf_r+0x250>)
 800ecce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ecd2:	2206      	movs	r2, #6
 800ecd4:	f7f1 fa9c 	bl	8000210 <memchr>
 800ecd8:	2800      	cmp	r0, #0
 800ecda:	d03f      	beq.n	800ed5c <_vfiprintf_r+0x22c>
 800ecdc:	4b29      	ldr	r3, [pc, #164]	; (800ed84 <_vfiprintf_r+0x254>)
 800ecde:	bb1b      	cbnz	r3, 800ed28 <_vfiprintf_r+0x1f8>
 800ece0:	9b03      	ldr	r3, [sp, #12]
 800ece2:	3307      	adds	r3, #7
 800ece4:	f023 0307 	bic.w	r3, r3, #7
 800ece8:	3308      	adds	r3, #8
 800ecea:	9303      	str	r3, [sp, #12]
 800ecec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecee:	443b      	add	r3, r7
 800ecf0:	9309      	str	r3, [sp, #36]	; 0x24
 800ecf2:	e767      	b.n	800ebc4 <_vfiprintf_r+0x94>
 800ecf4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecf8:	460c      	mov	r4, r1
 800ecfa:	2001      	movs	r0, #1
 800ecfc:	e7a5      	b.n	800ec4a <_vfiprintf_r+0x11a>
 800ecfe:	2300      	movs	r3, #0
 800ed00:	3401      	adds	r4, #1
 800ed02:	9305      	str	r3, [sp, #20]
 800ed04:	4619      	mov	r1, r3
 800ed06:	f04f 0c0a 	mov.w	ip, #10
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed10:	3a30      	subs	r2, #48	; 0x30
 800ed12:	2a09      	cmp	r2, #9
 800ed14:	d903      	bls.n	800ed1e <_vfiprintf_r+0x1ee>
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d0c5      	beq.n	800eca6 <_vfiprintf_r+0x176>
 800ed1a:	9105      	str	r1, [sp, #20]
 800ed1c:	e7c3      	b.n	800eca6 <_vfiprintf_r+0x176>
 800ed1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed22:	4604      	mov	r4, r0
 800ed24:	2301      	movs	r3, #1
 800ed26:	e7f0      	b.n	800ed0a <_vfiprintf_r+0x1da>
 800ed28:	ab03      	add	r3, sp, #12
 800ed2a:	9300      	str	r3, [sp, #0]
 800ed2c:	462a      	mov	r2, r5
 800ed2e:	4b16      	ldr	r3, [pc, #88]	; (800ed88 <_vfiprintf_r+0x258>)
 800ed30:	a904      	add	r1, sp, #16
 800ed32:	4630      	mov	r0, r6
 800ed34:	f3af 8000 	nop.w
 800ed38:	4607      	mov	r7, r0
 800ed3a:	1c78      	adds	r0, r7, #1
 800ed3c:	d1d6      	bne.n	800ecec <_vfiprintf_r+0x1bc>
 800ed3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed40:	07d9      	lsls	r1, r3, #31
 800ed42:	d405      	bmi.n	800ed50 <_vfiprintf_r+0x220>
 800ed44:	89ab      	ldrh	r3, [r5, #12]
 800ed46:	059a      	lsls	r2, r3, #22
 800ed48:	d402      	bmi.n	800ed50 <_vfiprintf_r+0x220>
 800ed4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed4c:	f7ff fcb7 	bl	800e6be <__retarget_lock_release_recursive>
 800ed50:	89ab      	ldrh	r3, [r5, #12]
 800ed52:	065b      	lsls	r3, r3, #25
 800ed54:	f53f af12 	bmi.w	800eb7c <_vfiprintf_r+0x4c>
 800ed58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed5a:	e711      	b.n	800eb80 <_vfiprintf_r+0x50>
 800ed5c:	ab03      	add	r3, sp, #12
 800ed5e:	9300      	str	r3, [sp, #0]
 800ed60:	462a      	mov	r2, r5
 800ed62:	4b09      	ldr	r3, [pc, #36]	; (800ed88 <_vfiprintf_r+0x258>)
 800ed64:	a904      	add	r1, sp, #16
 800ed66:	4630      	mov	r0, r6
 800ed68:	f000 f880 	bl	800ee6c <_printf_i>
 800ed6c:	e7e4      	b.n	800ed38 <_vfiprintf_r+0x208>
 800ed6e:	bf00      	nop
 800ed70:	080122f0 	.word	0x080122f0
 800ed74:	08012310 	.word	0x08012310
 800ed78:	080122d0 	.word	0x080122d0
 800ed7c:	08012330 	.word	0x08012330
 800ed80:	0801233a 	.word	0x0801233a
 800ed84:	00000000 	.word	0x00000000
 800ed88:	0800eb0b 	.word	0x0800eb0b
 800ed8c:	08012336 	.word	0x08012336

0800ed90 <_printf_common>:
 800ed90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed94:	4616      	mov	r6, r2
 800ed96:	4699      	mov	r9, r3
 800ed98:	688a      	ldr	r2, [r1, #8]
 800ed9a:	690b      	ldr	r3, [r1, #16]
 800ed9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eda0:	4293      	cmp	r3, r2
 800eda2:	bfb8      	it	lt
 800eda4:	4613      	movlt	r3, r2
 800eda6:	6033      	str	r3, [r6, #0]
 800eda8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800edac:	4607      	mov	r7, r0
 800edae:	460c      	mov	r4, r1
 800edb0:	b10a      	cbz	r2, 800edb6 <_printf_common+0x26>
 800edb2:	3301      	adds	r3, #1
 800edb4:	6033      	str	r3, [r6, #0]
 800edb6:	6823      	ldr	r3, [r4, #0]
 800edb8:	0699      	lsls	r1, r3, #26
 800edba:	bf42      	ittt	mi
 800edbc:	6833      	ldrmi	r3, [r6, #0]
 800edbe:	3302      	addmi	r3, #2
 800edc0:	6033      	strmi	r3, [r6, #0]
 800edc2:	6825      	ldr	r5, [r4, #0]
 800edc4:	f015 0506 	ands.w	r5, r5, #6
 800edc8:	d106      	bne.n	800edd8 <_printf_common+0x48>
 800edca:	f104 0a19 	add.w	sl, r4, #25
 800edce:	68e3      	ldr	r3, [r4, #12]
 800edd0:	6832      	ldr	r2, [r6, #0]
 800edd2:	1a9b      	subs	r3, r3, r2
 800edd4:	42ab      	cmp	r3, r5
 800edd6:	dc26      	bgt.n	800ee26 <_printf_common+0x96>
 800edd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eddc:	1e13      	subs	r3, r2, #0
 800edde:	6822      	ldr	r2, [r4, #0]
 800ede0:	bf18      	it	ne
 800ede2:	2301      	movne	r3, #1
 800ede4:	0692      	lsls	r2, r2, #26
 800ede6:	d42b      	bmi.n	800ee40 <_printf_common+0xb0>
 800ede8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800edec:	4649      	mov	r1, r9
 800edee:	4638      	mov	r0, r7
 800edf0:	47c0      	blx	r8
 800edf2:	3001      	adds	r0, #1
 800edf4:	d01e      	beq.n	800ee34 <_printf_common+0xa4>
 800edf6:	6823      	ldr	r3, [r4, #0]
 800edf8:	68e5      	ldr	r5, [r4, #12]
 800edfa:	6832      	ldr	r2, [r6, #0]
 800edfc:	f003 0306 	and.w	r3, r3, #6
 800ee00:	2b04      	cmp	r3, #4
 800ee02:	bf08      	it	eq
 800ee04:	1aad      	subeq	r5, r5, r2
 800ee06:	68a3      	ldr	r3, [r4, #8]
 800ee08:	6922      	ldr	r2, [r4, #16]
 800ee0a:	bf0c      	ite	eq
 800ee0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee10:	2500      	movne	r5, #0
 800ee12:	4293      	cmp	r3, r2
 800ee14:	bfc4      	itt	gt
 800ee16:	1a9b      	subgt	r3, r3, r2
 800ee18:	18ed      	addgt	r5, r5, r3
 800ee1a:	2600      	movs	r6, #0
 800ee1c:	341a      	adds	r4, #26
 800ee1e:	42b5      	cmp	r5, r6
 800ee20:	d11a      	bne.n	800ee58 <_printf_common+0xc8>
 800ee22:	2000      	movs	r0, #0
 800ee24:	e008      	b.n	800ee38 <_printf_common+0xa8>
 800ee26:	2301      	movs	r3, #1
 800ee28:	4652      	mov	r2, sl
 800ee2a:	4649      	mov	r1, r9
 800ee2c:	4638      	mov	r0, r7
 800ee2e:	47c0      	blx	r8
 800ee30:	3001      	adds	r0, #1
 800ee32:	d103      	bne.n	800ee3c <_printf_common+0xac>
 800ee34:	f04f 30ff 	mov.w	r0, #4294967295
 800ee38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee3c:	3501      	adds	r5, #1
 800ee3e:	e7c6      	b.n	800edce <_printf_common+0x3e>
 800ee40:	18e1      	adds	r1, r4, r3
 800ee42:	1c5a      	adds	r2, r3, #1
 800ee44:	2030      	movs	r0, #48	; 0x30
 800ee46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ee4a:	4422      	add	r2, r4
 800ee4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ee50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ee54:	3302      	adds	r3, #2
 800ee56:	e7c7      	b.n	800ede8 <_printf_common+0x58>
 800ee58:	2301      	movs	r3, #1
 800ee5a:	4622      	mov	r2, r4
 800ee5c:	4649      	mov	r1, r9
 800ee5e:	4638      	mov	r0, r7
 800ee60:	47c0      	blx	r8
 800ee62:	3001      	adds	r0, #1
 800ee64:	d0e6      	beq.n	800ee34 <_printf_common+0xa4>
 800ee66:	3601      	adds	r6, #1
 800ee68:	e7d9      	b.n	800ee1e <_printf_common+0x8e>
	...

0800ee6c <_printf_i>:
 800ee6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee70:	460c      	mov	r4, r1
 800ee72:	4691      	mov	r9, r2
 800ee74:	7e27      	ldrb	r7, [r4, #24]
 800ee76:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ee78:	2f78      	cmp	r7, #120	; 0x78
 800ee7a:	4680      	mov	r8, r0
 800ee7c:	469a      	mov	sl, r3
 800ee7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee82:	d807      	bhi.n	800ee94 <_printf_i+0x28>
 800ee84:	2f62      	cmp	r7, #98	; 0x62
 800ee86:	d80a      	bhi.n	800ee9e <_printf_i+0x32>
 800ee88:	2f00      	cmp	r7, #0
 800ee8a:	f000 80d8 	beq.w	800f03e <_printf_i+0x1d2>
 800ee8e:	2f58      	cmp	r7, #88	; 0x58
 800ee90:	f000 80a3 	beq.w	800efda <_printf_i+0x16e>
 800ee94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ee98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ee9c:	e03a      	b.n	800ef14 <_printf_i+0xa8>
 800ee9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eea2:	2b15      	cmp	r3, #21
 800eea4:	d8f6      	bhi.n	800ee94 <_printf_i+0x28>
 800eea6:	a001      	add	r0, pc, #4	; (adr r0, 800eeac <_printf_i+0x40>)
 800eea8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800eeac:	0800ef05 	.word	0x0800ef05
 800eeb0:	0800ef19 	.word	0x0800ef19
 800eeb4:	0800ee95 	.word	0x0800ee95
 800eeb8:	0800ee95 	.word	0x0800ee95
 800eebc:	0800ee95 	.word	0x0800ee95
 800eec0:	0800ee95 	.word	0x0800ee95
 800eec4:	0800ef19 	.word	0x0800ef19
 800eec8:	0800ee95 	.word	0x0800ee95
 800eecc:	0800ee95 	.word	0x0800ee95
 800eed0:	0800ee95 	.word	0x0800ee95
 800eed4:	0800ee95 	.word	0x0800ee95
 800eed8:	0800f025 	.word	0x0800f025
 800eedc:	0800ef49 	.word	0x0800ef49
 800eee0:	0800f007 	.word	0x0800f007
 800eee4:	0800ee95 	.word	0x0800ee95
 800eee8:	0800ee95 	.word	0x0800ee95
 800eeec:	0800f047 	.word	0x0800f047
 800eef0:	0800ee95 	.word	0x0800ee95
 800eef4:	0800ef49 	.word	0x0800ef49
 800eef8:	0800ee95 	.word	0x0800ee95
 800eefc:	0800ee95 	.word	0x0800ee95
 800ef00:	0800f00f 	.word	0x0800f00f
 800ef04:	680b      	ldr	r3, [r1, #0]
 800ef06:	1d1a      	adds	r2, r3, #4
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	600a      	str	r2, [r1, #0]
 800ef0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ef10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef14:	2301      	movs	r3, #1
 800ef16:	e0a3      	b.n	800f060 <_printf_i+0x1f4>
 800ef18:	6825      	ldr	r5, [r4, #0]
 800ef1a:	6808      	ldr	r0, [r1, #0]
 800ef1c:	062e      	lsls	r6, r5, #24
 800ef1e:	f100 0304 	add.w	r3, r0, #4
 800ef22:	d50a      	bpl.n	800ef3a <_printf_i+0xce>
 800ef24:	6805      	ldr	r5, [r0, #0]
 800ef26:	600b      	str	r3, [r1, #0]
 800ef28:	2d00      	cmp	r5, #0
 800ef2a:	da03      	bge.n	800ef34 <_printf_i+0xc8>
 800ef2c:	232d      	movs	r3, #45	; 0x2d
 800ef2e:	426d      	negs	r5, r5
 800ef30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef34:	485e      	ldr	r0, [pc, #376]	; (800f0b0 <_printf_i+0x244>)
 800ef36:	230a      	movs	r3, #10
 800ef38:	e019      	b.n	800ef6e <_printf_i+0x102>
 800ef3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ef3e:	6805      	ldr	r5, [r0, #0]
 800ef40:	600b      	str	r3, [r1, #0]
 800ef42:	bf18      	it	ne
 800ef44:	b22d      	sxthne	r5, r5
 800ef46:	e7ef      	b.n	800ef28 <_printf_i+0xbc>
 800ef48:	680b      	ldr	r3, [r1, #0]
 800ef4a:	6825      	ldr	r5, [r4, #0]
 800ef4c:	1d18      	adds	r0, r3, #4
 800ef4e:	6008      	str	r0, [r1, #0]
 800ef50:	0628      	lsls	r0, r5, #24
 800ef52:	d501      	bpl.n	800ef58 <_printf_i+0xec>
 800ef54:	681d      	ldr	r5, [r3, #0]
 800ef56:	e002      	b.n	800ef5e <_printf_i+0xf2>
 800ef58:	0669      	lsls	r1, r5, #25
 800ef5a:	d5fb      	bpl.n	800ef54 <_printf_i+0xe8>
 800ef5c:	881d      	ldrh	r5, [r3, #0]
 800ef5e:	4854      	ldr	r0, [pc, #336]	; (800f0b0 <_printf_i+0x244>)
 800ef60:	2f6f      	cmp	r7, #111	; 0x6f
 800ef62:	bf0c      	ite	eq
 800ef64:	2308      	moveq	r3, #8
 800ef66:	230a      	movne	r3, #10
 800ef68:	2100      	movs	r1, #0
 800ef6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ef6e:	6866      	ldr	r6, [r4, #4]
 800ef70:	60a6      	str	r6, [r4, #8]
 800ef72:	2e00      	cmp	r6, #0
 800ef74:	bfa2      	ittt	ge
 800ef76:	6821      	ldrge	r1, [r4, #0]
 800ef78:	f021 0104 	bicge.w	r1, r1, #4
 800ef7c:	6021      	strge	r1, [r4, #0]
 800ef7e:	b90d      	cbnz	r5, 800ef84 <_printf_i+0x118>
 800ef80:	2e00      	cmp	r6, #0
 800ef82:	d04d      	beq.n	800f020 <_printf_i+0x1b4>
 800ef84:	4616      	mov	r6, r2
 800ef86:	fbb5 f1f3 	udiv	r1, r5, r3
 800ef8a:	fb03 5711 	mls	r7, r3, r1, r5
 800ef8e:	5dc7      	ldrb	r7, [r0, r7]
 800ef90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ef94:	462f      	mov	r7, r5
 800ef96:	42bb      	cmp	r3, r7
 800ef98:	460d      	mov	r5, r1
 800ef9a:	d9f4      	bls.n	800ef86 <_printf_i+0x11a>
 800ef9c:	2b08      	cmp	r3, #8
 800ef9e:	d10b      	bne.n	800efb8 <_printf_i+0x14c>
 800efa0:	6823      	ldr	r3, [r4, #0]
 800efa2:	07df      	lsls	r7, r3, #31
 800efa4:	d508      	bpl.n	800efb8 <_printf_i+0x14c>
 800efa6:	6923      	ldr	r3, [r4, #16]
 800efa8:	6861      	ldr	r1, [r4, #4]
 800efaa:	4299      	cmp	r1, r3
 800efac:	bfde      	ittt	le
 800efae:	2330      	movle	r3, #48	; 0x30
 800efb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800efb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800efb8:	1b92      	subs	r2, r2, r6
 800efba:	6122      	str	r2, [r4, #16]
 800efbc:	f8cd a000 	str.w	sl, [sp]
 800efc0:	464b      	mov	r3, r9
 800efc2:	aa03      	add	r2, sp, #12
 800efc4:	4621      	mov	r1, r4
 800efc6:	4640      	mov	r0, r8
 800efc8:	f7ff fee2 	bl	800ed90 <_printf_common>
 800efcc:	3001      	adds	r0, #1
 800efce:	d14c      	bne.n	800f06a <_printf_i+0x1fe>
 800efd0:	f04f 30ff 	mov.w	r0, #4294967295
 800efd4:	b004      	add	sp, #16
 800efd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efda:	4835      	ldr	r0, [pc, #212]	; (800f0b0 <_printf_i+0x244>)
 800efdc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800efe0:	6823      	ldr	r3, [r4, #0]
 800efe2:	680e      	ldr	r6, [r1, #0]
 800efe4:	061f      	lsls	r7, r3, #24
 800efe6:	f856 5b04 	ldr.w	r5, [r6], #4
 800efea:	600e      	str	r6, [r1, #0]
 800efec:	d514      	bpl.n	800f018 <_printf_i+0x1ac>
 800efee:	07d9      	lsls	r1, r3, #31
 800eff0:	bf44      	itt	mi
 800eff2:	f043 0320 	orrmi.w	r3, r3, #32
 800eff6:	6023      	strmi	r3, [r4, #0]
 800eff8:	b91d      	cbnz	r5, 800f002 <_printf_i+0x196>
 800effa:	6823      	ldr	r3, [r4, #0]
 800effc:	f023 0320 	bic.w	r3, r3, #32
 800f000:	6023      	str	r3, [r4, #0]
 800f002:	2310      	movs	r3, #16
 800f004:	e7b0      	b.n	800ef68 <_printf_i+0xfc>
 800f006:	6823      	ldr	r3, [r4, #0]
 800f008:	f043 0320 	orr.w	r3, r3, #32
 800f00c:	6023      	str	r3, [r4, #0]
 800f00e:	2378      	movs	r3, #120	; 0x78
 800f010:	4828      	ldr	r0, [pc, #160]	; (800f0b4 <_printf_i+0x248>)
 800f012:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f016:	e7e3      	b.n	800efe0 <_printf_i+0x174>
 800f018:	065e      	lsls	r6, r3, #25
 800f01a:	bf48      	it	mi
 800f01c:	b2ad      	uxthmi	r5, r5
 800f01e:	e7e6      	b.n	800efee <_printf_i+0x182>
 800f020:	4616      	mov	r6, r2
 800f022:	e7bb      	b.n	800ef9c <_printf_i+0x130>
 800f024:	680b      	ldr	r3, [r1, #0]
 800f026:	6826      	ldr	r6, [r4, #0]
 800f028:	6960      	ldr	r0, [r4, #20]
 800f02a:	1d1d      	adds	r5, r3, #4
 800f02c:	600d      	str	r5, [r1, #0]
 800f02e:	0635      	lsls	r5, r6, #24
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	d501      	bpl.n	800f038 <_printf_i+0x1cc>
 800f034:	6018      	str	r0, [r3, #0]
 800f036:	e002      	b.n	800f03e <_printf_i+0x1d2>
 800f038:	0671      	lsls	r1, r6, #25
 800f03a:	d5fb      	bpl.n	800f034 <_printf_i+0x1c8>
 800f03c:	8018      	strh	r0, [r3, #0]
 800f03e:	2300      	movs	r3, #0
 800f040:	6123      	str	r3, [r4, #16]
 800f042:	4616      	mov	r6, r2
 800f044:	e7ba      	b.n	800efbc <_printf_i+0x150>
 800f046:	680b      	ldr	r3, [r1, #0]
 800f048:	1d1a      	adds	r2, r3, #4
 800f04a:	600a      	str	r2, [r1, #0]
 800f04c:	681e      	ldr	r6, [r3, #0]
 800f04e:	6862      	ldr	r2, [r4, #4]
 800f050:	2100      	movs	r1, #0
 800f052:	4630      	mov	r0, r6
 800f054:	f7f1 f8dc 	bl	8000210 <memchr>
 800f058:	b108      	cbz	r0, 800f05e <_printf_i+0x1f2>
 800f05a:	1b80      	subs	r0, r0, r6
 800f05c:	6060      	str	r0, [r4, #4]
 800f05e:	6863      	ldr	r3, [r4, #4]
 800f060:	6123      	str	r3, [r4, #16]
 800f062:	2300      	movs	r3, #0
 800f064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f068:	e7a8      	b.n	800efbc <_printf_i+0x150>
 800f06a:	6923      	ldr	r3, [r4, #16]
 800f06c:	4632      	mov	r2, r6
 800f06e:	4649      	mov	r1, r9
 800f070:	4640      	mov	r0, r8
 800f072:	47d0      	blx	sl
 800f074:	3001      	adds	r0, #1
 800f076:	d0ab      	beq.n	800efd0 <_printf_i+0x164>
 800f078:	6823      	ldr	r3, [r4, #0]
 800f07a:	079b      	lsls	r3, r3, #30
 800f07c:	d413      	bmi.n	800f0a6 <_printf_i+0x23a>
 800f07e:	68e0      	ldr	r0, [r4, #12]
 800f080:	9b03      	ldr	r3, [sp, #12]
 800f082:	4298      	cmp	r0, r3
 800f084:	bfb8      	it	lt
 800f086:	4618      	movlt	r0, r3
 800f088:	e7a4      	b.n	800efd4 <_printf_i+0x168>
 800f08a:	2301      	movs	r3, #1
 800f08c:	4632      	mov	r2, r6
 800f08e:	4649      	mov	r1, r9
 800f090:	4640      	mov	r0, r8
 800f092:	47d0      	blx	sl
 800f094:	3001      	adds	r0, #1
 800f096:	d09b      	beq.n	800efd0 <_printf_i+0x164>
 800f098:	3501      	adds	r5, #1
 800f09a:	68e3      	ldr	r3, [r4, #12]
 800f09c:	9903      	ldr	r1, [sp, #12]
 800f09e:	1a5b      	subs	r3, r3, r1
 800f0a0:	42ab      	cmp	r3, r5
 800f0a2:	dcf2      	bgt.n	800f08a <_printf_i+0x21e>
 800f0a4:	e7eb      	b.n	800f07e <_printf_i+0x212>
 800f0a6:	2500      	movs	r5, #0
 800f0a8:	f104 0619 	add.w	r6, r4, #25
 800f0ac:	e7f5      	b.n	800f09a <_printf_i+0x22e>
 800f0ae:	bf00      	nop
 800f0b0:	08012341 	.word	0x08012341
 800f0b4:	08012352 	.word	0x08012352

0800f0b8 <_sbrk_r>:
 800f0b8:	b538      	push	{r3, r4, r5, lr}
 800f0ba:	4d06      	ldr	r5, [pc, #24]	; (800f0d4 <_sbrk_r+0x1c>)
 800f0bc:	2300      	movs	r3, #0
 800f0be:	4604      	mov	r4, r0
 800f0c0:	4608      	mov	r0, r1
 800f0c2:	602b      	str	r3, [r5, #0]
 800f0c4:	f7f1 fdb4 	bl	8000c30 <_sbrk>
 800f0c8:	1c43      	adds	r3, r0, #1
 800f0ca:	d102      	bne.n	800f0d2 <_sbrk_r+0x1a>
 800f0cc:	682b      	ldr	r3, [r5, #0]
 800f0ce:	b103      	cbz	r3, 800f0d2 <_sbrk_r+0x1a>
 800f0d0:	6023      	str	r3, [r4, #0]
 800f0d2:	bd38      	pop	{r3, r4, r5, pc}
 800f0d4:	20008b10 	.word	0x20008b10

0800f0d8 <__sread>:
 800f0d8:	b510      	push	{r4, lr}
 800f0da:	460c      	mov	r4, r1
 800f0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0e0:	f000 fa92 	bl	800f608 <_read_r>
 800f0e4:	2800      	cmp	r0, #0
 800f0e6:	bfab      	itete	ge
 800f0e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f0ea:	89a3      	ldrhlt	r3, [r4, #12]
 800f0ec:	181b      	addge	r3, r3, r0
 800f0ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f0f2:	bfac      	ite	ge
 800f0f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f0f6:	81a3      	strhlt	r3, [r4, #12]
 800f0f8:	bd10      	pop	{r4, pc}

0800f0fa <__swrite>:
 800f0fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0fe:	461f      	mov	r7, r3
 800f100:	898b      	ldrh	r3, [r1, #12]
 800f102:	05db      	lsls	r3, r3, #23
 800f104:	4605      	mov	r5, r0
 800f106:	460c      	mov	r4, r1
 800f108:	4616      	mov	r6, r2
 800f10a:	d505      	bpl.n	800f118 <__swrite+0x1e>
 800f10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f110:	2302      	movs	r3, #2
 800f112:	2200      	movs	r2, #0
 800f114:	f000 f9d0 	bl	800f4b8 <_lseek_r>
 800f118:	89a3      	ldrh	r3, [r4, #12]
 800f11a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f11e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f122:	81a3      	strh	r3, [r4, #12]
 800f124:	4632      	mov	r2, r6
 800f126:	463b      	mov	r3, r7
 800f128:	4628      	mov	r0, r5
 800f12a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f12e:	f000 b869 	b.w	800f204 <_write_r>

0800f132 <__sseek>:
 800f132:	b510      	push	{r4, lr}
 800f134:	460c      	mov	r4, r1
 800f136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f13a:	f000 f9bd 	bl	800f4b8 <_lseek_r>
 800f13e:	1c43      	adds	r3, r0, #1
 800f140:	89a3      	ldrh	r3, [r4, #12]
 800f142:	bf15      	itete	ne
 800f144:	6560      	strne	r0, [r4, #84]	; 0x54
 800f146:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f14a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f14e:	81a3      	strheq	r3, [r4, #12]
 800f150:	bf18      	it	ne
 800f152:	81a3      	strhne	r3, [r4, #12]
 800f154:	bd10      	pop	{r4, pc}

0800f156 <__sclose>:
 800f156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f15a:	f000 b8db 	b.w	800f314 <_close_r>
	...

0800f160 <__swbuf_r>:
 800f160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f162:	460e      	mov	r6, r1
 800f164:	4614      	mov	r4, r2
 800f166:	4605      	mov	r5, r0
 800f168:	b118      	cbz	r0, 800f172 <__swbuf_r+0x12>
 800f16a:	6983      	ldr	r3, [r0, #24]
 800f16c:	b90b      	cbnz	r3, 800f172 <__swbuf_r+0x12>
 800f16e:	f7ff f9f5 	bl	800e55c <__sinit>
 800f172:	4b21      	ldr	r3, [pc, #132]	; (800f1f8 <__swbuf_r+0x98>)
 800f174:	429c      	cmp	r4, r3
 800f176:	d12b      	bne.n	800f1d0 <__swbuf_r+0x70>
 800f178:	686c      	ldr	r4, [r5, #4]
 800f17a:	69a3      	ldr	r3, [r4, #24]
 800f17c:	60a3      	str	r3, [r4, #8]
 800f17e:	89a3      	ldrh	r3, [r4, #12]
 800f180:	071a      	lsls	r2, r3, #28
 800f182:	d52f      	bpl.n	800f1e4 <__swbuf_r+0x84>
 800f184:	6923      	ldr	r3, [r4, #16]
 800f186:	b36b      	cbz	r3, 800f1e4 <__swbuf_r+0x84>
 800f188:	6923      	ldr	r3, [r4, #16]
 800f18a:	6820      	ldr	r0, [r4, #0]
 800f18c:	1ac0      	subs	r0, r0, r3
 800f18e:	6963      	ldr	r3, [r4, #20]
 800f190:	b2f6      	uxtb	r6, r6
 800f192:	4283      	cmp	r3, r0
 800f194:	4637      	mov	r7, r6
 800f196:	dc04      	bgt.n	800f1a2 <__swbuf_r+0x42>
 800f198:	4621      	mov	r1, r4
 800f19a:	4628      	mov	r0, r5
 800f19c:	f000 f950 	bl	800f440 <_fflush_r>
 800f1a0:	bb30      	cbnz	r0, 800f1f0 <__swbuf_r+0x90>
 800f1a2:	68a3      	ldr	r3, [r4, #8]
 800f1a4:	3b01      	subs	r3, #1
 800f1a6:	60a3      	str	r3, [r4, #8]
 800f1a8:	6823      	ldr	r3, [r4, #0]
 800f1aa:	1c5a      	adds	r2, r3, #1
 800f1ac:	6022      	str	r2, [r4, #0]
 800f1ae:	701e      	strb	r6, [r3, #0]
 800f1b0:	6963      	ldr	r3, [r4, #20]
 800f1b2:	3001      	adds	r0, #1
 800f1b4:	4283      	cmp	r3, r0
 800f1b6:	d004      	beq.n	800f1c2 <__swbuf_r+0x62>
 800f1b8:	89a3      	ldrh	r3, [r4, #12]
 800f1ba:	07db      	lsls	r3, r3, #31
 800f1bc:	d506      	bpl.n	800f1cc <__swbuf_r+0x6c>
 800f1be:	2e0a      	cmp	r6, #10
 800f1c0:	d104      	bne.n	800f1cc <__swbuf_r+0x6c>
 800f1c2:	4621      	mov	r1, r4
 800f1c4:	4628      	mov	r0, r5
 800f1c6:	f000 f93b 	bl	800f440 <_fflush_r>
 800f1ca:	b988      	cbnz	r0, 800f1f0 <__swbuf_r+0x90>
 800f1cc:	4638      	mov	r0, r7
 800f1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1d0:	4b0a      	ldr	r3, [pc, #40]	; (800f1fc <__swbuf_r+0x9c>)
 800f1d2:	429c      	cmp	r4, r3
 800f1d4:	d101      	bne.n	800f1da <__swbuf_r+0x7a>
 800f1d6:	68ac      	ldr	r4, [r5, #8]
 800f1d8:	e7cf      	b.n	800f17a <__swbuf_r+0x1a>
 800f1da:	4b09      	ldr	r3, [pc, #36]	; (800f200 <__swbuf_r+0xa0>)
 800f1dc:	429c      	cmp	r4, r3
 800f1de:	bf08      	it	eq
 800f1e0:	68ec      	ldreq	r4, [r5, #12]
 800f1e2:	e7ca      	b.n	800f17a <__swbuf_r+0x1a>
 800f1e4:	4621      	mov	r1, r4
 800f1e6:	4628      	mov	r0, r5
 800f1e8:	f000 f81e 	bl	800f228 <__swsetup_r>
 800f1ec:	2800      	cmp	r0, #0
 800f1ee:	d0cb      	beq.n	800f188 <__swbuf_r+0x28>
 800f1f0:	f04f 37ff 	mov.w	r7, #4294967295
 800f1f4:	e7ea      	b.n	800f1cc <__swbuf_r+0x6c>
 800f1f6:	bf00      	nop
 800f1f8:	080122f0 	.word	0x080122f0
 800f1fc:	08012310 	.word	0x08012310
 800f200:	080122d0 	.word	0x080122d0

0800f204 <_write_r>:
 800f204:	b538      	push	{r3, r4, r5, lr}
 800f206:	4d07      	ldr	r5, [pc, #28]	; (800f224 <_write_r+0x20>)
 800f208:	4604      	mov	r4, r0
 800f20a:	4608      	mov	r0, r1
 800f20c:	4611      	mov	r1, r2
 800f20e:	2200      	movs	r2, #0
 800f210:	602a      	str	r2, [r5, #0]
 800f212:	461a      	mov	r2, r3
 800f214:	f7f1 fcbb 	bl	8000b8e <_write>
 800f218:	1c43      	adds	r3, r0, #1
 800f21a:	d102      	bne.n	800f222 <_write_r+0x1e>
 800f21c:	682b      	ldr	r3, [r5, #0]
 800f21e:	b103      	cbz	r3, 800f222 <_write_r+0x1e>
 800f220:	6023      	str	r3, [r4, #0]
 800f222:	bd38      	pop	{r3, r4, r5, pc}
 800f224:	20008b10 	.word	0x20008b10

0800f228 <__swsetup_r>:
 800f228:	4b32      	ldr	r3, [pc, #200]	; (800f2f4 <__swsetup_r+0xcc>)
 800f22a:	b570      	push	{r4, r5, r6, lr}
 800f22c:	681d      	ldr	r5, [r3, #0]
 800f22e:	4606      	mov	r6, r0
 800f230:	460c      	mov	r4, r1
 800f232:	b125      	cbz	r5, 800f23e <__swsetup_r+0x16>
 800f234:	69ab      	ldr	r3, [r5, #24]
 800f236:	b913      	cbnz	r3, 800f23e <__swsetup_r+0x16>
 800f238:	4628      	mov	r0, r5
 800f23a:	f7ff f98f 	bl	800e55c <__sinit>
 800f23e:	4b2e      	ldr	r3, [pc, #184]	; (800f2f8 <__swsetup_r+0xd0>)
 800f240:	429c      	cmp	r4, r3
 800f242:	d10f      	bne.n	800f264 <__swsetup_r+0x3c>
 800f244:	686c      	ldr	r4, [r5, #4]
 800f246:	89a3      	ldrh	r3, [r4, #12]
 800f248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f24c:	0719      	lsls	r1, r3, #28
 800f24e:	d42c      	bmi.n	800f2aa <__swsetup_r+0x82>
 800f250:	06dd      	lsls	r5, r3, #27
 800f252:	d411      	bmi.n	800f278 <__swsetup_r+0x50>
 800f254:	2309      	movs	r3, #9
 800f256:	6033      	str	r3, [r6, #0]
 800f258:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f25c:	81a3      	strh	r3, [r4, #12]
 800f25e:	f04f 30ff 	mov.w	r0, #4294967295
 800f262:	e03e      	b.n	800f2e2 <__swsetup_r+0xba>
 800f264:	4b25      	ldr	r3, [pc, #148]	; (800f2fc <__swsetup_r+0xd4>)
 800f266:	429c      	cmp	r4, r3
 800f268:	d101      	bne.n	800f26e <__swsetup_r+0x46>
 800f26a:	68ac      	ldr	r4, [r5, #8]
 800f26c:	e7eb      	b.n	800f246 <__swsetup_r+0x1e>
 800f26e:	4b24      	ldr	r3, [pc, #144]	; (800f300 <__swsetup_r+0xd8>)
 800f270:	429c      	cmp	r4, r3
 800f272:	bf08      	it	eq
 800f274:	68ec      	ldreq	r4, [r5, #12]
 800f276:	e7e6      	b.n	800f246 <__swsetup_r+0x1e>
 800f278:	0758      	lsls	r0, r3, #29
 800f27a:	d512      	bpl.n	800f2a2 <__swsetup_r+0x7a>
 800f27c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f27e:	b141      	cbz	r1, 800f292 <__swsetup_r+0x6a>
 800f280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f284:	4299      	cmp	r1, r3
 800f286:	d002      	beq.n	800f28e <__swsetup_r+0x66>
 800f288:	4630      	mov	r0, r6
 800f28a:	f7ff fa21 	bl	800e6d0 <_free_r>
 800f28e:	2300      	movs	r3, #0
 800f290:	6363      	str	r3, [r4, #52]	; 0x34
 800f292:	89a3      	ldrh	r3, [r4, #12]
 800f294:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f298:	81a3      	strh	r3, [r4, #12]
 800f29a:	2300      	movs	r3, #0
 800f29c:	6063      	str	r3, [r4, #4]
 800f29e:	6923      	ldr	r3, [r4, #16]
 800f2a0:	6023      	str	r3, [r4, #0]
 800f2a2:	89a3      	ldrh	r3, [r4, #12]
 800f2a4:	f043 0308 	orr.w	r3, r3, #8
 800f2a8:	81a3      	strh	r3, [r4, #12]
 800f2aa:	6923      	ldr	r3, [r4, #16]
 800f2ac:	b94b      	cbnz	r3, 800f2c2 <__swsetup_r+0x9a>
 800f2ae:	89a3      	ldrh	r3, [r4, #12]
 800f2b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f2b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2b8:	d003      	beq.n	800f2c2 <__swsetup_r+0x9a>
 800f2ba:	4621      	mov	r1, r4
 800f2bc:	4630      	mov	r0, r6
 800f2be:	f000 f931 	bl	800f524 <__smakebuf_r>
 800f2c2:	89a0      	ldrh	r0, [r4, #12]
 800f2c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2c8:	f010 0301 	ands.w	r3, r0, #1
 800f2cc:	d00a      	beq.n	800f2e4 <__swsetup_r+0xbc>
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	60a3      	str	r3, [r4, #8]
 800f2d2:	6963      	ldr	r3, [r4, #20]
 800f2d4:	425b      	negs	r3, r3
 800f2d6:	61a3      	str	r3, [r4, #24]
 800f2d8:	6923      	ldr	r3, [r4, #16]
 800f2da:	b943      	cbnz	r3, 800f2ee <__swsetup_r+0xc6>
 800f2dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f2e0:	d1ba      	bne.n	800f258 <__swsetup_r+0x30>
 800f2e2:	bd70      	pop	{r4, r5, r6, pc}
 800f2e4:	0781      	lsls	r1, r0, #30
 800f2e6:	bf58      	it	pl
 800f2e8:	6963      	ldrpl	r3, [r4, #20]
 800f2ea:	60a3      	str	r3, [r4, #8]
 800f2ec:	e7f4      	b.n	800f2d8 <__swsetup_r+0xb0>
 800f2ee:	2000      	movs	r0, #0
 800f2f0:	e7f7      	b.n	800f2e2 <__swsetup_r+0xba>
 800f2f2:	bf00      	nop
 800f2f4:	20000014 	.word	0x20000014
 800f2f8:	080122f0 	.word	0x080122f0
 800f2fc:	08012310 	.word	0x08012310
 800f300:	080122d0 	.word	0x080122d0

0800f304 <abort>:
 800f304:	b508      	push	{r3, lr}
 800f306:	2006      	movs	r0, #6
 800f308:	f000 f9b8 	bl	800f67c <raise>
 800f30c:	2001      	movs	r0, #1
 800f30e:	f7f1 fc17 	bl	8000b40 <_exit>
	...

0800f314 <_close_r>:
 800f314:	b538      	push	{r3, r4, r5, lr}
 800f316:	4d06      	ldr	r5, [pc, #24]	; (800f330 <_close_r+0x1c>)
 800f318:	2300      	movs	r3, #0
 800f31a:	4604      	mov	r4, r0
 800f31c:	4608      	mov	r0, r1
 800f31e:	602b      	str	r3, [r5, #0]
 800f320:	f7f1 fc51 	bl	8000bc6 <_close>
 800f324:	1c43      	adds	r3, r0, #1
 800f326:	d102      	bne.n	800f32e <_close_r+0x1a>
 800f328:	682b      	ldr	r3, [r5, #0]
 800f32a:	b103      	cbz	r3, 800f32e <_close_r+0x1a>
 800f32c:	6023      	str	r3, [r4, #0]
 800f32e:	bd38      	pop	{r3, r4, r5, pc}
 800f330:	20008b10 	.word	0x20008b10

0800f334 <__sflush_r>:
 800f334:	898a      	ldrh	r2, [r1, #12]
 800f336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f33a:	4605      	mov	r5, r0
 800f33c:	0710      	lsls	r0, r2, #28
 800f33e:	460c      	mov	r4, r1
 800f340:	d458      	bmi.n	800f3f4 <__sflush_r+0xc0>
 800f342:	684b      	ldr	r3, [r1, #4]
 800f344:	2b00      	cmp	r3, #0
 800f346:	dc05      	bgt.n	800f354 <__sflush_r+0x20>
 800f348:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	dc02      	bgt.n	800f354 <__sflush_r+0x20>
 800f34e:	2000      	movs	r0, #0
 800f350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f356:	2e00      	cmp	r6, #0
 800f358:	d0f9      	beq.n	800f34e <__sflush_r+0x1a>
 800f35a:	2300      	movs	r3, #0
 800f35c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f360:	682f      	ldr	r7, [r5, #0]
 800f362:	602b      	str	r3, [r5, #0]
 800f364:	d032      	beq.n	800f3cc <__sflush_r+0x98>
 800f366:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f368:	89a3      	ldrh	r3, [r4, #12]
 800f36a:	075a      	lsls	r2, r3, #29
 800f36c:	d505      	bpl.n	800f37a <__sflush_r+0x46>
 800f36e:	6863      	ldr	r3, [r4, #4]
 800f370:	1ac0      	subs	r0, r0, r3
 800f372:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f374:	b10b      	cbz	r3, 800f37a <__sflush_r+0x46>
 800f376:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f378:	1ac0      	subs	r0, r0, r3
 800f37a:	2300      	movs	r3, #0
 800f37c:	4602      	mov	r2, r0
 800f37e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f380:	6a21      	ldr	r1, [r4, #32]
 800f382:	4628      	mov	r0, r5
 800f384:	47b0      	blx	r6
 800f386:	1c43      	adds	r3, r0, #1
 800f388:	89a3      	ldrh	r3, [r4, #12]
 800f38a:	d106      	bne.n	800f39a <__sflush_r+0x66>
 800f38c:	6829      	ldr	r1, [r5, #0]
 800f38e:	291d      	cmp	r1, #29
 800f390:	d82c      	bhi.n	800f3ec <__sflush_r+0xb8>
 800f392:	4a2a      	ldr	r2, [pc, #168]	; (800f43c <__sflush_r+0x108>)
 800f394:	40ca      	lsrs	r2, r1
 800f396:	07d6      	lsls	r6, r2, #31
 800f398:	d528      	bpl.n	800f3ec <__sflush_r+0xb8>
 800f39a:	2200      	movs	r2, #0
 800f39c:	6062      	str	r2, [r4, #4]
 800f39e:	04d9      	lsls	r1, r3, #19
 800f3a0:	6922      	ldr	r2, [r4, #16]
 800f3a2:	6022      	str	r2, [r4, #0]
 800f3a4:	d504      	bpl.n	800f3b0 <__sflush_r+0x7c>
 800f3a6:	1c42      	adds	r2, r0, #1
 800f3a8:	d101      	bne.n	800f3ae <__sflush_r+0x7a>
 800f3aa:	682b      	ldr	r3, [r5, #0]
 800f3ac:	b903      	cbnz	r3, 800f3b0 <__sflush_r+0x7c>
 800f3ae:	6560      	str	r0, [r4, #84]	; 0x54
 800f3b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3b2:	602f      	str	r7, [r5, #0]
 800f3b4:	2900      	cmp	r1, #0
 800f3b6:	d0ca      	beq.n	800f34e <__sflush_r+0x1a>
 800f3b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3bc:	4299      	cmp	r1, r3
 800f3be:	d002      	beq.n	800f3c6 <__sflush_r+0x92>
 800f3c0:	4628      	mov	r0, r5
 800f3c2:	f7ff f985 	bl	800e6d0 <_free_r>
 800f3c6:	2000      	movs	r0, #0
 800f3c8:	6360      	str	r0, [r4, #52]	; 0x34
 800f3ca:	e7c1      	b.n	800f350 <__sflush_r+0x1c>
 800f3cc:	6a21      	ldr	r1, [r4, #32]
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	4628      	mov	r0, r5
 800f3d2:	47b0      	blx	r6
 800f3d4:	1c41      	adds	r1, r0, #1
 800f3d6:	d1c7      	bne.n	800f368 <__sflush_r+0x34>
 800f3d8:	682b      	ldr	r3, [r5, #0]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d0c4      	beq.n	800f368 <__sflush_r+0x34>
 800f3de:	2b1d      	cmp	r3, #29
 800f3e0:	d001      	beq.n	800f3e6 <__sflush_r+0xb2>
 800f3e2:	2b16      	cmp	r3, #22
 800f3e4:	d101      	bne.n	800f3ea <__sflush_r+0xb6>
 800f3e6:	602f      	str	r7, [r5, #0]
 800f3e8:	e7b1      	b.n	800f34e <__sflush_r+0x1a>
 800f3ea:	89a3      	ldrh	r3, [r4, #12]
 800f3ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3f0:	81a3      	strh	r3, [r4, #12]
 800f3f2:	e7ad      	b.n	800f350 <__sflush_r+0x1c>
 800f3f4:	690f      	ldr	r7, [r1, #16]
 800f3f6:	2f00      	cmp	r7, #0
 800f3f8:	d0a9      	beq.n	800f34e <__sflush_r+0x1a>
 800f3fa:	0793      	lsls	r3, r2, #30
 800f3fc:	680e      	ldr	r6, [r1, #0]
 800f3fe:	bf08      	it	eq
 800f400:	694b      	ldreq	r3, [r1, #20]
 800f402:	600f      	str	r7, [r1, #0]
 800f404:	bf18      	it	ne
 800f406:	2300      	movne	r3, #0
 800f408:	eba6 0807 	sub.w	r8, r6, r7
 800f40c:	608b      	str	r3, [r1, #8]
 800f40e:	f1b8 0f00 	cmp.w	r8, #0
 800f412:	dd9c      	ble.n	800f34e <__sflush_r+0x1a>
 800f414:	6a21      	ldr	r1, [r4, #32]
 800f416:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f418:	4643      	mov	r3, r8
 800f41a:	463a      	mov	r2, r7
 800f41c:	4628      	mov	r0, r5
 800f41e:	47b0      	blx	r6
 800f420:	2800      	cmp	r0, #0
 800f422:	dc06      	bgt.n	800f432 <__sflush_r+0xfe>
 800f424:	89a3      	ldrh	r3, [r4, #12]
 800f426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f42a:	81a3      	strh	r3, [r4, #12]
 800f42c:	f04f 30ff 	mov.w	r0, #4294967295
 800f430:	e78e      	b.n	800f350 <__sflush_r+0x1c>
 800f432:	4407      	add	r7, r0
 800f434:	eba8 0800 	sub.w	r8, r8, r0
 800f438:	e7e9      	b.n	800f40e <__sflush_r+0xda>
 800f43a:	bf00      	nop
 800f43c:	20400001 	.word	0x20400001

0800f440 <_fflush_r>:
 800f440:	b538      	push	{r3, r4, r5, lr}
 800f442:	690b      	ldr	r3, [r1, #16]
 800f444:	4605      	mov	r5, r0
 800f446:	460c      	mov	r4, r1
 800f448:	b913      	cbnz	r3, 800f450 <_fflush_r+0x10>
 800f44a:	2500      	movs	r5, #0
 800f44c:	4628      	mov	r0, r5
 800f44e:	bd38      	pop	{r3, r4, r5, pc}
 800f450:	b118      	cbz	r0, 800f45a <_fflush_r+0x1a>
 800f452:	6983      	ldr	r3, [r0, #24]
 800f454:	b90b      	cbnz	r3, 800f45a <_fflush_r+0x1a>
 800f456:	f7ff f881 	bl	800e55c <__sinit>
 800f45a:	4b14      	ldr	r3, [pc, #80]	; (800f4ac <_fflush_r+0x6c>)
 800f45c:	429c      	cmp	r4, r3
 800f45e:	d11b      	bne.n	800f498 <_fflush_r+0x58>
 800f460:	686c      	ldr	r4, [r5, #4]
 800f462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d0ef      	beq.n	800f44a <_fflush_r+0xa>
 800f46a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f46c:	07d0      	lsls	r0, r2, #31
 800f46e:	d404      	bmi.n	800f47a <_fflush_r+0x3a>
 800f470:	0599      	lsls	r1, r3, #22
 800f472:	d402      	bmi.n	800f47a <_fflush_r+0x3a>
 800f474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f476:	f7ff f921 	bl	800e6bc <__retarget_lock_acquire_recursive>
 800f47a:	4628      	mov	r0, r5
 800f47c:	4621      	mov	r1, r4
 800f47e:	f7ff ff59 	bl	800f334 <__sflush_r>
 800f482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f484:	07da      	lsls	r2, r3, #31
 800f486:	4605      	mov	r5, r0
 800f488:	d4e0      	bmi.n	800f44c <_fflush_r+0xc>
 800f48a:	89a3      	ldrh	r3, [r4, #12]
 800f48c:	059b      	lsls	r3, r3, #22
 800f48e:	d4dd      	bmi.n	800f44c <_fflush_r+0xc>
 800f490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f492:	f7ff f914 	bl	800e6be <__retarget_lock_release_recursive>
 800f496:	e7d9      	b.n	800f44c <_fflush_r+0xc>
 800f498:	4b05      	ldr	r3, [pc, #20]	; (800f4b0 <_fflush_r+0x70>)
 800f49a:	429c      	cmp	r4, r3
 800f49c:	d101      	bne.n	800f4a2 <_fflush_r+0x62>
 800f49e:	68ac      	ldr	r4, [r5, #8]
 800f4a0:	e7df      	b.n	800f462 <_fflush_r+0x22>
 800f4a2:	4b04      	ldr	r3, [pc, #16]	; (800f4b4 <_fflush_r+0x74>)
 800f4a4:	429c      	cmp	r4, r3
 800f4a6:	bf08      	it	eq
 800f4a8:	68ec      	ldreq	r4, [r5, #12]
 800f4aa:	e7da      	b.n	800f462 <_fflush_r+0x22>
 800f4ac:	080122f0 	.word	0x080122f0
 800f4b0:	08012310 	.word	0x08012310
 800f4b4:	080122d0 	.word	0x080122d0

0800f4b8 <_lseek_r>:
 800f4b8:	b538      	push	{r3, r4, r5, lr}
 800f4ba:	4d07      	ldr	r5, [pc, #28]	; (800f4d8 <_lseek_r+0x20>)
 800f4bc:	4604      	mov	r4, r0
 800f4be:	4608      	mov	r0, r1
 800f4c0:	4611      	mov	r1, r2
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	602a      	str	r2, [r5, #0]
 800f4c6:	461a      	mov	r2, r3
 800f4c8:	f7f1 fba4 	bl	8000c14 <_lseek>
 800f4cc:	1c43      	adds	r3, r0, #1
 800f4ce:	d102      	bne.n	800f4d6 <_lseek_r+0x1e>
 800f4d0:	682b      	ldr	r3, [r5, #0]
 800f4d2:	b103      	cbz	r3, 800f4d6 <_lseek_r+0x1e>
 800f4d4:	6023      	str	r3, [r4, #0]
 800f4d6:	bd38      	pop	{r3, r4, r5, pc}
 800f4d8:	20008b10 	.word	0x20008b10

0800f4dc <__swhatbuf_r>:
 800f4dc:	b570      	push	{r4, r5, r6, lr}
 800f4de:	460e      	mov	r6, r1
 800f4e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4e4:	2900      	cmp	r1, #0
 800f4e6:	b096      	sub	sp, #88	; 0x58
 800f4e8:	4614      	mov	r4, r2
 800f4ea:	461d      	mov	r5, r3
 800f4ec:	da07      	bge.n	800f4fe <__swhatbuf_r+0x22>
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	602b      	str	r3, [r5, #0]
 800f4f2:	89b3      	ldrh	r3, [r6, #12]
 800f4f4:	061a      	lsls	r2, r3, #24
 800f4f6:	d410      	bmi.n	800f51a <__swhatbuf_r+0x3e>
 800f4f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4fc:	e00e      	b.n	800f51c <__swhatbuf_r+0x40>
 800f4fe:	466a      	mov	r2, sp
 800f500:	f000 f8d8 	bl	800f6b4 <_fstat_r>
 800f504:	2800      	cmp	r0, #0
 800f506:	dbf2      	blt.n	800f4ee <__swhatbuf_r+0x12>
 800f508:	9a01      	ldr	r2, [sp, #4]
 800f50a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f50e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f512:	425a      	negs	r2, r3
 800f514:	415a      	adcs	r2, r3
 800f516:	602a      	str	r2, [r5, #0]
 800f518:	e7ee      	b.n	800f4f8 <__swhatbuf_r+0x1c>
 800f51a:	2340      	movs	r3, #64	; 0x40
 800f51c:	2000      	movs	r0, #0
 800f51e:	6023      	str	r3, [r4, #0]
 800f520:	b016      	add	sp, #88	; 0x58
 800f522:	bd70      	pop	{r4, r5, r6, pc}

0800f524 <__smakebuf_r>:
 800f524:	898b      	ldrh	r3, [r1, #12]
 800f526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f528:	079d      	lsls	r5, r3, #30
 800f52a:	4606      	mov	r6, r0
 800f52c:	460c      	mov	r4, r1
 800f52e:	d507      	bpl.n	800f540 <__smakebuf_r+0x1c>
 800f530:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f534:	6023      	str	r3, [r4, #0]
 800f536:	6123      	str	r3, [r4, #16]
 800f538:	2301      	movs	r3, #1
 800f53a:	6163      	str	r3, [r4, #20]
 800f53c:	b002      	add	sp, #8
 800f53e:	bd70      	pop	{r4, r5, r6, pc}
 800f540:	ab01      	add	r3, sp, #4
 800f542:	466a      	mov	r2, sp
 800f544:	f7ff ffca 	bl	800f4dc <__swhatbuf_r>
 800f548:	9900      	ldr	r1, [sp, #0]
 800f54a:	4605      	mov	r5, r0
 800f54c:	4630      	mov	r0, r6
 800f54e:	f7ff f90f 	bl	800e770 <_malloc_r>
 800f552:	b948      	cbnz	r0, 800f568 <__smakebuf_r+0x44>
 800f554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f558:	059a      	lsls	r2, r3, #22
 800f55a:	d4ef      	bmi.n	800f53c <__smakebuf_r+0x18>
 800f55c:	f023 0303 	bic.w	r3, r3, #3
 800f560:	f043 0302 	orr.w	r3, r3, #2
 800f564:	81a3      	strh	r3, [r4, #12]
 800f566:	e7e3      	b.n	800f530 <__smakebuf_r+0xc>
 800f568:	4b0d      	ldr	r3, [pc, #52]	; (800f5a0 <__smakebuf_r+0x7c>)
 800f56a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f56c:	89a3      	ldrh	r3, [r4, #12]
 800f56e:	6020      	str	r0, [r4, #0]
 800f570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f574:	81a3      	strh	r3, [r4, #12]
 800f576:	9b00      	ldr	r3, [sp, #0]
 800f578:	6163      	str	r3, [r4, #20]
 800f57a:	9b01      	ldr	r3, [sp, #4]
 800f57c:	6120      	str	r0, [r4, #16]
 800f57e:	b15b      	cbz	r3, 800f598 <__smakebuf_r+0x74>
 800f580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f584:	4630      	mov	r0, r6
 800f586:	f000 f8a7 	bl	800f6d8 <_isatty_r>
 800f58a:	b128      	cbz	r0, 800f598 <__smakebuf_r+0x74>
 800f58c:	89a3      	ldrh	r3, [r4, #12]
 800f58e:	f023 0303 	bic.w	r3, r3, #3
 800f592:	f043 0301 	orr.w	r3, r3, #1
 800f596:	81a3      	strh	r3, [r4, #12]
 800f598:	89a0      	ldrh	r0, [r4, #12]
 800f59a:	4305      	orrs	r5, r0
 800f59c:	81a5      	strh	r5, [r4, #12]
 800f59e:	e7cd      	b.n	800f53c <__smakebuf_r+0x18>
 800f5a0:	0800e4f5 	.word	0x0800e4f5

0800f5a4 <__malloc_lock>:
 800f5a4:	4801      	ldr	r0, [pc, #4]	; (800f5ac <__malloc_lock+0x8>)
 800f5a6:	f7ff b889 	b.w	800e6bc <__retarget_lock_acquire_recursive>
 800f5aa:	bf00      	nop
 800f5ac:	20008b18 	.word	0x20008b18

0800f5b0 <__malloc_unlock>:
 800f5b0:	4801      	ldr	r0, [pc, #4]	; (800f5b8 <__malloc_unlock+0x8>)
 800f5b2:	f7ff b884 	b.w	800e6be <__retarget_lock_release_recursive>
 800f5b6:	bf00      	nop
 800f5b8:	20008b18 	.word	0x20008b18

0800f5bc <_realloc_r>:
 800f5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5be:	4607      	mov	r7, r0
 800f5c0:	4614      	mov	r4, r2
 800f5c2:	460e      	mov	r6, r1
 800f5c4:	b921      	cbnz	r1, 800f5d0 <_realloc_r+0x14>
 800f5c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f5ca:	4611      	mov	r1, r2
 800f5cc:	f7ff b8d0 	b.w	800e770 <_malloc_r>
 800f5d0:	b922      	cbnz	r2, 800f5dc <_realloc_r+0x20>
 800f5d2:	f7ff f87d 	bl	800e6d0 <_free_r>
 800f5d6:	4625      	mov	r5, r4
 800f5d8:	4628      	mov	r0, r5
 800f5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5dc:	f000 f88c 	bl	800f6f8 <_malloc_usable_size_r>
 800f5e0:	42a0      	cmp	r0, r4
 800f5e2:	d20f      	bcs.n	800f604 <_realloc_r+0x48>
 800f5e4:	4621      	mov	r1, r4
 800f5e6:	4638      	mov	r0, r7
 800f5e8:	f7ff f8c2 	bl	800e770 <_malloc_r>
 800f5ec:	4605      	mov	r5, r0
 800f5ee:	2800      	cmp	r0, #0
 800f5f0:	d0f2      	beq.n	800f5d8 <_realloc_r+0x1c>
 800f5f2:	4631      	mov	r1, r6
 800f5f4:	4622      	mov	r2, r4
 800f5f6:	f7fe fe93 	bl	800e320 <memcpy>
 800f5fa:	4631      	mov	r1, r6
 800f5fc:	4638      	mov	r0, r7
 800f5fe:	f7ff f867 	bl	800e6d0 <_free_r>
 800f602:	e7e9      	b.n	800f5d8 <_realloc_r+0x1c>
 800f604:	4635      	mov	r5, r6
 800f606:	e7e7      	b.n	800f5d8 <_realloc_r+0x1c>

0800f608 <_read_r>:
 800f608:	b538      	push	{r3, r4, r5, lr}
 800f60a:	4d07      	ldr	r5, [pc, #28]	; (800f628 <_read_r+0x20>)
 800f60c:	4604      	mov	r4, r0
 800f60e:	4608      	mov	r0, r1
 800f610:	4611      	mov	r1, r2
 800f612:	2200      	movs	r2, #0
 800f614:	602a      	str	r2, [r5, #0]
 800f616:	461a      	mov	r2, r3
 800f618:	f7f1 fa9c 	bl	8000b54 <_read>
 800f61c:	1c43      	adds	r3, r0, #1
 800f61e:	d102      	bne.n	800f626 <_read_r+0x1e>
 800f620:	682b      	ldr	r3, [r5, #0]
 800f622:	b103      	cbz	r3, 800f626 <_read_r+0x1e>
 800f624:	6023      	str	r3, [r4, #0]
 800f626:	bd38      	pop	{r3, r4, r5, pc}
 800f628:	20008b10 	.word	0x20008b10

0800f62c <_raise_r>:
 800f62c:	291f      	cmp	r1, #31
 800f62e:	b538      	push	{r3, r4, r5, lr}
 800f630:	4604      	mov	r4, r0
 800f632:	460d      	mov	r5, r1
 800f634:	d904      	bls.n	800f640 <_raise_r+0x14>
 800f636:	2316      	movs	r3, #22
 800f638:	6003      	str	r3, [r0, #0]
 800f63a:	f04f 30ff 	mov.w	r0, #4294967295
 800f63e:	bd38      	pop	{r3, r4, r5, pc}
 800f640:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f642:	b112      	cbz	r2, 800f64a <_raise_r+0x1e>
 800f644:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f648:	b94b      	cbnz	r3, 800f65e <_raise_r+0x32>
 800f64a:	4620      	mov	r0, r4
 800f64c:	f000 f830 	bl	800f6b0 <_getpid_r>
 800f650:	462a      	mov	r2, r5
 800f652:	4601      	mov	r1, r0
 800f654:	4620      	mov	r0, r4
 800f656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f65a:	f000 b817 	b.w	800f68c <_kill_r>
 800f65e:	2b01      	cmp	r3, #1
 800f660:	d00a      	beq.n	800f678 <_raise_r+0x4c>
 800f662:	1c59      	adds	r1, r3, #1
 800f664:	d103      	bne.n	800f66e <_raise_r+0x42>
 800f666:	2316      	movs	r3, #22
 800f668:	6003      	str	r3, [r0, #0]
 800f66a:	2001      	movs	r0, #1
 800f66c:	e7e7      	b.n	800f63e <_raise_r+0x12>
 800f66e:	2400      	movs	r4, #0
 800f670:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f674:	4628      	mov	r0, r5
 800f676:	4798      	blx	r3
 800f678:	2000      	movs	r0, #0
 800f67a:	e7e0      	b.n	800f63e <_raise_r+0x12>

0800f67c <raise>:
 800f67c:	4b02      	ldr	r3, [pc, #8]	; (800f688 <raise+0xc>)
 800f67e:	4601      	mov	r1, r0
 800f680:	6818      	ldr	r0, [r3, #0]
 800f682:	f7ff bfd3 	b.w	800f62c <_raise_r>
 800f686:	bf00      	nop
 800f688:	20000014 	.word	0x20000014

0800f68c <_kill_r>:
 800f68c:	b538      	push	{r3, r4, r5, lr}
 800f68e:	4d07      	ldr	r5, [pc, #28]	; (800f6ac <_kill_r+0x20>)
 800f690:	2300      	movs	r3, #0
 800f692:	4604      	mov	r4, r0
 800f694:	4608      	mov	r0, r1
 800f696:	4611      	mov	r1, r2
 800f698:	602b      	str	r3, [r5, #0]
 800f69a:	f7f1 fa3f 	bl	8000b1c <_kill>
 800f69e:	1c43      	adds	r3, r0, #1
 800f6a0:	d102      	bne.n	800f6a8 <_kill_r+0x1c>
 800f6a2:	682b      	ldr	r3, [r5, #0]
 800f6a4:	b103      	cbz	r3, 800f6a8 <_kill_r+0x1c>
 800f6a6:	6023      	str	r3, [r4, #0]
 800f6a8:	bd38      	pop	{r3, r4, r5, pc}
 800f6aa:	bf00      	nop
 800f6ac:	20008b10 	.word	0x20008b10

0800f6b0 <_getpid_r>:
 800f6b0:	f7f1 ba2c 	b.w	8000b0c <_getpid>

0800f6b4 <_fstat_r>:
 800f6b4:	b538      	push	{r3, r4, r5, lr}
 800f6b6:	4d07      	ldr	r5, [pc, #28]	; (800f6d4 <_fstat_r+0x20>)
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	4604      	mov	r4, r0
 800f6bc:	4608      	mov	r0, r1
 800f6be:	4611      	mov	r1, r2
 800f6c0:	602b      	str	r3, [r5, #0]
 800f6c2:	f7f1 fa8c 	bl	8000bde <_fstat>
 800f6c6:	1c43      	adds	r3, r0, #1
 800f6c8:	d102      	bne.n	800f6d0 <_fstat_r+0x1c>
 800f6ca:	682b      	ldr	r3, [r5, #0]
 800f6cc:	b103      	cbz	r3, 800f6d0 <_fstat_r+0x1c>
 800f6ce:	6023      	str	r3, [r4, #0]
 800f6d0:	bd38      	pop	{r3, r4, r5, pc}
 800f6d2:	bf00      	nop
 800f6d4:	20008b10 	.word	0x20008b10

0800f6d8 <_isatty_r>:
 800f6d8:	b538      	push	{r3, r4, r5, lr}
 800f6da:	4d06      	ldr	r5, [pc, #24]	; (800f6f4 <_isatty_r+0x1c>)
 800f6dc:	2300      	movs	r3, #0
 800f6de:	4604      	mov	r4, r0
 800f6e0:	4608      	mov	r0, r1
 800f6e2:	602b      	str	r3, [r5, #0]
 800f6e4:	f7f1 fa8b 	bl	8000bfe <_isatty>
 800f6e8:	1c43      	adds	r3, r0, #1
 800f6ea:	d102      	bne.n	800f6f2 <_isatty_r+0x1a>
 800f6ec:	682b      	ldr	r3, [r5, #0]
 800f6ee:	b103      	cbz	r3, 800f6f2 <_isatty_r+0x1a>
 800f6f0:	6023      	str	r3, [r4, #0]
 800f6f2:	bd38      	pop	{r3, r4, r5, pc}
 800f6f4:	20008b10 	.word	0x20008b10

0800f6f8 <_malloc_usable_size_r>:
 800f6f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6fc:	1f18      	subs	r0, r3, #4
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	bfbc      	itt	lt
 800f702:	580b      	ldrlt	r3, [r1, r0]
 800f704:	18c0      	addlt	r0, r0, r3
 800f706:	4770      	bx	lr

0800f708 <_init>:
 800f708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f70a:	bf00      	nop
 800f70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f70e:	bc08      	pop	{r3}
 800f710:	469e      	mov	lr, r3
 800f712:	4770      	bx	lr

0800f714 <_fini>:
 800f714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f716:	bf00      	nop
 800f718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f71a:	bc08      	pop	{r3}
 800f71c:	469e      	mov	lr, r3
 800f71e:	4770      	bx	lr
