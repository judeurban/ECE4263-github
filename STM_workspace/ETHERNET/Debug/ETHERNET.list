
ETHERNET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c48  0800f598  0800f598  0001f598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080121e0  080121e0  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  080121e0  080121e0  000221e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080121e8  080121e8  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080121e8  080121e8  000221e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080121ec  080121ec  000221ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080121f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b04  20000078  08012268  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008b7c  08012268  00038b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003988e  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060d2  00000000  00000000  00069936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  0006fa08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001568  00000000  00000000  00071040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031e44  00000000  00000000  000725a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026205  00000000  00000000  000a43ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104193  00000000  00000000  000ca5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ce784  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006494  00000000  00000000  001ce7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f580 	.word	0x0800f580

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800f580 	.word	0x0800f580

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005ac:	f3bf 8f4f 	dsb	sy
}
 80005b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005b2:	f3bf 8f6f 	isb	sy
}
 80005b6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <SCB_EnableICache+0x48>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005c0:	f3bf 8f4f 	dsb	sy
}
 80005c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005c6:	f3bf 8f6f 	isb	sy
}
 80005ca:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <SCB_EnableICache+0x48>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <SCB_EnableICache+0x48>)
 80005d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005d8:	f3bf 8f4f 	dsb	sy
}
 80005dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005de:	f3bf 8f6f 	isb	sy
}
 80005e2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <SCB_EnableDCache+0x84>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000602:	f3bf 8f4f 	dsb	sy
}
 8000606:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <SCB_EnableDCache+0x84>)
 800060a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800060e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	0b5b      	lsrs	r3, r3, #13
 8000614:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000618:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	08db      	lsrs	r3, r3, #3
 800061e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000622:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	015a      	lsls	r2, r3, #5
 8000628:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800062c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000632:	4911      	ldr	r1, [pc, #68]	; (8000678 <SCB_EnableDCache+0x84>)
 8000634:	4313      	orrs	r3, r2
 8000636:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	1e5a      	subs	r2, r3, #1
 800063e:	60ba      	str	r2, [r7, #8]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1ef      	bne.n	8000624 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	1e5a      	subs	r2, r3, #1
 8000648:	60fa      	str	r2, [r7, #12]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1e5      	bne.n	800061a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <SCB_EnableDCache+0x84>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <SCB_EnableDCache+0x84>)
 800065a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800065e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000660:	f3bf 8f4f 	dsb	sy
}
 8000664:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000666:	f3bf 8f6f 	isb	sy
}
 800066a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000680:	f000 f912 	bl	80008a8 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000684:	f7ff ff90 	bl	80005a8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000688:	f7ff ffb4 	bl	80005f4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f000 fbce 	bl	8000e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f816 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 f8a6 	bl	80007e4 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000698:	f003 f822 	bl	80036e0 <MX_LWIP_Init>
  MX_TIM14_Init();
 800069c:	f000 f87e 	bl	800079c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  // Connect the client to the server
  udpClient_connect();
 80006a0:	f000 fb12 	bl	8000cc8 <udpClient_connect>

  // Start interrupt timer 
  HAL_TIM_Base_Start_IT(&htim14);
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <main+0x3c>)
 80006a6:	f002 fd9d 	bl	80031e4 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ethernetif_input(&gnetif);
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <main+0x40>)
 80006ac:	f003 fc02 	bl	8003eb4 <ethernetif_input>

	  sys_check_timeouts();
 80006b0:	f00a fd20 	bl	800b0f4 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80006b4:	e7f9      	b.n	80006aa <main+0x2e>
 80006b6:	bf00      	nop
 80006b8:	20000214 	.word	0x20000214
 80006bc:	2000031c 	.word	0x2000031c

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f00d fd76 	bl	800e1c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <SystemClock_Config+0xd4>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a2a      	ldr	r2, [pc, #168]	; (8000794 <SystemClock_Config+0xd4>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <SystemClock_Config+0xd4>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <SystemClock_Config+0xd8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a25      	ldr	r2, [pc, #148]	; (8000798 <SystemClock_Config+0xd8>)
 8000702:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemClock_Config+0xd8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000714:	2301      	movs	r3, #1
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000722:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000728:	2319      	movs	r3, #25
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 800072c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000730:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000732:	2302      	movs	r3, #2
 8000734:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000736:	2302      	movs	r3, #2
 8000738:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	4618      	mov	r0, r3
 8000740:	f002 f860 	bl	8002804 <HAL_RCC_OscConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800074a:	f000 f8f9 	bl	8000940 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800074e:	f002 f809 	bl	8002764 <HAL_PWREx_EnableOverDrive>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000758:	f000 f8f2 	bl	8000940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000768:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2107      	movs	r1, #7
 800077a:	4618      	mov	r0, r3
 800077c:	f002 fae6 	bl	8002d4c <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000786:	f000 f8db 	bl	8000940 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	; 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_TIM14_Init+0x40>)
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <MX_TIM14_Init+0x44>)
 80007a4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 21600-1;
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <MX_TIM14_Init+0x40>)
 80007a8:	f245 425f 	movw	r2, #21599	; 0x545f
 80007ac:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_TIM14_Init+0x40>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000 - 1;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_TIM14_Init+0x40>)
 80007b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007ba:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_TIM14_Init+0x40>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_TIM14_Init+0x40>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_TIM14_Init+0x40>)
 80007ca:	f002 fcb3 	bl	8003134 <HAL_TIM_Base_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80007d4:	f000 f8b4 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000214 	.word	0x20000214
 80007e0:	40002000 	.word	0x40002000

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_GPIO_Init+0xbc>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a28      	ldr	r2, [pc, #160]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a22      	ldr	r2, [pc, #136]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <MX_GPIO_Init+0xbc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a16      	ldr	r2, [pc, #88]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_GPIO_Init+0xbc>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_GPIO_Init+0xbc>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2101      	movs	r1, #1
 8000876:	480b      	ldr	r0, [pc, #44]	; (80008a4 <MX_GPIO_Init+0xc0>)
 8000878:	f001 ff40 	bl	80026fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800087c:	2301      	movs	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_GPIO_Init+0xc0>)
 8000894:	f001 fd86 	bl	80023a4 <HAL_GPIO_Init>

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020400 	.word	0x40020400

080008a8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008ae:	463b      	mov	r3, r7
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008ba:	f000 fbf3 	bl	80010a4 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008be:	2301      	movs	r3, #1
 80008c0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20010000;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MPU_Config+0x58>)
 80008c8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80008ca:	230d      	movs	r3, #13
 80008cc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80008d6:	2303      	movs	r3, #3
 80008d8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008da:	2301      	movs	r3, #1
 80008dc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008de:	2301      	movs	r3, #1
 80008e0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008ea:	463b      	mov	r3, r7
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fc11 	bl	8001114 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008f2:	2004      	movs	r0, #4
 80008f4:	f000 fbee 	bl	80010d4 <HAL_MPU_Enable>

}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20010000 	.word	0x20010000

08000904 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000914:	d101      	bne.n	800091a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000916:	f000 fa9f 	bl	8000e58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim == &htim14)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a06      	ldr	r2, [pc, #24]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d105      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x2a>
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);  
 8000922:	2101      	movs	r1, #1
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000926:	f001 ff02 	bl	800272e <HAL_GPIO_TogglePin>
	  udpClient_send();
 800092a:	f000 fa03 	bl	8000d34 <udpClient_send>
  }

  /* USER CODE END Callback 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000214 	.word	0x20000214
 800093c:	40020400 	.word	0x40020400

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <HAL_MspInit+0x44>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <HAL_MspInit+0x44>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <HAL_MspInit+0x44>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_MspInit+0x44>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_MspInit+0x44>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000974:	6453      	str	r3, [r2, #68]	; 0x44
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_MspInit+0x44>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <HAL_TIM_Base_MspInit+0x44>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d113      	bne.n	80009ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <HAL_TIM_Base_MspInit+0x48>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <HAL_TIM_Base_MspInit+0x48>)
 80009ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_TIM_Base_MspInit+0x48>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	202d      	movs	r0, #45	; 0x2d
 80009c4:	f000 fb44 	bl	8001050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80009c8:	202d      	movs	r0, #45	; 0x2d
 80009ca:	f000 fb5d 	bl	8001088 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40002000 	.word	0x40002000
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	; 0x30
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	201c      	movs	r0, #28
 80009f6:	f000 fb2b 	bl	8001050 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009fa:	201c      	movs	r0, #28
 80009fc:	f000 fb44 	bl	8001088 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000a00:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <HAL_InitTick+0xa4>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <HAL_InitTick+0xa4>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <HAL_InitTick+0xa4>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a18:	f107 0210 	add.w	r2, r7, #16
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 fb54 	bl	80030d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a28:	f002 fb3e 	bl	80030a8 <HAL_RCC_GetPCLK1Freq>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a34:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <HAL_InitTick+0xa8>)
 8000a36:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3a:	0c9b      	lsrs	r3, r3, #18
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_InitTick+0xac>)
 8000a42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000a48:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <HAL_InitTick+0xac>)
 8000a4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a4e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000a50:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_InitTick+0xac>)
 8000a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a54:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <HAL_InitTick+0xac>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_InitTick+0xac>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000a62:	480a      	ldr	r0, [pc, #40]	; (8000a8c <HAL_InitTick+0xac>)
 8000a64:	f002 fb66 	bl	8003134 <HAL_TIM_Base_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d104      	bne.n	8000a78 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000a6e:	4807      	ldr	r0, [pc, #28]	; (8000a8c <HAL_InitTick+0xac>)
 8000a70:	f002 fbb8 	bl	80031e4 <HAL_TIM_Base_Start_IT>
 8000a74:	4603      	mov	r3, r0
 8000a76:	e000      	b.n	8000a7a <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a78:	2301      	movs	r3, #1
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3730      	adds	r7, #48	; 0x30
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	431bde83 	.word	0x431bde83
 8000a8c:	20000260 	.word	0x20000260

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <TIM2_IRQHandler+0x10>)
 8000aee:	f002 fbf1 	bl	80032d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000260 	.word	0x20000260

08000afc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b02:	f002 fbe7 	bl	80032d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000214 	.word	0x20000214

08000b10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
	return 1;
 8000b14:	2301      	movs	r3, #1
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <_kill>:

int _kill(int pid, int sig)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <_kill+0x20>)
 8000b2c:	2216      	movs	r2, #22
 8000b2e:	601a      	str	r2, [r3, #0]
	return -1;
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	20008b6c 	.word	0x20008b6c

08000b44 <_exit>:

void _exit (int status)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ffe5 	bl	8000b20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b56:	e7fe      	b.n	8000b56 <_exit+0x12>

08000b58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	e00a      	b.n	8000b80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b6a:	f3af 8000 	nop.w
 8000b6e:	4601      	mov	r1, r0
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	60ba      	str	r2, [r7, #8]
 8000b76:	b2ca      	uxtb	r2, r1
 8000b78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dbf0      	blt.n	8000b6a <_read+0x12>
	}

return len;
 8000b88:	687b      	ldr	r3, [r7, #4]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	60f8      	str	r0, [r7, #12]
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	e009      	b.n	8000bb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	60ba      	str	r2, [r7, #8]
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697a      	ldr	r2, [r7, #20]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	dbf1      	blt.n	8000ba4 <_write+0x12>
	}
	return len;
 8000bc0:	687b      	ldr	r3, [r7, #4]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <_close>:

int _close(int file)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
	return -1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
 8000bea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bf2:	605a      	str	r2, [r3, #4]
	return 0;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <_isatty>:

int _isatty(int file)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
	return 1;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
	return 0;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b087      	sub	sp, #28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c3c:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <_sbrk+0x5c>)
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <_sbrk+0x60>)
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <_sbrk+0x64>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <_sbrk+0x68>)
 8000c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d205      	bcs.n	8000c70 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <_sbrk+0x6c>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	371c      	adds	r7, #28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	20050000 	.word	0x20050000
 8000c94:	00000400 	.word	0x00000400
 8000c98:	20000094 	.word	0x20000094
 8000c9c:	20008b80 	.word	0x20008b80
 8000ca0:	20008b6c 	.word	0x20008b6c

08000ca4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <SystemInit+0x20>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <SystemInit+0x20>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <udpClient_connect>:
5. Close socket descriptor and exit.
*/


void udpClient_connect(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
	err_t err;

	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 8000cce:	f00a ff15 	bl	800bafc <udp_new>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a13      	ldr	r2, [pc, #76]	; (8000d24 <udpClient_connect+0x5c>)
 8000cd6:	6013      	str	r3, [r2, #0]

	/* Bind the block to module's IP and port */
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 192, 168, 2, 99);
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <udpClient_connect+0x60>)
 8000cda:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 8);
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <udpClient_connect+0x5c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f107 0108 	add.w	r1, r7, #8
 8000ce4:	2208      	movs	r2, #8
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f00a fdf2 	bl	800b8d0 <udp_bind>


	/* configure destination IP address and port */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 2, 96);
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <udpClient_connect+0x64>)
 8000cee:	607b      	str	r3, [r7, #4]
	err= udp_connect(upcb, &DestIPaddr, 7);
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <udpClient_connect+0x5c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	1d39      	adds	r1, r7, #4
 8000cf6:	2207      	movs	r2, #7
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f00a fe71 	bl	800b9e0 <udp_connect>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 8000d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d108      	bne.n	8000d1c <udpClient_connect+0x54>
	{
		/* 2. Send message to server */
		udpClient_send();
 8000d0a:	f000 f813 	bl	8000d34 <udpClient_send>

		/* 3. Set a receive callback for the upcb */
		udp_recv(upcb, udp_client_receive_callback, NULL);
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <udpClient_connect+0x5c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2200      	movs	r2, #0
 8000d14:	4906      	ldr	r1, [pc, #24]	; (8000d30 <udpClient_connect+0x68>)
 8000d16:	4618      	mov	r0, r3
 8000d18:	f00a fed0 	bl	800babc <udp_recv>
	}
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200002ac 	.word	0x200002ac
 8000d28:	6302a8c0 	.word	0x6302a8c0
 8000d2c:	6002a8c0 	.word	0x6002a8c0
 8000d30:	08000d99 	.word	0x08000d99

08000d34 <udpClient_send>:

void udpClient_send(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b09c      	sub	sp, #112	; 0x70
 8000d38:	af00      	add	r7, sp, #0
  struct pbuf *txBuf;
  char data[100];

  int len = sprintf(data, "sending UDP client message %d\n", counter);
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <udpClient_send+0x58>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	4913      	ldr	r1, [pc, #76]	; (8000d90 <udpClient_send+0x5c>)
 8000d42:	4618      	mov	r0, r3
 8000d44:	f00d fa9c 	bl	800e280 <siprintf>
 8000d48:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* allocate pbuf from pool*/
  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8000d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000d52:	4619      	mov	r1, r3
 8000d54:	2036      	movs	r0, #54	; 0x36
 8000d56:	f004 f959 	bl	800500c <pbuf_alloc>
 8000d5a:	66b8      	str	r0, [r7, #104]	; 0x68

  if (txBuf != NULL)
 8000d5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d00f      	beq.n	8000d82 <udpClient_send+0x4e>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, data, len);
 8000d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	4619      	mov	r1, r3
 8000d6a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000d6c:	f004 fe9e 	bl	8005aac <pbuf_take>

    /* send udp data */
    udp_send(upcb, txBuf);
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <udpClient_send+0x60>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000d76:	4618      	mov	r0, r3
 8000d78:	f00a fbc0 	bl	800b4fc <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 8000d7c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000d7e:	f004 fc29 	bl	80055d4 <pbuf_free>
  }
}
 8000d82:	bf00      	nop
 8000d84:	3770      	adds	r7, #112	; 0x70
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000098 	.word	0x20000098
 8000d90:	0800f598 	.word	0x0800f598
 8000d94:	200002ac 	.word	0x200002ac

08000d98 <udp_client_receive_callback>:


void udp_client_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	strncpy (buffer, (char *)p->payload, p->len);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6859      	ldr	r1, [r3, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	895b      	ldrh	r3, [r3, #10]
 8000dae:	461a      	mov	r2, r3
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <udp_client_receive_callback+0x38>)
 8000db2:	f00d fa85 	bl	800e2c0 <strncpy>

	/*increment message count */
	counter++;
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <udp_client_receive_callback+0x3c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <udp_client_receive_callback+0x3c>)
 8000dbe:	6013      	str	r3, [r2, #0]

	/* Free receive pbuf */
	pbuf_free(p);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f004 fc07 	bl	80055d4 <pbuf_free>
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200002b0 	.word	0x200002b0
 8000dd4:	20000098 	.word	0x20000098

08000dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dde:	490e      	ldr	r1, [pc, #56]	; (8000e18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df4:	4c0b      	ldr	r4, [pc, #44]	; (8000e24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e02:	f7ff ff4f 	bl	8000ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e06:	f00d f981 	bl	800e10c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0a:	f7ff fc37 	bl	800067c <main>
  bx  lr    
 8000e0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e10:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e1c:	080121f0 	.word	0x080121f0
  ldr r2, =_sbss
 8000e20:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e24:	20008b7c 	.word	0x20008b7c

08000e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC_IRQHandler>
	...

08000e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_Init+0x28>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_Init+0x28>)
 8000e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 f8fc 	bl	800103a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e42:	200f      	movs	r0, #15
 8000e44:	f7ff fdcc 	bl	80009e0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f7ff fd80 	bl	800094c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023c00 	.word	0x40023c00

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x24>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_IncTick+0x24>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000314 	.word	0x20000314

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000314 	.word	0x20000314

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff ffee 	bl	8000e80 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ffde 	bl	8000e80 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008

08000ee0 <__NVIC_SetPriorityGrouping>:
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <__NVIC_SetPriorityGrouping+0x40>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <__NVIC_SetPriorityGrouping+0x40>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00
 8000f24:	05fa0000 	.word	0x05fa0000

08000f28 <__NVIC_GetPriorityGrouping>:
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4907      	ldr	r1, [pc, #28]	; (8000f7c <__NVIC_EnableIRQ+0x38>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_SetPriority>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ff4c 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001062:	f7ff ff61 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 8001066:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	68b9      	ldr	r1, [r7, #8]
 800106c:	6978      	ldr	r0, [r7, #20]
 800106e:	f7ff ffb1 	bl	8000fd4 <NVIC_EncodePriority>
 8001072:	4602      	mov	r2, r0
 8001074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff80 	bl	8000f80 <__NVIC_SetPriority>
}
 8001080:	bf00      	nop
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff54 	bl	8000f44 <__NVIC_EnableIRQ>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80010a8:	f3bf 8f5f 	dmb	sy
}
 80010ac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80010ae:	4b07      	ldr	r3, [pc, #28]	; (80010cc <HAL_MPU_Disable+0x28>)
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_MPU_Disable+0x28>)
 80010b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b8:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <HAL_MPU_Disable+0x2c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	605a      	str	r2, [r3, #4]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00
 80010d0:	e000ed90 	.word	0xe000ed90

080010d4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80010dc:	4a0b      	ldr	r2, [pc, #44]	; (800110c <HAL_MPU_Enable+0x38>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <HAL_MPU_Enable+0x3c>)
 80010e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ea:	4a09      	ldr	r2, [pc, #36]	; (8001110 <HAL_MPU_Enable+0x3c>)
 80010ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80010f2:	f3bf 8f4f 	dsb	sy
}
 80010f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010f8:	f3bf 8f6f 	isb	sy
}
 80010fc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed90 	.word	0xe000ed90
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	785a      	ldrb	r2, [r3, #1]
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <HAL_MPU_ConfigRegion+0x84>)
 8001122:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d029      	beq.n	8001180 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800112c:	4a1a      	ldr	r2, [pc, #104]	; (8001198 <HAL_MPU_ConfigRegion+0x84>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7b1b      	ldrb	r3, [r3, #12]
 8001138:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7adb      	ldrb	r3, [r3, #11]
 800113e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001140:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7a9b      	ldrb	r3, [r3, #10]
 8001146:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001148:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7b5b      	ldrb	r3, [r3, #13]
 800114e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001150:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7b9b      	ldrb	r3, [r3, #14]
 8001156:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001158:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7bdb      	ldrb	r3, [r3, #15]
 800115e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001160:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7a5b      	ldrb	r3, [r3, #9]
 8001166:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001168:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7a1b      	ldrb	r3, [r3, #8]
 800116e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001170:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800117a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800117c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800117e:	e005      	b.n	800118c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_MPU_ConfigRegion+0x84>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <HAL_MPU_ConfigRegion+0x84>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed90 	.word	0xe000ed90

0800119c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80011ac:	4ba9      	ldr	r3, [pc, #676]	; (8001454 <HAL_ETH_Init+0x2b8>)
 80011ae:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e181      	b.n	80014c6 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d106      	bne.n	80011dc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f002 fbb4 	bl	8003944 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011dc:	4b9e      	ldr	r3, [pc, #632]	; (8001458 <HAL_ETH_Init+0x2bc>)
 80011de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e0:	4a9d      	ldr	r2, [pc, #628]	; (8001458 <HAL_ETH_Init+0x2bc>)
 80011e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e6:	6453      	str	r3, [r2, #68]	; 0x44
 80011e8:	4b9b      	ldr	r3, [pc, #620]	; (8001458 <HAL_ETH_Init+0x2bc>)
 80011ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011f4:	4b99      	ldr	r3, [pc, #612]	; (800145c <HAL_ETH_Init+0x2c0>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	4a98      	ldr	r2, [pc, #608]	; (800145c <HAL_ETH_Init+0x2c0>)
 80011fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011fe:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001200:	4b96      	ldr	r3, [pc, #600]	; (800145c <HAL_ETH_Init+0x2c0>)
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	4994      	ldr	r1, [pc, #592]	; (800145c <HAL_ETH_Init+0x2c0>)
 800120a:	4313      	orrs	r3, r2
 800120c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 0201 	orr.w	r2, r2, #1
 8001220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001224:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001226:	f7ff fe2b 	bl	8000e80 <HAL_GetTick>
 800122a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800122c:	e011      	b.n	8001252 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800122e:	f7ff fe27 	bl	8000e80 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800123c:	d909      	bls.n	8001252 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2203      	movs	r2, #3
 8001242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e139      	b.n	80014c6 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1e4      	bne.n	800122e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f023 031c 	bic.w	r3, r3, #28
 8001272:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001274:	f001 ff0c 	bl	8003090 <HAL_RCC_GetHCLKFreq>
 8001278:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4a78      	ldr	r2, [pc, #480]	; (8001460 <HAL_ETH_Init+0x2c4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d908      	bls.n	8001294 <HAL_ETH_Init+0xf8>
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	4a77      	ldr	r2, [pc, #476]	; (8001464 <HAL_ETH_Init+0x2c8>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d804      	bhi.n	8001294 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	61fb      	str	r3, [r7, #28]
 8001292:	e027      	b.n	80012e4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	4a73      	ldr	r2, [pc, #460]	; (8001464 <HAL_ETH_Init+0x2c8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d908      	bls.n	80012ae <HAL_ETH_Init+0x112>
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	4a6d      	ldr	r2, [pc, #436]	; (8001454 <HAL_ETH_Init+0x2b8>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d204      	bcs.n	80012ae <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f043 030c 	orr.w	r3, r3, #12
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	e01a      	b.n	80012e4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	4a68      	ldr	r2, [pc, #416]	; (8001454 <HAL_ETH_Init+0x2b8>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d303      	bcc.n	80012be <HAL_ETH_Init+0x122>
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	4a6b      	ldr	r2, [pc, #428]	; (8001468 <HAL_ETH_Init+0x2cc>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d911      	bls.n	80012e2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	4a69      	ldr	r2, [pc, #420]	; (8001468 <HAL_ETH_Init+0x2cc>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d908      	bls.n	80012d8 <HAL_ETH_Init+0x13c>
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	4a68      	ldr	r2, [pc, #416]	; (800146c <HAL_ETH_Init+0x2d0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d804      	bhi.n	80012d8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	61fb      	str	r3, [r7, #28]
 80012d6:	e005      	b.n	80012e4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f043 0310 	orr.w	r3, r3, #16
 80012de:	61fb      	str	r3, [r7, #28]
 80012e0:	e000      	b.n	80012e4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80012e2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80012ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012f0:	2100      	movs	r1, #0
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 fb98 	bl	8001a28 <HAL_ETH_WritePHYRegister>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00b      	beq.n	8001316 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001302:	6939      	ldr	r1, [r7, #16]
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 fd4d 	bl	8001da4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e0d7      	b.n	80014c6 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001316:	20ff      	movs	r0, #255	; 0xff
 8001318:	f7ff fdbe 	bl	8000e98 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 80a5 	beq.w	8001470 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001326:	f7ff fdab 	bl	8000e80 <HAL_GetTick>
 800132a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	461a      	mov	r2, r3
 8001332:	2101      	movs	r1, #1
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 fb0f 	bl	8001958 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800133a:	f7ff fda1 	bl	8000e80 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	f241 3288 	movw	r2, #5000	; 0x1388
 8001348:	4293      	cmp	r3, r2
 800134a:	d90f      	bls.n	800136c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001350:	6939      	ldr	r1, [r7, #16]
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 fd26 	bl	8001da4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e0ac      	b.n	80014c6 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0da      	beq.n	800132c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001376:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800137a:	2100      	movs	r1, #0
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 fb53 	bl	8001a28 <HAL_ETH_WritePHYRegister>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00b      	beq.n	80013a0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800138c:	6939      	ldr	r1, [r7, #16]
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 fd08 	bl	8001da4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800139c:	2301      	movs	r3, #1
 800139e:	e092      	b.n	80014c6 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80013a0:	f7ff fd6e 	bl	8000e80 <HAL_GetTick>
 80013a4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	461a      	mov	r2, r3
 80013ac:	2101      	movs	r1, #1
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 fad2 	bl	8001958 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80013b4:	f7ff fd64 	bl	8000e80 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d90f      	bls.n	80013e6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80013ca:	6939      	ldr	r1, [r7, #16]
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 fce9 	bl	8001da4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e06f      	b.n	80014c6 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f003 0320 	and.w	r3, r3, #32
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0da      	beq.n	80013a6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	461a      	mov	r2, r3
 80013f6:	2110      	movs	r1, #16
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 faad 	bl	8001958 <HAL_ETH_ReadPHYRegister>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00b      	beq.n	800141c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001408:	6939      	ldr	r1, [r7, #16]
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fcca 	bl	8001da4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001418:	2301      	movs	r3, #1
 800141a:	e054      	b.n	80014c6 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	2b00      	cmp	r3, #0
 8001424:	d004      	beq.n	8001430 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	e002      	b.n	8001436 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	e035      	b.n	80014b4 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	e030      	b.n	80014b4 <HAL_ETH_Init+0x318>
 8001452:	bf00      	nop
 8001454:	03938700 	.word	0x03938700
 8001458:	40023800 	.word	0x40023800
 800145c:	40013800 	.word	0x40013800
 8001460:	01312cff 	.word	0x01312cff
 8001464:	02160ebf 	.word	0x02160ebf
 8001468:	05f5e0ff 	.word	0x05f5e0ff
 800146c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	08db      	lsrs	r3, r3, #3
 8001476:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	085b      	lsrs	r3, r3, #1
 800147e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001480:	4313      	orrs	r3, r2
 8001482:	b29b      	uxth	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	2100      	movs	r1, #0
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 facd 	bl	8001a28 <HAL_ETH_WritePHYRegister>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00b      	beq.n	80014ac <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001498:	6939      	ldr	r1, [r7, #16]
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 fc82 	bl	8001da4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e00c      	b.n	80014c6 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80014ac:	f640 70ff 	movw	r0, #4095	; 0xfff
 80014b0:	f7ff fcf2 	bl	8000e98 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80014b4:	6939      	ldr	r1, [r7, #16]
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 fc74 	bl	8001da4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3720      	adds	r7, #32
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop

080014d0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <HAL_ETH_DMATxDescListInit+0x20>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e052      	b.n	8001596 <HAL_ETH_DMATxDescListInit+0xc6>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2202      	movs	r2, #2
 80014fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	e030      	b.n	800156e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	015b      	lsls	r3, r3, #5
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	4413      	add	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800151c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001524:	fb02 f303 	mul.w	r3, r2, r3
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	461a      	mov	r2, r3
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d105      	bne.n	8001546 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	3b01      	subs	r3, #1
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	429a      	cmp	r2, r3
 800154e:	d208      	bcs.n	8001562 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3301      	adds	r3, #1
 8001554:	015b      	lsls	r3, r3, #5
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	4413      	add	r3, r2
 800155a:	461a      	mov	r2, r3
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	e002      	b.n	8001568 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3301      	adds	r3, #1
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d3ca      	bcc.n	800150c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6819      	ldr	r1, [r3, #0]
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	f241 0310 	movw	r3, #4112	; 0x1010
 8001580:	440b      	add	r3, r1
 8001582:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	371c      	adds	r7, #28
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b087      	sub	sp, #28
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_ETH_DMARxDescListInit+0x20>
 80015be:	2302      	movs	r3, #2
 80015c0:	e056      	b.n	8001670 <HAL_ETH_DMARxDescListInit+0xce>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2202      	movs	r2, #2
 80015ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	e034      	b.n	8001648 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	015b      	lsls	r3, r3, #5
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	4413      	add	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015ee:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80015f6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	461a      	mov	r2, r3
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d105      	bne.n	8001620 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	3b01      	subs	r3, #1
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	429a      	cmp	r2, r3
 8001628:	d208      	bcs.n	800163c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3301      	adds	r3, #1
 800162e:	015b      	lsls	r3, r3, #5
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	4413      	add	r3, r2
 8001634:	461a      	mov	r2, r3
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	e002      	b.n	8001642 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	3301      	adds	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d3c6      	bcc.n	80015de <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6819      	ldr	r1, [r3, #0]
 8001654:	68ba      	ldr	r2, [r7, #8]
 8001656:	f241 030c 	movw	r3, #4108	; 0x100c
 800165a:	440b      	add	r3, r1
 800165c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	371c      	adds	r7, #28
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800167c:	b480      	push	{r7}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_ETH_TransmitFrame+0x24>
 800169c:	2302      	movs	r3, #2
 800169e:	e0cd      	b.n	800183c <HAL_ETH_TransmitFrame+0x1c0>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0b8      	b.n	800183c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da09      	bge.n	80016e8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2212      	movs	r2, #18
 80016d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0a9      	b.n	800183c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d915      	bls.n	800171e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	4a54      	ldr	r2, [pc, #336]	; (8001848 <HAL_ETH_TransmitFrame+0x1cc>)
 80016f6:	fba2 2303 	umull	r2, r3, r2, r3
 80016fa:	0a9b      	lsrs	r3, r3, #10
 80016fc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	4b51      	ldr	r3, [pc, #324]	; (8001848 <HAL_ETH_TransmitFrame+0x1cc>)
 8001702:	fba3 1302 	umull	r1, r3, r3, r2
 8001706:	0a9b      	lsrs	r3, r3, #10
 8001708:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800170c:	fb01 f303 	mul.w	r3, r1, r3
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3301      	adds	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	e001      	b.n	8001722 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800171e:	2301      	movs	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d11c      	bne.n	8001762 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001736:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001742:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001752:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	461a      	mov	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001760:	e04b      	b.n	80017fa <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	e044      	b.n	80017f2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001776:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d107      	bne.n	800178e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800178c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001796:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3b01      	subs	r3, #1
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d116      	bne.n	80017d0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80017b0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	4a25      	ldr	r2, [pc, #148]	; (800184c <HAL_ETH_TransmitFrame+0x1d0>)
 80017b6:	fb02 f203 	mul.w	r2, r2, r3
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	4413      	add	r3, r2
 80017be:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80017c2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80017ce:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017de:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	461a      	mov	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	3301      	adds	r3, #1
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3b6      	bcc.n	8001768 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	f241 0314 	movw	r3, #4116	; 0x1014
 8001802:	4413      	add	r3, r2
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00d      	beq.n	800182a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	f241 0314 	movw	r3, #4116	; 0x1014
 8001816:	4413      	add	r3, r2
 8001818:	2204      	movs	r2, #4
 800181a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	f241 0304 	movw	r3, #4100	; 0x1004
 8001824:	4413      	add	r3, r2
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	371c      	adds	r7, #28
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	ac02b00b 	.word	0xac02b00b
 800184c:	fffffa0c 	.word	0xfffffa0c

08001850 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_ETH_GetReceivedFrame+0x1a>
 8001866:	2302      	movs	r3, #2
 8001868:	e070      	b.n	800194c <HAL_ETH_GetReceivedFrame+0xfc>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2202      	movs	r2, #2
 8001876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	db5a      	blt.n	800193a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d030      	beq.n	80018f4 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d103      	bne.n	80018ac <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	0c1b      	lsrs	r3, r3, #16
 80018bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80018c0:	3b04      	subs	r3, #4
 80018c2:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	461a      	mov	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	e02b      	b.n	800194c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d010      	beq.n	8001924 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	461a      	mov	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	629a      	str	r2, [r3, #40]	; 0x28
 8001922:	e00a      	b.n	800193a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	461a      	mov	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	460b      	mov	r3, r1
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b82      	cmp	r3, #130	; 0x82
 8001978:	d101      	bne.n	800197e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800197a:	2302      	movs	r3, #2
 800197c:	e050      	b.n	8001a20 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2282      	movs	r2, #130	; 0x82
 8001982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f003 031c 	and.w	r3, r3, #28
 8001994:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8a1b      	ldrh	r3, [r3, #16]
 800199a:	02db      	lsls	r3, r3, #11
 800199c:	b29b      	uxth	r3, r3
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80019a4:	897b      	ldrh	r3, [r7, #10]
 80019a6:	019b      	lsls	r3, r3, #6
 80019a8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f023 0302 	bic.w	r3, r3, #2
 80019b8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019ca:	f7ff fa59 	bl	8000e80 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019d0:	e015      	b.n	80019fe <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80019d2:	f7ff fa55 	bl	8000e80 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e0:	d309      	bcc.n	80019f6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e014      	b.n	8001a20 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1e4      	bne.n	80019d2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	460b      	mov	r3, r1
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b42      	cmp	r3, #66	; 0x42
 8001a48:	d101      	bne.n	8001a4e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e04e      	b.n	8001aec <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2242      	movs	r2, #66	; 0x42
 8001a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f003 031c 	and.w	r3, r3, #28
 8001a64:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8a1b      	ldrh	r3, [r3, #16]
 8001a6a:	02db      	lsls	r3, r3, #11
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001a74:	897b      	ldrh	r3, [r7, #10]
 8001a76:	019b      	lsls	r3, r3, #6
 8001a78:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001aa4:	f7ff f9ec 	bl	8000e80 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001aaa:	e015      	b.n	8001ad8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001aac:	f7ff f9e8 	bl	8000e80 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aba:	d309      	bcc.n	8001ad0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e00d      	b.n	8001aec <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1e4      	bne.n	8001aac <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_ETH_Start+0x16>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e01f      	b.n	8001b4a <HAL_ETH_Start+0x56>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2202      	movs	r2, #2
 8001b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 fb44 	bl	80021a8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 fb7b 	bl	800221c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 fc12 	bl	8002350 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fbaf 	bl	8002290 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 fbdc 	bl	80022f0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_ETH_Stop+0x16>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e01f      	b.n	8001ba8 <HAL_ETH_Stop+0x56>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fba1 	bl	80022c0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 fbce 	bl	8002320 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 fb66 	bl	8002256 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 fbe0 	bl	8002350 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 fb26 	bl	80021e2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_ETH_ConfigMAC+0x1c>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e0e4      	b.n	8001d96 <HAL_ETH_ConfigMAC+0x1e6>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80b1 	beq.w	8001d46 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	4b6c      	ldr	r3, [pc, #432]	; (8001da0 <HAL_ETH_ConfigMAC+0x1f0>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001bfc:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001c02:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001c08:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001c0e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001c14:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001c1a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001c20:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001c26:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001c2c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001c32:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001c38:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001c3e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c56:	2001      	movs	r0, #1
 8001c58:	f7ff f91e 	bl	8000e98 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c6c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001c72:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001c78:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001c7e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001c84:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001c8a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001c96:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c98:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f7ff f8f8 	bl	8000e98 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001cb8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cc2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cda:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001ce0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001ce6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001cec:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001cf2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001cf8:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d10:	2001      	movs	r0, #1
 8001d12:	f7ff f8c1 	bl	8000e98 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d36:	2001      	movs	r0, #1
 8001d38:	f7ff f8ae 	bl	8000e98 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	61da      	str	r2, [r3, #28]
 8001d44:	e01e      	b.n	8001d84 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001d54:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d76:	2001      	movs	r0, #1
 8001d78:	f7ff f88e 	bl	8000e98 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	ff20810f 	.word	0xff20810f

08001da4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b0b0      	sub	sp, #192	; 0xc0
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d007      	beq.n	8001dca <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dc0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d103      	bne.n	8001df2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dee:	663b      	str	r3, [r7, #96]	; 0x60
 8001df0:	e001      	b.n	8001df6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001df6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dfa:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e00:	2300      	movs	r3, #0
 8001e02:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001e10:	2340      	movs	r3, #64	; 0x40
 8001e12:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001e78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e7c:	4bab      	ldr	r3, [pc, #684]	; (800212c <ETH_MACDMAConfig+0x388>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001e84:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001e88:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001e8c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001e90:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001e96:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001e98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001e9a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001e9e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001ea4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001ea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001ea8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001eaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001eac:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001eae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001eb0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001eb4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001eb8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001eba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ecc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ed8:	2001      	movs	r0, #1
 8001eda:	f7fe ffdd 	bl	8000e98 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ee6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ee8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001eea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001eec:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001eee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001ef0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001ef2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001ef6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001efc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001efe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001f02:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001f08:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001f0c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001f14:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f16:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f7fe ffb8 	bl	8000e98 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f30:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f3a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001f44:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001f50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f54:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f58:	4013      	ands	r3, r2
 8001f5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001f5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f62:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001f64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001f68:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001f6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001f6e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001f70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001f74:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001f7a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001f7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001f80:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001f82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f94:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f7fe ff79 	bl	8000e98 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fae:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001fb0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001fb4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f7fe ff64 	bl	8000e98 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fd8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001fde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fe2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001fe8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fec:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001ffe:	2304      	movs	r3, #4
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800200c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800200e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002012:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002014:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002018:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800201e:	2300      	movs	r3, #0
 8002020:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002022:	2300      	movs	r3, #0
 8002024:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	f241 0318 	movw	r3, #4120	; 0x1018
 800202e:	4413      	add	r3, r2
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002036:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800203a:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <ETH_MACDMAConfig+0x38c>)
 800203c:	4013      	ands	r3, r2
 800203e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002042:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002044:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002046:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002048:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800204a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800204c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800204e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002050:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002052:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002054:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002056:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002058:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800205a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800205e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002062:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002064:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	f241 0318 	movw	r3, #4120	; 0x1018
 8002076:	4413      	add	r3, r2
 8002078:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800207c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	f241 0318 	movw	r3, #4120	; 0x1018
 8002086:	4413      	add	r3, r2
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800208e:	2001      	movs	r0, #1
 8002090:	f7fe ff02 	bl	8000e98 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	f241 0318 	movw	r3, #4120	; 0x1018
 800209c:	4413      	add	r3, r2
 800209e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020a2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80020a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80020a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80020a8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80020aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80020ac:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80020ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80020b0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80020b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80020b4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80020b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80020ba:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80020bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80020be:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80020c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020cc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80020dc:	2001      	movs	r0, #1
 80020de:	f7fe fedb 	bl	8000e98 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ee:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d10d      	bne.n	8002114 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	f241 031c 	movw	r3, #4124	; 0x101c
 8002100:	4413      	add	r3, r2
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6811      	ldr	r1, [r2, #0]
 8002108:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <ETH_MACDMAConfig+0x390>)
 800210a:	431a      	orrs	r2, r3
 800210c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002110:	440b      	add	r3, r1
 8002112:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	461a      	mov	r2, r3
 800211a:	2100      	movs	r1, #0
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f80b 	bl	8002138 <ETH_MACAddressConfig>
}
 8002122:	bf00      	nop
 8002124:	37c0      	adds	r7, #192	; 0xc0
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	ff20810f 	.word	0xff20810f
 8002130:	f8de3f23 	.word	0xf8de3f23
 8002134:	00010040 	.word	0x00010040

08002138 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3305      	adds	r3, #5
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	3204      	adds	r2, #4
 8002150:	7812      	ldrb	r2, [r2, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <ETH_MACAddressConfig+0x68>)
 800215a:	4413      	add	r3, r2
 800215c:	461a      	mov	r2, r3
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3303      	adds	r3, #3
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	061a      	lsls	r2, r3, #24
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3302      	adds	r3, #2
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	041b      	lsls	r3, r3, #16
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3301      	adds	r3, #1
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	4313      	orrs	r3, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	7812      	ldrb	r2, [r2, #0]
 8002182:	4313      	orrs	r3, r2
 8002184:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <ETH_MACAddressConfig+0x6c>)
 800218a:	4413      	add	r3, r2
 800218c:	461a      	mov	r2, r3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	6013      	str	r3, [r2, #0]
}
 8002192:	bf00      	nop
 8002194:	371c      	adds	r7, #28
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40028040 	.word	0x40028040
 80021a4:	40028044 	.word	0x40028044

080021a8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0208 	orr.w	r2, r2, #8
 80021c2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021cc:	2001      	movs	r0, #1
 80021ce:	f7fe fe63 	bl	8000e98 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	601a      	str	r2, [r3, #0]
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0208 	bic.w	r2, r2, #8
 80021fc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002206:	2001      	movs	r0, #1
 8002208:	f7fe fe46 	bl	8000e98 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	601a      	str	r2, [r3, #0]
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0204 	orr.w	r2, r2, #4
 8002236:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002240:	2001      	movs	r0, #1
 8002242:	f7fe fe29 	bl	8000e98 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	601a      	str	r2, [r3, #0]
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0204 	bic.w	r2, r2, #4
 8002270:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800227a:	2001      	movs	r0, #1
 800227c:	f7fe fe0c 	bl	8000e98 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	601a      	str	r2, [r3, #0]
}
 8002288:	bf00      	nop
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	f241 0318 	movw	r3, #4120	; 0x1018
 80022a0:	4413      	add	r3, r2
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6811      	ldr	r1, [r2, #0]
 80022a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80022ac:	f241 0318 	movw	r3, #4120	; 0x1018
 80022b0:	440b      	add	r3, r1
 80022b2:	601a      	str	r2, [r3, #0]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	f241 0318 	movw	r3, #4120	; 0x1018
 80022d0:	4413      	add	r3, r2
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6811      	ldr	r1, [r2, #0]
 80022d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80022dc:	f241 0318 	movw	r3, #4120	; 0x1018
 80022e0:	440b      	add	r3, r1
 80022e2:	601a      	str	r2, [r3, #0]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	f241 0318 	movw	r3, #4120	; 0x1018
 8002300:	4413      	add	r3, r2
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6811      	ldr	r1, [r2, #0]
 8002308:	f043 0202 	orr.w	r2, r3, #2
 800230c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002310:	440b      	add	r3, r1
 8002312:	601a      	str	r2, [r3, #0]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002330:	4413      	add	r3, r2
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6811      	ldr	r1, [r2, #0]
 8002338:	f023 0202 	bic.w	r2, r3, #2
 800233c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002340:	440b      	add	r3, r1
 8002342:	601a      	str	r2, [r3, #0]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	f241 0318 	movw	r3, #4120	; 0x1018
 8002364:	4413      	add	r3, r2
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6811      	ldr	r1, [r2, #0]
 800236c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002370:	f241 0318 	movw	r3, #4120	; 0x1018
 8002374:	440b      	add	r3, r1
 8002376:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002380:	4413      	add	r3, r2
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002386:	2001      	movs	r0, #1
 8002388:	f7fe fd86 	bl	8000e98 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6819      	ldr	r1, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	f241 0318 	movw	r3, #4120	; 0x1018
 8002396:	440b      	add	r3, r1
 8002398:	601a      	str	r2, [r3, #0]
}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	; 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
 80023c2:	e175      	b.n	80026b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023c4:	2201      	movs	r2, #1
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	429a      	cmp	r2, r3
 80023de:	f040 8164 	bne.w	80026aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d00b      	beq.n	8002402 <HAL_GPIO_Init+0x5e>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d007      	beq.n	8002402 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023f6:	2b11      	cmp	r3, #17
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b12      	cmp	r3, #18
 8002400:	d130      	bne.n	8002464 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	2203      	movs	r2, #3
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 0201 	and.w	r2, r3, #1
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2203      	movs	r2, #3
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x100>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b12      	cmp	r3, #18
 80024a2:	d123      	bne.n	80024ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	08da      	lsrs	r2, r3, #3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3208      	adds	r2, #8
 80024ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	220f      	movs	r2, #15
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	08da      	lsrs	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3208      	adds	r2, #8
 80024e6:	69b9      	ldr	r1, [r7, #24]
 80024e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0203 	and.w	r2, r3, #3
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80be 	beq.w	80026aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252e:	4b66      	ldr	r3, [pc, #408]	; (80026c8 <HAL_GPIO_Init+0x324>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	4a65      	ldr	r2, [pc, #404]	; (80026c8 <HAL_GPIO_Init+0x324>)
 8002534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002538:	6453      	str	r3, [r2, #68]	; 0x44
 800253a:	4b63      	ldr	r3, [pc, #396]	; (80026c8 <HAL_GPIO_Init+0x324>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002546:	4a61      	ldr	r2, [pc, #388]	; (80026cc <HAL_GPIO_Init+0x328>)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	3302      	adds	r3, #2
 800254e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	220f      	movs	r2, #15
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a58      	ldr	r2, [pc, #352]	; (80026d0 <HAL_GPIO_Init+0x32c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d037      	beq.n	80025e2 <HAL_GPIO_Init+0x23e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a57      	ldr	r2, [pc, #348]	; (80026d4 <HAL_GPIO_Init+0x330>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d031      	beq.n	80025de <HAL_GPIO_Init+0x23a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a56      	ldr	r2, [pc, #344]	; (80026d8 <HAL_GPIO_Init+0x334>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d02b      	beq.n	80025da <HAL_GPIO_Init+0x236>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a55      	ldr	r2, [pc, #340]	; (80026dc <HAL_GPIO_Init+0x338>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d025      	beq.n	80025d6 <HAL_GPIO_Init+0x232>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a54      	ldr	r2, [pc, #336]	; (80026e0 <HAL_GPIO_Init+0x33c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d01f      	beq.n	80025d2 <HAL_GPIO_Init+0x22e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a53      	ldr	r2, [pc, #332]	; (80026e4 <HAL_GPIO_Init+0x340>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d019      	beq.n	80025ce <HAL_GPIO_Init+0x22a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a52      	ldr	r2, [pc, #328]	; (80026e8 <HAL_GPIO_Init+0x344>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d013      	beq.n	80025ca <HAL_GPIO_Init+0x226>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a51      	ldr	r2, [pc, #324]	; (80026ec <HAL_GPIO_Init+0x348>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d00d      	beq.n	80025c6 <HAL_GPIO_Init+0x222>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a50      	ldr	r2, [pc, #320]	; (80026f0 <HAL_GPIO_Init+0x34c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d007      	beq.n	80025c2 <HAL_GPIO_Init+0x21e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a4f      	ldr	r2, [pc, #316]	; (80026f4 <HAL_GPIO_Init+0x350>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d101      	bne.n	80025be <HAL_GPIO_Init+0x21a>
 80025ba:	2309      	movs	r3, #9
 80025bc:	e012      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025be:	230a      	movs	r3, #10
 80025c0:	e010      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025c2:	2308      	movs	r3, #8
 80025c4:	e00e      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025c6:	2307      	movs	r3, #7
 80025c8:	e00c      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025ca:	2306      	movs	r3, #6
 80025cc:	e00a      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025ce:	2305      	movs	r3, #5
 80025d0:	e008      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025d2:	2304      	movs	r3, #4
 80025d4:	e006      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025d6:	2303      	movs	r3, #3
 80025d8:	e004      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025da:	2302      	movs	r3, #2
 80025dc:	e002      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <HAL_GPIO_Init+0x240>
 80025e2:	2300      	movs	r3, #0
 80025e4:	69fa      	ldr	r2, [r7, #28]
 80025e6:	f002 0203 	and.w	r2, r2, #3
 80025ea:	0092      	lsls	r2, r2, #2
 80025ec:	4093      	lsls	r3, r2
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025f4:	4935      	ldr	r1, [pc, #212]	; (80026cc <HAL_GPIO_Init+0x328>)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	089b      	lsrs	r3, r3, #2
 80025fa:	3302      	adds	r3, #2
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002602:	4b3d      	ldr	r3, [pc, #244]	; (80026f8 <HAL_GPIO_Init+0x354>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002626:	4a34      	ldr	r2, [pc, #208]	; (80026f8 <HAL_GPIO_Init+0x354>)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800262c:	4b32      	ldr	r3, [pc, #200]	; (80026f8 <HAL_GPIO_Init+0x354>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002650:	4a29      	ldr	r2, [pc, #164]	; (80026f8 <HAL_GPIO_Init+0x354>)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002656:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <HAL_GPIO_Init+0x354>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800267a:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <HAL_GPIO_Init+0x354>)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002680:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_GPIO_Init+0x354>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026a4:	4a14      	ldr	r2, [pc, #80]	; (80026f8 <HAL_GPIO_Init+0x354>)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3301      	adds	r3, #1
 80026ae:	61fb      	str	r3, [r7, #28]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	2b0f      	cmp	r3, #15
 80026b4:	f67f ae86 	bls.w	80023c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop
 80026bc:	3724      	adds	r7, #36	; 0x24
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40013800 	.word	0x40013800
 80026d0:	40020000 	.word	0x40020000
 80026d4:	40020400 	.word	0x40020400
 80026d8:	40020800 	.word	0x40020800
 80026dc:	40020c00 	.word	0x40020c00
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40021400 	.word	0x40021400
 80026e8:	40021800 	.word	0x40021800
 80026ec:	40021c00 	.word	0x40021c00
 80026f0:	40022000 	.word	0x40022000
 80026f4:	40022400 	.word	0x40022400
 80026f8:	40013c00 	.word	0x40013c00

080026fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
 8002708:	4613      	mov	r3, r2
 800270a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800270c:	787b      	ldrb	r3, [r7, #1]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002712:	887a      	ldrh	r2, [r7, #2]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002718:	e003      	b.n	8002722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800271a:	887b      	ldrh	r3, [r7, #2]
 800271c:	041a      	lsls	r2, r3, #16
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	619a      	str	r2, [r3, #24]
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800272e:	b480      	push	{r7}
 8002730:	b085      	sub	sp, #20
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	460b      	mov	r3, r1
 8002738:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002740:	887a      	ldrh	r2, [r7, #2]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4013      	ands	r3, r2
 8002746:	041a      	lsls	r2, r3, #16
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	43d9      	mvns	r1, r3
 800274c:	887b      	ldrh	r3, [r7, #2]
 800274e:	400b      	ands	r3, r1
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	619a      	str	r2, [r3, #24]
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800276e:	4b23      	ldr	r3, [pc, #140]	; (80027fc <HAL_PWREx_EnableOverDrive+0x98>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a22      	ldr	r2, [pc, #136]	; (80027fc <HAL_PWREx_EnableOverDrive+0x98>)
 8002774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b20      	ldr	r3, [pc, #128]	; (80027fc <HAL_PWREx_EnableOverDrive+0x98>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002786:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a1d      	ldr	r2, [pc, #116]	; (8002800 <HAL_PWREx_EnableOverDrive+0x9c>)
 800278c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002790:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002792:	f7fe fb75 	bl	8000e80 <HAL_GetTick>
 8002796:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002798:	e009      	b.n	80027ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800279a:	f7fe fb71 	bl	8000e80 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027a8:	d901      	bls.n	80027ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e022      	b.n	80027f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027ae:	4b14      	ldr	r3, [pc, #80]	; (8002800 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ba:	d1ee      	bne.n	800279a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027bc:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a0f      	ldr	r2, [pc, #60]	; (8002800 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027c8:	f7fe fb5a 	bl	8000e80 <HAL_GetTick>
 80027cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027ce:	e009      	b.n	80027e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027d0:	f7fe fb56 	bl	8000e80 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027de:	d901      	bls.n	80027e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e007      	b.n	80027f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027f0:	d1ee      	bne.n	80027d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40023800 	.word	0x40023800
 8002800:	40007000 	.word	0x40007000

08002804 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800280c:	2300      	movs	r3, #0
 800280e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e291      	b.n	8002d3e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8087 	beq.w	8002936 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002828:	4b96      	ldr	r3, [pc, #600]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b04      	cmp	r3, #4
 8002832:	d00c      	beq.n	800284e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002834:	4b93      	ldr	r3, [pc, #588]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b08      	cmp	r3, #8
 800283e:	d112      	bne.n	8002866 <HAL_RCC_OscConfig+0x62>
 8002840:	4b90      	ldr	r3, [pc, #576]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002848:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800284c:	d10b      	bne.n	8002866 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284e:	4b8d      	ldr	r3, [pc, #564]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d06c      	beq.n	8002934 <HAL_RCC_OscConfig+0x130>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d168      	bne.n	8002934 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e26b      	b.n	8002d3e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286e:	d106      	bne.n	800287e <HAL_RCC_OscConfig+0x7a>
 8002870:	4b84      	ldr	r3, [pc, #528]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a83      	ldr	r2, [pc, #524]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	e02e      	b.n	80028dc <HAL_RCC_OscConfig+0xd8>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x9c>
 8002886:	4b7f      	ldr	r3, [pc, #508]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a7e      	ldr	r2, [pc, #504]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 800288c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b7c      	ldr	r3, [pc, #496]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a7b      	ldr	r2, [pc, #492]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e01d      	b.n	80028dc <HAL_RCC_OscConfig+0xd8>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCC_OscConfig+0xc0>
 80028aa:	4b76      	ldr	r3, [pc, #472]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a75      	ldr	r2, [pc, #468]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 80028b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	4b73      	ldr	r3, [pc, #460]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a72      	ldr	r2, [pc, #456]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 80028bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e00b      	b.n	80028dc <HAL_RCC_OscConfig+0xd8>
 80028c4:	4b6f      	ldr	r3, [pc, #444]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a6e      	ldr	r2, [pc, #440]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 80028ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	4b6c      	ldr	r3, [pc, #432]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a6b      	ldr	r2, [pc, #428]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 80028d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fe facc 	bl	8000e80 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ec:	f7fe fac8 	bl	8000e80 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e21f      	b.n	8002d3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	4b61      	ldr	r3, [pc, #388]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0xe8>
 800290a:	e014      	b.n	8002936 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fe fab8 	bl	8000e80 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002914:	f7fe fab4 	bl	8000e80 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e20b      	b.n	8002d3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002926:	4b57      	ldr	r3, [pc, #348]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x110>
 8002932:	e000      	b.n	8002936 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d069      	beq.n	8002a16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002942:	4b50      	ldr	r3, [pc, #320]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800294e:	4b4d      	ldr	r3, [pc, #308]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b08      	cmp	r3, #8
 8002958:	d11c      	bne.n	8002994 <HAL_RCC_OscConfig+0x190>
 800295a:	4b4a      	ldr	r3, [pc, #296]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d116      	bne.n	8002994 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002966:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d005      	beq.n	800297e <HAL_RCC_OscConfig+0x17a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e1df      	b.n	8002d3e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297e:	4b41      	ldr	r3, [pc, #260]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	493d      	ldr	r1, [pc, #244]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 800298e:	4313      	orrs	r3, r2
 8002990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002992:	e040      	b.n	8002a16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d023      	beq.n	80029e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800299c:	4b39      	ldr	r3, [pc, #228]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a38      	ldr	r2, [pc, #224]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe fa6a 	bl	8000e80 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b0:	f7fe fa66 	bl	8000e80 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e1bd      	b.n	8002d3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c2:	4b30      	ldr	r3, [pc, #192]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ce:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4929      	ldr	r1, [pc, #164]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]
 80029e2:	e018      	b.n	8002a16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029e4:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a26      	ldr	r2, [pc, #152]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 80029ea:	f023 0301 	bic.w	r3, r3, #1
 80029ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fe fa46 	bl	8000e80 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f8:	f7fe fa42 	bl	8000e80 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e199      	b.n	8002d3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0a:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d038      	beq.n	8002a94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d019      	beq.n	8002a5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2a:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2e:	4a15      	ldr	r2, [pc, #84]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a36:	f7fe fa23 	bl	8000e80 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3e:	f7fe fa1f 	bl	8000e80 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e176      	b.n	8002d3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x23a>
 8002a5c:	e01a      	b.n	8002a94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a62:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <HAL_RCC_OscConfig+0x280>)
 8002a64:	f023 0301 	bic.w	r3, r3, #1
 8002a68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6a:	f7fe fa09 	bl	8000e80 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a70:	e00a      	b.n	8002a88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a72:	f7fe fa05 	bl	8000e80 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d903      	bls.n	8002a88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e15c      	b.n	8002d3e <HAL_RCC_OscConfig+0x53a>
 8002a84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a88:	4b91      	ldr	r3, [pc, #580]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1ee      	bne.n	8002a72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80a4 	beq.w	8002bea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa2:	4b8b      	ldr	r3, [pc, #556]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10d      	bne.n	8002aca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aae:	4b88      	ldr	r3, [pc, #544]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	4a87      	ldr	r2, [pc, #540]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aba:	4b85      	ldr	r3, [pc, #532]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aca:	4b82      	ldr	r3, [pc, #520]	; (8002cd4 <HAL_RCC_OscConfig+0x4d0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d118      	bne.n	8002b08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ad6:	4b7f      	ldr	r3, [pc, #508]	; (8002cd4 <HAL_RCC_OscConfig+0x4d0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a7e      	ldr	r2, [pc, #504]	; (8002cd4 <HAL_RCC_OscConfig+0x4d0>)
 8002adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae2:	f7fe f9cd 	bl	8000e80 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aea:	f7fe f9c9 	bl	8000e80 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b64      	cmp	r3, #100	; 0x64
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e120      	b.n	8002d3e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002afc:	4b75      	ldr	r3, [pc, #468]	; (8002cd4 <HAL_RCC_OscConfig+0x4d0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCC_OscConfig+0x31a>
 8002b10:	4b6f      	ldr	r3, [pc, #444]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4a6e      	ldr	r2, [pc, #440]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1c:	e02d      	b.n	8002b7a <HAL_RCC_OscConfig+0x376>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCC_OscConfig+0x33c>
 8002b26:	4b6a      	ldr	r3, [pc, #424]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	4a69      	ldr	r2, [pc, #420]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b2c:	f023 0301 	bic.w	r3, r3, #1
 8002b30:	6713      	str	r3, [r2, #112]	; 0x70
 8002b32:	4b67      	ldr	r3, [pc, #412]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	4a66      	ldr	r2, [pc, #408]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b38:	f023 0304 	bic.w	r3, r3, #4
 8002b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3e:	e01c      	b.n	8002b7a <HAL_RCC_OscConfig+0x376>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b05      	cmp	r3, #5
 8002b46:	d10c      	bne.n	8002b62 <HAL_RCC_OscConfig+0x35e>
 8002b48:	4b61      	ldr	r3, [pc, #388]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4c:	4a60      	ldr	r2, [pc, #384]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b4e:	f043 0304 	orr.w	r3, r3, #4
 8002b52:	6713      	str	r3, [r2, #112]	; 0x70
 8002b54:	4b5e      	ldr	r3, [pc, #376]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	4a5d      	ldr	r2, [pc, #372]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b60:	e00b      	b.n	8002b7a <HAL_RCC_OscConfig+0x376>
 8002b62:	4b5b      	ldr	r3, [pc, #364]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b66:	4a5a      	ldr	r2, [pc, #360]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6e:	4b58      	ldr	r3, [pc, #352]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	4a57      	ldr	r2, [pc, #348]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b74:	f023 0304 	bic.w	r3, r3, #4
 8002b78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d015      	beq.n	8002bae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b82:	f7fe f97d 	bl	8000e80 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f7fe f979 	bl	8000e80 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e0ce      	b.n	8002d3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba0:	4b4b      	ldr	r3, [pc, #300]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0ee      	beq.n	8002b8a <HAL_RCC_OscConfig+0x386>
 8002bac:	e014      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bae:	f7fe f967 	bl	8000e80 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb6:	f7fe f963 	bl	8000e80 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e0b8      	b.n	8002d3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bcc:	4b40      	ldr	r3, [pc, #256]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1ee      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bd8:	7dfb      	ldrb	r3, [r7, #23]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d105      	bne.n	8002bea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bde:	4b3c      	ldr	r3, [pc, #240]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	4a3b      	ldr	r2, [pc, #236]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 80a4 	beq.w	8002d3c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bf4:	4b36      	ldr	r3, [pc, #216]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d06b      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d149      	bne.n	8002c9c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c08:	4b31      	ldr	r3, [pc, #196]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a30      	ldr	r2, [pc, #192]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe f934 	bl	8000e80 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe f930 	bl	8000e80 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e087      	b.n	8002d3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2e:	4b28      	ldr	r3, [pc, #160]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	019b      	lsls	r3, r3, #6
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	085b      	lsrs	r3, r3, #1
 8002c52:	3b01      	subs	r3, #1
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	061b      	lsls	r3, r3, #24
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	4a1b      	ldr	r2, [pc, #108]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c66:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c68:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a18      	ldr	r2, [pc, #96]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe f904 	bl	8000e80 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7c:	f7fe f900 	bl	8000e80 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e057      	b.n	8002d3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8e:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x478>
 8002c9a:	e04f      	b.n	8002d3c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fe f8ea 	bl	8000e80 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fe f8e6 	bl	8000e80 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e03d      	b.n	8002d3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc2:	4b03      	ldr	r3, [pc, #12]	; (8002cd0 <HAL_RCC_OscConfig+0x4cc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4ac>
 8002cce:	e035      	b.n	8002d3c <HAL_RCC_OscConfig+0x538>
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002cd8:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <HAL_RCC_OscConfig+0x544>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d028      	beq.n	8002d38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d121      	bne.n	8002d38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d11a      	bne.n	8002d38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d08:	4013      	ands	r3, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d111      	bne.n	8002d38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	085b      	lsrs	r3, r3, #1
 8002d20:	3b01      	subs	r3, #1
 8002d22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d107      	bne.n	8002d38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800

08002d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0d0      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d64:	4b6a      	ldr	r3, [pc, #424]	; (8002f10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d910      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b67      	ldr	r3, [pc, #412]	; (8002f10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 020f 	bic.w	r2, r3, #15
 8002d7a:	4965      	ldr	r1, [pc, #404]	; (8002f10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b63      	ldr	r3, [pc, #396]	; (8002f10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0b8      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d020      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dac:	4b59      	ldr	r3, [pc, #356]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4a58      	ldr	r2, [pc, #352]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002db6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dc4:	4b53      	ldr	r3, [pc, #332]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4a52      	ldr	r2, [pc, #328]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd0:	4b50      	ldr	r3, [pc, #320]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	494d      	ldr	r1, [pc, #308]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d040      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d115      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e07f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d107      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0e:	4b41      	ldr	r3, [pc, #260]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e073      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1e:	4b3d      	ldr	r3, [pc, #244]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e06b      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e2e:	4b39      	ldr	r3, [pc, #228]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f023 0203 	bic.w	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4936      	ldr	r1, [pc, #216]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e40:	f7fe f81e 	bl	8000e80 <HAL_GetTick>
 8002e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e48:	f7fe f81a 	bl	8000e80 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e053      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	4b2d      	ldr	r3, [pc, #180]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 020c 	and.w	r2, r3, #12
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d1eb      	bne.n	8002e48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e70:	4b27      	ldr	r3, [pc, #156]	; (8002f10 <HAL_RCC_ClockConfig+0x1c4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d210      	bcs.n	8002ea0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7e:	4b24      	ldr	r3, [pc, #144]	; (8002f10 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 020f 	bic.w	r2, r3, #15
 8002e86:	4922      	ldr	r1, [pc, #136]	; (8002f10 <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e032      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eac:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4916      	ldr	r1, [pc, #88]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	490e      	ldr	r1, [pc, #56]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ede:	f000 f821 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	490a      	ldr	r1, [pc, #40]	; (8002f18 <HAL_RCC_ClockConfig+0x1cc>)
 8002ef0:	5ccb      	ldrb	r3, [r1, r3]
 8002ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef6:	4a09      	ldr	r2, [pc, #36]	; (8002f1c <HAL_RCC_ClockConfig+0x1d0>)
 8002ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_RCC_ClockConfig+0x1d4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fd6e 	bl	80009e0 <HAL_InitTick>

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023c00 	.word	0x40023c00
 8002f14:	40023800 	.word	0x40023800
 8002f18:	08011f98 	.word	0x08011f98
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	20000004 	.word	0x20000004

08002f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f24:	b5b0      	push	{r4, r5, r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	6079      	str	r1, [r7, #4]
 8002f2e:	2100      	movs	r1, #0
 8002f30:	60f9      	str	r1, [r7, #12]
 8002f32:	2100      	movs	r1, #0
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002f36:	2100      	movs	r1, #0
 8002f38:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f3a:	4952      	ldr	r1, [pc, #328]	; (8003084 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f3c:	6889      	ldr	r1, [r1, #8]
 8002f3e:	f001 010c 	and.w	r1, r1, #12
 8002f42:	2908      	cmp	r1, #8
 8002f44:	d00d      	beq.n	8002f62 <HAL_RCC_GetSysClockFreq+0x3e>
 8002f46:	2908      	cmp	r1, #8
 8002f48:	f200 8094 	bhi.w	8003074 <HAL_RCC_GetSysClockFreq+0x150>
 8002f4c:	2900      	cmp	r1, #0
 8002f4e:	d002      	beq.n	8002f56 <HAL_RCC_GetSysClockFreq+0x32>
 8002f50:	2904      	cmp	r1, #4
 8002f52:	d003      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0x38>
 8002f54:	e08e      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f56:	4b4c      	ldr	r3, [pc, #304]	; (8003088 <HAL_RCC_GetSysClockFreq+0x164>)
 8002f58:	60bb      	str	r3, [r7, #8]
      break;
 8002f5a:	e08e      	b.n	800307a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f5c:	4b4b      	ldr	r3, [pc, #300]	; (800308c <HAL_RCC_GetSysClockFreq+0x168>)
 8002f5e:	60bb      	str	r3, [r7, #8]
      break;
 8002f60:	e08b      	b.n	800307a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f62:	4948      	ldr	r1, [pc, #288]	; (8003084 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f64:	6849      	ldr	r1, [r1, #4]
 8002f66:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002f6a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f6c:	4945      	ldr	r1, [pc, #276]	; (8003084 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f6e:	6849      	ldr	r1, [r1, #4]
 8002f70:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002f74:	2900      	cmp	r1, #0
 8002f76:	d024      	beq.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f78:	4942      	ldr	r1, [pc, #264]	; (8003084 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f7a:	6849      	ldr	r1, [r1, #4]
 8002f7c:	0989      	lsrs	r1, r1, #6
 8002f7e:	4608      	mov	r0, r1
 8002f80:	f04f 0100 	mov.w	r1, #0
 8002f84:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002f88:	f04f 0500 	mov.w	r5, #0
 8002f8c:	ea00 0204 	and.w	r2, r0, r4
 8002f90:	ea01 0305 	and.w	r3, r1, r5
 8002f94:	493d      	ldr	r1, [pc, #244]	; (800308c <HAL_RCC_GetSysClockFreq+0x168>)
 8002f96:	fb01 f003 	mul.w	r0, r1, r3
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	fb01 f102 	mul.w	r1, r1, r2
 8002fa0:	1844      	adds	r4, r0, r1
 8002fa2:	493a      	ldr	r1, [pc, #232]	; (800308c <HAL_RCC_GetSysClockFreq+0x168>)
 8002fa4:	fba2 0101 	umull	r0, r1, r2, r1
 8002fa8:	1863      	adds	r3, r4, r1
 8002faa:	4619      	mov	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	f7fd f97c 	bl	80002b0 <__aeabi_uldivmod>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	e04a      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc2:	4b30      	ldr	r3, [pc, #192]	; (8003084 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	099b      	lsrs	r3, r3, #6
 8002fc8:	461a      	mov	r2, r3
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fd2:	f04f 0100 	mov.w	r1, #0
 8002fd6:	ea02 0400 	and.w	r4, r2, r0
 8002fda:	ea03 0501 	and.w	r5, r3, r1
 8002fde:	4620      	mov	r0, r4
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	014b      	lsls	r3, r1, #5
 8002fec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ff0:	0142      	lsls	r2, r0, #5
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	1b00      	subs	r0, r0, r4
 8002ff8:	eb61 0105 	sbc.w	r1, r1, r5
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	018b      	lsls	r3, r1, #6
 8003006:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800300a:	0182      	lsls	r2, r0, #6
 800300c:	1a12      	subs	r2, r2, r0
 800300e:	eb63 0301 	sbc.w	r3, r3, r1
 8003012:	f04f 0000 	mov.w	r0, #0
 8003016:	f04f 0100 	mov.w	r1, #0
 800301a:	00d9      	lsls	r1, r3, #3
 800301c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003020:	00d0      	lsls	r0, r2, #3
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	1912      	adds	r2, r2, r4
 8003028:	eb45 0303 	adc.w	r3, r5, r3
 800302c:	f04f 0000 	mov.w	r0, #0
 8003030:	f04f 0100 	mov.w	r1, #0
 8003034:	0299      	lsls	r1, r3, #10
 8003036:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800303a:	0290      	lsls	r0, r2, #10
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	461a      	mov	r2, r3
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	f7fd f930 	bl	80002b0 <__aeabi_uldivmod>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4613      	mov	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003058:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <HAL_RCC_GetSysClockFreq+0x160>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	0c1b      	lsrs	r3, r3, #16
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	3301      	adds	r3, #1
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003070:	60bb      	str	r3, [r7, #8]
      break;
 8003072:	e002      	b.n	800307a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003074:	4b04      	ldr	r3, [pc, #16]	; (8003088 <HAL_RCC_GetSysClockFreq+0x164>)
 8003076:	60bb      	str	r3, [r7, #8]
      break;
 8003078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800307a:	68bb      	ldr	r3, [r7, #8]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bdb0      	pop	{r4, r5, r7, pc}
 8003084:	40023800 	.word	0x40023800
 8003088:	00f42400 	.word	0x00f42400
 800308c:	017d7840 	.word	0x017d7840

08003090 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003094:	4b03      	ldr	r3, [pc, #12]	; (80030a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003096:	681b      	ldr	r3, [r3, #0]
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	20000000 	.word	0x20000000

080030a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030ac:	f7ff fff0 	bl	8003090 <HAL_RCC_GetHCLKFreq>
 80030b0:	4602      	mov	r2, r0
 80030b2:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	0a9b      	lsrs	r3, r3, #10
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	4903      	ldr	r1, [pc, #12]	; (80030cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030be:	5ccb      	ldrb	r3, [r1, r3]
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40023800 	.word	0x40023800
 80030cc:	08011fa8 	.word	0x08011fa8

080030d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	220f      	movs	r2, #15
 80030de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030e0:	4b12      	ldr	r3, [pc, #72]	; (800312c <HAL_RCC_GetClockConfig+0x5c>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0203 	and.w	r2, r3, #3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030ec:	4b0f      	ldr	r3, [pc, #60]	; (800312c <HAL_RCC_GetClockConfig+0x5c>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030f8:	4b0c      	ldr	r3, [pc, #48]	; (800312c <HAL_RCC_GetClockConfig+0x5c>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_RCC_GetClockConfig+0x5c>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	08db      	lsrs	r3, r3, #3
 800310a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003112:	4b07      	ldr	r3, [pc, #28]	; (8003130 <HAL_RCC_GetClockConfig+0x60>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 020f 	and.w	r2, r3, #15
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	601a      	str	r2, [r3, #0]
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800
 8003130:	40023c00 	.word	0x40023c00

08003134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e049      	b.n	80031da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7fd fc1a 	bl	8000994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3304      	adds	r3, #4
 8003170:	4619      	mov	r1, r3
 8003172:	4610      	mov	r0, r2
 8003174:	f000 f9f6 	bl	8003564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d001      	beq.n	80031fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e054      	b.n	80032a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a26      	ldr	r2, [pc, #152]	; (80032b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d022      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x80>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003226:	d01d      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x80>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a22      	ldr	r2, [pc, #136]	; (80032b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d018      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x80>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a21      	ldr	r2, [pc, #132]	; (80032bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d013      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x80>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a1f      	ldr	r2, [pc, #124]	; (80032c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00e      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x80>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a1e      	ldr	r2, [pc, #120]	; (80032c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d009      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x80>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a1c      	ldr	r2, [pc, #112]	; (80032c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d004      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x80>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a1b      	ldr	r2, [pc, #108]	; (80032cc <HAL_TIM_Base_Start_IT+0xe8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d115      	bne.n	8003290 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <HAL_TIM_Base_Start_IT+0xec>)
 800326c:	4013      	ands	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b06      	cmp	r3, #6
 8003274:	d015      	beq.n	80032a2 <HAL_TIM_Base_Start_IT+0xbe>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327c:	d011      	beq.n	80032a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0201 	orr.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328e:	e008      	b.n	80032a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	e000      	b.n	80032a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40010000 	.word	0x40010000
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40000800 	.word	0x40000800
 80032c0:	40000c00 	.word	0x40000c00
 80032c4:	40010400 	.word	0x40010400
 80032c8:	40014000 	.word	0x40014000
 80032cc:	40001800 	.word	0x40001800
 80032d0:	00010007 	.word	0x00010007

080032d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d122      	bne.n	8003330 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d11b      	bne.n	8003330 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0202 	mvn.w	r2, #2
 8003300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f905 	bl	8003526 <HAL_TIM_IC_CaptureCallback>
 800331c:	e005      	b.n	800332a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f8f7 	bl	8003512 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f908 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b04      	cmp	r3, #4
 800333c:	d122      	bne.n	8003384 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b04      	cmp	r3, #4
 800334a:	d11b      	bne.n	8003384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0204 	mvn.w	r2, #4
 8003354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f8db 	bl	8003526 <HAL_TIM_IC_CaptureCallback>
 8003370:	e005      	b.n	800337e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f8cd 	bl	8003512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f8de 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b08      	cmp	r3, #8
 8003390:	d122      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b08      	cmp	r3, #8
 800339e:	d11b      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0208 	mvn.w	r2, #8
 80033a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2204      	movs	r2, #4
 80033ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8b1 	bl	8003526 <HAL_TIM_IC_CaptureCallback>
 80033c4:	e005      	b.n	80033d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8a3 	bl	8003512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f8b4 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d122      	bne.n	800342c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	2b10      	cmp	r3, #16
 80033f2:	d11b      	bne.n	800342c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0210 	mvn.w	r2, #16
 80033fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2208      	movs	r2, #8
 8003402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f887 	bl	8003526 <HAL_TIM_IC_CaptureCallback>
 8003418:	e005      	b.n	8003426 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f879 	bl	8003512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f88a 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b01      	cmp	r3, #1
 8003438:	d10e      	bne.n	8003458 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b01      	cmp	r3, #1
 8003446:	d107      	bne.n	8003458 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0201 	mvn.w	r2, #1
 8003450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fd fa56 	bl	8000904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003462:	2b80      	cmp	r3, #128	; 0x80
 8003464:	d10e      	bne.n	8003484 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003470:	2b80      	cmp	r3, #128	; 0x80
 8003472:	d107      	bne.n	8003484 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800347c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f91a 	bl	80036b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003492:	d10e      	bne.n	80034b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349e:	2b80      	cmp	r3, #128	; 0x80
 80034a0:	d107      	bne.n	80034b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80034aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f90d 	bl	80036cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d10e      	bne.n	80034de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ca:	2b40      	cmp	r3, #64	; 0x40
 80034cc:	d107      	bne.n	80034de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f838 	bl	800354e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d10e      	bne.n	800350a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	d107      	bne.n	800350a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f06f 0220 	mvn.w	r2, #32
 8003502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f8cd 	bl	80036a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a40      	ldr	r2, [pc, #256]	; (8003678 <TIM_Base_SetConfig+0x114>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d013      	beq.n	80035a4 <TIM_Base_SetConfig+0x40>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003582:	d00f      	beq.n	80035a4 <TIM_Base_SetConfig+0x40>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a3d      	ldr	r2, [pc, #244]	; (800367c <TIM_Base_SetConfig+0x118>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00b      	beq.n	80035a4 <TIM_Base_SetConfig+0x40>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a3c      	ldr	r2, [pc, #240]	; (8003680 <TIM_Base_SetConfig+0x11c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d007      	beq.n	80035a4 <TIM_Base_SetConfig+0x40>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a3b      	ldr	r2, [pc, #236]	; (8003684 <TIM_Base_SetConfig+0x120>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d003      	beq.n	80035a4 <TIM_Base_SetConfig+0x40>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a3a      	ldr	r2, [pc, #232]	; (8003688 <TIM_Base_SetConfig+0x124>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d108      	bne.n	80035b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a2f      	ldr	r2, [pc, #188]	; (8003678 <TIM_Base_SetConfig+0x114>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d02b      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c4:	d027      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a2c      	ldr	r2, [pc, #176]	; (800367c <TIM_Base_SetConfig+0x118>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d023      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a2b      	ldr	r2, [pc, #172]	; (8003680 <TIM_Base_SetConfig+0x11c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01f      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a2a      	ldr	r2, [pc, #168]	; (8003684 <TIM_Base_SetConfig+0x120>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d01b      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a29      	ldr	r2, [pc, #164]	; (8003688 <TIM_Base_SetConfig+0x124>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d017      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a28      	ldr	r2, [pc, #160]	; (800368c <TIM_Base_SetConfig+0x128>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a27      	ldr	r2, [pc, #156]	; (8003690 <TIM_Base_SetConfig+0x12c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00f      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a26      	ldr	r2, [pc, #152]	; (8003694 <TIM_Base_SetConfig+0x130>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00b      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a25      	ldr	r2, [pc, #148]	; (8003698 <TIM_Base_SetConfig+0x134>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d007      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a24      	ldr	r2, [pc, #144]	; (800369c <TIM_Base_SetConfig+0x138>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d003      	beq.n	8003616 <TIM_Base_SetConfig+0xb2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a23      	ldr	r2, [pc, #140]	; (80036a0 <TIM_Base_SetConfig+0x13c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d108      	bne.n	8003628 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <TIM_Base_SetConfig+0x114>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d003      	beq.n	800365c <TIM_Base_SetConfig+0xf8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a0c      	ldr	r2, [pc, #48]	; (8003688 <TIM_Base_SetConfig+0x124>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d103      	bne.n	8003664 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	615a      	str	r2, [r3, #20]
}
 800366a:	bf00      	nop
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40010000 	.word	0x40010000
 800367c:	40000400 	.word	0x40000400
 8003680:	40000800 	.word	0x40000800
 8003684:	40000c00 	.word	0x40000c00
 8003688:	40010400 	.word	0x40010400
 800368c:	40014000 	.word	0x40014000
 8003690:	40014400 	.word	0x40014400
 8003694:	40014800 	.word	0x40014800
 8003698:	40001800 	.word	0x40001800
 800369c:	40001c00 	.word	0x40001c00
 80036a0:	40002000 	.word	0x40002000

080036a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80036e6:	4b8d      	ldr	r3, [pc, #564]	; (800391c <MX_LWIP_Init+0x23c>)
 80036e8:	22c0      	movs	r2, #192	; 0xc0
 80036ea:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80036ec:	4b8b      	ldr	r3, [pc, #556]	; (800391c <MX_LWIP_Init+0x23c>)
 80036ee:	22a8      	movs	r2, #168	; 0xa8
 80036f0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 80036f2:	4b8a      	ldr	r3, [pc, #552]	; (800391c <MX_LWIP_Init+0x23c>)
 80036f4:	2202      	movs	r2, #2
 80036f6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 99;
 80036f8:	4b88      	ldr	r3, [pc, #544]	; (800391c <MX_LWIP_Init+0x23c>)
 80036fa:	2263      	movs	r2, #99	; 0x63
 80036fc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80036fe:	4b88      	ldr	r3, [pc, #544]	; (8003920 <MX_LWIP_Init+0x240>)
 8003700:	22ff      	movs	r2, #255	; 0xff
 8003702:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003704:	4b86      	ldr	r3, [pc, #536]	; (8003920 <MX_LWIP_Init+0x240>)
 8003706:	22ff      	movs	r2, #255	; 0xff
 8003708:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800370a:	4b85      	ldr	r3, [pc, #532]	; (8003920 <MX_LWIP_Init+0x240>)
 800370c:	22ff      	movs	r2, #255	; 0xff
 800370e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003710:	4b83      	ldr	r3, [pc, #524]	; (8003920 <MX_LWIP_Init+0x240>)
 8003712:	2200      	movs	r2, #0
 8003714:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003716:	4b83      	ldr	r3, [pc, #524]	; (8003924 <MX_LWIP_Init+0x244>)
 8003718:	22c0      	movs	r2, #192	; 0xc0
 800371a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800371c:	4b81      	ldr	r3, [pc, #516]	; (8003924 <MX_LWIP_Init+0x244>)
 800371e:	22a8      	movs	r2, #168	; 0xa8
 8003720:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003722:	4b80      	ldr	r3, [pc, #512]	; (8003924 <MX_LWIP_Init+0x244>)
 8003724:	2200      	movs	r2, #0
 8003726:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003728:	4b7e      	ldr	r3, [pc, #504]	; (8003924 <MX_LWIP_Init+0x244>)
 800372a:	2201      	movs	r2, #1
 800372c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800372e:	f000 fccb 	bl	80040c8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003732:	4b7a      	ldr	r3, [pc, #488]	; (800391c <MX_LWIP_Init+0x23c>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	061a      	lsls	r2, r3, #24
 8003738:	4b78      	ldr	r3, [pc, #480]	; (800391c <MX_LWIP_Init+0x23c>)
 800373a:	785b      	ldrb	r3, [r3, #1]
 800373c:	041b      	lsls	r3, r3, #16
 800373e:	431a      	orrs	r2, r3
 8003740:	4b76      	ldr	r3, [pc, #472]	; (800391c <MX_LWIP_Init+0x23c>)
 8003742:	789b      	ldrb	r3, [r3, #2]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	4313      	orrs	r3, r2
 8003748:	4a74      	ldr	r2, [pc, #464]	; (800391c <MX_LWIP_Init+0x23c>)
 800374a:	78d2      	ldrb	r2, [r2, #3]
 800374c:	4313      	orrs	r3, r2
 800374e:	061a      	lsls	r2, r3, #24
 8003750:	4b72      	ldr	r3, [pc, #456]	; (800391c <MX_LWIP_Init+0x23c>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	0619      	lsls	r1, r3, #24
 8003756:	4b71      	ldr	r3, [pc, #452]	; (800391c <MX_LWIP_Init+0x23c>)
 8003758:	785b      	ldrb	r3, [r3, #1]
 800375a:	041b      	lsls	r3, r3, #16
 800375c:	4319      	orrs	r1, r3
 800375e:	4b6f      	ldr	r3, [pc, #444]	; (800391c <MX_LWIP_Init+0x23c>)
 8003760:	789b      	ldrb	r3, [r3, #2]
 8003762:	021b      	lsls	r3, r3, #8
 8003764:	430b      	orrs	r3, r1
 8003766:	496d      	ldr	r1, [pc, #436]	; (800391c <MX_LWIP_Init+0x23c>)
 8003768:	78c9      	ldrb	r1, [r1, #3]
 800376a:	430b      	orrs	r3, r1
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003772:	431a      	orrs	r2, r3
 8003774:	4b69      	ldr	r3, [pc, #420]	; (800391c <MX_LWIP_Init+0x23c>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	0619      	lsls	r1, r3, #24
 800377a:	4b68      	ldr	r3, [pc, #416]	; (800391c <MX_LWIP_Init+0x23c>)
 800377c:	785b      	ldrb	r3, [r3, #1]
 800377e:	041b      	lsls	r3, r3, #16
 8003780:	4319      	orrs	r1, r3
 8003782:	4b66      	ldr	r3, [pc, #408]	; (800391c <MX_LWIP_Init+0x23c>)
 8003784:	789b      	ldrb	r3, [r3, #2]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	430b      	orrs	r3, r1
 800378a:	4964      	ldr	r1, [pc, #400]	; (800391c <MX_LWIP_Init+0x23c>)
 800378c:	78c9      	ldrb	r1, [r1, #3]
 800378e:	430b      	orrs	r3, r1
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003796:	431a      	orrs	r2, r3
 8003798:	4b60      	ldr	r3, [pc, #384]	; (800391c <MX_LWIP_Init+0x23c>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	0619      	lsls	r1, r3, #24
 800379e:	4b5f      	ldr	r3, [pc, #380]	; (800391c <MX_LWIP_Init+0x23c>)
 80037a0:	785b      	ldrb	r3, [r3, #1]
 80037a2:	041b      	lsls	r3, r3, #16
 80037a4:	4319      	orrs	r1, r3
 80037a6:	4b5d      	ldr	r3, [pc, #372]	; (800391c <MX_LWIP_Init+0x23c>)
 80037a8:	789b      	ldrb	r3, [r3, #2]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	430b      	orrs	r3, r1
 80037ae:	495b      	ldr	r1, [pc, #364]	; (800391c <MX_LWIP_Init+0x23c>)
 80037b0:	78c9      	ldrb	r1, [r1, #3]
 80037b2:	430b      	orrs	r3, r1
 80037b4:	0e1b      	lsrs	r3, r3, #24
 80037b6:	4313      	orrs	r3, r2
 80037b8:	4a5b      	ldr	r2, [pc, #364]	; (8003928 <MX_LWIP_Init+0x248>)
 80037ba:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80037bc:	4b58      	ldr	r3, [pc, #352]	; (8003920 <MX_LWIP_Init+0x240>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	061a      	lsls	r2, r3, #24
 80037c2:	4b57      	ldr	r3, [pc, #348]	; (8003920 <MX_LWIP_Init+0x240>)
 80037c4:	785b      	ldrb	r3, [r3, #1]
 80037c6:	041b      	lsls	r3, r3, #16
 80037c8:	431a      	orrs	r2, r3
 80037ca:	4b55      	ldr	r3, [pc, #340]	; (8003920 <MX_LWIP_Init+0x240>)
 80037cc:	789b      	ldrb	r3, [r3, #2]
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	4313      	orrs	r3, r2
 80037d2:	4a53      	ldr	r2, [pc, #332]	; (8003920 <MX_LWIP_Init+0x240>)
 80037d4:	78d2      	ldrb	r2, [r2, #3]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	061a      	lsls	r2, r3, #24
 80037da:	4b51      	ldr	r3, [pc, #324]	; (8003920 <MX_LWIP_Init+0x240>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	0619      	lsls	r1, r3, #24
 80037e0:	4b4f      	ldr	r3, [pc, #316]	; (8003920 <MX_LWIP_Init+0x240>)
 80037e2:	785b      	ldrb	r3, [r3, #1]
 80037e4:	041b      	lsls	r3, r3, #16
 80037e6:	4319      	orrs	r1, r3
 80037e8:	4b4d      	ldr	r3, [pc, #308]	; (8003920 <MX_LWIP_Init+0x240>)
 80037ea:	789b      	ldrb	r3, [r3, #2]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	430b      	orrs	r3, r1
 80037f0:	494b      	ldr	r1, [pc, #300]	; (8003920 <MX_LWIP_Init+0x240>)
 80037f2:	78c9      	ldrb	r1, [r1, #3]
 80037f4:	430b      	orrs	r3, r1
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037fc:	431a      	orrs	r2, r3
 80037fe:	4b48      	ldr	r3, [pc, #288]	; (8003920 <MX_LWIP_Init+0x240>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	0619      	lsls	r1, r3, #24
 8003804:	4b46      	ldr	r3, [pc, #280]	; (8003920 <MX_LWIP_Init+0x240>)
 8003806:	785b      	ldrb	r3, [r3, #1]
 8003808:	041b      	lsls	r3, r3, #16
 800380a:	4319      	orrs	r1, r3
 800380c:	4b44      	ldr	r3, [pc, #272]	; (8003920 <MX_LWIP_Init+0x240>)
 800380e:	789b      	ldrb	r3, [r3, #2]
 8003810:	021b      	lsls	r3, r3, #8
 8003812:	430b      	orrs	r3, r1
 8003814:	4942      	ldr	r1, [pc, #264]	; (8003920 <MX_LWIP_Init+0x240>)
 8003816:	78c9      	ldrb	r1, [r1, #3]
 8003818:	430b      	orrs	r3, r1
 800381a:	0a1b      	lsrs	r3, r3, #8
 800381c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003820:	431a      	orrs	r2, r3
 8003822:	4b3f      	ldr	r3, [pc, #252]	; (8003920 <MX_LWIP_Init+0x240>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	0619      	lsls	r1, r3, #24
 8003828:	4b3d      	ldr	r3, [pc, #244]	; (8003920 <MX_LWIP_Init+0x240>)
 800382a:	785b      	ldrb	r3, [r3, #1]
 800382c:	041b      	lsls	r3, r3, #16
 800382e:	4319      	orrs	r1, r3
 8003830:	4b3b      	ldr	r3, [pc, #236]	; (8003920 <MX_LWIP_Init+0x240>)
 8003832:	789b      	ldrb	r3, [r3, #2]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	430b      	orrs	r3, r1
 8003838:	4939      	ldr	r1, [pc, #228]	; (8003920 <MX_LWIP_Init+0x240>)
 800383a:	78c9      	ldrb	r1, [r1, #3]
 800383c:	430b      	orrs	r3, r1
 800383e:	0e1b      	lsrs	r3, r3, #24
 8003840:	4313      	orrs	r3, r2
 8003842:	4a3a      	ldr	r2, [pc, #232]	; (800392c <MX_LWIP_Init+0x24c>)
 8003844:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003846:	4b37      	ldr	r3, [pc, #220]	; (8003924 <MX_LWIP_Init+0x244>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	061a      	lsls	r2, r3, #24
 800384c:	4b35      	ldr	r3, [pc, #212]	; (8003924 <MX_LWIP_Init+0x244>)
 800384e:	785b      	ldrb	r3, [r3, #1]
 8003850:	041b      	lsls	r3, r3, #16
 8003852:	431a      	orrs	r2, r3
 8003854:	4b33      	ldr	r3, [pc, #204]	; (8003924 <MX_LWIP_Init+0x244>)
 8003856:	789b      	ldrb	r3, [r3, #2]
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	4313      	orrs	r3, r2
 800385c:	4a31      	ldr	r2, [pc, #196]	; (8003924 <MX_LWIP_Init+0x244>)
 800385e:	78d2      	ldrb	r2, [r2, #3]
 8003860:	4313      	orrs	r3, r2
 8003862:	061a      	lsls	r2, r3, #24
 8003864:	4b2f      	ldr	r3, [pc, #188]	; (8003924 <MX_LWIP_Init+0x244>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	0619      	lsls	r1, r3, #24
 800386a:	4b2e      	ldr	r3, [pc, #184]	; (8003924 <MX_LWIP_Init+0x244>)
 800386c:	785b      	ldrb	r3, [r3, #1]
 800386e:	041b      	lsls	r3, r3, #16
 8003870:	4319      	orrs	r1, r3
 8003872:	4b2c      	ldr	r3, [pc, #176]	; (8003924 <MX_LWIP_Init+0x244>)
 8003874:	789b      	ldrb	r3, [r3, #2]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	430b      	orrs	r3, r1
 800387a:	492a      	ldr	r1, [pc, #168]	; (8003924 <MX_LWIP_Init+0x244>)
 800387c:	78c9      	ldrb	r1, [r1, #3]
 800387e:	430b      	orrs	r3, r1
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003886:	431a      	orrs	r2, r3
 8003888:	4b26      	ldr	r3, [pc, #152]	; (8003924 <MX_LWIP_Init+0x244>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	0619      	lsls	r1, r3, #24
 800388e:	4b25      	ldr	r3, [pc, #148]	; (8003924 <MX_LWIP_Init+0x244>)
 8003890:	785b      	ldrb	r3, [r3, #1]
 8003892:	041b      	lsls	r3, r3, #16
 8003894:	4319      	orrs	r1, r3
 8003896:	4b23      	ldr	r3, [pc, #140]	; (8003924 <MX_LWIP_Init+0x244>)
 8003898:	789b      	ldrb	r3, [r3, #2]
 800389a:	021b      	lsls	r3, r3, #8
 800389c:	430b      	orrs	r3, r1
 800389e:	4921      	ldr	r1, [pc, #132]	; (8003924 <MX_LWIP_Init+0x244>)
 80038a0:	78c9      	ldrb	r1, [r1, #3]
 80038a2:	430b      	orrs	r3, r1
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80038aa:	431a      	orrs	r2, r3
 80038ac:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <MX_LWIP_Init+0x244>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	0619      	lsls	r1, r3, #24
 80038b2:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <MX_LWIP_Init+0x244>)
 80038b4:	785b      	ldrb	r3, [r3, #1]
 80038b6:	041b      	lsls	r3, r3, #16
 80038b8:	4319      	orrs	r1, r3
 80038ba:	4b1a      	ldr	r3, [pc, #104]	; (8003924 <MX_LWIP_Init+0x244>)
 80038bc:	789b      	ldrb	r3, [r3, #2]
 80038be:	021b      	lsls	r3, r3, #8
 80038c0:	430b      	orrs	r3, r1
 80038c2:	4918      	ldr	r1, [pc, #96]	; (8003924 <MX_LWIP_Init+0x244>)
 80038c4:	78c9      	ldrb	r1, [r1, #3]
 80038c6:	430b      	orrs	r3, r1
 80038c8:	0e1b      	lsrs	r3, r3, #24
 80038ca:	4313      	orrs	r3, r2
 80038cc:	4a18      	ldr	r2, [pc, #96]	; (8003930 <MX_LWIP_Init+0x250>)
 80038ce:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80038d0:	4b18      	ldr	r3, [pc, #96]	; (8003934 <MX_LWIP_Init+0x254>)
 80038d2:	9302      	str	r3, [sp, #8]
 80038d4:	4b18      	ldr	r3, [pc, #96]	; (8003938 <MX_LWIP_Init+0x258>)
 80038d6:	9301      	str	r3, [sp, #4]
 80038d8:	2300      	movs	r3, #0
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	4b14      	ldr	r3, [pc, #80]	; (8003930 <MX_LWIP_Init+0x250>)
 80038de:	4a13      	ldr	r2, [pc, #76]	; (800392c <MX_LWIP_Init+0x24c>)
 80038e0:	4911      	ldr	r1, [pc, #68]	; (8003928 <MX_LWIP_Init+0x248>)
 80038e2:	4816      	ldr	r0, [pc, #88]	; (800393c <MX_LWIP_Init+0x25c>)
 80038e4:	f001 f896 	bl	8004a14 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80038e8:	4814      	ldr	r0, [pc, #80]	; (800393c <MX_LWIP_Init+0x25c>)
 80038ea:	f001 fa45 	bl	8004d78 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80038ee:	4b13      	ldr	r3, [pc, #76]	; (800393c <MX_LWIP_Init+0x25c>)
 80038f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80038f4:	089b      	lsrs	r3, r3, #2
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003900:	480e      	ldr	r0, [pc, #56]	; (800393c <MX_LWIP_Init+0x25c>)
 8003902:	f001 fa49 	bl	8004d98 <netif_set_up>
 8003906:	e002      	b.n	800390e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003908:	480c      	ldr	r0, [pc, #48]	; (800393c <MX_LWIP_Init+0x25c>)
 800390a:	f001 fab1 	bl	8004e70 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800390e:	490c      	ldr	r1, [pc, #48]	; (8003940 <MX_LWIP_Init+0x260>)
 8003910:	480a      	ldr	r0, [pc, #40]	; (800393c <MX_LWIP_Init+0x25c>)
 8003912:	f001 fadf 	bl	8004ed4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003916:	bf00      	nop
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20000358 	.word	0x20000358
 8003920:	20000354 	.word	0x20000354
 8003924:	20000318 	.word	0x20000318
 8003928:	20000350 	.word	0x20000350
 800392c:	2000035c 	.word	0x2000035c
 8003930:	20000360 	.word	0x20000360
 8003934:	0800df61 	.word	0x0800df61
 8003938:	08003ef5 	.word	0x08003ef5
 800393c:	2000031c 	.word	0x2000031c
 8003940:	08003f61 	.word	0x08003f61

08003944 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08e      	sub	sp, #56	; 0x38
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a4e      	ldr	r2, [pc, #312]	; (8003a9c <HAL_ETH_MspInit+0x158>)
 8003962:	4293      	cmp	r3, r2
 8003964:	f040 8096 	bne.w	8003a94 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003968:	4b4d      	ldr	r3, [pc, #308]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	4a4c      	ldr	r2, [pc, #304]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 800396e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003972:	6313      	str	r3, [r2, #48]	; 0x30
 8003974:	4b4a      	ldr	r3, [pc, #296]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397c:	623b      	str	r3, [r7, #32]
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	4b47      	ldr	r3, [pc, #284]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	4a46      	ldr	r2, [pc, #280]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 8003986:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800398a:	6313      	str	r3, [r2, #48]	; 0x30
 800398c:	4b44      	ldr	r3, [pc, #272]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	4b41      	ldr	r3, [pc, #260]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	4a40      	ldr	r2, [pc, #256]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 800399e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039a2:	6313      	str	r3, [r2, #48]	; 0x30
 80039a4:	4b3e      	ldr	r3, [pc, #248]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039b0:	4b3b      	ldr	r3, [pc, #236]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	4a3a      	ldr	r2, [pc, #232]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 80039b6:	f043 0304 	orr.w	r3, r3, #4
 80039ba:	6313      	str	r3, [r2, #48]	; 0x30
 80039bc:	4b38      	ldr	r3, [pc, #224]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c8:	4b35      	ldr	r3, [pc, #212]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	4a34      	ldr	r2, [pc, #208]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	6313      	str	r3, [r2, #48]	; 0x30
 80039d4:	4b32      	ldr	r3, [pc, #200]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e0:	4b2f      	ldr	r3, [pc, #188]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	4a2e      	ldr	r2, [pc, #184]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 80039e6:	f043 0302 	orr.w	r3, r3, #2
 80039ea:	6313      	str	r3, [r2, #48]	; 0x30
 80039ec:	4b2c      	ldr	r3, [pc, #176]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80039f8:	4b29      	ldr	r3, [pc, #164]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	4a28      	ldr	r2, [pc, #160]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 80039fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a02:	6313      	str	r3, [r2, #48]	; 0x30
 8003a04:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <HAL_ETH_MspInit+0x15c>)
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003a10:	2332      	movs	r3, #50	; 0x32
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a14:	2302      	movs	r3, #2
 8003a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a20:	230b      	movs	r3, #11
 8003a22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a28:	4619      	mov	r1, r3
 8003a2a:	481e      	ldr	r0, [pc, #120]	; (8003aa4 <HAL_ETH_MspInit+0x160>)
 8003a2c:	f7fe fcba 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003a30:	2386      	movs	r3, #134	; 0x86
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a34:	2302      	movs	r3, #2
 8003a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a40:	230b      	movs	r3, #11
 8003a42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4817      	ldr	r0, [pc, #92]	; (8003aa8 <HAL_ETH_MspInit+0x164>)
 8003a4c:	f7fe fcaa 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a56:	2302      	movs	r3, #2
 8003a58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a62:	230b      	movs	r3, #11
 8003a64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	480f      	ldr	r0, [pc, #60]	; (8003aac <HAL_ETH_MspInit+0x168>)
 8003a6e:	f7fe fc99 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003a72:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a80:	2303      	movs	r3, #3
 8003a82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a84:	230b      	movs	r3, #11
 8003a86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4808      	ldr	r0, [pc, #32]	; (8003ab0 <HAL_ETH_MspInit+0x16c>)
 8003a90:	f7fe fc88 	bl	80023a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003a94:	bf00      	nop
 8003a96:	3738      	adds	r7, #56	; 0x38
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40028000 	.word	0x40028000
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	40020800 	.word	0x40020800
 8003aa8:	40020000 	.word	0x40020000
 8003aac:	40020400 	.word	0x40020400
 8003ab0:	40021800 	.word	0x40021800

08003ab4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003abc:	2300      	movs	r3, #0
 8003abe:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003ac0:	4b4d      	ldr	r3, [pc, #308]	; (8003bf8 <low_level_init+0x144>)
 8003ac2:	4a4e      	ldr	r2, [pc, #312]	; (8003bfc <low_level_init+0x148>)
 8003ac4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003ac6:	4b4c      	ldr	r3, [pc, #304]	; (8003bf8 <low_level_init+0x144>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003acc:	4b4a      	ldr	r3, [pc, #296]	; (8003bf8 <low_level_init+0x144>)
 8003ace:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ad2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003ad4:	4b48      	ldr	r3, [pc, #288]	; (8003bf8 <low_level_init+0x144>)
 8003ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ada:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003adc:	4b46      	ldr	r3, [pc, #280]	; (8003bf8 <low_level_init+0x144>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003ae6:	2380      	movs	r3, #128	; 0x80
 8003ae8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003aea:	23e1      	movs	r3, #225	; 0xe1
 8003aec:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003aee:	2300      	movs	r3, #0
 8003af0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003af2:	2300      	movs	r3, #0
 8003af4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003af6:	2300      	movs	r3, #0
 8003af8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003afa:	4a3f      	ldr	r2, [pc, #252]	; (8003bf8 <low_level_init+0x144>)
 8003afc:	f107 0308 	add.w	r3, r7, #8
 8003b00:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003b02:	4b3d      	ldr	r3, [pc, #244]	; (8003bf8 <low_level_init+0x144>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003b08:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <low_level_init+0x144>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003b0e:	4b3a      	ldr	r3, [pc, #232]	; (8003bf8 <low_level_init+0x144>)
 8003b10:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003b14:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003b16:	4838      	ldr	r0, [pc, #224]	; (8003bf8 <low_level_init+0x144>)
 8003b18:	f7fd fb40 	bl	800119c <HAL_ETH_Init>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d108      	bne.n	8003b38 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003b2c:	f043 0304 	orr.w	r3, r3, #4
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003b38:	2304      	movs	r3, #4
 8003b3a:	4a31      	ldr	r2, [pc, #196]	; (8003c00 <low_level_init+0x14c>)
 8003b3c:	4931      	ldr	r1, [pc, #196]	; (8003c04 <low_level_init+0x150>)
 8003b3e:	482e      	ldr	r0, [pc, #184]	; (8003bf8 <low_level_init+0x144>)
 8003b40:	f7fd fcc6 	bl	80014d0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003b44:	2304      	movs	r3, #4
 8003b46:	4a30      	ldr	r2, [pc, #192]	; (8003c08 <low_level_init+0x154>)
 8003b48:	4930      	ldr	r1, [pc, #192]	; (8003c0c <low_level_init+0x158>)
 8003b4a:	482b      	ldr	r0, [pc, #172]	; (8003bf8 <low_level_init+0x144>)
 8003b4c:	f7fd fd29 	bl	80015a2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2206      	movs	r2, #6
 8003b54:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003b58:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <low_level_init+0x144>)
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	781a      	ldrb	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003b64:	4b24      	ldr	r3, [pc, #144]	; (8003bf8 <low_level_init+0x144>)
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	785a      	ldrb	r2, [r3, #1]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003b70:	4b21      	ldr	r3, [pc, #132]	; (8003bf8 <low_level_init+0x144>)
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	789a      	ldrb	r2, [r3, #2]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003b7c:	4b1e      	ldr	r3, [pc, #120]	; (8003bf8 <low_level_init+0x144>)
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	78da      	ldrb	r2, [r3, #3]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <low_level_init+0x144>)
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	791a      	ldrb	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003b94:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <low_level_init+0x144>)
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	795a      	ldrb	r2, [r3, #5]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003ba6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003bae:	f043 030a 	orr.w	r3, r3, #10
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003bba:	480f      	ldr	r0, [pc, #60]	; (8003bf8 <low_level_init+0x144>)
 8003bbc:	f7fd ff9a 	bl	8001af4 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003bc0:	f107 0310 	add.w	r3, r7, #16
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	211d      	movs	r1, #29
 8003bc8:	480b      	ldr	r0, [pc, #44]	; (8003bf8 <low_level_init+0x144>)
 8003bca:	f7fd fec5 	bl	8001958 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f043 030b 	orr.w	r3, r3, #11
 8003bd4:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	211d      	movs	r1, #29
 8003bdc:	4806      	ldr	r0, [pc, #24]	; (8003bf8 <low_level_init+0x144>)
 8003bde:	f7fd ff23 	bl	8001a28 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003be2:	f107 0310 	add.w	r3, r7, #16
 8003be6:	461a      	mov	r2, r3
 8003be8:	211d      	movs	r1, #29
 8003bea:	4803      	ldr	r0, [pc, #12]	; (8003bf8 <low_level_init+0x144>)
 8003bec:	f7fd feb4 	bl	8001958 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003bf0:	bf00      	nop
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20001c34 	.word	0x20001c34
 8003bfc:	40028000 	.word	0x40028000
 8003c00:	20001c7c 	.word	0x20001c7c
 8003c04:	20000364 	.word	0x20000364
 8003c08:	200003e4 	.word	0x200003e4
 8003c0c:	20001bb4 	.word	0x20001bb4

08003c10 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08a      	sub	sp, #40	; 0x28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003c1a:	4b4b      	ldr	r3, [pc, #300]	; (8003d48 <low_level_output+0x138>)
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003c26:	2300      	movs	r3, #0
 8003c28:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003c32:	4b45      	ldr	r3, [pc, #276]	; (8003d48 <low_level_output+0x138>)
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	623b      	str	r3, [r7, #32]
 8003c40:	e05a      	b.n	8003cf8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	da03      	bge.n	8003c52 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003c4a:	23f8      	movs	r3, #248	; 0xf8
 8003c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003c50:	e05c      	b.n	8003d0c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	895b      	ldrh	r3, [r3, #10]
 8003c56:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003c5c:	e02f      	b.n	8003cbe <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003c5e:	69fa      	ldr	r2, [r7, #28]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	18d0      	adds	r0, r2, r3
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	18d1      	adds	r1, r2, r3
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	461a      	mov	r2, r3
 8003c76:	f00a fa7b 	bl	800e170 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	da03      	bge.n	8003c90 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003c88:	23f8      	movs	r3, #248	; 0xf8
 8003c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003c8e:	e03d      	b.n	8003d0c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003ca0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003cac:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003cb8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d8c8      	bhi.n	8003c5e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	18d0      	adds	r0, r2, r3
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	4413      	add	r3, r2
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	f00a fa47 	bl	800e170 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4413      	add	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	623b      	str	r3, [r7, #32]
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1a1      	bne.n	8003c42 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003cfe:	6979      	ldr	r1, [r7, #20]
 8003d00:	4811      	ldr	r0, [pc, #68]	; (8003d48 <low_level_output+0x138>)
 8003d02:	f7fd fcbb 	bl	800167c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <low_level_output+0x138>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	f241 0314 	movw	r3, #4116	; 0x1014
 8003d14:	4413      	add	r3, r2
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00d      	beq.n	8003d3c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003d20:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <low_level_output+0x138>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	f241 0314 	movw	r3, #4116	; 0x1014
 8003d28:	4413      	add	r3, r2
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003d2e:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <low_level_output+0x138>)
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	f241 0304 	movw	r3, #4100	; 0x1004
 8003d36:	4413      	add	r3, r2
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003d3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3728      	adds	r7, #40	; 0x28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20001c34 	.word	0x20001c34

08003d4c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08c      	sub	sp, #48	; 0x30
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003d70:	484f      	ldr	r0, [pc, #316]	; (8003eb0 <low_level_input+0x164>)
 8003d72:	f7fd fd6d 	bl	8001850 <HAL_ETH_GetReceivedFrame>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <low_level_input+0x34>

    return NULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e092      	b.n	8003ea6 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003d80:	4b4b      	ldr	r3, [pc, #300]	; (8003eb0 <low_level_input+0x164>)
 8003d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d84:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003d86:	4b4a      	ldr	r3, [pc, #296]	; (8003eb0 <low_level_input+0x164>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003d8c:	89fb      	ldrh	r3, [r7, #14]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003d92:	89fb      	ldrh	r3, [r7, #14]
 8003d94:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003d98:	4619      	mov	r1, r3
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	f001 f936 	bl	800500c <pbuf_alloc>
 8003da0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d04b      	beq.n	8003e40 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003da8:	4b41      	ldr	r3, [pc, #260]	; (8003eb0 <low_level_input+0x164>)
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003db6:	e040      	b.n	8003e3a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	895b      	ldrh	r3, [r3, #10]
 8003dbc:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003dc2:	e021      	b.n	8003e08 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	18d0      	adds	r0, r2, r3
 8003dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	18d1      	adds	r1, r2, r3
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f00a f9c8 	bl	800e170 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003dec:	69fa      	ldr	r2, [r7, #28]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	4413      	add	r3, r2
 8003df2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003df6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003e02:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d8d6      	bhi.n	8003dc4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	18d0      	adds	r0, r2, r3
 8003e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	4413      	add	r3, r2
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4619      	mov	r1, r3
 8003e28:	f00a f9a2 	bl	800e170 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	4413      	add	r3, r2
 8003e32:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1bb      	bne.n	8003db8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003e40:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <low_level_input+0x164>)
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003e46:	2300      	movs	r3, #0
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	e00b      	b.n	8003e64 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	3301      	adds	r3, #1
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <low_level_input+0x164>)
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d3ee      	bcc.n	8003e4c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003e6e:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <low_level_input+0x164>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003e74:	4b0e      	ldr	r3, [pc, #56]	; (8003eb0 <low_level_input+0x164>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	f241 0314 	movw	r3, #4116	; 0x1014
 8003e7c:	4413      	add	r3, r2
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00d      	beq.n	8003ea4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003e88:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <low_level_input+0x164>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	f241 0314 	movw	r3, #4116	; 0x1014
 8003e90:	4413      	add	r3, r2
 8003e92:	2280      	movs	r2, #128	; 0x80
 8003e94:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003e96:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <low_level_input+0x164>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	f241 0308 	movw	r3, #4104	; 0x1008
 8003e9e:	4413      	add	r3, r2
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3730      	adds	r7, #48	; 0x30
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20001c34 	.word	0x20001c34

08003eb4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff ff45 	bl	8003d4c <low_level_input>
 8003ec2:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d010      	beq.n	8003eec <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	4798      	blx	r3
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003ed8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d006      	beq.n	8003eee <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f001 fb77 	bl	80055d4 <pbuf_free>
    p = NULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	e000      	b.n	8003eee <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003eec:	bf00      	nop
  }
}
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <ethernetif_init+0x1c>
 8003f02:	4b0e      	ldr	r3, [pc, #56]	; (8003f3c <ethernetif_init+0x48>)
 8003f04:	f240 221a 	movw	r2, #538	; 0x21a
 8003f08:	490d      	ldr	r1, [pc, #52]	; (8003f40 <ethernetif_init+0x4c>)
 8003f0a:	480e      	ldr	r0, [pc, #56]	; (8003f44 <ethernetif_init+0x50>)
 8003f0c:	f00a f960 	bl	800e1d0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2273      	movs	r2, #115	; 0x73
 8003f14:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2274      	movs	r2, #116	; 0x74
 8003f1c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <ethernetif_init+0x54>)
 8003f24:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a08      	ldr	r2, [pc, #32]	; (8003f4c <ethernetif_init+0x58>)
 8003f2a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff fdc1 	bl	8003ab4 <low_level_init>

  return ERR_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	0800f5b8 	.word	0x0800f5b8
 8003f40:	0800f5d4 	.word	0x0800f5d4
 8003f44:	0800f5e4 	.word	0x0800f5e4
 8003f48:	0800c425 	.word	0x0800c425
 8003f4c:	08003c11 	.word	0x08003c11

08003f50 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003f54:	f7fc ff94 	bl	8000e80 <HAL_GetTick>
 8003f58:	4603      	mov	r3, r0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003f76:	089b      	lsrs	r3, r3, #2
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d05d      	beq.n	800403e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003f82:	4b34      	ldr	r3, [pc, #208]	; (8004054 <ethernetif_update_config+0xf4>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d03f      	beq.n	800400a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003f8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4830      	ldr	r0, [pc, #192]	; (8004054 <ethernetif_update_config+0xf4>)
 8003f92:	f7fd fd49 	bl	8001a28 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003f96:	f7fc ff73 	bl	8000e80 <HAL_GetTick>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003f9e:	f107 0308 	add.w	r3, r7, #8
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	482b      	ldr	r0, [pc, #172]	; (8004054 <ethernetif_update_config+0xf4>)
 8003fa8:	f7fd fcd6 	bl	8001958 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003fac:	f7fc ff68 	bl	8000e80 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fba:	d828      	bhi.n	800400e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0eb      	beq.n	8003f9e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003fc6:	f107 0308 	add.w	r3, r7, #8
 8003fca:	461a      	mov	r2, r3
 8003fcc:	2110      	movs	r1, #16
 8003fce:	4821      	ldr	r0, [pc, #132]	; (8004054 <ethernetif_update_config+0xf4>)
 8003fd0:	f7fd fcc2 	bl	8001958 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d004      	beq.n	8003fe8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003fde:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <ethernetif_update_config+0xf4>)
 8003fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fe4:	60da      	str	r2, [r3, #12]
 8003fe6:	e002      	b.n	8003fee <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003fe8:	4b1a      	ldr	r3, [pc, #104]	; (8004054 <ethernetif_update_config+0xf4>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003ff8:	4b16      	ldr	r3, [pc, #88]	; (8004054 <ethernetif_update_config+0xf4>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	609a      	str	r2, [r3, #8]
 8003ffe:	e016      	b.n	800402e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004000:	4b14      	ldr	r3, [pc, #80]	; (8004054 <ethernetif_update_config+0xf4>)
 8004002:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004006:	609a      	str	r2, [r3, #8]
 8004008:	e011      	b.n	800402e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800400a:	bf00      	nop
 800400c:	e000      	b.n	8004010 <ethernetif_update_config+0xb0>
          goto error;
 800400e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004010:	4b10      	ldr	r3, [pc, #64]	; (8004054 <ethernetif_update_config+0xf4>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	08db      	lsrs	r3, r3, #3
 8004016:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004018:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <ethernetif_update_config+0xf4>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	085b      	lsrs	r3, r3, #1
 800401e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004020:	4313      	orrs	r3, r2
 8004022:	b29b      	uxth	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	2100      	movs	r1, #0
 8004028:	480a      	ldr	r0, [pc, #40]	; (8004054 <ethernetif_update_config+0xf4>)
 800402a:	f7fd fcfd 	bl	8001a28 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800402e:	2100      	movs	r1, #0
 8004030:	4808      	ldr	r0, [pc, #32]	; (8004054 <ethernetif_update_config+0xf4>)
 8004032:	f7fd fdbd 	bl	8001bb0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004036:	4807      	ldr	r0, [pc, #28]	; (8004054 <ethernetif_update_config+0xf4>)
 8004038:	f7fd fd5c 	bl	8001af4 <HAL_ETH_Start>
 800403c:	e002      	b.n	8004044 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800403e:	4805      	ldr	r0, [pc, #20]	; (8004054 <ethernetif_update_config+0xf4>)
 8004040:	f7fd fd87 	bl	8001b52 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f807 	bl	8004058 <ethernetif_notify_conn_changed>
}
 800404a:	bf00      	nop
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20001c34 	.word	0x20001c34

08004058 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	021b      	lsls	r3, r3, #8
 800407a:	b21a      	sxth	r2, r3
 800407c:	88fb      	ldrh	r3, [r7, #6]
 800407e:	0a1b      	lsrs	r3, r3, #8
 8004080:	b29b      	uxth	r3, r3
 8004082:	b21b      	sxth	r3, r3
 8004084:	4313      	orrs	r3, r2
 8004086:	b21b      	sxth	r3, r3
 8004088:	b29b      	uxth	r3, r3
}
 800408a:	4618      	mov	r0, r3
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	061a      	lsls	r2, r3, #24
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	0a1b      	lsrs	r3, r3, #8
 80040b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	0e1b      	lsrs	r3, r3, #24
 80040ba:	4313      	orrs	r3, r2
}
 80040bc:	4618      	mov	r0, r3
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80040ce:	2300      	movs	r3, #0
 80040d0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80040d2:	f000 f8d5 	bl	8004280 <mem_init>
  memp_init();
 80040d6:	f000 fbdb 	bl	8004890 <memp_init>
  pbuf_init();
  netif_init();
 80040da:	f000 fc93 	bl	8004a04 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80040de:	f007 f84b 	bl	800b178 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80040e2:	f001 fda7 	bl	8005c34 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80040e6:	f006 ffbd 	bl	800b064 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80040fe:	4b05      	ldr	r3, [pc, #20]	; (8004114 <ptr_to_mem+0x20>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	88fb      	ldrh	r3, [r7, #6]
 8004104:	4413      	add	r3, r2
}
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	2000009c 	.word	0x2000009c

08004118 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <mem_to_ptr+0x20>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	b29b      	uxth	r3, r3
}
 800412a:	4618      	mov	r0, r3
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	2000009c 	.word	0x2000009c

0800413c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800413c:	b590      	push	{r4, r7, lr}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004144:	4b45      	ldr	r3, [pc, #276]	; (800425c <plug_holes+0x120>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	429a      	cmp	r2, r3
 800414c:	d206      	bcs.n	800415c <plug_holes+0x20>
 800414e:	4b44      	ldr	r3, [pc, #272]	; (8004260 <plug_holes+0x124>)
 8004150:	f240 12df 	movw	r2, #479	; 0x1df
 8004154:	4943      	ldr	r1, [pc, #268]	; (8004264 <plug_holes+0x128>)
 8004156:	4844      	ldr	r0, [pc, #272]	; (8004268 <plug_holes+0x12c>)
 8004158:	f00a f83a 	bl	800e1d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800415c:	4b43      	ldr	r3, [pc, #268]	; (800426c <plug_holes+0x130>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	429a      	cmp	r2, r3
 8004164:	d306      	bcc.n	8004174 <plug_holes+0x38>
 8004166:	4b3e      	ldr	r3, [pc, #248]	; (8004260 <plug_holes+0x124>)
 8004168:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800416c:	4940      	ldr	r1, [pc, #256]	; (8004270 <plug_holes+0x134>)
 800416e:	483e      	ldr	r0, [pc, #248]	; (8004268 <plug_holes+0x12c>)
 8004170:	f00a f82e 	bl	800e1d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	791b      	ldrb	r3, [r3, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d006      	beq.n	800418a <plug_holes+0x4e>
 800417c:	4b38      	ldr	r3, [pc, #224]	; (8004260 <plug_holes+0x124>)
 800417e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004182:	493c      	ldr	r1, [pc, #240]	; (8004274 <plug_holes+0x138>)
 8004184:	4838      	ldr	r0, [pc, #224]	; (8004268 <plug_holes+0x12c>)
 8004186:	f00a f823 	bl	800e1d0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004192:	d906      	bls.n	80041a2 <plug_holes+0x66>
 8004194:	4b32      	ldr	r3, [pc, #200]	; (8004260 <plug_holes+0x124>)
 8004196:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800419a:	4937      	ldr	r1, [pc, #220]	; (8004278 <plug_holes+0x13c>)
 800419c:	4832      	ldr	r0, [pc, #200]	; (8004268 <plug_holes+0x12c>)
 800419e:	f00a f817 	bl	800e1d0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff ffa4 	bl	80040f4 <ptr_to_mem>
 80041ac:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d024      	beq.n	8004200 <plug_holes+0xc4>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	791b      	ldrb	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d120      	bne.n	8004200 <plug_holes+0xc4>
 80041be:	4b2b      	ldr	r3, [pc, #172]	; (800426c <plug_holes+0x130>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d01b      	beq.n	8004200 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80041c8:	4b2c      	ldr	r3, [pc, #176]	; (800427c <plug_holes+0x140>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d102      	bne.n	80041d8 <plug_holes+0x9c>
      lfree = mem;
 80041d2:	4a2a      	ldr	r2, [pc, #168]	; (800427c <plug_holes+0x140>)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	881a      	ldrh	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80041e8:	d00a      	beq.n	8004200 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff ff80 	bl	80040f4 <ptr_to_mem>
 80041f4:	4604      	mov	r4, r0
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff ff8e 	bl	8004118 <mem_to_ptr>
 80041fc:	4603      	mov	r3, r0
 80041fe:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	885b      	ldrh	r3, [r3, #2]
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff ff75 	bl	80040f4 <ptr_to_mem>
 800420a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	429a      	cmp	r2, r3
 8004212:	d01f      	beq.n	8004254 <plug_holes+0x118>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	791b      	ldrb	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d11b      	bne.n	8004254 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800421c:	4b17      	ldr	r3, [pc, #92]	; (800427c <plug_holes+0x140>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	429a      	cmp	r2, r3
 8004224:	d102      	bne.n	800422c <plug_holes+0xf0>
      lfree = pmem;
 8004226:	4a15      	ldr	r2, [pc, #84]	; (800427c <plug_holes+0x140>)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	881a      	ldrh	r2, [r3, #0]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800423c:	d00a      	beq.n	8004254 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff ff56 	bl	80040f4 <ptr_to_mem>
 8004248:	4604      	mov	r4, r0
 800424a:	68b8      	ldr	r0, [r7, #8]
 800424c:	f7ff ff64 	bl	8004118 <mem_to_ptr>
 8004250:	4603      	mov	r3, r0
 8004252:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	bd90      	pop	{r4, r7, pc}
 800425c:	2000009c 	.word	0x2000009c
 8004260:	0800f60c 	.word	0x0800f60c
 8004264:	0800f63c 	.word	0x0800f63c
 8004268:	0800f654 	.word	0x0800f654
 800426c:	200000a0 	.word	0x200000a0
 8004270:	0800f67c 	.word	0x0800f67c
 8004274:	0800f698 	.word	0x0800f698
 8004278:	0800f6b4 	.word	0x0800f6b4
 800427c:	200000a4 	.word	0x200000a4

08004280 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004286:	4b18      	ldr	r3, [pc, #96]	; (80042e8 <mem_init+0x68>)
 8004288:	3303      	adds	r3, #3
 800428a:	f023 0303 	bic.w	r3, r3, #3
 800428e:	461a      	mov	r2, r3
 8004290:	4b16      	ldr	r3, [pc, #88]	; (80042ec <mem_init+0x6c>)
 8004292:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004294:	4b15      	ldr	r3, [pc, #84]	; (80042ec <mem_init+0x6c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80042a0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80042ae:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80042b2:	f7ff ff1f 	bl	80040f4 <ptr_to_mem>
 80042b6:	4603      	mov	r3, r0
 80042b8:	4a0d      	ldr	r2, [pc, #52]	; (80042f0 <mem_init+0x70>)
 80042ba:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80042bc:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <mem_init+0x70>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2201      	movs	r2, #1
 80042c2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80042c4:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <mem_init+0x70>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80042cc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80042ce:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <mem_init+0x70>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80042d6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80042d8:	4b04      	ldr	r3, [pc, #16]	; (80042ec <mem_init+0x6c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a05      	ldr	r2, [pc, #20]	; (80042f4 <mem_init+0x74>)
 80042de:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80042e0:	bf00      	nop
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	20003464 	.word	0x20003464
 80042ec:	2000009c 	.word	0x2000009c
 80042f0:	200000a0 	.word	0x200000a0
 80042f4:	200000a4 	.word	0x200000a4

080042f8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff ff09 	bl	8004118 <mem_to_ptr>
 8004306:	4603      	mov	r3, r0
 8004308:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff fef0 	bl	80040f4 <ptr_to_mem>
 8004314:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	885b      	ldrh	r3, [r3, #2]
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff feea 	bl	80040f4 <ptr_to_mem>
 8004320:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800432a:	d818      	bhi.n	800435e <mem_link_valid+0x66>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	885b      	ldrh	r3, [r3, #2]
 8004330:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004334:	d813      	bhi.n	800435e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800433a:	8afa      	ldrh	r2, [r7, #22]
 800433c:	429a      	cmp	r2, r3
 800433e:	d004      	beq.n	800434a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	8afa      	ldrh	r2, [r7, #22]
 8004346:	429a      	cmp	r2, r3
 8004348:	d109      	bne.n	800435e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800434a:	4b08      	ldr	r3, [pc, #32]	; (800436c <mem_link_valid+0x74>)
 800434c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	429a      	cmp	r2, r3
 8004352:	d006      	beq.n	8004362 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	885b      	ldrh	r3, [r3, #2]
 8004358:	8afa      	ldrh	r2, [r7, #22]
 800435a:	429a      	cmp	r2, r3
 800435c:	d001      	beq.n	8004362 <mem_link_valid+0x6a>
    return 0;
 800435e:	2300      	movs	r3, #0
 8004360:	e000      	b.n	8004364 <mem_link_valid+0x6c>
  }
  return 1;
 8004362:	2301      	movs	r3, #1
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	200000a0 	.word	0x200000a0

08004370 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d04c      	beq.n	8004418 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004388:	4b25      	ldr	r3, [pc, #148]	; (8004420 <mem_free+0xb0>)
 800438a:	f240 2273 	movw	r2, #627	; 0x273
 800438e:	4925      	ldr	r1, [pc, #148]	; (8004424 <mem_free+0xb4>)
 8004390:	4825      	ldr	r0, [pc, #148]	; (8004428 <mem_free+0xb8>)
 8004392:	f009 ff1d 	bl	800e1d0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004396:	e040      	b.n	800441a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3b08      	subs	r3, #8
 800439c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800439e:	4b23      	ldr	r3, [pc, #140]	; (800442c <mem_free+0xbc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d306      	bcc.n	80043b6 <mem_free+0x46>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f103 020c 	add.w	r2, r3, #12
 80043ae:	4b20      	ldr	r3, [pc, #128]	; (8004430 <mem_free+0xc0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d907      	bls.n	80043c6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80043b6:	4b1a      	ldr	r3, [pc, #104]	; (8004420 <mem_free+0xb0>)
 80043b8:	f240 227f 	movw	r2, #639	; 0x27f
 80043bc:	491d      	ldr	r1, [pc, #116]	; (8004434 <mem_free+0xc4>)
 80043be:	481a      	ldr	r0, [pc, #104]	; (8004428 <mem_free+0xb8>)
 80043c0:	f009 ff06 	bl	800e1d0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80043c4:	e029      	b.n	800441a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	791b      	ldrb	r3, [r3, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d107      	bne.n	80043de <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80043ce:	4b14      	ldr	r3, [pc, #80]	; (8004420 <mem_free+0xb0>)
 80043d0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80043d4:	4918      	ldr	r1, [pc, #96]	; (8004438 <mem_free+0xc8>)
 80043d6:	4814      	ldr	r0, [pc, #80]	; (8004428 <mem_free+0xb8>)
 80043d8:	f009 fefa 	bl	800e1d0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80043dc:	e01d      	b.n	800441a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f7ff ff8a 	bl	80042f8 <mem_link_valid>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d107      	bne.n	80043fa <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80043ea:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <mem_free+0xb0>)
 80043ec:	f240 2295 	movw	r2, #661	; 0x295
 80043f0:	4912      	ldr	r1, [pc, #72]	; (800443c <mem_free+0xcc>)
 80043f2:	480d      	ldr	r0, [pc, #52]	; (8004428 <mem_free+0xb8>)
 80043f4:	f009 feec 	bl	800e1d0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80043f8:	e00f      	b.n	800441a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004400:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <mem_free+0xd0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	429a      	cmp	r2, r3
 8004408:	d202      	bcs.n	8004410 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800440a:	4a0d      	ldr	r2, [pc, #52]	; (8004440 <mem_free+0xd0>)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f7ff fe93 	bl	800413c <plug_holes>
 8004416:	e000      	b.n	800441a <mem_free+0xaa>
    return;
 8004418:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	0800f60c 	.word	0x0800f60c
 8004424:	0800f6e0 	.word	0x0800f6e0
 8004428:	0800f654 	.word	0x0800f654
 800442c:	2000009c 	.word	0x2000009c
 8004430:	200000a0 	.word	0x200000a0
 8004434:	0800f704 	.word	0x0800f704
 8004438:	0800f720 	.word	0x0800f720
 800443c:	0800f748 	.word	0x0800f748
 8004440:	200000a4 	.word	0x200000a4

08004444 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004450:	887b      	ldrh	r3, [r7, #2]
 8004452:	3303      	adds	r3, #3
 8004454:	b29b      	uxth	r3, r3
 8004456:	f023 0303 	bic.w	r3, r3, #3
 800445a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800445c:	8bfb      	ldrh	r3, [r7, #30]
 800445e:	2b0b      	cmp	r3, #11
 8004460:	d801      	bhi.n	8004466 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004462:	230c      	movs	r3, #12
 8004464:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004466:	8bfb      	ldrh	r3, [r7, #30]
 8004468:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800446c:	d803      	bhi.n	8004476 <mem_trim+0x32>
 800446e:	8bfa      	ldrh	r2, [r7, #30]
 8004470:	887b      	ldrh	r3, [r7, #2]
 8004472:	429a      	cmp	r2, r3
 8004474:	d201      	bcs.n	800447a <mem_trim+0x36>
    return NULL;
 8004476:	2300      	movs	r3, #0
 8004478:	e0cc      	b.n	8004614 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800447a:	4b68      	ldr	r3, [pc, #416]	; (800461c <mem_trim+0x1d8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	429a      	cmp	r2, r3
 8004482:	d304      	bcc.n	800448e <mem_trim+0x4a>
 8004484:	4b66      	ldr	r3, [pc, #408]	; (8004620 <mem_trim+0x1dc>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	429a      	cmp	r2, r3
 800448c:	d306      	bcc.n	800449c <mem_trim+0x58>
 800448e:	4b65      	ldr	r3, [pc, #404]	; (8004624 <mem_trim+0x1e0>)
 8004490:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004494:	4964      	ldr	r1, [pc, #400]	; (8004628 <mem_trim+0x1e4>)
 8004496:	4865      	ldr	r0, [pc, #404]	; (800462c <mem_trim+0x1e8>)
 8004498:	f009 fe9a 	bl	800e1d0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800449c:	4b5f      	ldr	r3, [pc, #380]	; (800461c <mem_trim+0x1d8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d304      	bcc.n	80044b0 <mem_trim+0x6c>
 80044a6:	4b5e      	ldr	r3, [pc, #376]	; (8004620 <mem_trim+0x1dc>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d301      	bcc.n	80044b4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	e0af      	b.n	8004614 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3b08      	subs	r3, #8
 80044b8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80044ba:	69b8      	ldr	r0, [r7, #24]
 80044bc:	f7ff fe2c 	bl	8004118 <mem_to_ptr>
 80044c0:	4603      	mov	r3, r0
 80044c2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	881a      	ldrh	r2, [r3, #0]
 80044c8:	8afb      	ldrh	r3, [r7, #22]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b08      	subs	r3, #8
 80044d0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80044d2:	8bfa      	ldrh	r2, [r7, #30]
 80044d4:	8abb      	ldrh	r3, [r7, #20]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d906      	bls.n	80044e8 <mem_trim+0xa4>
 80044da:	4b52      	ldr	r3, [pc, #328]	; (8004624 <mem_trim+0x1e0>)
 80044dc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80044e0:	4953      	ldr	r1, [pc, #332]	; (8004630 <mem_trim+0x1ec>)
 80044e2:	4852      	ldr	r0, [pc, #328]	; (800462c <mem_trim+0x1e8>)
 80044e4:	f009 fe74 	bl	800e1d0 <iprintf>
  if (newsize > size) {
 80044e8:	8bfa      	ldrh	r2, [r7, #30]
 80044ea:	8abb      	ldrh	r3, [r7, #20]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d901      	bls.n	80044f4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	e08f      	b.n	8004614 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80044f4:	8bfa      	ldrh	r2, [r7, #30]
 80044f6:	8abb      	ldrh	r3, [r7, #20]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d101      	bne.n	8004500 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	e089      	b.n	8004614 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fdf5 	bl	80040f4 <ptr_to_mem>
 800450a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	791b      	ldrb	r3, [r3, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d13f      	bne.n	8004594 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800451c:	d106      	bne.n	800452c <mem_trim+0xe8>
 800451e:	4b41      	ldr	r3, [pc, #260]	; (8004624 <mem_trim+0x1e0>)
 8004520:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004524:	4943      	ldr	r1, [pc, #268]	; (8004634 <mem_trim+0x1f0>)
 8004526:	4841      	ldr	r0, [pc, #260]	; (800462c <mem_trim+0x1e8>)
 8004528:	f009 fe52 	bl	800e1d0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004532:	8afa      	ldrh	r2, [r7, #22]
 8004534:	8bfb      	ldrh	r3, [r7, #30]
 8004536:	4413      	add	r3, r2
 8004538:	b29b      	uxth	r3, r3
 800453a:	3308      	adds	r3, #8
 800453c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800453e:	4b3e      	ldr	r3, [pc, #248]	; (8004638 <mem_trim+0x1f4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	429a      	cmp	r2, r3
 8004546:	d106      	bne.n	8004556 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004548:	89fb      	ldrh	r3, [r7, #14]
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff fdd2 	bl	80040f4 <ptr_to_mem>
 8004550:	4603      	mov	r3, r0
 8004552:	4a39      	ldr	r2, [pc, #228]	; (8004638 <mem_trim+0x1f4>)
 8004554:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004556:	89fb      	ldrh	r3, [r7, #14]
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fdcb 	bl	80040f4 <ptr_to_mem>
 800455e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	2200      	movs	r2, #0
 8004564:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	89ba      	ldrh	r2, [r7, #12]
 800456a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	8afa      	ldrh	r2, [r7, #22]
 8004570:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	89fa      	ldrh	r2, [r7, #14]
 8004576:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004580:	d047      	beq.n	8004612 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fdb4 	bl	80040f4 <ptr_to_mem>
 800458c:	4602      	mov	r2, r0
 800458e:	89fb      	ldrh	r3, [r7, #14]
 8004590:	8053      	strh	r3, [r2, #2]
 8004592:	e03e      	b.n	8004612 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004594:	8bfb      	ldrh	r3, [r7, #30]
 8004596:	f103 0214 	add.w	r2, r3, #20
 800459a:	8abb      	ldrh	r3, [r7, #20]
 800459c:	429a      	cmp	r2, r3
 800459e:	d838      	bhi.n	8004612 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80045a0:	8afa      	ldrh	r2, [r7, #22]
 80045a2:	8bfb      	ldrh	r3, [r7, #30]
 80045a4:	4413      	add	r3, r2
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3308      	adds	r3, #8
 80045aa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80045b4:	d106      	bne.n	80045c4 <mem_trim+0x180>
 80045b6:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <mem_trim+0x1e0>)
 80045b8:	f240 3216 	movw	r2, #790	; 0x316
 80045bc:	491d      	ldr	r1, [pc, #116]	; (8004634 <mem_trim+0x1f0>)
 80045be:	481b      	ldr	r0, [pc, #108]	; (800462c <mem_trim+0x1e8>)
 80045c0:	f009 fe06 	bl	800e1d0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80045c4:	89fb      	ldrh	r3, [r7, #14]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff fd94 	bl	80040f4 <ptr_to_mem>
 80045cc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80045ce:	4b1a      	ldr	r3, [pc, #104]	; (8004638 <mem_trim+0x1f4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d202      	bcs.n	80045de <mem_trim+0x19a>
      lfree = mem2;
 80045d8:	4a17      	ldr	r2, [pc, #92]	; (8004638 <mem_trim+0x1f4>)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	2200      	movs	r2, #0
 80045e2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	881a      	ldrh	r2, [r3, #0]
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	8afa      	ldrh	r2, [r7, #22]
 80045f0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	89fa      	ldrh	r2, [r7, #14]
 80045f6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004600:	d007      	beq.n	8004612 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fd74 	bl	80040f4 <ptr_to_mem>
 800460c:	4602      	mov	r2, r0
 800460e:	89fb      	ldrh	r3, [r7, #14]
 8004610:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004612:	687b      	ldr	r3, [r7, #4]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3720      	adds	r7, #32
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	2000009c 	.word	0x2000009c
 8004620:	200000a0 	.word	0x200000a0
 8004624:	0800f60c 	.word	0x0800f60c
 8004628:	0800f77c 	.word	0x0800f77c
 800462c:	0800f654 	.word	0x0800f654
 8004630:	0800f794 	.word	0x0800f794
 8004634:	0800f7b4 	.word	0x0800f7b4
 8004638:	200000a4 	.word	0x200000a4

0800463c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b088      	sub	sp, #32
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <mem_malloc+0x14>
    return NULL;
 800464c:	2300      	movs	r3, #0
 800464e:	e0d9      	b.n	8004804 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004650:	88fb      	ldrh	r3, [r7, #6]
 8004652:	3303      	adds	r3, #3
 8004654:	b29b      	uxth	r3, r3
 8004656:	f023 0303 	bic.w	r3, r3, #3
 800465a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800465c:	8bbb      	ldrh	r3, [r7, #28]
 800465e:	2b0b      	cmp	r3, #11
 8004660:	d801      	bhi.n	8004666 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004662:	230c      	movs	r3, #12
 8004664:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004666:	8bbb      	ldrh	r3, [r7, #28]
 8004668:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800466c:	d803      	bhi.n	8004676 <mem_malloc+0x3a>
 800466e:	8bba      	ldrh	r2, [r7, #28]
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	429a      	cmp	r2, r3
 8004674:	d201      	bcs.n	800467a <mem_malloc+0x3e>
    return NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	e0c4      	b.n	8004804 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800467a:	4b64      	ldr	r3, [pc, #400]	; (800480c <mem_malloc+0x1d0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff fd4a 	bl	8004118 <mem_to_ptr>
 8004684:	4603      	mov	r3, r0
 8004686:	83fb      	strh	r3, [r7, #30]
 8004688:	e0b4      	b.n	80047f4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800468a:	8bfb      	ldrh	r3, [r7, #30]
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fd31 	bl	80040f4 <ptr_to_mem>
 8004692:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	791b      	ldrb	r3, [r3, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	f040 80a4 	bne.w	80047e6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	8bfb      	ldrh	r3, [r7, #30]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f1a3 0208 	sub.w	r2, r3, #8
 80046ac:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80046ae:	429a      	cmp	r2, r3
 80046b0:	f0c0 8099 	bcc.w	80047e6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	8bfb      	ldrh	r3, [r7, #30]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f1a3 0208 	sub.w	r2, r3, #8
 80046c2:	8bbb      	ldrh	r3, [r7, #28]
 80046c4:	3314      	adds	r3, #20
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d333      	bcc.n	8004732 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80046ca:	8bfa      	ldrh	r2, [r7, #30]
 80046cc:	8bbb      	ldrh	r3, [r7, #28]
 80046ce:	4413      	add	r3, r2
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3308      	adds	r3, #8
 80046d4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80046d6:	8a7b      	ldrh	r3, [r7, #18]
 80046d8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80046dc:	d106      	bne.n	80046ec <mem_malloc+0xb0>
 80046de:	4b4c      	ldr	r3, [pc, #304]	; (8004810 <mem_malloc+0x1d4>)
 80046e0:	f240 3287 	movw	r2, #903	; 0x387
 80046e4:	494b      	ldr	r1, [pc, #300]	; (8004814 <mem_malloc+0x1d8>)
 80046e6:	484c      	ldr	r0, [pc, #304]	; (8004818 <mem_malloc+0x1dc>)
 80046e8:	f009 fd72 	bl	800e1d0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80046ec:	8a7b      	ldrh	r3, [r7, #18]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff fd00 	bl	80040f4 <ptr_to_mem>
 80046f4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	881a      	ldrh	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8bfa      	ldrh	r2, [r7, #30]
 8004708:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	8a7a      	ldrh	r2, [r7, #18]
 800470e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2201      	movs	r2, #1
 8004714:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800471e:	d00b      	beq.n	8004738 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff fce5 	bl	80040f4 <ptr_to_mem>
 800472a:	4602      	mov	r2, r0
 800472c:	8a7b      	ldrh	r3, [r7, #18]
 800472e:	8053      	strh	r3, [r2, #2]
 8004730:	e002      	b.n	8004738 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2201      	movs	r2, #1
 8004736:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004738:	4b34      	ldr	r3, [pc, #208]	; (800480c <mem_malloc+0x1d0>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	429a      	cmp	r2, r3
 8004740:	d127      	bne.n	8004792 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004742:	4b32      	ldr	r3, [pc, #200]	; (800480c <mem_malloc+0x1d0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004748:	e005      	b.n	8004756 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fcd0 	bl	80040f4 <ptr_to_mem>
 8004754:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	791b      	ldrb	r3, [r3, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d004      	beq.n	8004768 <mem_malloc+0x12c>
 800475e:	4b2f      	ldr	r3, [pc, #188]	; (800481c <mem_malloc+0x1e0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	429a      	cmp	r2, r3
 8004766:	d1f0      	bne.n	800474a <mem_malloc+0x10e>
          }
          lfree = cur;
 8004768:	4a28      	ldr	r2, [pc, #160]	; (800480c <mem_malloc+0x1d0>)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800476e:	4b27      	ldr	r3, [pc, #156]	; (800480c <mem_malloc+0x1d0>)
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	4b2a      	ldr	r3, [pc, #168]	; (800481c <mem_malloc+0x1e0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d00b      	beq.n	8004792 <mem_malloc+0x156>
 800477a:	4b24      	ldr	r3, [pc, #144]	; (800480c <mem_malloc+0x1d0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	791b      	ldrb	r3, [r3, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d006      	beq.n	8004792 <mem_malloc+0x156>
 8004784:	4b22      	ldr	r3, [pc, #136]	; (8004810 <mem_malloc+0x1d4>)
 8004786:	f240 32b5 	movw	r2, #949	; 0x3b5
 800478a:	4925      	ldr	r1, [pc, #148]	; (8004820 <mem_malloc+0x1e4>)
 800478c:	4822      	ldr	r0, [pc, #136]	; (8004818 <mem_malloc+0x1dc>)
 800478e:	f009 fd1f 	bl	800e1d0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004792:	8bba      	ldrh	r2, [r7, #28]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	4413      	add	r3, r2
 8004798:	3308      	adds	r3, #8
 800479a:	4a20      	ldr	r2, [pc, #128]	; (800481c <mem_malloc+0x1e0>)
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	4293      	cmp	r3, r2
 80047a0:	d906      	bls.n	80047b0 <mem_malloc+0x174>
 80047a2:	4b1b      	ldr	r3, [pc, #108]	; (8004810 <mem_malloc+0x1d4>)
 80047a4:	f240 32b9 	movw	r2, #953	; 0x3b9
 80047a8:	491e      	ldr	r1, [pc, #120]	; (8004824 <mem_malloc+0x1e8>)
 80047aa:	481b      	ldr	r0, [pc, #108]	; (8004818 <mem_malloc+0x1dc>)
 80047ac:	f009 fd10 	bl	800e1d0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d006      	beq.n	80047c8 <mem_malloc+0x18c>
 80047ba:	4b15      	ldr	r3, [pc, #84]	; (8004810 <mem_malloc+0x1d4>)
 80047bc:	f240 32bb 	movw	r2, #955	; 0x3bb
 80047c0:	4919      	ldr	r1, [pc, #100]	; (8004828 <mem_malloc+0x1ec>)
 80047c2:	4815      	ldr	r0, [pc, #84]	; (8004818 <mem_malloc+0x1dc>)
 80047c4:	f009 fd04 	bl	800e1d0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d006      	beq.n	80047e0 <mem_malloc+0x1a4>
 80047d2:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <mem_malloc+0x1d4>)
 80047d4:	f240 32bd 	movw	r2, #957	; 0x3bd
 80047d8:	4914      	ldr	r1, [pc, #80]	; (800482c <mem_malloc+0x1f0>)
 80047da:	480f      	ldr	r0, [pc, #60]	; (8004818 <mem_malloc+0x1dc>)
 80047dc:	f009 fcf8 	bl	800e1d0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	3308      	adds	r3, #8
 80047e4:	e00e      	b.n	8004804 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80047e6:	8bfb      	ldrh	r3, [r7, #30]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff fc83 	bl	80040f4 <ptr_to_mem>
 80047ee:	4603      	mov	r3, r0
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80047f4:	8bfa      	ldrh	r2, [r7, #30]
 80047f6:	8bbb      	ldrh	r3, [r7, #28]
 80047f8:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80047fc:	429a      	cmp	r2, r3
 80047fe:	f4ff af44 	bcc.w	800468a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3720      	adds	r7, #32
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	200000a4 	.word	0x200000a4
 8004810:	0800f60c 	.word	0x0800f60c
 8004814:	0800f7b4 	.word	0x0800f7b4
 8004818:	0800f654 	.word	0x0800f654
 800481c:	200000a0 	.word	0x200000a0
 8004820:	0800f7c8 	.word	0x0800f7c8
 8004824:	0800f7e4 	.word	0x0800f7e4
 8004828:	0800f814 	.word	0x0800f814
 800482c:	0800f844 	.word	0x0800f844

08004830 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	3303      	adds	r3, #3
 8004846:	f023 0303 	bic.w	r3, r3, #3
 800484a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	e011      	b.n	8004876 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4413      	add	r3, r2
 800486e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3301      	adds	r3, #1
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	885b      	ldrh	r3, [r3, #2]
 800487a:	461a      	mov	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4293      	cmp	r3, r2
 8004880:	dbe7      	blt.n	8004852 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004882:	bf00      	nop
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004896:	2300      	movs	r3, #0
 8004898:	80fb      	strh	r3, [r7, #6]
 800489a:	e009      	b.n	80048b0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800489c:	88fb      	ldrh	r3, [r7, #6]
 800489e:	4a08      	ldr	r2, [pc, #32]	; (80048c0 <memp_init+0x30>)
 80048a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff ffc3 	bl	8004830 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	3301      	adds	r3, #1
 80048ae:	80fb      	strh	r3, [r7, #6]
 80048b0:	88fb      	ldrh	r3, [r7, #6]
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d9f2      	bls.n	800489c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80048b6:	bf00      	nop
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	0801201c 	.word	0x0801201c

080048c4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d012      	beq.n	8004900 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d006      	beq.n	80048fc <do_memp_malloc_pool+0x38>
 80048ee:	4b07      	ldr	r3, [pc, #28]	; (800490c <do_memp_malloc_pool+0x48>)
 80048f0:	f44f 728c 	mov.w	r2, #280	; 0x118
 80048f4:	4906      	ldr	r1, [pc, #24]	; (8004910 <do_memp_malloc_pool+0x4c>)
 80048f6:	4807      	ldr	r0, [pc, #28]	; (8004914 <do_memp_malloc_pool+0x50>)
 80048f8:	f009 fc6a 	bl	800e1d0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	e000      	b.n	8004902 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	0800f868 	.word	0x0800f868
 8004910:	0800f898 	.word	0x0800f898
 8004914:	0800f8bc 	.word	0x0800f8bc

08004918 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	2b08      	cmp	r3, #8
 8004926:	d908      	bls.n	800493a <memp_malloc+0x22>
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <memp_malloc+0x3c>)
 800492a:	f240 1257 	movw	r2, #343	; 0x157
 800492e:	490a      	ldr	r1, [pc, #40]	; (8004958 <memp_malloc+0x40>)
 8004930:	480a      	ldr	r0, [pc, #40]	; (800495c <memp_malloc+0x44>)
 8004932:	f009 fc4d 	bl	800e1d0 <iprintf>
 8004936:	2300      	movs	r3, #0
 8004938:	e008      	b.n	800494c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	4a08      	ldr	r2, [pc, #32]	; (8004960 <memp_malloc+0x48>)
 800493e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff ffbe 	bl	80048c4 <do_memp_malloc_pool>
 8004948:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800494a:	68fb      	ldr	r3, [r7, #12]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	0800f868 	.word	0x0800f868
 8004958:	0800f8f8 	.word	0x0800f8f8
 800495c:	0800f8bc 	.word	0x0800f8bc
 8004960:	0801201c 	.word	0x0801201c

08004964 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d006      	beq.n	8004986 <do_memp_free_pool+0x22>
 8004978:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <do_memp_free_pool+0x40>)
 800497a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800497e:	490a      	ldr	r1, [pc, #40]	; (80049a8 <do_memp_free_pool+0x44>)
 8004980:	480a      	ldr	r0, [pc, #40]	; (80049ac <do_memp_free_pool+0x48>)
 8004982:	f009 fc25 	bl	800e1d0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800499c:	bf00      	nop
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	0800f868 	.word	0x0800f868
 80049a8:	0800f918 	.word	0x0800f918
 80049ac:	0800f8bc 	.word	0x0800f8bc

080049b0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	6039      	str	r1, [r7, #0]
 80049ba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80049bc:	79fb      	ldrb	r3, [r7, #7]
 80049be:	2b08      	cmp	r3, #8
 80049c0:	d907      	bls.n	80049d2 <memp_free+0x22>
 80049c2:	4b0c      	ldr	r3, [pc, #48]	; (80049f4 <memp_free+0x44>)
 80049c4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80049c8:	490b      	ldr	r1, [pc, #44]	; (80049f8 <memp_free+0x48>)
 80049ca:	480c      	ldr	r0, [pc, #48]	; (80049fc <memp_free+0x4c>)
 80049cc:	f009 fc00 	bl	800e1d0 <iprintf>
 80049d0:	e00c      	b.n	80049ec <memp_free+0x3c>

  if (mem == NULL) {
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	4a09      	ldr	r2, [pc, #36]	; (8004a00 <memp_free+0x50>)
 80049dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e0:	6839      	ldr	r1, [r7, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff ffbe 	bl	8004964 <do_memp_free_pool>
 80049e8:	e000      	b.n	80049ec <memp_free+0x3c>
    return;
 80049ea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	0800f868 	.word	0x0800f868
 80049f8:	0800f938 	.word	0x0800f938
 80049fc:	0800f8bc 	.word	0x0800f8bc
 8004a00:	0801201c 	.word	0x0801201c

08004a04 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004a08:	bf00      	nop
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
	...

08004a14 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d108      	bne.n	8004a3a <netif_add+0x26>
 8004a28:	4b57      	ldr	r3, [pc, #348]	; (8004b88 <netif_add+0x174>)
 8004a2a:	f240 1227 	movw	r2, #295	; 0x127
 8004a2e:	4957      	ldr	r1, [pc, #348]	; (8004b8c <netif_add+0x178>)
 8004a30:	4857      	ldr	r0, [pc, #348]	; (8004b90 <netif_add+0x17c>)
 8004a32:	f009 fbcd 	bl	800e1d0 <iprintf>
 8004a36:	2300      	movs	r3, #0
 8004a38:	e0a2      	b.n	8004b80 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d108      	bne.n	8004a52 <netif_add+0x3e>
 8004a40:	4b51      	ldr	r3, [pc, #324]	; (8004b88 <netif_add+0x174>)
 8004a42:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004a46:	4953      	ldr	r1, [pc, #332]	; (8004b94 <netif_add+0x180>)
 8004a48:	4851      	ldr	r0, [pc, #324]	; (8004b90 <netif_add+0x17c>)
 8004a4a:	f009 fbc1 	bl	800e1d0 <iprintf>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e096      	b.n	8004b80 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004a58:	4b4f      	ldr	r3, [pc, #316]	; (8004b98 <netif_add+0x184>)
 8004a5a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004a62:	4b4d      	ldr	r3, [pc, #308]	; (8004b98 <netif_add+0x184>)
 8004a64:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004a6c:	4b4a      	ldr	r3, [pc, #296]	; (8004b98 <netif_add+0x184>)
 8004a6e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4a45      	ldr	r2, [pc, #276]	; (8004b9c <netif_add+0x188>)
 8004a86:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a3a      	ldr	r2, [r7, #32]
 8004aa0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004aa2:	4b3f      	ldr	r3, [pc, #252]	; (8004ba0 <netif_add+0x18c>)
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ab0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f913 	bl	8004ce4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	4798      	blx	r3
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <netif_add+0xba>
    return NULL;
 8004aca:	2300      	movs	r3, #0
 8004acc:	e058      	b.n	8004b80 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ad4:	2bff      	cmp	r3, #255	; 0xff
 8004ad6:	d103      	bne.n	8004ae0 <netif_add+0xcc>
        netif->num = 0;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004ae4:	4b2f      	ldr	r3, [pc, #188]	; (8004ba4 <netif_add+0x190>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	e02b      	b.n	8004b44 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d106      	bne.n	8004b02 <netif_add+0xee>
 8004af4:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <netif_add+0x174>)
 8004af6:	f240 128b 	movw	r2, #395	; 0x18b
 8004afa:	492b      	ldr	r1, [pc, #172]	; (8004ba8 <netif_add+0x194>)
 8004afc:	4824      	ldr	r0, [pc, #144]	; (8004b90 <netif_add+0x17c>)
 8004afe:	f009 fb67 	bl	800e1d0 <iprintf>
        num_netifs++;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	3301      	adds	r3, #1
 8004b06:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	2bff      	cmp	r3, #255	; 0xff
 8004b0c:	dd06      	ble.n	8004b1c <netif_add+0x108>
 8004b0e:	4b1e      	ldr	r3, [pc, #120]	; (8004b88 <netif_add+0x174>)
 8004b10:	f240 128d 	movw	r2, #397	; 0x18d
 8004b14:	4925      	ldr	r1, [pc, #148]	; (8004bac <netif_add+0x198>)
 8004b16:	481e      	ldr	r0, [pc, #120]	; (8004b90 <netif_add+0x17c>)
 8004b18:	f009 fb5a 	bl	800e1d0 <iprintf>
        if (netif2->num == netif->num) {
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d108      	bne.n	8004b3e <netif_add+0x12a>
          netif->num++;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b32:	3301      	adds	r3, #1
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8004b3c:	e005      	b.n	8004b4a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1d0      	bne.n	8004aec <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1be      	bne.n	8004ace <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b56:	2bfe      	cmp	r3, #254	; 0xfe
 8004b58:	d103      	bne.n	8004b62 <netif_add+0x14e>
    netif_num = 0;
 8004b5a:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <netif_add+0x18c>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	e006      	b.n	8004b70 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b68:	3301      	adds	r3, #1
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <netif_add+0x18c>)
 8004b6e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004b70:	4b0c      	ldr	r3, [pc, #48]	; (8004ba4 <netif_add+0x190>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004b78:	4a0a      	ldr	r2, [pc, #40]	; (8004ba4 <netif_add+0x190>)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	0800f954 	.word	0x0800f954
 8004b8c:	0800f9e8 	.word	0x0800f9e8
 8004b90:	0800f9a4 	.word	0x0800f9a4
 8004b94:	0800fa04 	.word	0x0800fa04
 8004b98:	08012080 	.word	0x08012080
 8004b9c:	08004ef7 	.word	0x08004ef7
 8004ba0:	200000cc 	.word	0x200000cc
 8004ba4:	20008b40 	.word	0x20008b40
 8004ba8:	0800fa28 	.word	0x0800fa28
 8004bac:	0800fa3c 	.word	0x0800fa3c

08004bb0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004bba:	6839      	ldr	r1, [r7, #0]
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f002 fb81 	bl	80072c4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004bc2:	6839      	ldr	r1, [r7, #0]
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f006 ffb1 	bl	800bb2c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004bca:	bf00      	nop
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <netif_do_set_ipaddr+0x20>
 8004be6:	4b1d      	ldr	r3, [pc, #116]	; (8004c5c <netif_do_set_ipaddr+0x88>)
 8004be8:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004bec:	491c      	ldr	r1, [pc, #112]	; (8004c60 <netif_do_set_ipaddr+0x8c>)
 8004bee:	481d      	ldr	r0, [pc, #116]	; (8004c64 <netif_do_set_ipaddr+0x90>)
 8004bf0:	f009 faee 	bl	800e1d0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <netif_do_set_ipaddr+0x34>
 8004bfa:	4b18      	ldr	r3, [pc, #96]	; (8004c5c <netif_do_set_ipaddr+0x88>)
 8004bfc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004c00:	4917      	ldr	r1, [pc, #92]	; (8004c60 <netif_do_set_ipaddr+0x8c>)
 8004c02:	4818      	ldr	r0, [pc, #96]	; (8004c64 <netif_do_set_ipaddr+0x90>)
 8004c04:	f009 fae4 	bl	800e1d0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d01c      	beq.n	8004c50 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	3304      	adds	r3, #4
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004c26:	f107 0314 	add.w	r3, r7, #20
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7ff ffbf 	bl	8004bb0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <netif_do_set_ipaddr+0x6a>
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	e000      	b.n	8004c40 <netif_do_set_ipaddr+0x6c>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004c44:	2101      	movs	r1, #1
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 f8d2 	bl	8004df0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	0800f954 	.word	0x0800f954
 8004c60:	0800fa6c 	.word	0x0800fa6c
 8004c64:	0800f9a4 	.word	0x0800f9a4

08004c68 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d00a      	beq.n	8004c98 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <netif_do_set_netmask+0x26>
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	e000      	b.n	8004c90 <netif_do_set_netmask+0x28>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	330c      	adds	r3, #12
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d00a      	beq.n	8004cd6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <netif_do_set_gw+0x26>
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	e000      	b.n	8004cce <netif_do_set_gw+0x28>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004d00:	4b1c      	ldr	r3, [pc, #112]	; (8004d74 <netif_set_addr+0x90>)
 8004d02:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004d0a:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <netif_set_addr+0x90>)
 8004d0c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004d14:	4b17      	ldr	r3, [pc, #92]	; (8004d74 <netif_set_addr+0x90>)
 8004d16:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <netif_set_addr+0x42>
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <netif_set_addr+0x46>
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <netif_set_addr+0x48>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d006      	beq.n	8004d42 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004d34:	f107 0310 	add.w	r3, r7, #16
 8004d38:	461a      	mov	r2, r3
 8004d3a:	68b9      	ldr	r1, [r7, #8]
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f7ff ff49 	bl	8004bd4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f7ff ff8e 	bl	8004c68 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	6839      	ldr	r1, [r7, #0]
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f7ff ffa8 	bl	8004ca6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d106      	bne.n	8004d6a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004d5c:	f107 0310 	add.w	r3, r7, #16
 8004d60:	461a      	mov	r2, r3
 8004d62:	68b9      	ldr	r1, [r7, #8]
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f7ff ff35 	bl	8004bd4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004d6a:	bf00      	nop
 8004d6c:	3720      	adds	r7, #32
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	08012080 	.word	0x08012080

08004d78 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004d80:	4a04      	ldr	r2, [pc, #16]	; (8004d94 <netif_set_default+0x1c>)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20008b44 	.word	0x20008b44

08004d98 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d107      	bne.n	8004db6 <netif_set_up+0x1e>
 8004da6:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <netif_set_up+0x4c>)
 8004da8:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004dac:	490e      	ldr	r1, [pc, #56]	; (8004de8 <netif_set_up+0x50>)
 8004dae:	480f      	ldr	r0, [pc, #60]	; (8004dec <netif_set_up+0x54>)
 8004db0:	f009 fa0e 	bl	800e1d0 <iprintf>
 8004db4:	e013      	b.n	8004dde <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10c      	bne.n	8004dde <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004dd6:	2103      	movs	r1, #3
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f809 	bl	8004df0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	0800f954 	.word	0x0800f954
 8004de8:	0800fadc 	.word	0x0800fadc
 8004dec:	0800f9a4 	.word	0x0800f9a4

08004df0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <netif_issue_reports+0x20>
 8004e02:	4b18      	ldr	r3, [pc, #96]	; (8004e64 <netif_issue_reports+0x74>)
 8004e04:	f240 326d 	movw	r2, #877	; 0x36d
 8004e08:	4917      	ldr	r1, [pc, #92]	; (8004e68 <netif_issue_reports+0x78>)
 8004e0a:	4818      	ldr	r0, [pc, #96]	; (8004e6c <netif_issue_reports+0x7c>)
 8004e0c:	f009 f9e0 	bl	800e1d0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d01e      	beq.n	8004e5c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e24:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d017      	beq.n	8004e5c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d013      	beq.n	8004e5e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00e      	beq.n	8004e5e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3304      	adds	r3, #4
 8004e52:	4619      	mov	r1, r3
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f007 fdd3 	bl	800ca00 <etharp_request>
 8004e5a:	e000      	b.n	8004e5e <netif_issue_reports+0x6e>
    return;
 8004e5c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	0800f954 	.word	0x0800f954
 8004e68:	0800faf8 	.word	0x0800faf8
 8004e6c:	0800f9a4 	.word	0x0800f9a4

08004e70 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d107      	bne.n	8004e8e <netif_set_down+0x1e>
 8004e7e:	4b12      	ldr	r3, [pc, #72]	; (8004ec8 <netif_set_down+0x58>)
 8004e80:	f240 329b 	movw	r2, #923	; 0x39b
 8004e84:	4911      	ldr	r1, [pc, #68]	; (8004ecc <netif_set_down+0x5c>)
 8004e86:	4812      	ldr	r0, [pc, #72]	; (8004ed0 <netif_set_down+0x60>)
 8004e88:	f009 f9a2 	bl	800e1d0 <iprintf>
 8004e8c:	e019      	b.n	8004ec2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d012      	beq.n	8004ec2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ea2:	f023 0301 	bic.w	r3, r3, #1
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f007 f95d 	bl	800c17c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	0800f954 	.word	0x0800f954
 8004ecc:	0800fb1c 	.word	0x0800fb1c
 8004ed0:	0800f9a4 	.word	0x0800f9a4

08004ed4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	61da      	str	r2, [r3, #28]
  }
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b085      	sub	sp, #20
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004f02:	f06f 030b 	mvn.w	r3, #11
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
	...

08004f14 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d013      	beq.n	8004f4c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004f24:	4b0d      	ldr	r3, [pc, #52]	; (8004f5c <netif_get_by_index+0x48>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	e00c      	b.n	8004f46 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f32:	3301      	adds	r3, #1
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	79fa      	ldrb	r2, [r7, #7]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d101      	bne.n	8004f40 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	e006      	b.n	8004f4e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1ef      	bne.n	8004f2c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	20008b40 	.word	0x20008b40

08004f60 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004f66:	4b0c      	ldr	r3, [pc, #48]	; (8004f98 <pbuf_free_ooseq+0x38>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <pbuf_free_ooseq+0x3c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	607b      	str	r3, [r7, #4]
 8004f72:	e00a      	b.n	8004f8a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f002 f9df 	bl	8007340 <tcp_free_ooseq>
      return;
 8004f82:	e005      	b.n	8004f90 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	607b      	str	r3, [r7, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1f1      	bne.n	8004f74 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20008b48 	.word	0x20008b48
 8004f9c:	20008b50 	.word	0x20008b50

08004fa0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004fa4:	4b03      	ldr	r3, [pc, #12]	; (8004fb4 <pbuf_pool_is_empty+0x14>)
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004faa:	bf00      	nop
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	20008b48 	.word	0x20008b48

08004fb8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	80fb      	strh	r3, [r7, #6]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	88fa      	ldrh	r2, [r7, #6]
 8004fde:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	88ba      	ldrh	r2, [r7, #4]
 8004fe4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004fe6:	8b3b      	ldrh	r3, [r7, #24]
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	7f3a      	ldrb	r2, [r7, #28]
 8004ff2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	73da      	strb	r2, [r3, #15]
}
 8005000:	bf00      	nop
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b08c      	sub	sp, #48	; 0x30
 8005010:	af02      	add	r7, sp, #8
 8005012:	4603      	mov	r3, r0
 8005014:	71fb      	strb	r3, [r7, #7]
 8005016:	460b      	mov	r3, r1
 8005018:	80bb      	strh	r3, [r7, #4]
 800501a:	4613      	mov	r3, r2
 800501c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005022:	887b      	ldrh	r3, [r7, #2]
 8005024:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005028:	d07f      	beq.n	800512a <pbuf_alloc+0x11e>
 800502a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800502e:	f300 80c8 	bgt.w	80051c2 <pbuf_alloc+0x1b6>
 8005032:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005036:	d010      	beq.n	800505a <pbuf_alloc+0x4e>
 8005038:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800503c:	f300 80c1 	bgt.w	80051c2 <pbuf_alloc+0x1b6>
 8005040:	2b01      	cmp	r3, #1
 8005042:	d002      	beq.n	800504a <pbuf_alloc+0x3e>
 8005044:	2b41      	cmp	r3, #65	; 0x41
 8005046:	f040 80bc 	bne.w	80051c2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800504a:	887a      	ldrh	r2, [r7, #2]
 800504c:	88bb      	ldrh	r3, [r7, #4]
 800504e:	4619      	mov	r1, r3
 8005050:	2000      	movs	r0, #0
 8005052:	f000 f8d1 	bl	80051f8 <pbuf_alloc_reference>
 8005056:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005058:	e0bd      	b.n	80051d6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800505a:	2300      	movs	r3, #0
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800505e:	2300      	movs	r3, #0
 8005060:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005062:	88bb      	ldrh	r3, [r7, #4]
 8005064:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005066:	2008      	movs	r0, #8
 8005068:	f7ff fc56 	bl	8004918 <memp_malloc>
 800506c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d109      	bne.n	8005088 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005074:	f7ff ff94 	bl	8004fa0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <pbuf_alloc+0x78>
            pbuf_free(p);
 800507e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005080:	f000 faa8 	bl	80055d4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005084:	2300      	movs	r3, #0
 8005086:	e0a7      	b.n	80051d8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005088:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800508a:	3303      	adds	r3, #3
 800508c:	b29b      	uxth	r3, r3
 800508e:	f023 0303 	bic.w	r3, r3, #3
 8005092:	b29b      	uxth	r3, r3
 8005094:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005098:	b29b      	uxth	r3, r3
 800509a:	8b7a      	ldrh	r2, [r7, #26]
 800509c:	4293      	cmp	r3, r2
 800509e:	bf28      	it	cs
 80050a0:	4613      	movcs	r3, r2
 80050a2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80050a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050a6:	3310      	adds	r3, #16
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4413      	add	r3, r2
 80050ac:	3303      	adds	r3, #3
 80050ae:	f023 0303 	bic.w	r3, r3, #3
 80050b2:	4618      	mov	r0, r3
 80050b4:	89f9      	ldrh	r1, [r7, #14]
 80050b6:	8b7a      	ldrh	r2, [r7, #26]
 80050b8:	2300      	movs	r3, #0
 80050ba:	9301      	str	r3, [sp, #4]
 80050bc:	887b      	ldrh	r3, [r7, #2]
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	460b      	mov	r3, r1
 80050c2:	4601      	mov	r1, r0
 80050c4:	6938      	ldr	r0, [r7, #16]
 80050c6:	f7ff ff77 	bl	8004fb8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d006      	beq.n	80050e4 <pbuf_alloc+0xd8>
 80050d6:	4b42      	ldr	r3, [pc, #264]	; (80051e0 <pbuf_alloc+0x1d4>)
 80050d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050dc:	4941      	ldr	r1, [pc, #260]	; (80051e4 <pbuf_alloc+0x1d8>)
 80050de:	4842      	ldr	r0, [pc, #264]	; (80051e8 <pbuf_alloc+0x1dc>)
 80050e0:	f009 f876 	bl	800e1d0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80050e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050e6:	3303      	adds	r3, #3
 80050e8:	f023 0303 	bic.w	r3, r3, #3
 80050ec:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80050f0:	d106      	bne.n	8005100 <pbuf_alloc+0xf4>
 80050f2:	4b3b      	ldr	r3, [pc, #236]	; (80051e0 <pbuf_alloc+0x1d4>)
 80050f4:	f44f 7281 	mov.w	r2, #258	; 0x102
 80050f8:	493c      	ldr	r1, [pc, #240]	; (80051ec <pbuf_alloc+0x1e0>)
 80050fa:	483b      	ldr	r0, [pc, #236]	; (80051e8 <pbuf_alloc+0x1dc>)
 80050fc:	f009 f868 	bl	800e1d0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	2b00      	cmp	r3, #0
 8005104:	d102      	bne.n	800510c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
 800510a:	e002      	b.n	8005112 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005116:	8b7a      	ldrh	r2, [r7, #26]
 8005118:	89fb      	ldrh	r3, [r7, #14]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800511e:	2300      	movs	r3, #0
 8005120:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005122:	8b7b      	ldrh	r3, [r7, #26]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d19e      	bne.n	8005066 <pbuf_alloc+0x5a>
      break;
 8005128:	e055      	b.n	80051d6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800512a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800512c:	3303      	adds	r3, #3
 800512e:	b29b      	uxth	r3, r3
 8005130:	f023 0303 	bic.w	r3, r3, #3
 8005134:	b29a      	uxth	r2, r3
 8005136:	88bb      	ldrh	r3, [r7, #4]
 8005138:	3303      	adds	r3, #3
 800513a:	b29b      	uxth	r3, r3
 800513c:	f023 0303 	bic.w	r3, r3, #3
 8005140:	b29b      	uxth	r3, r3
 8005142:	4413      	add	r3, r2
 8005144:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005146:	8b3b      	ldrh	r3, [r7, #24]
 8005148:	3310      	adds	r3, #16
 800514a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800514c:	8b3a      	ldrh	r2, [r7, #24]
 800514e:	88bb      	ldrh	r3, [r7, #4]
 8005150:	3303      	adds	r3, #3
 8005152:	f023 0303 	bic.w	r3, r3, #3
 8005156:	429a      	cmp	r2, r3
 8005158:	d306      	bcc.n	8005168 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800515a:	8afa      	ldrh	r2, [r7, #22]
 800515c:	88bb      	ldrh	r3, [r7, #4]
 800515e:	3303      	adds	r3, #3
 8005160:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005164:	429a      	cmp	r2, r3
 8005166:	d201      	bcs.n	800516c <pbuf_alloc+0x160>
        return NULL;
 8005168:	2300      	movs	r3, #0
 800516a:	e035      	b.n	80051d8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800516c:	8afb      	ldrh	r3, [r7, #22]
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff fa64 	bl	800463c <mem_malloc>
 8005174:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <pbuf_alloc+0x174>
        return NULL;
 800517c:	2300      	movs	r3, #0
 800517e:	e02b      	b.n	80051d8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005180:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005182:	3310      	adds	r3, #16
 8005184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005186:	4413      	add	r3, r2
 8005188:	3303      	adds	r3, #3
 800518a:	f023 0303 	bic.w	r3, r3, #3
 800518e:	4618      	mov	r0, r3
 8005190:	88b9      	ldrh	r1, [r7, #4]
 8005192:	88ba      	ldrh	r2, [r7, #4]
 8005194:	2300      	movs	r3, #0
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	887b      	ldrh	r3, [r7, #2]
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	460b      	mov	r3, r1
 800519e:	4601      	mov	r1, r0
 80051a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051a2:	f7ff ff09 	bl	8004fb8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d010      	beq.n	80051d4 <pbuf_alloc+0x1c8>
 80051b2:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <pbuf_alloc+0x1d4>)
 80051b4:	f44f 7291 	mov.w	r2, #290	; 0x122
 80051b8:	490d      	ldr	r1, [pc, #52]	; (80051f0 <pbuf_alloc+0x1e4>)
 80051ba:	480b      	ldr	r0, [pc, #44]	; (80051e8 <pbuf_alloc+0x1dc>)
 80051bc:	f009 f808 	bl	800e1d0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80051c0:	e008      	b.n	80051d4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80051c2:	4b07      	ldr	r3, [pc, #28]	; (80051e0 <pbuf_alloc+0x1d4>)
 80051c4:	f240 1227 	movw	r2, #295	; 0x127
 80051c8:	490a      	ldr	r1, [pc, #40]	; (80051f4 <pbuf_alloc+0x1e8>)
 80051ca:	4807      	ldr	r0, [pc, #28]	; (80051e8 <pbuf_alloc+0x1dc>)
 80051cc:	f009 f800 	bl	800e1d0 <iprintf>
      return NULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	e001      	b.n	80051d8 <pbuf_alloc+0x1cc>
      break;
 80051d4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3728      	adds	r7, #40	; 0x28
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	0800fb84 	.word	0x0800fb84
 80051e4:	0800fbb4 	.word	0x0800fbb4
 80051e8:	0800fbe4 	.word	0x0800fbe4
 80051ec:	0800fc0c 	.word	0x0800fc0c
 80051f0:	0800fc40 	.word	0x0800fc40
 80051f4:	0800fc6c 	.word	0x0800fc6c

080051f8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	807b      	strh	r3, [r7, #2]
 8005204:	4613      	mov	r3, r2
 8005206:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005208:	883b      	ldrh	r3, [r7, #0]
 800520a:	2b41      	cmp	r3, #65	; 0x41
 800520c:	d009      	beq.n	8005222 <pbuf_alloc_reference+0x2a>
 800520e:	883b      	ldrh	r3, [r7, #0]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d006      	beq.n	8005222 <pbuf_alloc_reference+0x2a>
 8005214:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <pbuf_alloc_reference+0x5c>)
 8005216:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800521a:	490f      	ldr	r1, [pc, #60]	; (8005258 <pbuf_alloc_reference+0x60>)
 800521c:	480f      	ldr	r0, [pc, #60]	; (800525c <pbuf_alloc_reference+0x64>)
 800521e:	f008 ffd7 	bl	800e1d0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005222:	2007      	movs	r0, #7
 8005224:	f7ff fb78 	bl	8004918 <memp_malloc>
 8005228:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005230:	2300      	movs	r3, #0
 8005232:	e00b      	b.n	800524c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005234:	8879      	ldrh	r1, [r7, #2]
 8005236:	887a      	ldrh	r2, [r7, #2]
 8005238:	2300      	movs	r3, #0
 800523a:	9301      	str	r3, [sp, #4]
 800523c:	883b      	ldrh	r3, [r7, #0]
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	460b      	mov	r3, r1
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f7ff feb7 	bl	8004fb8 <pbuf_init_alloced_pbuf>
  return p;
 800524a:	68fb      	ldr	r3, [r7, #12]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	0800fb84 	.word	0x0800fb84
 8005258:	0800fc88 	.word	0x0800fc88
 800525c:	0800fbe4 	.word	0x0800fbe4

08005260 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af02      	add	r7, sp, #8
 8005266:	607b      	str	r3, [r7, #4]
 8005268:	4603      	mov	r3, r0
 800526a:	73fb      	strb	r3, [r7, #15]
 800526c:	460b      	mov	r3, r1
 800526e:	81bb      	strh	r3, [r7, #12]
 8005270:	4613      	mov	r3, r2
 8005272:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005278:	8a7b      	ldrh	r3, [r7, #18]
 800527a:	3303      	adds	r3, #3
 800527c:	f023 0203 	bic.w	r2, r3, #3
 8005280:	89bb      	ldrh	r3, [r7, #12]
 8005282:	441a      	add	r2, r3
 8005284:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005286:	429a      	cmp	r2, r3
 8005288:	d901      	bls.n	800528e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800528a:	2300      	movs	r3, #0
 800528c:	e018      	b.n	80052c0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d007      	beq.n	80052a4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005294:	8a7b      	ldrh	r3, [r7, #18]
 8005296:	3303      	adds	r3, #3
 8005298:	f023 0303 	bic.w	r3, r3, #3
 800529c:	6a3a      	ldr	r2, [r7, #32]
 800529e:	4413      	add	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	e001      	b.n	80052a8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	89b9      	ldrh	r1, [r7, #12]
 80052ac:	89ba      	ldrh	r2, [r7, #12]
 80052ae:	2302      	movs	r3, #2
 80052b0:	9301      	str	r3, [sp, #4]
 80052b2:	897b      	ldrh	r3, [r7, #10]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	460b      	mov	r3, r1
 80052b8:	6979      	ldr	r1, [r7, #20]
 80052ba:	f7ff fe7d 	bl	8004fb8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80052be:	687b      	ldr	r3, [r7, #4]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	460b      	mov	r3, r1
 80052d2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <pbuf_realloc+0x20>
 80052da:	4b3a      	ldr	r3, [pc, #232]	; (80053c4 <pbuf_realloc+0xfc>)
 80052dc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80052e0:	4939      	ldr	r1, [pc, #228]	; (80053c8 <pbuf_realloc+0x100>)
 80052e2:	483a      	ldr	r0, [pc, #232]	; (80053cc <pbuf_realloc+0x104>)
 80052e4:	f008 ff74 	bl	800e1d0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	891b      	ldrh	r3, [r3, #8]
 80052ec:	887a      	ldrh	r2, [r7, #2]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d263      	bcs.n	80053ba <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	891a      	ldrh	r2, [r3, #8]
 80052f6:	887b      	ldrh	r3, [r7, #2]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80052fc:	887b      	ldrh	r3, [r7, #2]
 80052fe:	817b      	strh	r3, [r7, #10]
  q = p;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005304:	e018      	b.n	8005338 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	895b      	ldrh	r3, [r3, #10]
 800530a:	897a      	ldrh	r2, [r7, #10]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	891a      	ldrh	r2, [r3, #8]
 8005314:	893b      	ldrh	r3, [r7, #8]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d106      	bne.n	8005338 <pbuf_realloc+0x70>
 800532a:	4b26      	ldr	r3, [pc, #152]	; (80053c4 <pbuf_realloc+0xfc>)
 800532c:	f240 12af 	movw	r2, #431	; 0x1af
 8005330:	4927      	ldr	r1, [pc, #156]	; (80053d0 <pbuf_realloc+0x108>)
 8005332:	4826      	ldr	r0, [pc, #152]	; (80053cc <pbuf_realloc+0x104>)
 8005334:	f008 ff4c 	bl	800e1d0 <iprintf>
  while (rem_len > q->len) {
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	895b      	ldrh	r3, [r3, #10]
 800533c:	897a      	ldrh	r2, [r7, #10]
 800533e:	429a      	cmp	r2, r3
 8005340:	d8e1      	bhi.n	8005306 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	7b1b      	ldrb	r3, [r3, #12]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	2b00      	cmp	r3, #0
 800534c:	d121      	bne.n	8005392 <pbuf_realloc+0xca>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	895b      	ldrh	r3, [r3, #10]
 8005352:	897a      	ldrh	r2, [r7, #10]
 8005354:	429a      	cmp	r2, r3
 8005356:	d01c      	beq.n	8005392 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	7b5b      	ldrb	r3, [r3, #13]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d116      	bne.n	8005392 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	b29a      	uxth	r2, r3
 800536e:	897b      	ldrh	r3, [r7, #10]
 8005370:	4413      	add	r3, r2
 8005372:	b29b      	uxth	r3, r3
 8005374:	4619      	mov	r1, r3
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f7ff f864 	bl	8004444 <mem_trim>
 800537c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d106      	bne.n	8005392 <pbuf_realloc+0xca>
 8005384:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <pbuf_realloc+0xfc>)
 8005386:	f240 12bd 	movw	r2, #445	; 0x1bd
 800538a:	4912      	ldr	r1, [pc, #72]	; (80053d4 <pbuf_realloc+0x10c>)
 800538c:	480f      	ldr	r0, [pc, #60]	; (80053cc <pbuf_realloc+0x104>)
 800538e:	f008 ff1f 	bl	800e1d0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	897a      	ldrh	r2, [r7, #10]
 8005396:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	895a      	ldrh	r2, [r3, #10]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d004      	beq.n	80053b2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 f911 	bl	80055d4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	e000      	b.n	80053bc <pbuf_realloc+0xf4>
    return;
 80053ba:	bf00      	nop

}
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	0800fb84 	.word	0x0800fb84
 80053c8:	0800fc9c 	.word	0x0800fc9c
 80053cc:	0800fbe4 	.word	0x0800fbe4
 80053d0:	0800fcb4 	.word	0x0800fcb4
 80053d4:	0800fccc 	.word	0x0800fccc

080053d8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	4613      	mov	r3, r2
 80053e4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d106      	bne.n	80053fa <pbuf_add_header_impl+0x22>
 80053ec:	4b2b      	ldr	r3, [pc, #172]	; (800549c <pbuf_add_header_impl+0xc4>)
 80053ee:	f240 12df 	movw	r2, #479	; 0x1df
 80053f2:	492b      	ldr	r1, [pc, #172]	; (80054a0 <pbuf_add_header_impl+0xc8>)
 80053f4:	482b      	ldr	r0, [pc, #172]	; (80054a4 <pbuf_add_header_impl+0xcc>)
 80053f6:	f008 feeb 	bl	800e1d0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <pbuf_add_header_impl+0x30>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005406:	d301      	bcc.n	800540c <pbuf_add_header_impl+0x34>
    return 1;
 8005408:	2301      	movs	r3, #1
 800540a:	e043      	b.n	8005494 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <pbuf_add_header_impl+0x3e>
    return 0;
 8005412:	2300      	movs	r3, #0
 8005414:	e03e      	b.n	8005494 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	891a      	ldrh	r2, [r3, #8]
 800541e:	8a7b      	ldrh	r3, [r7, #18]
 8005420:	4413      	add	r3, r2
 8005422:	b29b      	uxth	r3, r3
 8005424:	8a7a      	ldrh	r2, [r7, #18]
 8005426:	429a      	cmp	r2, r3
 8005428:	d901      	bls.n	800542e <pbuf_add_header_impl+0x56>
    return 1;
 800542a:	2301      	movs	r3, #1
 800542c:	e032      	b.n	8005494 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	7b1b      	ldrb	r3, [r3, #12]
 8005432:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005434:	8a3b      	ldrh	r3, [r7, #16]
 8005436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00c      	beq.n	8005458 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	425b      	negs	r3, r3
 8005446:	4413      	add	r3, r2
 8005448:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3310      	adds	r3, #16
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	429a      	cmp	r2, r3
 8005452:	d20d      	bcs.n	8005470 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005454:	2301      	movs	r3, #1
 8005456:	e01d      	b.n	8005494 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d006      	beq.n	800546c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	425b      	negs	r3, r3
 8005466:	4413      	add	r3, r2
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	e001      	b.n	8005470 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800546c:	2301      	movs	r3, #1
 800546e:	e011      	b.n	8005494 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	895a      	ldrh	r2, [r3, #10]
 800547a:	8a7b      	ldrh	r3, [r7, #18]
 800547c:	4413      	add	r3, r2
 800547e:	b29a      	uxth	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	891a      	ldrh	r2, [r3, #8]
 8005488:	8a7b      	ldrh	r3, [r7, #18]
 800548a:	4413      	add	r3, r2
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	811a      	strh	r2, [r3, #8]


  return 0;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	0800fb84 	.word	0x0800fb84
 80054a0:	0800fce8 	.word	0x0800fce8
 80054a4:	0800fbe4 	.word	0x0800fbe4

080054a8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80054b2:	2200      	movs	r2, #0
 80054b4:	6839      	ldr	r1, [r7, #0]
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7ff ff8e 	bl	80053d8 <pbuf_add_header_impl>
 80054bc:	4603      	mov	r3, r0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d106      	bne.n	80054e6 <pbuf_remove_header+0x1e>
 80054d8:	4b20      	ldr	r3, [pc, #128]	; (800555c <pbuf_remove_header+0x94>)
 80054da:	f240 224b 	movw	r2, #587	; 0x24b
 80054de:	4920      	ldr	r1, [pc, #128]	; (8005560 <pbuf_remove_header+0x98>)
 80054e0:	4820      	ldr	r0, [pc, #128]	; (8005564 <pbuf_remove_header+0x9c>)
 80054e2:	f008 fe75 	bl	800e1d0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <pbuf_remove_header+0x2c>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f2:	d301      	bcc.n	80054f8 <pbuf_remove_header+0x30>
    return 1;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e02c      	b.n	8005552 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <pbuf_remove_header+0x3a>
    return 0;
 80054fe:	2300      	movs	r3, #0
 8005500:	e027      	b.n	8005552 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	895b      	ldrh	r3, [r3, #10]
 800550a:	89fa      	ldrh	r2, [r7, #14]
 800550c:	429a      	cmp	r2, r3
 800550e:	d908      	bls.n	8005522 <pbuf_remove_header+0x5a>
 8005510:	4b12      	ldr	r3, [pc, #72]	; (800555c <pbuf_remove_header+0x94>)
 8005512:	f240 2255 	movw	r2, #597	; 0x255
 8005516:	4914      	ldr	r1, [pc, #80]	; (8005568 <pbuf_remove_header+0xa0>)
 8005518:	4812      	ldr	r0, [pc, #72]	; (8005564 <pbuf_remove_header+0x9c>)
 800551a:	f008 fe59 	bl	800e1d0 <iprintf>
 800551e:	2301      	movs	r3, #1
 8005520:	e017      	b.n	8005552 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	441a      	add	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	895a      	ldrh	r2, [r3, #10]
 8005538:	89fb      	ldrh	r3, [r7, #14]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	b29a      	uxth	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	891a      	ldrh	r2, [r3, #8]
 8005546:	89fb      	ldrh	r3, [r7, #14]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	b29a      	uxth	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	0800fb84 	.word	0x0800fb84
 8005560:	0800fce8 	.word	0x0800fce8
 8005564:	0800fbe4 	.word	0x0800fbe4
 8005568:	0800fcf4 	.word	0x0800fcf4

0800556c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	807b      	strh	r3, [r7, #2]
 8005578:	4613      	mov	r3, r2
 800557a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800557c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005580:	2b00      	cmp	r3, #0
 8005582:	da08      	bge.n	8005596 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005584:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005588:	425b      	negs	r3, r3
 800558a:	4619      	mov	r1, r3
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff ff9b 	bl	80054c8 <pbuf_remove_header>
 8005592:	4603      	mov	r3, r0
 8005594:	e007      	b.n	80055a6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005596:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800559a:	787a      	ldrb	r2, [r7, #1]
 800559c:	4619      	mov	r1, r3
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff ff1a 	bl	80053d8 <pbuf_add_header_impl>
 80055a4:	4603      	mov	r3, r0
  }
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	460b      	mov	r3, r1
 80055b8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80055ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80055be:	2201      	movs	r2, #1
 80055c0:	4619      	mov	r1, r3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff ffd2 	bl	800556c <pbuf_header_impl>
 80055c8:	4603      	mov	r3, r0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10b      	bne.n	80055fa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d106      	bne.n	80055f6 <pbuf_free+0x22>
 80055e8:	4b38      	ldr	r3, [pc, #224]	; (80056cc <pbuf_free+0xf8>)
 80055ea:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80055ee:	4938      	ldr	r1, [pc, #224]	; (80056d0 <pbuf_free+0xfc>)
 80055f0:	4838      	ldr	r0, [pc, #224]	; (80056d4 <pbuf_free+0x100>)
 80055f2:	f008 fded 	bl	800e1d0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80055f6:	2300      	movs	r3, #0
 80055f8:	e063      	b.n	80056c2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80055fe:	e05c      	b.n	80056ba <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	7b9b      	ldrb	r3, [r3, #14]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d106      	bne.n	8005616 <pbuf_free+0x42>
 8005608:	4b30      	ldr	r3, [pc, #192]	; (80056cc <pbuf_free+0xf8>)
 800560a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800560e:	4932      	ldr	r1, [pc, #200]	; (80056d8 <pbuf_free+0x104>)
 8005610:	4830      	ldr	r0, [pc, #192]	; (80056d4 <pbuf_free+0x100>)
 8005612:	f008 fddd 	bl	800e1d0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	7b9b      	ldrb	r3, [r3, #14]
 800561a:	3b01      	subs	r3, #1
 800561c:	b2da      	uxtb	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	739a      	strb	r2, [r3, #14]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	7b9b      	ldrb	r3, [r3, #14]
 8005626:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005628:	7dbb      	ldrb	r3, [r7, #22]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d143      	bne.n	80056b6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	7b1b      	ldrb	r3, [r3, #12]
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	7b5b      	ldrb	r3, [r3, #13]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d011      	beq.n	800566e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <pbuf_free+0x90>
 8005656:	4b1d      	ldr	r3, [pc, #116]	; (80056cc <pbuf_free+0xf8>)
 8005658:	f240 22ff 	movw	r2, #767	; 0x2ff
 800565c:	491f      	ldr	r1, [pc, #124]	; (80056dc <pbuf_free+0x108>)
 800565e:	481d      	ldr	r0, [pc, #116]	; (80056d4 <pbuf_free+0x100>)
 8005660:	f008 fdb6 	bl	800e1d0 <iprintf>
        pc->custom_free_function(p);
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	4798      	blx	r3
 800566c:	e01d      	b.n	80056aa <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800566e:	7bfb      	ldrb	r3, [r7, #15]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d104      	bne.n	800567e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	2008      	movs	r0, #8
 8005678:	f7ff f99a 	bl	80049b0 <memp_free>
 800567c:	e015      	b.n	80056aa <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d104      	bne.n	800568e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	2007      	movs	r0, #7
 8005688:	f7ff f992 	bl	80049b0 <memp_free>
 800568c:	e00d      	b.n	80056aa <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d103      	bne.n	800569c <pbuf_free+0xc8>
          mem_free(p);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7fe fe6b 	bl	8004370 <mem_free>
 800569a:	e006      	b.n	80056aa <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800569c:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <pbuf_free+0xf8>)
 800569e:	f240 320f 	movw	r2, #783	; 0x30f
 80056a2:	490f      	ldr	r1, [pc, #60]	; (80056e0 <pbuf_free+0x10c>)
 80056a4:	480b      	ldr	r0, [pc, #44]	; (80056d4 <pbuf_free+0x100>)
 80056a6:	f008 fd93 	bl	800e1d0 <iprintf>
        }
      }
      count++;
 80056aa:	7dfb      	ldrb	r3, [r7, #23]
 80056ac:	3301      	adds	r3, #1
 80056ae:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	607b      	str	r3, [r7, #4]
 80056b4:	e001      	b.n	80056ba <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d19f      	bne.n	8005600 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	0800fb84 	.word	0x0800fb84
 80056d0:	0800fce8 	.word	0x0800fce8
 80056d4:	0800fbe4 	.word	0x0800fbe4
 80056d8:	0800fd14 	.word	0x0800fd14
 80056dc:	0800fd2c 	.word	0x0800fd2c
 80056e0:	0800fd50 	.word	0x0800fd50

080056e4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80056ec:	2300      	movs	r3, #0
 80056ee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80056f0:	e005      	b.n	80056fe <pbuf_clen+0x1a>
    ++len;
 80056f2:	89fb      	ldrh	r3, [r7, #14]
 80056f4:	3301      	adds	r3, #1
 80056f6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1f6      	bne.n	80056f2 <pbuf_clen+0xe>
  }
  return len;
 8005704:	89fb      	ldrh	r3, [r7, #14]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
	...

08005714 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d010      	beq.n	8005744 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	7b9b      	ldrb	r3, [r3, #14]
 8005726:	3301      	adds	r3, #1
 8005728:	b2da      	uxtb	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	7b9b      	ldrb	r3, [r3, #14]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <pbuf_ref+0x30>
 8005736:	4b05      	ldr	r3, [pc, #20]	; (800574c <pbuf_ref+0x38>)
 8005738:	f240 3242 	movw	r2, #834	; 0x342
 800573c:	4904      	ldr	r1, [pc, #16]	; (8005750 <pbuf_ref+0x3c>)
 800573e:	4805      	ldr	r0, [pc, #20]	; (8005754 <pbuf_ref+0x40>)
 8005740:	f008 fd46 	bl	800e1d0 <iprintf>
  }
}
 8005744:	bf00      	nop
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	0800fb84 	.word	0x0800fb84
 8005750:	0800fd64 	.word	0x0800fd64
 8005754:	0800fbe4 	.word	0x0800fbe4

08005758 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <pbuf_cat+0x16>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d107      	bne.n	800577e <pbuf_cat+0x26>
 800576e:	4b20      	ldr	r3, [pc, #128]	; (80057f0 <pbuf_cat+0x98>)
 8005770:	f240 3259 	movw	r2, #857	; 0x359
 8005774:	491f      	ldr	r1, [pc, #124]	; (80057f4 <pbuf_cat+0x9c>)
 8005776:	4820      	ldr	r0, [pc, #128]	; (80057f8 <pbuf_cat+0xa0>)
 8005778:	f008 fd2a 	bl	800e1d0 <iprintf>
 800577c:	e034      	b.n	80057e8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	e00a      	b.n	800579a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	891a      	ldrh	r2, [r3, #8]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	891b      	ldrh	r3, [r3, #8]
 800578c:	4413      	add	r3, r2
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f0      	bne.n	8005784 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	891a      	ldrh	r2, [r3, #8]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	895b      	ldrh	r3, [r3, #10]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d006      	beq.n	80057bc <pbuf_cat+0x64>
 80057ae:	4b10      	ldr	r3, [pc, #64]	; (80057f0 <pbuf_cat+0x98>)
 80057b0:	f240 3262 	movw	r2, #866	; 0x362
 80057b4:	4911      	ldr	r1, [pc, #68]	; (80057fc <pbuf_cat+0xa4>)
 80057b6:	4810      	ldr	r0, [pc, #64]	; (80057f8 <pbuf_cat+0xa0>)
 80057b8:	f008 fd0a 	bl	800e1d0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d006      	beq.n	80057d2 <pbuf_cat+0x7a>
 80057c4:	4b0a      	ldr	r3, [pc, #40]	; (80057f0 <pbuf_cat+0x98>)
 80057c6:	f240 3263 	movw	r2, #867	; 0x363
 80057ca:	490d      	ldr	r1, [pc, #52]	; (8005800 <pbuf_cat+0xa8>)
 80057cc:	480a      	ldr	r0, [pc, #40]	; (80057f8 <pbuf_cat+0xa0>)
 80057ce:	f008 fcff 	bl	800e1d0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	891a      	ldrh	r2, [r3, #8]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	891b      	ldrh	r3, [r3, #8]
 80057da:	4413      	add	r3, r2
 80057dc:	b29a      	uxth	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	0800fb84 	.word	0x0800fb84
 80057f4:	0800fd78 	.word	0x0800fd78
 80057f8:	0800fbe4 	.word	0x0800fbe4
 80057fc:	0800fdb0 	.word	0x0800fdb0
 8005800:	0800fde0 	.word	0x0800fde0

08005804 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800580e:	6839      	ldr	r1, [r7, #0]
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7ff ffa1 	bl	8005758 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005816:	6838      	ldr	r0, [r7, #0]
 8005818:	f7ff ff7c 	bl	8005714 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800581c:	bf00      	nop
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800582e:	2300      	movs	r3, #0
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	2300      	movs	r3, #0
 8005834:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d008      	beq.n	800584e <pbuf_copy+0x2a>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d005      	beq.n	800584e <pbuf_copy+0x2a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	891a      	ldrh	r2, [r3, #8]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	891b      	ldrh	r3, [r3, #8]
 800584a:	429a      	cmp	r2, r3
 800584c:	d209      	bcs.n	8005862 <pbuf_copy+0x3e>
 800584e:	4b57      	ldr	r3, [pc, #348]	; (80059ac <pbuf_copy+0x188>)
 8005850:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005854:	4956      	ldr	r1, [pc, #344]	; (80059b0 <pbuf_copy+0x18c>)
 8005856:	4857      	ldr	r0, [pc, #348]	; (80059b4 <pbuf_copy+0x190>)
 8005858:	f008 fcba 	bl	800e1d0 <iprintf>
 800585c:	f06f 030f 	mvn.w	r3, #15
 8005860:	e09f      	b.n	80059a2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	895b      	ldrh	r3, [r3, #10]
 8005866:	461a      	mov	r2, r3
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	1ad2      	subs	r2, r2, r3
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	895b      	ldrh	r3, [r3, #10]
 8005870:	4619      	mov	r1, r3
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	1acb      	subs	r3, r1, r3
 8005876:	429a      	cmp	r2, r3
 8005878:	d306      	bcc.n	8005888 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	895b      	ldrh	r3, [r3, #10]
 800587e:	461a      	mov	r2, r3
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	e005      	b.n	8005894 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	895b      	ldrh	r3, [r3, #10]
 800588c:	461a      	mov	r2, r3
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	18d0      	adds	r0, r2, r3
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	4413      	add	r3, r2
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4619      	mov	r1, r3
 80058a8:	f008 fc62 	bl	800e170 <memcpy>
    offset_to += len;
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4413      	add	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4413      	add	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	895b      	ldrh	r3, [r3, #10]
 80058c0:	461a      	mov	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d906      	bls.n	80058d6 <pbuf_copy+0xb2>
 80058c8:	4b38      	ldr	r3, [pc, #224]	; (80059ac <pbuf_copy+0x188>)
 80058ca:	f240 32d9 	movw	r2, #985	; 0x3d9
 80058ce:	493a      	ldr	r1, [pc, #232]	; (80059b8 <pbuf_copy+0x194>)
 80058d0:	4838      	ldr	r0, [pc, #224]	; (80059b4 <pbuf_copy+0x190>)
 80058d2:	f008 fc7d 	bl	800e1d0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	895b      	ldrh	r3, [r3, #10]
 80058da:	461a      	mov	r2, r3
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	4293      	cmp	r3, r2
 80058e0:	d906      	bls.n	80058f0 <pbuf_copy+0xcc>
 80058e2:	4b32      	ldr	r3, [pc, #200]	; (80059ac <pbuf_copy+0x188>)
 80058e4:	f240 32da 	movw	r2, #986	; 0x3da
 80058e8:	4934      	ldr	r1, [pc, #208]	; (80059bc <pbuf_copy+0x198>)
 80058ea:	4832      	ldr	r0, [pc, #200]	; (80059b4 <pbuf_copy+0x190>)
 80058ec:	f008 fc70 	bl	800e1d0 <iprintf>
    if (offset_from >= p_from->len) {
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	895b      	ldrh	r3, [r3, #10]
 80058f4:	461a      	mov	r2, r3
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d304      	bcc.n	8005906 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80058fc:	2300      	movs	r3, #0
 80058fe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	895b      	ldrh	r3, [r3, #10]
 800590a:	461a      	mov	r2, r3
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	4293      	cmp	r3, r2
 8005910:	d114      	bne.n	800593c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10c      	bne.n	800593c <pbuf_copy+0x118>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d009      	beq.n	800593c <pbuf_copy+0x118>
 8005928:	4b20      	ldr	r3, [pc, #128]	; (80059ac <pbuf_copy+0x188>)
 800592a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800592e:	4924      	ldr	r1, [pc, #144]	; (80059c0 <pbuf_copy+0x19c>)
 8005930:	4820      	ldr	r0, [pc, #128]	; (80059b4 <pbuf_copy+0x190>)
 8005932:	f008 fc4d 	bl	800e1d0 <iprintf>
 8005936:	f06f 030f 	mvn.w	r3, #15
 800593a:	e032      	b.n	80059a2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d013      	beq.n	800596a <pbuf_copy+0x146>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	895a      	ldrh	r2, [r3, #10]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	891b      	ldrh	r3, [r3, #8]
 800594a:	429a      	cmp	r2, r3
 800594c:	d10d      	bne.n	800596a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d009      	beq.n	800596a <pbuf_copy+0x146>
 8005956:	4b15      	ldr	r3, [pc, #84]	; (80059ac <pbuf_copy+0x188>)
 8005958:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800595c:	4919      	ldr	r1, [pc, #100]	; (80059c4 <pbuf_copy+0x1a0>)
 800595e:	4815      	ldr	r0, [pc, #84]	; (80059b4 <pbuf_copy+0x190>)
 8005960:	f008 fc36 	bl	800e1d0 <iprintf>
 8005964:	f06f 0305 	mvn.w	r3, #5
 8005968:	e01b      	b.n	80059a2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d013      	beq.n	8005998 <pbuf_copy+0x174>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	895a      	ldrh	r2, [r3, #10]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	891b      	ldrh	r3, [r3, #8]
 8005978:	429a      	cmp	r2, r3
 800597a:	d10d      	bne.n	8005998 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d009      	beq.n	8005998 <pbuf_copy+0x174>
 8005984:	4b09      	ldr	r3, [pc, #36]	; (80059ac <pbuf_copy+0x188>)
 8005986:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800598a:	490e      	ldr	r1, [pc, #56]	; (80059c4 <pbuf_copy+0x1a0>)
 800598c:	4809      	ldr	r0, [pc, #36]	; (80059b4 <pbuf_copy+0x190>)
 800598e:	f008 fc1f 	bl	800e1d0 <iprintf>
 8005992:	f06f 0305 	mvn.w	r3, #5
 8005996:	e004      	b.n	80059a2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	f47f af61 	bne.w	8005862 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	0800fb84 	.word	0x0800fb84
 80059b0:	0800fe2c 	.word	0x0800fe2c
 80059b4:	0800fbe4 	.word	0x0800fbe4
 80059b8:	0800fe5c 	.word	0x0800fe5c
 80059bc:	0800fe74 	.word	0x0800fe74
 80059c0:	0800fe90 	.word	0x0800fe90
 80059c4:	0800fea0 	.word	0x0800fea0

080059c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	4611      	mov	r1, r2
 80059d4:	461a      	mov	r2, r3
 80059d6:	460b      	mov	r3, r1
 80059d8:	80fb      	strh	r3, [r7, #6]
 80059da:	4613      	mov	r3, r2
 80059dc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d108      	bne.n	80059fe <pbuf_copy_partial+0x36>
 80059ec:	4b2b      	ldr	r3, [pc, #172]	; (8005a9c <pbuf_copy_partial+0xd4>)
 80059ee:	f240 420a 	movw	r2, #1034	; 0x40a
 80059f2:	492b      	ldr	r1, [pc, #172]	; (8005aa0 <pbuf_copy_partial+0xd8>)
 80059f4:	482b      	ldr	r0, [pc, #172]	; (8005aa4 <pbuf_copy_partial+0xdc>)
 80059f6:	f008 fbeb 	bl	800e1d0 <iprintf>
 80059fa:	2300      	movs	r3, #0
 80059fc:	e04a      	b.n	8005a94 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d108      	bne.n	8005a16 <pbuf_copy_partial+0x4e>
 8005a04:	4b25      	ldr	r3, [pc, #148]	; (8005a9c <pbuf_copy_partial+0xd4>)
 8005a06:	f240 420b 	movw	r2, #1035	; 0x40b
 8005a0a:	4927      	ldr	r1, [pc, #156]	; (8005aa8 <pbuf_copy_partial+0xe0>)
 8005a0c:	4825      	ldr	r0, [pc, #148]	; (8005aa4 <pbuf_copy_partial+0xdc>)
 8005a0e:	f008 fbdf 	bl	800e1d0 <iprintf>
 8005a12:	2300      	movs	r3, #0
 8005a14:	e03e      	b.n	8005a94 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	61fb      	str	r3, [r7, #28]
 8005a1a:	e034      	b.n	8005a86 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005a1c:	88bb      	ldrh	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <pbuf_copy_partial+0x70>
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	895b      	ldrh	r3, [r3, #10]
 8005a26:	88ba      	ldrh	r2, [r7, #4]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d305      	bcc.n	8005a38 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	895b      	ldrh	r3, [r3, #10]
 8005a30:	88ba      	ldrh	r2, [r7, #4]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	80bb      	strh	r3, [r7, #4]
 8005a36:	e023      	b.n	8005a80 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	895a      	ldrh	r2, [r3, #10]
 8005a3c:	88bb      	ldrh	r3, [r7, #4]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005a42:	8b3a      	ldrh	r2, [r7, #24]
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d901      	bls.n	8005a4e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005a4a:	88fb      	ldrh	r3, [r7, #6]
 8005a4c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005a4e:	8b7b      	ldrh	r3, [r7, #26]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	18d0      	adds	r0, r2, r3
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	88bb      	ldrh	r3, [r7, #4]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	8b3a      	ldrh	r2, [r7, #24]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	f008 fb86 	bl	800e170 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005a64:	8afa      	ldrh	r2, [r7, #22]
 8005a66:	8b3b      	ldrh	r3, [r7, #24]
 8005a68:	4413      	add	r3, r2
 8005a6a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005a6c:	8b7a      	ldrh	r2, [r7, #26]
 8005a6e:	8b3b      	ldrh	r3, [r7, #24]
 8005a70:	4413      	add	r3, r2
 8005a72:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005a74:	88fa      	ldrh	r2, [r7, #6]
 8005a76:	8b3b      	ldrh	r3, [r7, #24]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	61fb      	str	r3, [r7, #28]
 8005a86:	88fb      	ldrh	r3, [r7, #6]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <pbuf_copy_partial+0xca>
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1c4      	bne.n	8005a1c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005a92:	8afb      	ldrh	r3, [r7, #22]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3720      	adds	r7, #32
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	0800fb84 	.word	0x0800fb84
 8005aa0:	0800fecc 	.word	0x0800fecc
 8005aa4:	0800fbe4 	.word	0x0800fbe4
 8005aa8:	0800feec 	.word	0x0800feec

08005aac <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b088      	sub	sp, #32
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d109      	bne.n	8005adc <pbuf_take+0x30>
 8005ac8:	4b3a      	ldr	r3, [pc, #232]	; (8005bb4 <pbuf_take+0x108>)
 8005aca:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8005ace:	493a      	ldr	r1, [pc, #232]	; (8005bb8 <pbuf_take+0x10c>)
 8005ad0:	483a      	ldr	r0, [pc, #232]	; (8005bbc <pbuf_take+0x110>)
 8005ad2:	f008 fb7d 	bl	800e1d0 <iprintf>
 8005ad6:	f06f 030f 	mvn.w	r3, #15
 8005ada:	e067      	b.n	8005bac <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d109      	bne.n	8005af6 <pbuf_take+0x4a>
 8005ae2:	4b34      	ldr	r3, [pc, #208]	; (8005bb4 <pbuf_take+0x108>)
 8005ae4:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8005ae8:	4935      	ldr	r1, [pc, #212]	; (8005bc0 <pbuf_take+0x114>)
 8005aea:	4834      	ldr	r0, [pc, #208]	; (8005bbc <pbuf_take+0x110>)
 8005aec:	f008 fb70 	bl	800e1d0 <iprintf>
 8005af0:	f06f 030f 	mvn.w	r3, #15
 8005af4:	e05a      	b.n	8005bac <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	891b      	ldrh	r3, [r3, #8]
 8005afa:	88fa      	ldrh	r2, [r7, #6]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d909      	bls.n	8005b14 <pbuf_take+0x68>
 8005b00:	4b2c      	ldr	r3, [pc, #176]	; (8005bb4 <pbuf_take+0x108>)
 8005b02:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8005b06:	492f      	ldr	r1, [pc, #188]	; (8005bc4 <pbuf_take+0x118>)
 8005b08:	482c      	ldr	r0, [pc, #176]	; (8005bbc <pbuf_take+0x110>)
 8005b0a:	f008 fb61 	bl	800e1d0 <iprintf>
 8005b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b12:	e04b      	b.n	8005bac <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d007      	beq.n	8005b2a <pbuf_take+0x7e>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d004      	beq.n	8005b2a <pbuf_take+0x7e>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	891b      	ldrh	r3, [r3, #8]
 8005b24:	88fa      	ldrh	r2, [r7, #6]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d902      	bls.n	8005b30 <pbuf_take+0x84>
    return ERR_ARG;
 8005b2a:	f06f 030f 	mvn.w	r3, #15
 8005b2e:	e03d      	b.n	8005bac <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	61fb      	str	r3, [r7, #28]
 8005b34:	e028      	b.n	8005b88 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d106      	bne.n	8005b4a <pbuf_take+0x9e>
 8005b3c:	4b1d      	ldr	r3, [pc, #116]	; (8005bb4 <pbuf_take+0x108>)
 8005b3e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8005b42:	4921      	ldr	r1, [pc, #132]	; (8005bc8 <pbuf_take+0x11c>)
 8005b44:	481d      	ldr	r0, [pc, #116]	; (8005bbc <pbuf_take+0x110>)
 8005b46:	f008 fb43 	bl	800e1d0 <iprintf>
    buf_copy_len = total_copy_len;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	895b      	ldrh	r3, [r3, #10]
 8005b52:	461a      	mov	r2, r3
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d902      	bls.n	8005b60 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	895b      	ldrh	r3, [r3, #10]
 8005b5e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	6858      	ldr	r0, [r3, #4]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	4413      	add	r3, r2
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	f008 faff 	bl	800e170 <memcpy>
    total_copy_len -= buf_copy_len;
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	4413      	add	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	61fb      	str	r3, [r7, #28]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1d3      	bne.n	8005b36 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d103      	bne.n	8005b9c <pbuf_take+0xf0>
 8005b94:	88fb      	ldrh	r3, [r7, #6]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d006      	beq.n	8005baa <pbuf_take+0xfe>
 8005b9c:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <pbuf_take+0x108>)
 8005b9e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8005ba2:	490a      	ldr	r1, [pc, #40]	; (8005bcc <pbuf_take+0x120>)
 8005ba4:	4805      	ldr	r0, [pc, #20]	; (8005bbc <pbuf_take+0x110>)
 8005ba6:	f008 fb13 	bl	800e1d0 <iprintf>
  return ERR_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3720      	adds	r7, #32
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	0800fb84 	.word	0x0800fb84
 8005bb8:	0800ff5c 	.word	0x0800ff5c
 8005bbc:	0800fbe4 	.word	0x0800fbe4
 8005bc0:	0800ff74 	.word	0x0800ff74
 8005bc4:	0800ff90 	.word	0x0800ff90
 8005bc8:	0800ffb0 	.word	0x0800ffb0
 8005bcc:	0800ffc8 	.word	0x0800ffc8

08005bd0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	603a      	str	r2, [r7, #0]
 8005bda:	71fb      	strb	r3, [r7, #7]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	8919      	ldrh	r1, [r3, #8]
 8005be4:	88ba      	ldrh	r2, [r7, #4]
 8005be6:	79fb      	ldrb	r3, [r7, #7]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff fa0f 	bl	800500c <pbuf_alloc>
 8005bee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <pbuf_clone+0x2a>
    return NULL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	e011      	b.n	8005c1e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005bfa:	6839      	ldr	r1, [r7, #0]
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f7ff fe11 	bl	8005824 <pbuf_copy>
 8005c02:	4603      	mov	r3, r0
 8005c04:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005c06:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d006      	beq.n	8005c1c <pbuf_clone+0x4c>
 8005c0e:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <pbuf_clone+0x58>)
 8005c10:	f240 5224 	movw	r2, #1316	; 0x524
 8005c14:	4905      	ldr	r1, [pc, #20]	; (8005c2c <pbuf_clone+0x5c>)
 8005c16:	4806      	ldr	r0, [pc, #24]	; (8005c30 <pbuf_clone+0x60>)
 8005c18:	f008 fada 	bl	800e1d0 <iprintf>
  return q;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	0800fb84 	.word	0x0800fb84
 8005c2c:	0800fff8 	.word	0x0800fff8
 8005c30:	0800fbe4 	.word	0x0800fbe4

08005c34 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005c38:	f008 fae2 	bl	800e200 <rand>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	4b01      	ldr	r3, [pc, #4]	; (8005c54 <tcp_init+0x20>)
 8005c4e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005c50:	bf00      	nop
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	2000000a 	.word	0x2000000a

08005c58 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	7d1b      	ldrb	r3, [r3, #20]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d105      	bne.n	8005c74 <tcp_free+0x1c>
 8005c68:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <tcp_free+0x2c>)
 8005c6a:	22d4      	movs	r2, #212	; 0xd4
 8005c6c:	4906      	ldr	r1, [pc, #24]	; (8005c88 <tcp_free+0x30>)
 8005c6e:	4807      	ldr	r0, [pc, #28]	; (8005c8c <tcp_free+0x34>)
 8005c70:	f008 faae 	bl	800e1d0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	2001      	movs	r0, #1
 8005c78:	f7fe fe9a 	bl	80049b0 <memp_free>
}
 8005c7c:	bf00      	nop
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	08010084 	.word	0x08010084
 8005c88:	080100b4 	.word	0x080100b4
 8005c8c:	080100c8 	.word	0x080100c8

08005c90 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	7d1b      	ldrb	r3, [r3, #20]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d105      	bne.n	8005cac <tcp_free_listen+0x1c>
 8005ca0:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <tcp_free_listen+0x2c>)
 8005ca2:	22df      	movs	r2, #223	; 0xdf
 8005ca4:	4906      	ldr	r1, [pc, #24]	; (8005cc0 <tcp_free_listen+0x30>)
 8005ca6:	4807      	ldr	r0, [pc, #28]	; (8005cc4 <tcp_free_listen+0x34>)
 8005ca8:	f008 fa92 	bl	800e1d0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	2002      	movs	r0, #2
 8005cb0:	f7fe fe7e 	bl	80049b0 <memp_free>
}
 8005cb4:	bf00      	nop
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	08010084 	.word	0x08010084
 8005cc0:	080100f0 	.word	0x080100f0
 8005cc4:	080100c8 	.word	0x080100c8

08005cc8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005ccc:	f000 fea2 	bl	8006a14 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005cd0:	4b07      	ldr	r3, [pc, #28]	; (8005cf0 <tcp_tmr+0x28>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <tcp_tmr+0x28>)
 8005cda:	701a      	strb	r2, [r3, #0]
 8005cdc:	4b04      	ldr	r3, [pc, #16]	; (8005cf0 <tcp_tmr+0x28>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005ce8:	f000 fb54 	bl	8006394 <tcp_slowtmr>
  }
}
 8005cec:	bf00      	nop
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	200000cd 	.word	0x200000cd

08005cf4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d105      	bne.n	8005d10 <tcp_remove_listener+0x1c>
 8005d04:	4b0d      	ldr	r3, [pc, #52]	; (8005d3c <tcp_remove_listener+0x48>)
 8005d06:	22ff      	movs	r2, #255	; 0xff
 8005d08:	490d      	ldr	r1, [pc, #52]	; (8005d40 <tcp_remove_listener+0x4c>)
 8005d0a:	480e      	ldr	r0, [pc, #56]	; (8005d44 <tcp_remove_listener+0x50>)
 8005d0c:	f008 fa60 	bl	800e1d0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	e00a      	b.n	8005d2c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d102      	bne.n	8005d26 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1f1      	bne.n	8005d16 <tcp_remove_listener+0x22>
    }
  }
}
 8005d32:	bf00      	nop
 8005d34:	bf00      	nop
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	08010084 	.word	0x08010084
 8005d40:	0801010c 	.word	0x0801010c
 8005d44:	080100c8 	.word	0x080100c8

08005d48 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d106      	bne.n	8005d64 <tcp_listen_closed+0x1c>
 8005d56:	4b14      	ldr	r3, [pc, #80]	; (8005da8 <tcp_listen_closed+0x60>)
 8005d58:	f240 1211 	movw	r2, #273	; 0x111
 8005d5c:	4913      	ldr	r1, [pc, #76]	; (8005dac <tcp_listen_closed+0x64>)
 8005d5e:	4814      	ldr	r0, [pc, #80]	; (8005db0 <tcp_listen_closed+0x68>)
 8005d60:	f008 fa36 	bl	800e1d0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	7d1b      	ldrb	r3, [r3, #20]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d006      	beq.n	8005d7a <tcp_listen_closed+0x32>
 8005d6c:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <tcp_listen_closed+0x60>)
 8005d6e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005d72:	4910      	ldr	r1, [pc, #64]	; (8005db4 <tcp_listen_closed+0x6c>)
 8005d74:	480e      	ldr	r0, [pc, #56]	; (8005db0 <tcp_listen_closed+0x68>)
 8005d76:	f008 fa2b 	bl	800e1d0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	e00b      	b.n	8005d98 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005d80:	4a0d      	ldr	r2, [pc, #52]	; (8005db8 <tcp_listen_closed+0x70>)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff ffb1 	bl	8005cf4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3301      	adds	r3, #1
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d9f0      	bls.n	8005d80 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005d9e:	bf00      	nop
 8005da0:	bf00      	nop
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	08010084 	.word	0x08010084
 8005dac:	08010134 	.word	0x08010134
 8005db0:	080100c8 	.word	0x080100c8
 8005db4:	08010140 	.word	0x08010140
 8005db8:	08012058 	.word	0x08012058

08005dbc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005dbc:	b5b0      	push	{r4, r5, r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af04      	add	r7, sp, #16
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <tcp_close_shutdown+0x20>
 8005dce:	4b63      	ldr	r3, [pc, #396]	; (8005f5c <tcp_close_shutdown+0x1a0>)
 8005dd0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005dd4:	4962      	ldr	r1, [pc, #392]	; (8005f60 <tcp_close_shutdown+0x1a4>)
 8005dd6:	4863      	ldr	r0, [pc, #396]	; (8005f64 <tcp_close_shutdown+0x1a8>)
 8005dd8:	f008 f9fa 	bl	800e1d0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d066      	beq.n	8005eb0 <tcp_close_shutdown+0xf4>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	7d1b      	ldrb	r3, [r3, #20]
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d003      	beq.n	8005df2 <tcp_close_shutdown+0x36>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	7d1b      	ldrb	r3, [r3, #20]
 8005dee:	2b07      	cmp	r3, #7
 8005df0:	d15e      	bne.n	8005eb0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d104      	bne.n	8005e04 <tcp_close_shutdown+0x48>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005e02:	d055      	beq.n	8005eb0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	8b5b      	ldrh	r3, [r3, #26]
 8005e08:	f003 0310 	and.w	r3, r3, #16
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <tcp_close_shutdown+0x62>
 8005e10:	4b52      	ldr	r3, [pc, #328]	; (8005f5c <tcp_close_shutdown+0x1a0>)
 8005e12:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005e16:	4954      	ldr	r1, [pc, #336]	; (8005f68 <tcp_close_shutdown+0x1ac>)
 8005e18:	4852      	ldr	r0, [pc, #328]	; (8005f64 <tcp_close_shutdown+0x1a8>)
 8005e1a:	f008 f9d9 	bl	800e1d0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005e26:	687d      	ldr	r5, [r7, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	8ad2      	ldrh	r2, [r2, #22]
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	8b09      	ldrh	r1, [r1, #24]
 8005e34:	9102      	str	r1, [sp, #8]
 8005e36:	9201      	str	r2, [sp, #4]
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	462b      	mov	r3, r5
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	4601      	mov	r1, r0
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f004 fe8d 	bl	800ab60 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f001 f8c6 	bl	8006fd8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005e4c:	4b47      	ldr	r3, [pc, #284]	; (8005f6c <tcp_close_shutdown+0x1b0>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d105      	bne.n	8005e62 <tcp_close_shutdown+0xa6>
 8005e56:	4b45      	ldr	r3, [pc, #276]	; (8005f6c <tcp_close_shutdown+0x1b0>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	4a43      	ldr	r2, [pc, #268]	; (8005f6c <tcp_close_shutdown+0x1b0>)
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	e013      	b.n	8005e8a <tcp_close_shutdown+0xce>
 8005e62:	4b42      	ldr	r3, [pc, #264]	; (8005f6c <tcp_close_shutdown+0x1b0>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	e00c      	b.n	8005e84 <tcp_close_shutdown+0xc8>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d104      	bne.n	8005e7e <tcp_close_shutdown+0xc2>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	60da      	str	r2, [r3, #12]
 8005e7c:	e005      	b.n	8005e8a <tcp_close_shutdown+0xce>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1ef      	bne.n	8005e6a <tcp_close_shutdown+0xae>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	60da      	str	r2, [r3, #12]
 8005e90:	4b37      	ldr	r3, [pc, #220]	; (8005f70 <tcp_close_shutdown+0x1b4>)
 8005e92:	2201      	movs	r2, #1
 8005e94:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005e96:	4b37      	ldr	r3, [pc, #220]	; (8005f74 <tcp_close_shutdown+0x1b8>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d102      	bne.n	8005ea6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005ea0:	f003 fd5a 	bl	8009958 <tcp_trigger_input_pcb_close>
 8005ea4:	e002      	b.n	8005eac <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff fed6 	bl	8005c58 <tcp_free>
      }
      return ERR_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	e050      	b.n	8005f52 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	7d1b      	ldrb	r3, [r3, #20]
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d03b      	beq.n	8005f30 <tcp_close_shutdown+0x174>
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	dc44      	bgt.n	8005f46 <tcp_close_shutdown+0x18a>
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <tcp_close_shutdown+0x10a>
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d02a      	beq.n	8005f1a <tcp_close_shutdown+0x15e>
 8005ec4:	e03f      	b.n	8005f46 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	8adb      	ldrh	r3, [r3, #22]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d021      	beq.n	8005f12 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005ece:	4b2a      	ldr	r3, [pc, #168]	; (8005f78 <tcp_close_shutdown+0x1bc>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d105      	bne.n	8005ee4 <tcp_close_shutdown+0x128>
 8005ed8:	4b27      	ldr	r3, [pc, #156]	; (8005f78 <tcp_close_shutdown+0x1bc>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	4a26      	ldr	r2, [pc, #152]	; (8005f78 <tcp_close_shutdown+0x1bc>)
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	e013      	b.n	8005f0c <tcp_close_shutdown+0x150>
 8005ee4:	4b24      	ldr	r3, [pc, #144]	; (8005f78 <tcp_close_shutdown+0x1bc>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	60bb      	str	r3, [r7, #8]
 8005eea:	e00c      	b.n	8005f06 <tcp_close_shutdown+0x14a>
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d104      	bne.n	8005f00 <tcp_close_shutdown+0x144>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	60da      	str	r2, [r3, #12]
 8005efe:	e005      	b.n	8005f0c <tcp_close_shutdown+0x150>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1ef      	bne.n	8005eec <tcp_close_shutdown+0x130>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff fea0 	bl	8005c58 <tcp_free>
      break;
 8005f18:	e01a      	b.n	8005f50 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff ff14 	bl	8005d48 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	4816      	ldr	r0, [pc, #88]	; (8005f7c <tcp_close_shutdown+0x1c0>)
 8005f24:	f001 f8a8 	bl	8007078 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff feb1 	bl	8005c90 <tcp_free_listen>
      break;
 8005f2e:	e00f      	b.n	8005f50 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005f30:	6879      	ldr	r1, [r7, #4]
 8005f32:	480e      	ldr	r0, [pc, #56]	; (8005f6c <tcp_close_shutdown+0x1b0>)
 8005f34:	f001 f8a0 	bl	8007078 <tcp_pcb_remove>
 8005f38:	4b0d      	ldr	r3, [pc, #52]	; (8005f70 <tcp_close_shutdown+0x1b4>)
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff fe8a 	bl	8005c58 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005f44:	e004      	b.n	8005f50 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f81a 	bl	8005f80 <tcp_close_shutdown_fin>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	e000      	b.n	8005f52 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bdb0      	pop	{r4, r5, r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	08010084 	.word	0x08010084
 8005f60:	08010158 	.word	0x08010158
 8005f64:	080100c8 	.word	0x080100c8
 8005f68:	08010178 	.word	0x08010178
 8005f6c:	20008b50 	.word	0x20008b50
 8005f70:	20008b4c 	.word	0x20008b4c
 8005f74:	20008b64 	.word	0x20008b64
 8005f78:	20008b5c 	.word	0x20008b5c
 8005f7c:	20008b58 	.word	0x20008b58

08005f80 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d106      	bne.n	8005f9c <tcp_close_shutdown_fin+0x1c>
 8005f8e:	4b2e      	ldr	r3, [pc, #184]	; (8006048 <tcp_close_shutdown_fin+0xc8>)
 8005f90:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005f94:	492d      	ldr	r1, [pc, #180]	; (800604c <tcp_close_shutdown_fin+0xcc>)
 8005f96:	482e      	ldr	r0, [pc, #184]	; (8006050 <tcp_close_shutdown_fin+0xd0>)
 8005f98:	f008 f91a 	bl	800e1d0 <iprintf>

  switch (pcb->state) {
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	7d1b      	ldrb	r3, [r3, #20]
 8005fa0:	2b07      	cmp	r3, #7
 8005fa2:	d020      	beq.n	8005fe6 <tcp_close_shutdown_fin+0x66>
 8005fa4:	2b07      	cmp	r3, #7
 8005fa6:	dc2b      	bgt.n	8006000 <tcp_close_shutdown_fin+0x80>
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d002      	beq.n	8005fb2 <tcp_close_shutdown_fin+0x32>
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	d00d      	beq.n	8005fcc <tcp_close_shutdown_fin+0x4c>
 8005fb0:	e026      	b.n	8006000 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f003 fee2 	bl	8009d7c <tcp_send_fin>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d11f      	bne.n	8006004 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2205      	movs	r2, #5
 8005fc8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005fca:	e01b      	b.n	8006004 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f003 fed5 	bl	8009d7c <tcp_send_fin>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d114      	bne.n	8006008 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2205      	movs	r2, #5
 8005fe2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005fe4:	e010      	b.n	8006008 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f003 fec8 	bl	8009d7c <tcp_send_fin>
 8005fec:	4603      	mov	r3, r0
 8005fee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d109      	bne.n	800600c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2209      	movs	r2, #9
 8005ffc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005ffe:	e005      	b.n	800600c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	e01c      	b.n	800603e <tcp_close_shutdown_fin+0xbe>
      break;
 8006004:	bf00      	nop
 8006006:	e002      	b.n	800600e <tcp_close_shutdown_fin+0x8e>
      break;
 8006008:	bf00      	nop
 800600a:	e000      	b.n	800600e <tcp_close_shutdown_fin+0x8e>
      break;
 800600c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800600e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d103      	bne.n	800601e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f003 ffee 	bl	8009ff8 <tcp_output>
 800601c:	e00d      	b.n	800603a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800601e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	d108      	bne.n	800603a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	8b5b      	ldrh	r3, [r3, #26]
 800602c:	f043 0308 	orr.w	r3, r3, #8
 8006030:	b29a      	uxth	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	e001      	b.n	800603e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800603a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	08010084 	.word	0x08010084
 800604c:	08010134 	.word	0x08010134
 8006050:	080100c8 	.word	0x080100c8

08006054 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d109      	bne.n	8006076 <tcp_close+0x22>
 8006062:	4b0f      	ldr	r3, [pc, #60]	; (80060a0 <tcp_close+0x4c>)
 8006064:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006068:	490e      	ldr	r1, [pc, #56]	; (80060a4 <tcp_close+0x50>)
 800606a:	480f      	ldr	r0, [pc, #60]	; (80060a8 <tcp_close+0x54>)
 800606c:	f008 f8b0 	bl	800e1d0 <iprintf>
 8006070:	f06f 030f 	mvn.w	r3, #15
 8006074:	e00f      	b.n	8006096 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	7d1b      	ldrb	r3, [r3, #20]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d006      	beq.n	800608c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	8b5b      	ldrh	r3, [r3, #26]
 8006082:	f043 0310 	orr.w	r3, r3, #16
 8006086:	b29a      	uxth	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800608c:	2101      	movs	r1, #1
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff fe94 	bl	8005dbc <tcp_close_shutdown>
 8006094:	4603      	mov	r3, r0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	08010084 	.word	0x08010084
 80060a4:	08010194 	.word	0x08010194
 80060a8:	080100c8 	.word	0x080100c8

080060ac <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08e      	sub	sp, #56	; 0x38
 80060b0:	af04      	add	r7, sp, #16
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d107      	bne.n	80060cc <tcp_abandon+0x20>
 80060bc:	4b52      	ldr	r3, [pc, #328]	; (8006208 <tcp_abandon+0x15c>)
 80060be:	f240 223d 	movw	r2, #573	; 0x23d
 80060c2:	4952      	ldr	r1, [pc, #328]	; (800620c <tcp_abandon+0x160>)
 80060c4:	4852      	ldr	r0, [pc, #328]	; (8006210 <tcp_abandon+0x164>)
 80060c6:	f008 f883 	bl	800e1d0 <iprintf>
 80060ca:	e099      	b.n	8006200 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	7d1b      	ldrb	r3, [r3, #20]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d106      	bne.n	80060e2 <tcp_abandon+0x36>
 80060d4:	4b4c      	ldr	r3, [pc, #304]	; (8006208 <tcp_abandon+0x15c>)
 80060d6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80060da:	494e      	ldr	r1, [pc, #312]	; (8006214 <tcp_abandon+0x168>)
 80060dc:	484c      	ldr	r0, [pc, #304]	; (8006210 <tcp_abandon+0x164>)
 80060de:	f008 f877 	bl	800e1d0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	7d1b      	ldrb	r3, [r3, #20]
 80060e6:	2b0a      	cmp	r3, #10
 80060e8:	d107      	bne.n	80060fa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	484a      	ldr	r0, [pc, #296]	; (8006218 <tcp_abandon+0x16c>)
 80060ee:	f000 ffc3 	bl	8007078 <tcp_pcb_remove>
    tcp_free(pcb);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff fdb0 	bl	8005c58 <tcp_free>
 80060f8:	e082      	b.n	8006200 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80060fe:	2300      	movs	r3, #0
 8006100:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006106:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006114:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	7d1b      	ldrb	r3, [r3, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d126      	bne.n	8006172 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8adb      	ldrh	r3, [r3, #22]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d02e      	beq.n	800618a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800612c:	4b3b      	ldr	r3, [pc, #236]	; (800621c <tcp_abandon+0x170>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	429a      	cmp	r2, r3
 8006134:	d105      	bne.n	8006142 <tcp_abandon+0x96>
 8006136:	4b39      	ldr	r3, [pc, #228]	; (800621c <tcp_abandon+0x170>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	4a37      	ldr	r2, [pc, #220]	; (800621c <tcp_abandon+0x170>)
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	e013      	b.n	800616a <tcp_abandon+0xbe>
 8006142:	4b36      	ldr	r3, [pc, #216]	; (800621c <tcp_abandon+0x170>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	61fb      	str	r3, [r7, #28]
 8006148:	e00c      	b.n	8006164 <tcp_abandon+0xb8>
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	429a      	cmp	r2, r3
 8006152:	d104      	bne.n	800615e <tcp_abandon+0xb2>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68da      	ldr	r2, [r3, #12]
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	60da      	str	r2, [r3, #12]
 800615c:	e005      	b.n	800616a <tcp_abandon+0xbe>
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	61fb      	str	r3, [r7, #28]
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1ef      	bne.n	800614a <tcp_abandon+0x9e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	60da      	str	r2, [r3, #12]
 8006170:	e00b      	b.n	800618a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	8adb      	ldrh	r3, [r3, #22]
 800617a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	4828      	ldr	r0, [pc, #160]	; (8006220 <tcp_abandon+0x174>)
 8006180:	f000 ff7a 	bl	8007078 <tcp_pcb_remove>
 8006184:	4b27      	ldr	r3, [pc, #156]	; (8006224 <tcp_abandon+0x178>)
 8006186:	2201      	movs	r2, #1
 8006188:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618e:	2b00      	cmp	r3, #0
 8006190:	d004      	beq.n	800619c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fd1c 	bl	8006bd4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d004      	beq.n	80061ae <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fd13 	bl	8006bd4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d004      	beq.n	80061c0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fd0a 	bl	8006bd4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00e      	beq.n	80061e4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3304      	adds	r3, #4
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	8b12      	ldrh	r2, [r2, #24]
 80061d0:	9202      	str	r2, [sp, #8]
 80061d2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80061d4:	9201      	str	r2, [sp, #4]
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	460b      	mov	r3, r1
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	69b9      	ldr	r1, [r7, #24]
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f004 fcbe 	bl	800ab60 <tcp_rst>
    }
    last_state = pcb->state;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	7d1b      	ldrb	r3, [r3, #20]
 80061e8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7ff fd34 	bl	8005c58 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d004      	beq.n	8006200 <tcp_abandon+0x154>
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f06f 010c 	mvn.w	r1, #12
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	4798      	blx	r3
  }
}
 8006200:	3728      	adds	r7, #40	; 0x28
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	08010084 	.word	0x08010084
 800620c:	080101c8 	.word	0x080101c8
 8006210:	080100c8 	.word	0x080100c8
 8006214:	080101e4 	.word	0x080101e4
 8006218:	20008b60 	.word	0x20008b60
 800621c:	20008b5c 	.word	0x20008b5c
 8006220:	20008b50 	.word	0x20008b50
 8006224:	20008b4c 	.word	0x20008b4c

08006228 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006230:	2101      	movs	r1, #1
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff ff3a 	bl	80060ac <tcp_abandon>
}
 8006238:	bf00      	nop
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d106      	bne.n	800625c <tcp_update_rcv_ann_wnd+0x1c>
 800624e:	4b25      	ldr	r3, [pc, #148]	; (80062e4 <tcp_update_rcv_ann_wnd+0xa4>)
 8006250:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006254:	4924      	ldr	r1, [pc, #144]	; (80062e8 <tcp_update_rcv_ann_wnd+0xa8>)
 8006256:	4825      	ldr	r0, [pc, #148]	; (80062ec <tcp_update_rcv_ann_wnd+0xac>)
 8006258:	f007 ffba 	bl	800e1d0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006264:	4413      	add	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006270:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006274:	bf28      	it	cs
 8006276:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800627a:	b292      	uxth	r2, r2
 800627c:	4413      	add	r3, r2
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	db08      	blt.n	8006298 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	e020      	b.n	80062da <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	dd03      	ble.n	80062ae <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062ac:	e014      	b.n	80062d8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c0:	d306      	bcc.n	80062d0 <tcp_update_rcv_ann_wnd+0x90>
 80062c2:	4b08      	ldr	r3, [pc, #32]	; (80062e4 <tcp_update_rcv_ann_wnd+0xa4>)
 80062c4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80062c8:	4909      	ldr	r1, [pc, #36]	; (80062f0 <tcp_update_rcv_ann_wnd+0xb0>)
 80062ca:	4808      	ldr	r0, [pc, #32]	; (80062ec <tcp_update_rcv_ann_wnd+0xac>)
 80062cc:	f007 ff80 	bl	800e1d0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80062d8:	2300      	movs	r3, #0
  }
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	08010084 	.word	0x08010084
 80062e8:	080102e0 	.word	0x080102e0
 80062ec:	080100c8 	.word	0x080100c8
 80062f0:	08010304 	.word	0x08010304

080062f4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	460b      	mov	r3, r1
 80062fe:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d107      	bne.n	8006316 <tcp_recved+0x22>
 8006306:	4b1f      	ldr	r3, [pc, #124]	; (8006384 <tcp_recved+0x90>)
 8006308:	f240 32cf 	movw	r2, #975	; 0x3cf
 800630c:	491e      	ldr	r1, [pc, #120]	; (8006388 <tcp_recved+0x94>)
 800630e:	481f      	ldr	r0, [pc, #124]	; (800638c <tcp_recved+0x98>)
 8006310:	f007 ff5e 	bl	800e1d0 <iprintf>
 8006314:	e032      	b.n	800637c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	7d1b      	ldrb	r3, [r3, #20]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d106      	bne.n	800632c <tcp_recved+0x38>
 800631e:	4b19      	ldr	r3, [pc, #100]	; (8006384 <tcp_recved+0x90>)
 8006320:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006324:	491a      	ldr	r1, [pc, #104]	; (8006390 <tcp_recved+0x9c>)
 8006326:	4819      	ldr	r0, [pc, #100]	; (800638c <tcp_recved+0x98>)
 8006328:	f007 ff52 	bl	800e1d0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006330:	887b      	ldrh	r3, [r7, #2]
 8006332:	4413      	add	r3, r2
 8006334:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006336:	89fb      	ldrh	r3, [r7, #14]
 8006338:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800633c:	d804      	bhi.n	8006348 <tcp_recved+0x54>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006342:	89fa      	ldrh	r2, [r7, #14]
 8006344:	429a      	cmp	r2, r3
 8006346:	d204      	bcs.n	8006352 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800634e:	851a      	strh	r2, [r3, #40]	; 0x28
 8006350:	e002      	b.n	8006358 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	89fa      	ldrh	r2, [r7, #14]
 8006356:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff ff71 	bl	8006240 <tcp_update_rcv_ann_wnd>
 800635e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006366:	d309      	bcc.n	800637c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8b5b      	ldrh	r3, [r3, #26]
 800636c:	f043 0302 	orr.w	r3, r3, #2
 8006370:	b29a      	uxth	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f003 fe3e 	bl	8009ff8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	08010084 	.word	0x08010084
 8006388:	08010320 	.word	0x08010320
 800638c:	080100c8 	.word	0x080100c8
 8006390:	08010338 	.word	0x08010338

08006394 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006394:	b5b0      	push	{r4, r5, r7, lr}
 8006396:	b090      	sub	sp, #64	; 0x40
 8006398:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80063a0:	4b94      	ldr	r3, [pc, #592]	; (80065f4 <tcp_slowtmr+0x260>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3301      	adds	r3, #1
 80063a6:	4a93      	ldr	r2, [pc, #588]	; (80065f4 <tcp_slowtmr+0x260>)
 80063a8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80063aa:	4b93      	ldr	r3, [pc, #588]	; (80065f8 <tcp_slowtmr+0x264>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	3301      	adds	r3, #1
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	4b91      	ldr	r3, [pc, #580]	; (80065f8 <tcp_slowtmr+0x264>)
 80063b4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80063ba:	4b90      	ldr	r3, [pc, #576]	; (80065fc <tcp_slowtmr+0x268>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80063c0:	e29d      	b.n	80068fe <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80063c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c4:	7d1b      	ldrb	r3, [r3, #20]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d106      	bne.n	80063d8 <tcp_slowtmr+0x44>
 80063ca:	4b8d      	ldr	r3, [pc, #564]	; (8006600 <tcp_slowtmr+0x26c>)
 80063cc:	f240 42be 	movw	r2, #1214	; 0x4be
 80063d0:	498c      	ldr	r1, [pc, #560]	; (8006604 <tcp_slowtmr+0x270>)
 80063d2:	488d      	ldr	r0, [pc, #564]	; (8006608 <tcp_slowtmr+0x274>)
 80063d4:	f007 fefc 	bl	800e1d0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	7d1b      	ldrb	r3, [r3, #20]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d106      	bne.n	80063ee <tcp_slowtmr+0x5a>
 80063e0:	4b87      	ldr	r3, [pc, #540]	; (8006600 <tcp_slowtmr+0x26c>)
 80063e2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80063e6:	4989      	ldr	r1, [pc, #548]	; (800660c <tcp_slowtmr+0x278>)
 80063e8:	4887      	ldr	r0, [pc, #540]	; (8006608 <tcp_slowtmr+0x274>)
 80063ea:	f007 fef1 	bl	800e1d0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80063ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f0:	7d1b      	ldrb	r3, [r3, #20]
 80063f2:	2b0a      	cmp	r3, #10
 80063f4:	d106      	bne.n	8006404 <tcp_slowtmr+0x70>
 80063f6:	4b82      	ldr	r3, [pc, #520]	; (8006600 <tcp_slowtmr+0x26c>)
 80063f8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80063fc:	4984      	ldr	r1, [pc, #528]	; (8006610 <tcp_slowtmr+0x27c>)
 80063fe:	4882      	ldr	r0, [pc, #520]	; (8006608 <tcp_slowtmr+0x274>)
 8006400:	f007 fee6 	bl	800e1d0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006406:	7f9a      	ldrb	r2, [r3, #30]
 8006408:	4b7b      	ldr	r3, [pc, #492]	; (80065f8 <tcp_slowtmr+0x264>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	429a      	cmp	r2, r3
 800640e:	d105      	bne.n	800641c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800641a:	e270      	b.n	80068fe <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800641c:	4b76      	ldr	r3, [pc, #472]	; (80065f8 <tcp_slowtmr+0x264>)
 800641e:	781a      	ldrb	r2, [r3, #0]
 8006420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006422:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006424:	2300      	movs	r3, #0
 8006426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006432:	7d1b      	ldrb	r3, [r3, #20]
 8006434:	2b02      	cmp	r3, #2
 8006436:	d10a      	bne.n	800644e <tcp_slowtmr+0xba>
 8006438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800643e:	2b05      	cmp	r3, #5
 8006440:	d905      	bls.n	800644e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006446:	3301      	adds	r3, #1
 8006448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800644c:	e11e      	b.n	800668c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006454:	2b0b      	cmp	r3, #11
 8006456:	d905      	bls.n	8006464 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800645c:	3301      	adds	r3, #1
 800645e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006462:	e113      	b.n	800668c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006466:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800646a:	2b00      	cmp	r3, #0
 800646c:	d075      	beq.n	800655a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800646e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006472:	2b00      	cmp	r3, #0
 8006474:	d006      	beq.n	8006484 <tcp_slowtmr+0xf0>
 8006476:	4b62      	ldr	r3, [pc, #392]	; (8006600 <tcp_slowtmr+0x26c>)
 8006478:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800647c:	4965      	ldr	r1, [pc, #404]	; (8006614 <tcp_slowtmr+0x280>)
 800647e:	4862      	ldr	r0, [pc, #392]	; (8006608 <tcp_slowtmr+0x274>)
 8006480:	f007 fea6 	bl	800e1d0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006488:	2b00      	cmp	r3, #0
 800648a:	d106      	bne.n	800649a <tcp_slowtmr+0x106>
 800648c:	4b5c      	ldr	r3, [pc, #368]	; (8006600 <tcp_slowtmr+0x26c>)
 800648e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006492:	4961      	ldr	r1, [pc, #388]	; (8006618 <tcp_slowtmr+0x284>)
 8006494:	485c      	ldr	r0, [pc, #368]	; (8006608 <tcp_slowtmr+0x274>)
 8006496:	f007 fe9b 	bl	800e1d0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800649a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80064a0:	2b0b      	cmp	r3, #11
 80064a2:	d905      	bls.n	80064b0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80064a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064a8:	3301      	adds	r3, #1
 80064aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80064ae:	e0ed      	b.n	800668c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80064b6:	3b01      	subs	r3, #1
 80064b8:	4a58      	ldr	r2, [pc, #352]	; (800661c <tcp_slowtmr+0x288>)
 80064ba:	5cd3      	ldrb	r3, [r2, r3]
 80064bc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80064be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80064c4:	7c7a      	ldrb	r2, [r7, #17]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d907      	bls.n	80064da <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80064ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80064d0:	3301      	adds	r3, #1
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80064da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80064e0:	7c7a      	ldrb	r2, [r7, #17]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	f200 80d2 	bhi.w	800668c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80064e8:	2301      	movs	r3, #1
 80064ea:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80064ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d108      	bne.n	8006508 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80064f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064f8:	f004 fc26 	bl	800ad48 <tcp_zero_window_probe>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d014      	beq.n	800652c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006502:	2300      	movs	r3, #0
 8006504:	623b      	str	r3, [r7, #32]
 8006506:	e011      	b.n	800652c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800650e:	4619      	mov	r1, r3
 8006510:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006512:	f003 faeb 	bl	8009aec <tcp_split_unsent_seg>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d107      	bne.n	800652c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800651c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800651e:	f003 fd6b 	bl	8009ff8 <tcp_output>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006528:	2300      	movs	r3, #0
 800652a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 80ac 	beq.w	800668c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800653c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006542:	2b06      	cmp	r3, #6
 8006544:	f200 80a2 	bhi.w	800668c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800654e:	3301      	adds	r3, #1
 8006550:	b2da      	uxtb	r2, r3
 8006552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006554:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006558:	e098      	b.n	800668c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006560:	2b00      	cmp	r3, #0
 8006562:	db0f      	blt.n	8006584 <tcp_slowtmr+0x1f0>
 8006564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006566:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800656a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800656e:	4293      	cmp	r3, r2
 8006570:	d008      	beq.n	8006584 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006574:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006578:	b29b      	uxth	r3, r3
 800657a:	3301      	adds	r3, #1
 800657c:	b29b      	uxth	r3, r3
 800657e:	b21a      	sxth	r2, r3
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006586:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800658a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006590:	429a      	cmp	r2, r3
 8006592:	db7b      	blt.n	800668c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006594:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006596:	f004 f821 	bl	800a5dc <tcp_rexmit_rto_prepare>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d007      	beq.n	80065b0 <tcp_slowtmr+0x21c>
 80065a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d171      	bne.n	800668c <tcp_slowtmr+0x2f8>
 80065a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d06d      	beq.n	800668c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80065b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b2:	7d1b      	ldrb	r3, [r3, #20]
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d03a      	beq.n	800662e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065be:	2b0c      	cmp	r3, #12
 80065c0:	bf28      	it	cs
 80065c2:	230c      	movcs	r3, #12
 80065c4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80065c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80065cc:	10db      	asrs	r3, r3, #3
 80065ce:	b21b      	sxth	r3, r3
 80065d0:	461a      	mov	r2, r3
 80065d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80065d8:	4413      	add	r3, r2
 80065da:	7efa      	ldrb	r2, [r7, #27]
 80065dc:	4910      	ldr	r1, [pc, #64]	; (8006620 <tcp_slowtmr+0x28c>)
 80065de:	5c8a      	ldrb	r2, [r1, r2]
 80065e0:	4093      	lsls	r3, r2
 80065e2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80065ea:	4293      	cmp	r3, r2
 80065ec:	dc1a      	bgt.n	8006624 <tcp_slowtmr+0x290>
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	b21a      	sxth	r2, r3
 80065f2:	e019      	b.n	8006628 <tcp_slowtmr+0x294>
 80065f4:	20008b54 	.word	0x20008b54
 80065f8:	200000ce 	.word	0x200000ce
 80065fc:	20008b50 	.word	0x20008b50
 8006600:	08010084 	.word	0x08010084
 8006604:	080103c8 	.word	0x080103c8
 8006608:	080100c8 	.word	0x080100c8
 800660c:	080103f4 	.word	0x080103f4
 8006610:	08010420 	.word	0x08010420
 8006614:	08010450 	.word	0x08010450
 8006618:	08010484 	.word	0x08010484
 800661c:	08012050 	.word	0x08012050
 8006620:	08012040 	.word	0x08012040
 8006624:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006630:	2200      	movs	r2, #0
 8006632:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006636:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006640:	4293      	cmp	r3, r2
 8006642:	bf28      	it	cs
 8006644:	4613      	movcs	r3, r2
 8006646:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006648:	8a7b      	ldrh	r3, [r7, #18]
 800664a:	085b      	lsrs	r3, r3, #1
 800664c:	b29a      	uxth	r2, r3
 800664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006650:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006656:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800665a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	b29b      	uxth	r3, r3
 8006662:	429a      	cmp	r2, r3
 8006664:	d206      	bcs.n	8006674 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006668:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	b29a      	uxth	r2, r3
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006676:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800667e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006680:	2200      	movs	r2, #0
 8006682:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006686:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006688:	f004 f818 	bl	800a6bc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	7d1b      	ldrb	r3, [r3, #20]
 8006690:	2b06      	cmp	r3, #6
 8006692:	d111      	bne.n	80066b8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006696:	8b5b      	ldrh	r3, [r3, #26]
 8006698:	f003 0310 	and.w	r3, r3, #16
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00b      	beq.n	80066b8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066a0:	4b9c      	ldr	r3, [pc, #624]	; (8006914 <tcp_slowtmr+0x580>)
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b28      	cmp	r3, #40	; 0x28
 80066ac:	d904      	bls.n	80066b8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80066ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066b2:	3301      	adds	r3, #1
 80066b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80066b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ba:	7a5b      	ldrb	r3, [r3, #9]
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d04a      	beq.n	800675a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80066c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	d003      	beq.n	80066d4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80066cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ce:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80066d0:	2b07      	cmp	r3, #7
 80066d2:	d142      	bne.n	800675a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066d4:	4b8f      	ldr	r3, [pc, #572]	; (8006914 <tcp_slowtmr+0x580>)
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80066e4:	4b8c      	ldr	r3, [pc, #560]	; (8006918 <tcp_slowtmr+0x584>)
 80066e6:	440b      	add	r3, r1
 80066e8:	498c      	ldr	r1, [pc, #560]	; (800691c <tcp_slowtmr+0x588>)
 80066ea:	fba1 1303 	umull	r1, r3, r1, r3
 80066ee:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d90a      	bls.n	800670a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80066f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066f8:	3301      	adds	r3, #1
 80066fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80066fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006702:	3301      	adds	r3, #1
 8006704:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006708:	e027      	b.n	800675a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800670a:	4b82      	ldr	r3, [pc, #520]	; (8006914 <tcp_slowtmr+0x580>)
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006716:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006720:	4618      	mov	r0, r3
 8006722:	4b7f      	ldr	r3, [pc, #508]	; (8006920 <tcp_slowtmr+0x58c>)
 8006724:	fb03 f300 	mul.w	r3, r3, r0
 8006728:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800672a:	497c      	ldr	r1, [pc, #496]	; (800691c <tcp_slowtmr+0x588>)
 800672c:	fba1 1303 	umull	r1, r3, r1, r3
 8006730:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006732:	429a      	cmp	r2, r3
 8006734:	d911      	bls.n	800675a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8006736:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006738:	f004 fac6 	bl	800acc8 <tcp_keepalive>
 800673c:	4603      	mov	r3, r0
 800673e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8006742:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006746:	2b00      	cmp	r3, #0
 8006748:	d107      	bne.n	800675a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800674a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006750:	3301      	adds	r3, #1
 8006752:	b2da      	uxtb	r2, r3
 8006754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006756:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675e:	2b00      	cmp	r3, #0
 8006760:	d011      	beq.n	8006786 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006762:	4b6c      	ldr	r3, [pc, #432]	; (8006914 <tcp_slowtmr+0x580>)
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	1ad2      	subs	r2, r2, r3
 800676c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006772:	4619      	mov	r1, r3
 8006774:	460b      	mov	r3, r1
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	440b      	add	r3, r1
 800677a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800677c:	429a      	cmp	r2, r3
 800677e:	d302      	bcc.n	8006786 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006780:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006782:	f000 fddd 	bl	8007340 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006788:	7d1b      	ldrb	r3, [r3, #20]
 800678a:	2b03      	cmp	r3, #3
 800678c:	d10b      	bne.n	80067a6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800678e:	4b61      	ldr	r3, [pc, #388]	; (8006914 <tcp_slowtmr+0x580>)
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	2b28      	cmp	r3, #40	; 0x28
 800679a:	d904      	bls.n	80067a6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800679c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067a0:	3301      	adds	r3, #1
 80067a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80067a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a8:	7d1b      	ldrb	r3, [r3, #20]
 80067aa:	2b09      	cmp	r3, #9
 80067ac:	d10b      	bne.n	80067c6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80067ae:	4b59      	ldr	r3, [pc, #356]	; (8006914 <tcp_slowtmr+0x580>)
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	2bf0      	cmp	r3, #240	; 0xf0
 80067ba:	d904      	bls.n	80067c6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 80067bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067c0:	3301      	adds	r3, #1
 80067c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80067c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d060      	beq.n	8006890 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80067ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80067d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067d8:	f000 fbfe 	bl	8006fd8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80067dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d010      	beq.n	8006804 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80067e2:	4b50      	ldr	r3, [pc, #320]	; (8006924 <tcp_slowtmr+0x590>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d106      	bne.n	80067fa <tcp_slowtmr+0x466>
 80067ec:	4b4e      	ldr	r3, [pc, #312]	; (8006928 <tcp_slowtmr+0x594>)
 80067ee:	f240 526d 	movw	r2, #1389	; 0x56d
 80067f2:	494e      	ldr	r1, [pc, #312]	; (800692c <tcp_slowtmr+0x598>)
 80067f4:	484e      	ldr	r0, [pc, #312]	; (8006930 <tcp_slowtmr+0x59c>)
 80067f6:	f007 fceb 	bl	800e1d0 <iprintf>
        prev->next = pcb->next;
 80067fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fc:	68da      	ldr	r2, [r3, #12]
 80067fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006800:	60da      	str	r2, [r3, #12]
 8006802:	e00f      	b.n	8006824 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006804:	4b47      	ldr	r3, [pc, #284]	; (8006924 <tcp_slowtmr+0x590>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800680a:	429a      	cmp	r2, r3
 800680c:	d006      	beq.n	800681c <tcp_slowtmr+0x488>
 800680e:	4b46      	ldr	r3, [pc, #280]	; (8006928 <tcp_slowtmr+0x594>)
 8006810:	f240 5271 	movw	r2, #1393	; 0x571
 8006814:	4947      	ldr	r1, [pc, #284]	; (8006934 <tcp_slowtmr+0x5a0>)
 8006816:	4846      	ldr	r0, [pc, #280]	; (8006930 <tcp_slowtmr+0x59c>)
 8006818:	f007 fcda 	bl	800e1d0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	4a40      	ldr	r2, [pc, #256]	; (8006924 <tcp_slowtmr+0x590>)
 8006822:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006824:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006828:	2b00      	cmp	r3, #0
 800682a:	d013      	beq.n	8006854 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800682c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006832:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006834:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8006836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006838:	3304      	adds	r3, #4
 800683a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800683c:	8ad2      	ldrh	r2, [r2, #22]
 800683e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006840:	8b09      	ldrh	r1, [r1, #24]
 8006842:	9102      	str	r1, [sp, #8]
 8006844:	9201      	str	r2, [sp, #4]
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	462b      	mov	r3, r5
 800684a:	4622      	mov	r2, r4
 800684c:	4601      	mov	r1, r0
 800684e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006850:	f004 f986 	bl	800ab60 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685c:	7d1b      	ldrb	r3, [r3, #20]
 800685e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006862:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800686a:	6838      	ldr	r0, [r7, #0]
 800686c:	f7ff f9f4 	bl	8005c58 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006870:	4b31      	ldr	r3, [pc, #196]	; (8006938 <tcp_slowtmr+0x5a4>)
 8006872:	2200      	movs	r2, #0
 8006874:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d004      	beq.n	8006886 <tcp_slowtmr+0x4f2>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f06f 010c 	mvn.w	r1, #12
 8006882:	68b8      	ldr	r0, [r7, #8]
 8006884:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006886:	4b2c      	ldr	r3, [pc, #176]	; (8006938 <tcp_slowtmr+0x5a4>)
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d037      	beq.n	80068fe <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800688e:	e592      	b.n	80063b6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006892:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	7f1b      	ldrb	r3, [r3, #28]
 800689e:	3301      	adds	r3, #1
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80068a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a8:	7f1a      	ldrb	r2, [r3, #28]
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	7f5b      	ldrb	r3, [r3, #29]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d325      	bcc.n	80068fe <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80068b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b4:	2200      	movs	r2, #0
 80068b6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80068b8:	4b1f      	ldr	r3, [pc, #124]	; (8006938 <tcp_slowtmr+0x5a4>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80068be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00b      	beq.n	80068e0 <tcp_slowtmr+0x54c>
 80068c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068d0:	6912      	ldr	r2, [r2, #16]
 80068d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068d4:	4610      	mov	r0, r2
 80068d6:	4798      	blx	r3
 80068d8:	4603      	mov	r3, r0
 80068da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80068de:	e002      	b.n	80068e6 <tcp_slowtmr+0x552>
 80068e0:	2300      	movs	r3, #0
 80068e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80068e6:	4b14      	ldr	r3, [pc, #80]	; (8006938 <tcp_slowtmr+0x5a4>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d000      	beq.n	80068f0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80068ee:	e562      	b.n	80063b6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80068f0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d102      	bne.n	80068fe <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80068f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068fa:	f003 fb7d 	bl	8009ff8 <tcp_output>
  while (pcb != NULL) {
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006900:	2b00      	cmp	r3, #0
 8006902:	f47f ad5e 	bne.w	80063c2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006906:	2300      	movs	r3, #0
 8006908:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800690a:	4b0c      	ldr	r3, [pc, #48]	; (800693c <tcp_slowtmr+0x5a8>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006910:	e069      	b.n	80069e6 <tcp_slowtmr+0x652>
 8006912:	bf00      	nop
 8006914:	20008b54 	.word	0x20008b54
 8006918:	000a4cb8 	.word	0x000a4cb8
 800691c:	10624dd3 	.word	0x10624dd3
 8006920:	000124f8 	.word	0x000124f8
 8006924:	20008b50 	.word	0x20008b50
 8006928:	08010084 	.word	0x08010084
 800692c:	080104bc 	.word	0x080104bc
 8006930:	080100c8 	.word	0x080100c8
 8006934:	080104e8 	.word	0x080104e8
 8006938:	20008b4c 	.word	0x20008b4c
 800693c:	20008b60 	.word	0x20008b60
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006942:	7d1b      	ldrb	r3, [r3, #20]
 8006944:	2b0a      	cmp	r3, #10
 8006946:	d006      	beq.n	8006956 <tcp_slowtmr+0x5c2>
 8006948:	4b2b      	ldr	r3, [pc, #172]	; (80069f8 <tcp_slowtmr+0x664>)
 800694a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800694e:	492b      	ldr	r1, [pc, #172]	; (80069fc <tcp_slowtmr+0x668>)
 8006950:	482b      	ldr	r0, [pc, #172]	; (8006a00 <tcp_slowtmr+0x66c>)
 8006952:	f007 fc3d 	bl	800e1d0 <iprintf>
    pcb_remove = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800695c:	4b29      	ldr	r3, [pc, #164]	; (8006a04 <tcp_slowtmr+0x670>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2bf0      	cmp	r3, #240	; 0xf0
 8006968:	d904      	bls.n	8006974 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800696a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800696e:	3301      	adds	r3, #1
 8006970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006978:	2b00      	cmp	r3, #0
 800697a:	d02f      	beq.n	80069dc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800697c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800697e:	f000 fb2b 	bl	8006fd8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006984:	2b00      	cmp	r3, #0
 8006986:	d010      	beq.n	80069aa <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006988:	4b1f      	ldr	r3, [pc, #124]	; (8006a08 <tcp_slowtmr+0x674>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800698e:	429a      	cmp	r2, r3
 8006990:	d106      	bne.n	80069a0 <tcp_slowtmr+0x60c>
 8006992:	4b19      	ldr	r3, [pc, #100]	; (80069f8 <tcp_slowtmr+0x664>)
 8006994:	f240 52af 	movw	r2, #1455	; 0x5af
 8006998:	491c      	ldr	r1, [pc, #112]	; (8006a0c <tcp_slowtmr+0x678>)
 800699a:	4819      	ldr	r0, [pc, #100]	; (8006a00 <tcp_slowtmr+0x66c>)
 800699c:	f007 fc18 	bl	800e1d0 <iprintf>
        prev->next = pcb->next;
 80069a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a6:	60da      	str	r2, [r3, #12]
 80069a8:	e00f      	b.n	80069ca <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80069aa:	4b17      	ldr	r3, [pc, #92]	; (8006a08 <tcp_slowtmr+0x674>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d006      	beq.n	80069c2 <tcp_slowtmr+0x62e>
 80069b4:	4b10      	ldr	r3, [pc, #64]	; (80069f8 <tcp_slowtmr+0x664>)
 80069b6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80069ba:	4915      	ldr	r1, [pc, #84]	; (8006a10 <tcp_slowtmr+0x67c>)
 80069bc:	4810      	ldr	r0, [pc, #64]	; (8006a00 <tcp_slowtmr+0x66c>)
 80069be:	f007 fc07 	bl	800e1d0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80069c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	4a10      	ldr	r2, [pc, #64]	; (8006a08 <tcp_slowtmr+0x674>)
 80069c8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80069ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80069d4:	69f8      	ldr	r0, [r7, #28]
 80069d6:	f7ff f93f 	bl	8005c58 <tcp_free>
 80069da:	e004      	b.n	80069e6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80069dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069de:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80069e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1a9      	bne.n	8006940 <tcp_slowtmr+0x5ac>
    }
  }
}
 80069ec:	bf00      	nop
 80069ee:	bf00      	nop
 80069f0:	3730      	adds	r7, #48	; 0x30
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bdb0      	pop	{r4, r5, r7, pc}
 80069f6:	bf00      	nop
 80069f8:	08010084 	.word	0x08010084
 80069fc:	08010514 	.word	0x08010514
 8006a00:	080100c8 	.word	0x080100c8
 8006a04:	20008b54 	.word	0x20008b54
 8006a08:	20008b60 	.word	0x20008b60
 8006a0c:	08010544 	.word	0x08010544
 8006a10:	0801056c 	.word	0x0801056c

08006a14 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006a1a:	4b2d      	ldr	r3, [pc, #180]	; (8006ad0 <tcp_fasttmr+0xbc>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	b2da      	uxtb	r2, r3
 8006a22:	4b2b      	ldr	r3, [pc, #172]	; (8006ad0 <tcp_fasttmr+0xbc>)
 8006a24:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006a26:	4b2b      	ldr	r3, [pc, #172]	; (8006ad4 <tcp_fasttmr+0xc0>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006a2c:	e048      	b.n	8006ac0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	7f9a      	ldrb	r2, [r3, #30]
 8006a32:	4b27      	ldr	r3, [pc, #156]	; (8006ad0 <tcp_fasttmr+0xbc>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d03f      	beq.n	8006aba <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006a3a:	4b25      	ldr	r3, [pc, #148]	; (8006ad0 <tcp_fasttmr+0xbc>)
 8006a3c:	781a      	ldrb	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	8b5b      	ldrh	r3, [r3, #26]
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d010      	beq.n	8006a70 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	8b5b      	ldrh	r3, [r3, #26]
 8006a52:	f043 0302 	orr.w	r3, r3, #2
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f003 facb 	bl	8009ff8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	8b5b      	ldrh	r3, [r3, #26]
 8006a66:	f023 0303 	bic.w	r3, r3, #3
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	8b5b      	ldrh	r3, [r3, #26]
 8006a74:	f003 0308 	and.w	r3, r3, #8
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d009      	beq.n	8006a90 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	8b5b      	ldrh	r3, [r3, #26]
 8006a80:	f023 0308 	bic.w	r3, r3, #8
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7ff fa78 	bl	8005f80 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006a9e:	4b0e      	ldr	r3, [pc, #56]	; (8006ad8 <tcp_fasttmr+0xc4>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f819 	bl	8006adc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006aaa:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <tcp_fasttmr+0xc4>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d000      	beq.n	8006ab4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006ab2:	e7b8      	b.n	8006a26 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	607b      	str	r3, [r7, #4]
 8006ab8:	e002      	b.n	8006ac0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1b3      	bne.n	8006a2e <tcp_fasttmr+0x1a>
    }
  }
}
 8006ac6:	bf00      	nop
 8006ac8:	bf00      	nop
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	200000ce 	.word	0x200000ce
 8006ad4:	20008b50 	.word	0x20008b50
 8006ad8:	20008b4c 	.word	0x20008b4c

08006adc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006adc:	b590      	push	{r4, r7, lr}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d109      	bne.n	8006afe <tcp_process_refused_data+0x22>
 8006aea:	4b37      	ldr	r3, [pc, #220]	; (8006bc8 <tcp_process_refused_data+0xec>)
 8006aec:	f240 6209 	movw	r2, #1545	; 0x609
 8006af0:	4936      	ldr	r1, [pc, #216]	; (8006bcc <tcp_process_refused_data+0xf0>)
 8006af2:	4837      	ldr	r0, [pc, #220]	; (8006bd0 <tcp_process_refused_data+0xf4>)
 8006af4:	f007 fb6c 	bl	800e1d0 <iprintf>
 8006af8:	f06f 030f 	mvn.w	r3, #15
 8006afc:	e060      	b.n	8006bc0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b02:	7b5b      	ldrb	r3, [r3, #13]
 8006b04:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b0a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00b      	beq.n	8006b34 <tcp_process_refused_data+0x58>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6918      	ldr	r0, [r3, #16]
 8006b26:	2300      	movs	r3, #0
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	47a0      	blx	r4
 8006b2e:	4603      	mov	r3, r0
 8006b30:	73fb      	strb	r3, [r7, #15]
 8006b32:	e007      	b.n	8006b44 <tcp_process_refused_data+0x68>
 8006b34:	2300      	movs	r3, #0
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	f000 f8a4 	bl	8006c88 <tcp_recv_null>
 8006b40:	4603      	mov	r3, r0
 8006b42:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d12a      	bne.n	8006ba2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006b4c:	7bbb      	ldrb	r3, [r7, #14]
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d033      	beq.n	8006bbe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006b5e:	d005      	beq.n	8006b6c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b64:	3301      	adds	r3, #1
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00b      	beq.n	8006b8e <tcp_process_refused_data+0xb2>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6918      	ldr	r0, [r3, #16]
 8006b80:	2300      	movs	r3, #0
 8006b82:	2200      	movs	r2, #0
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	47a0      	blx	r4
 8006b88:	4603      	mov	r3, r0
 8006b8a:	73fb      	strb	r3, [r7, #15]
 8006b8c:	e001      	b.n	8006b92 <tcp_process_refused_data+0xb6>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b96:	f113 0f0d 	cmn.w	r3, #13
 8006b9a:	d110      	bne.n	8006bbe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006b9c:	f06f 030c 	mvn.w	r3, #12
 8006ba0:	e00e      	b.n	8006bc0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ba6:	f113 0f0d 	cmn.w	r3, #13
 8006baa:	d102      	bne.n	8006bb2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006bac:	f06f 030c 	mvn.w	r3, #12
 8006bb0:	e006      	b.n	8006bc0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006bb8:	f06f 0304 	mvn.w	r3, #4
 8006bbc:	e000      	b.n	8006bc0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd90      	pop	{r4, r7, pc}
 8006bc8:	08010084 	.word	0x08010084
 8006bcc:	08010594 	.word	0x08010594
 8006bd0:	080100c8 	.word	0x080100c8

08006bd4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006bdc:	e007      	b.n	8006bee <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f80a 	bl	8006bfe <tcp_seg_free>
    seg = next;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1f4      	bne.n	8006bde <tcp_segs_free+0xa>
  }
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b082      	sub	sp, #8
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00c      	beq.n	8006c26 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d004      	beq.n	8006c1e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fe fcdb 	bl	80055d4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	2003      	movs	r0, #3
 8006c22:	f7fd fec5 	bl	80049b0 <memp_free>
  }
}
 8006c26:	bf00      	nop
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
	...

08006c30 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <tcp_seg_copy+0x1c>
 8006c3e:	4b0f      	ldr	r3, [pc, #60]	; (8006c7c <tcp_seg_copy+0x4c>)
 8006c40:	f240 6282 	movw	r2, #1666	; 0x682
 8006c44:	490e      	ldr	r1, [pc, #56]	; (8006c80 <tcp_seg_copy+0x50>)
 8006c46:	480f      	ldr	r0, [pc, #60]	; (8006c84 <tcp_seg_copy+0x54>)
 8006c48:	f007 fac2 	bl	800e1d0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006c4c:	2003      	movs	r0, #3
 8006c4e:	f7fd fe63 	bl	8004918 <memp_malloc>
 8006c52:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <tcp_seg_copy+0x2e>
    return NULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e00a      	b.n	8006c74 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006c5e:	2210      	movs	r2, #16
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f007 fa84 	bl	800e170 <memcpy>
  pbuf_ref(cseg->p);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fe fd51 	bl	8005714 <pbuf_ref>
  return cseg;
 8006c72:	68fb      	ldr	r3, [r7, #12]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	08010084 	.word	0x08010084
 8006c80:	080105d8 	.word	0x080105d8
 8006c84:	080100c8 	.word	0x080100c8

08006c88 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d109      	bne.n	8006cb0 <tcp_recv_null+0x28>
 8006c9c:	4b12      	ldr	r3, [pc, #72]	; (8006ce8 <tcp_recv_null+0x60>)
 8006c9e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006ca2:	4912      	ldr	r1, [pc, #72]	; (8006cec <tcp_recv_null+0x64>)
 8006ca4:	4812      	ldr	r0, [pc, #72]	; (8006cf0 <tcp_recv_null+0x68>)
 8006ca6:	f007 fa93 	bl	800e1d0 <iprintf>
 8006caa:	f06f 030f 	mvn.w	r3, #15
 8006cae:	e016      	b.n	8006cde <tcp_recv_null+0x56>

  if (p != NULL) {
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d009      	beq.n	8006cca <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	891b      	ldrh	r3, [r3, #8]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	68b8      	ldr	r0, [r7, #8]
 8006cbe:	f7ff fb19 	bl	80062f4 <tcp_recved>
    pbuf_free(p);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7fe fc86 	bl	80055d4 <pbuf_free>
 8006cc8:	e008      	b.n	8006cdc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006cca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d104      	bne.n	8006cdc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006cd2:	68b8      	ldr	r0, [r7, #8]
 8006cd4:	f7ff f9be 	bl	8006054 <tcp_close>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	e000      	b.n	8006cde <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	08010084 	.word	0x08010084
 8006cec:	080105f4 	.word	0x080105f4
 8006cf0:	080100c8 	.word	0x080100c8

08006cf4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	db01      	blt.n	8006d0a <tcp_kill_prio+0x16>
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	e000      	b.n	8006d0c <tcp_kill_prio+0x18>
 8006d0a:	237f      	movs	r3, #127	; 0x7f
 8006d0c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006d0e:	7afb      	ldrb	r3, [r7, #11]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d034      	beq.n	8006d7e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006d14:	7afb      	ldrb	r3, [r7, #11]
 8006d16:	3b01      	subs	r3, #1
 8006d18:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d22:	4b19      	ldr	r3, [pc, #100]	; (8006d88 <tcp_kill_prio+0x94>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	e01f      	b.n	8006d6a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	7d5b      	ldrb	r3, [r3, #21]
 8006d2e:	7afa      	ldrb	r2, [r7, #11]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d80c      	bhi.n	8006d4e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006d38:	7afa      	ldrb	r2, [r7, #11]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d112      	bne.n	8006d64 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006d3e:	4b13      	ldr	r3, [pc, #76]	; (8006d8c <tcp_kill_prio+0x98>)
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d80a      	bhi.n	8006d64 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006d4e:	4b0f      	ldr	r3, [pc, #60]	; (8006d8c <tcp_kill_prio+0x98>)
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	7d5b      	ldrb	r3, [r3, #21]
 8006d62:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	617b      	str	r3, [r7, #20]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1dc      	bne.n	8006d2a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d004      	beq.n	8006d80 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006d76:	6938      	ldr	r0, [r7, #16]
 8006d78:	f7ff fa56 	bl	8006228 <tcp_abort>
 8006d7c:	e000      	b.n	8006d80 <tcp_kill_prio+0x8c>
    return;
 8006d7e:	bf00      	nop
  }
}
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20008b50 	.word	0x20008b50
 8006d8c:	20008b54 	.word	0x20008b54

08006d90 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	4603      	mov	r3, r0
 8006d98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d009      	beq.n	8006db4 <tcp_kill_state+0x24>
 8006da0:	79fb      	ldrb	r3, [r7, #7]
 8006da2:	2b09      	cmp	r3, #9
 8006da4:	d006      	beq.n	8006db4 <tcp_kill_state+0x24>
 8006da6:	4b1a      	ldr	r3, [pc, #104]	; (8006e10 <tcp_kill_state+0x80>)
 8006da8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006dac:	4919      	ldr	r1, [pc, #100]	; (8006e14 <tcp_kill_state+0x84>)
 8006dae:	481a      	ldr	r0, [pc, #104]	; (8006e18 <tcp_kill_state+0x88>)
 8006db0:	f007 fa0e 	bl	800e1d0 <iprintf>

  inactivity = 0;
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006db8:	2300      	movs	r3, #0
 8006dba:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006dbc:	4b17      	ldr	r3, [pc, #92]	; (8006e1c <tcp_kill_state+0x8c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	e017      	b.n	8006df4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	7d1b      	ldrb	r3, [r3, #20]
 8006dc8:	79fa      	ldrb	r2, [r7, #7]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d10f      	bne.n	8006dee <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006dce:	4b14      	ldr	r3, [pc, #80]	; (8006e20 <tcp_kill_state+0x90>)
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d807      	bhi.n	8006dee <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006dde:	4b10      	ldr	r3, [pc, #64]	; (8006e20 <tcp_kill_state+0x90>)
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	617b      	str	r3, [r7, #20]
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e4      	bne.n	8006dc4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006e00:	2100      	movs	r1, #0
 8006e02:	6938      	ldr	r0, [r7, #16]
 8006e04:	f7ff f952 	bl	80060ac <tcp_abandon>
  }
}
 8006e08:	bf00      	nop
 8006e0a:	3718      	adds	r7, #24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	08010084 	.word	0x08010084
 8006e14:	08010610 	.word	0x08010610
 8006e18:	080100c8 	.word	0x080100c8
 8006e1c:	20008b50 	.word	0x20008b50
 8006e20:	20008b54 	.word	0x20008b54

08006e24 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e32:	4b12      	ldr	r3, [pc, #72]	; (8006e7c <tcp_kill_timewait+0x58>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	e012      	b.n	8006e60 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006e3a:	4b11      	ldr	r3, [pc, #68]	; (8006e80 <tcp_kill_timewait+0x5c>)
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d807      	bhi.n	8006e5a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006e4a:	4b0d      	ldr	r3, [pc, #52]	; (8006e80 <tcp_kill_timewait+0x5c>)
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1e9      	bne.n	8006e3a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006e6c:	68b8      	ldr	r0, [r7, #8]
 8006e6e:	f7ff f9db 	bl	8006228 <tcp_abort>
  }
}
 8006e72:	bf00      	nop
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	20008b60 	.word	0x20008b60
 8006e80:	20008b54 	.word	0x20008b54

08006e84 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006e8a:	4b10      	ldr	r3, [pc, #64]	; (8006ecc <tcp_handle_closepend+0x48>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006e90:	e014      	b.n	8006ebc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	8b5b      	ldrh	r3, [r3, #26]
 8006e9c:	f003 0308 	and.w	r3, r3, #8
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d009      	beq.n	8006eb8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	8b5b      	ldrh	r3, [r3, #26]
 8006ea8:	f023 0308 	bic.w	r3, r3, #8
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7ff f864 	bl	8005f80 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1e7      	bne.n	8006e92 <tcp_handle_closepend+0xe>
  }
}
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20008b50 	.word	0x20008b50

08006ed0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006eda:	2001      	movs	r0, #1
 8006edc:	f7fd fd1c 	bl	8004918 <memp_malloc>
 8006ee0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d126      	bne.n	8006f36 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006ee8:	f7ff ffcc 	bl	8006e84 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006eec:	f7ff ff9a 	bl	8006e24 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	f7fd fd11 	bl	8004918 <memp_malloc>
 8006ef6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d11b      	bne.n	8006f36 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006efe:	2009      	movs	r0, #9
 8006f00:	f7ff ff46 	bl	8006d90 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006f04:	2001      	movs	r0, #1
 8006f06:	f7fd fd07 	bl	8004918 <memp_malloc>
 8006f0a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d111      	bne.n	8006f36 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006f12:	2008      	movs	r0, #8
 8006f14:	f7ff ff3c 	bl	8006d90 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006f18:	2001      	movs	r0, #1
 8006f1a:	f7fd fcfd 	bl	8004918 <memp_malloc>
 8006f1e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d107      	bne.n	8006f36 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006f26:	79fb      	ldrb	r3, [r7, #7]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7ff fee3 	bl	8006cf4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006f2e:	2001      	movs	r0, #1
 8006f30:	f7fd fcf2 	bl	8004918 <memp_malloc>
 8006f34:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d03f      	beq.n	8006fbc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006f3c:	229c      	movs	r2, #156	; 0x9c
 8006f3e:	2100      	movs	r1, #0
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f007 f93d 	bl	800e1c0 <memset>
    pcb->prio = prio;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	79fa      	ldrb	r2, [r7, #7]
 8006f4a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006f52:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	22ff      	movs	r2, #255	; 0xff
 8006f6a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006f72:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2206      	movs	r2, #6
 8006f78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2206      	movs	r2, #6
 8006f80:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f88:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006f92:	4b0d      	ldr	r3, [pc, #52]	; (8006fc8 <tcp_alloc+0xf8>)
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006f9a:	4b0c      	ldr	r3, [pc, #48]	; (8006fcc <tcp_alloc+0xfc>)
 8006f9c:	781a      	ldrb	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006fa8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4a08      	ldr	r2, [pc, #32]	; (8006fd0 <tcp_alloc+0x100>)
 8006fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4a07      	ldr	r2, [pc, #28]	; (8006fd4 <tcp_alloc+0x104>)
 8006fb8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20008b54 	.word	0x20008b54
 8006fcc:	200000ce 	.word	0x200000ce
 8006fd0:	08006c89 	.word	0x08006c89
 8006fd4:	006ddd00 	.word	0x006ddd00

08006fd8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d107      	bne.n	8006ff6 <tcp_pcb_purge+0x1e>
 8006fe6:	4b21      	ldr	r3, [pc, #132]	; (800706c <tcp_pcb_purge+0x94>)
 8006fe8:	f640 0251 	movw	r2, #2129	; 0x851
 8006fec:	4920      	ldr	r1, [pc, #128]	; (8007070 <tcp_pcb_purge+0x98>)
 8006fee:	4821      	ldr	r0, [pc, #132]	; (8007074 <tcp_pcb_purge+0x9c>)
 8006ff0:	f007 f8ee 	bl	800e1d0 <iprintf>
 8006ff4:	e037      	b.n	8007066 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	7d1b      	ldrb	r3, [r3, #20]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d033      	beq.n	8007066 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007002:	2b0a      	cmp	r3, #10
 8007004:	d02f      	beq.n	8007066 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800700a:	2b01      	cmp	r3, #1
 800700c:	d02b      	beq.n	8007066 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007012:	2b00      	cmp	r3, #0
 8007014:	d007      	beq.n	8007026 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fada 	bl	80055d4 <pbuf_free>
      pcb->refused_data = NULL;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800702a:	2b00      	cmp	r3, #0
 800702c:	d002      	beq.n	8007034 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f986 	bl	8007340 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800703a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007040:	4618      	mov	r0, r3
 8007042:	f7ff fdc7 	bl	8006bd4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704a:	4618      	mov	r0, r3
 800704c:	f7ff fdc2 	bl	8006bd4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	66da      	str	r2, [r3, #108]	; 0x6c
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	08010084 	.word	0x08010084
 8007070:	080106d0 	.word	0x080106d0
 8007074:	080100c8 	.word	0x080100c8

08007078 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d106      	bne.n	8007096 <tcp_pcb_remove+0x1e>
 8007088:	4b3e      	ldr	r3, [pc, #248]	; (8007184 <tcp_pcb_remove+0x10c>)
 800708a:	f640 0283 	movw	r2, #2179	; 0x883
 800708e:	493e      	ldr	r1, [pc, #248]	; (8007188 <tcp_pcb_remove+0x110>)
 8007090:	483e      	ldr	r0, [pc, #248]	; (800718c <tcp_pcb_remove+0x114>)
 8007092:	f007 f89d 	bl	800e1d0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d106      	bne.n	80070aa <tcp_pcb_remove+0x32>
 800709c:	4b39      	ldr	r3, [pc, #228]	; (8007184 <tcp_pcb_remove+0x10c>)
 800709e:	f640 0284 	movw	r2, #2180	; 0x884
 80070a2:	493b      	ldr	r1, [pc, #236]	; (8007190 <tcp_pcb_remove+0x118>)
 80070a4:	4839      	ldr	r0, [pc, #228]	; (800718c <tcp_pcb_remove+0x114>)
 80070a6:	f007 f893 	bl	800e1d0 <iprintf>

  TCP_RMV(pcblist, pcb);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d105      	bne.n	80070c0 <tcp_pcb_remove+0x48>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	e013      	b.n	80070e8 <tcp_pcb_remove+0x70>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	e00c      	b.n	80070e2 <tcp_pcb_remove+0x6a>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d104      	bne.n	80070dc <tcp_pcb_remove+0x64>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	60da      	str	r2, [r3, #12]
 80070da:	e005      	b.n	80070e8 <tcp_pcb_remove+0x70>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1ef      	bne.n	80070c8 <tcp_pcb_remove+0x50>
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2200      	movs	r2, #0
 80070ec:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80070ee:	6838      	ldr	r0, [r7, #0]
 80070f0:	f7ff ff72 	bl	8006fd8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	7d1b      	ldrb	r3, [r3, #20]
 80070f8:	2b0a      	cmp	r3, #10
 80070fa:	d013      	beq.n	8007124 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007100:	2b01      	cmp	r3, #1
 8007102:	d00f      	beq.n	8007124 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	8b5b      	ldrh	r3, [r3, #26]
 8007108:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800710c:	2b00      	cmp	r3, #0
 800710e:	d009      	beq.n	8007124 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	8b5b      	ldrh	r3, [r3, #26]
 8007114:	f043 0302 	orr.w	r3, r3, #2
 8007118:	b29a      	uxth	r2, r3
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800711e:	6838      	ldr	r0, [r7, #0]
 8007120:	f002 ff6a 	bl	8009ff8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	7d1b      	ldrb	r3, [r3, #20]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d020      	beq.n	800716e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007130:	2b00      	cmp	r3, #0
 8007132:	d006      	beq.n	8007142 <tcp_pcb_remove+0xca>
 8007134:	4b13      	ldr	r3, [pc, #76]	; (8007184 <tcp_pcb_remove+0x10c>)
 8007136:	f640 0293 	movw	r2, #2195	; 0x893
 800713a:	4916      	ldr	r1, [pc, #88]	; (8007194 <tcp_pcb_remove+0x11c>)
 800713c:	4813      	ldr	r0, [pc, #76]	; (800718c <tcp_pcb_remove+0x114>)
 800713e:	f007 f847 	bl	800e1d0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007146:	2b00      	cmp	r3, #0
 8007148:	d006      	beq.n	8007158 <tcp_pcb_remove+0xe0>
 800714a:	4b0e      	ldr	r3, [pc, #56]	; (8007184 <tcp_pcb_remove+0x10c>)
 800714c:	f640 0294 	movw	r2, #2196	; 0x894
 8007150:	4911      	ldr	r1, [pc, #68]	; (8007198 <tcp_pcb_remove+0x120>)
 8007152:	480e      	ldr	r0, [pc, #56]	; (800718c <tcp_pcb_remove+0x114>)
 8007154:	f007 f83c 	bl	800e1d0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800715c:	2b00      	cmp	r3, #0
 800715e:	d006      	beq.n	800716e <tcp_pcb_remove+0xf6>
 8007160:	4b08      	ldr	r3, [pc, #32]	; (8007184 <tcp_pcb_remove+0x10c>)
 8007162:	f640 0296 	movw	r2, #2198	; 0x896
 8007166:	490d      	ldr	r1, [pc, #52]	; (800719c <tcp_pcb_remove+0x124>)
 8007168:	4808      	ldr	r0, [pc, #32]	; (800718c <tcp_pcb_remove+0x114>)
 800716a:	f007 f831 	bl	800e1d0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	2200      	movs	r2, #0
 8007172:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2200      	movs	r2, #0
 8007178:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	08010084 	.word	0x08010084
 8007188:	080106ec 	.word	0x080106ec
 800718c:	080100c8 	.word	0x080100c8
 8007190:	08010708 	.word	0x08010708
 8007194:	08010728 	.word	0x08010728
 8007198:	08010740 	.word	0x08010740
 800719c:	0801075c 	.word	0x0801075c

080071a0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d106      	bne.n	80071bc <tcp_next_iss+0x1c>
 80071ae:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <tcp_next_iss+0x38>)
 80071b0:	f640 02af 	movw	r2, #2223	; 0x8af
 80071b4:	4909      	ldr	r1, [pc, #36]	; (80071dc <tcp_next_iss+0x3c>)
 80071b6:	480a      	ldr	r0, [pc, #40]	; (80071e0 <tcp_next_iss+0x40>)
 80071b8:	f007 f80a 	bl	800e1d0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80071bc:	4b09      	ldr	r3, [pc, #36]	; (80071e4 <tcp_next_iss+0x44>)
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	4b09      	ldr	r3, [pc, #36]	; (80071e8 <tcp_next_iss+0x48>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4413      	add	r3, r2
 80071c6:	4a07      	ldr	r2, [pc, #28]	; (80071e4 <tcp_next_iss+0x44>)
 80071c8:	6013      	str	r3, [r2, #0]
  return iss;
 80071ca:	4b06      	ldr	r3, [pc, #24]	; (80071e4 <tcp_next_iss+0x44>)
 80071cc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	08010084 	.word	0x08010084
 80071dc:	08010774 	.word	0x08010774
 80071e0:	080100c8 	.word	0x080100c8
 80071e4:	2000000c 	.word	0x2000000c
 80071e8:	20008b54 	.word	0x20008b54

080071ec <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	4603      	mov	r3, r0
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d106      	bne.n	800720e <tcp_eff_send_mss_netif+0x22>
 8007200:	4b14      	ldr	r3, [pc, #80]	; (8007254 <tcp_eff_send_mss_netif+0x68>)
 8007202:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007206:	4914      	ldr	r1, [pc, #80]	; (8007258 <tcp_eff_send_mss_netif+0x6c>)
 8007208:	4814      	ldr	r0, [pc, #80]	; (800725c <tcp_eff_send_mss_netif+0x70>)
 800720a:	f006 ffe1 	bl	800e1d0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007214:	89fb      	ldrh	r3, [r7, #14]
 8007216:	e019      	b.n	800724c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800721c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800721e:	8afb      	ldrh	r3, [r7, #22]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d012      	beq.n	800724a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007224:	2328      	movs	r3, #40	; 0x28
 8007226:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007228:	8afa      	ldrh	r2, [r7, #22]
 800722a:	8abb      	ldrh	r3, [r7, #20]
 800722c:	429a      	cmp	r2, r3
 800722e:	d904      	bls.n	800723a <tcp_eff_send_mss_netif+0x4e>
 8007230:	8afa      	ldrh	r2, [r7, #22]
 8007232:	8abb      	ldrh	r3, [r7, #20]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	b29b      	uxth	r3, r3
 8007238:	e000      	b.n	800723c <tcp_eff_send_mss_netif+0x50>
 800723a:	2300      	movs	r3, #0
 800723c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800723e:	8a7a      	ldrh	r2, [r7, #18]
 8007240:	89fb      	ldrh	r3, [r7, #14]
 8007242:	4293      	cmp	r3, r2
 8007244:	bf28      	it	cs
 8007246:	4613      	movcs	r3, r2
 8007248:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800724a:	89fb      	ldrh	r3, [r7, #14]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3718      	adds	r7, #24
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	08010084 	.word	0x08010084
 8007258:	08010790 	.word	0x08010790
 800725c:	080100c8 	.word	0x080100c8

08007260 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d119      	bne.n	80072a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007274:	4b10      	ldr	r3, [pc, #64]	; (80072b8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007276:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800727a:	4910      	ldr	r1, [pc, #64]	; (80072bc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800727c:	4810      	ldr	r0, [pc, #64]	; (80072c0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800727e:	f006 ffa7 	bl	800e1d0 <iprintf>

  while (pcb != NULL) {
 8007282:	e011      	b.n	80072a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	429a      	cmp	r2, r3
 800728e:	d108      	bne.n	80072a2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f7fe ffc6 	bl	8006228 <tcp_abort>
      pcb = next;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	60fb      	str	r3, [r7, #12]
 80072a0:	e002      	b.n	80072a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1ea      	bne.n	8007284 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80072ae:	bf00      	nop
 80072b0:	bf00      	nop
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	08010084 	.word	0x08010084
 80072bc:	080107b8 	.word	0x080107b8
 80072c0:	080100c8 	.word	0x080100c8

080072c4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d02a      	beq.n	800732a <tcp_netif_ip_addr_changed+0x66>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d026      	beq.n	800732a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80072dc:	4b15      	ldr	r3, [pc, #84]	; (8007334 <tcp_netif_ip_addr_changed+0x70>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff ffbc 	bl	8007260 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80072e8:	4b13      	ldr	r3, [pc, #76]	; (8007338 <tcp_netif_ip_addr_changed+0x74>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff ffb6 	bl	8007260 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d017      	beq.n	800732a <tcp_netif_ip_addr_changed+0x66>
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d013      	beq.n	800732a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007302:	4b0e      	ldr	r3, [pc, #56]	; (800733c <tcp_netif_ip_addr_changed+0x78>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	e00c      	b.n	8007324 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	429a      	cmp	r2, r3
 8007314:	d103      	bne.n	800731e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	60fb      	str	r3, [r7, #12]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1ef      	bne.n	800730a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800732a:	bf00      	nop
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20008b50 	.word	0x20008b50
 8007338:	20008b5c 	.word	0x20008b5c
 800733c:	20008b58 	.word	0x20008b58

08007340 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800734c:	2b00      	cmp	r3, #0
 800734e:	d007      	beq.n	8007360 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007354:	4618      	mov	r0, r3
 8007356:	f7ff fc3d 	bl	8006bd4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007368:	b590      	push	{r4, r7, lr}
 800736a:	b08d      	sub	sp, #52	; 0x34
 800736c:	af04      	add	r7, sp, #16
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d105      	bne.n	8007384 <tcp_input+0x1c>
 8007378:	4b9b      	ldr	r3, [pc, #620]	; (80075e8 <tcp_input+0x280>)
 800737a:	2283      	movs	r2, #131	; 0x83
 800737c:	499b      	ldr	r1, [pc, #620]	; (80075ec <tcp_input+0x284>)
 800737e:	489c      	ldr	r0, [pc, #624]	; (80075f0 <tcp_input+0x288>)
 8007380:	f006 ff26 	bl	800e1d0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	4a9a      	ldr	r2, [pc, #616]	; (80075f4 <tcp_input+0x28c>)
 800738a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	895b      	ldrh	r3, [r3, #10]
 8007390:	2b13      	cmp	r3, #19
 8007392:	f240 83c4 	bls.w	8007b1e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007396:	4b98      	ldr	r3, [pc, #608]	; (80075f8 <tcp_input+0x290>)
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	4a97      	ldr	r2, [pc, #604]	; (80075f8 <tcp_input+0x290>)
 800739c:	6812      	ldr	r2, [r2, #0]
 800739e:	4611      	mov	r1, r2
 80073a0:	4618      	mov	r0, r3
 80073a2:	f005 ff63 	bl	800d26c <ip4_addr_isbroadcast_u32>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f040 83ba 	bne.w	8007b22 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80073ae:	4b92      	ldr	r3, [pc, #584]	; (80075f8 <tcp_input+0x290>)
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80073b6:	2be0      	cmp	r3, #224	; 0xe0
 80073b8:	f000 83b3 	beq.w	8007b22 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80073bc:	4b8d      	ldr	r3, [pc, #564]	; (80075f4 <tcp_input+0x28c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	899b      	ldrh	r3, [r3, #12]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fc fe51 	bl	800406c <lwip_htons>
 80073ca:	4603      	mov	r3, r0
 80073cc:	0b1b      	lsrs	r3, r3, #12
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80073d6:	7cbb      	ldrb	r3, [r7, #18]
 80073d8:	2b13      	cmp	r3, #19
 80073da:	f240 83a4 	bls.w	8007b26 <tcp_input+0x7be>
 80073de:	7cbb      	ldrb	r3, [r7, #18]
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	891b      	ldrh	r3, [r3, #8]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	f200 839d 	bhi.w	8007b26 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80073ec:	7cbb      	ldrb	r3, [r7, #18]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	3b14      	subs	r3, #20
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	4b81      	ldr	r3, [pc, #516]	; (80075fc <tcp_input+0x294>)
 80073f6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80073f8:	4b81      	ldr	r3, [pc, #516]	; (8007600 <tcp_input+0x298>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	895a      	ldrh	r2, [r3, #10]
 8007402:	7cbb      	ldrb	r3, [r7, #18]
 8007404:	b29b      	uxth	r3, r3
 8007406:	429a      	cmp	r2, r3
 8007408:	d309      	bcc.n	800741e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800740a:	4b7c      	ldr	r3, [pc, #496]	; (80075fc <tcp_input+0x294>)
 800740c:	881a      	ldrh	r2, [r3, #0]
 800740e:	4b7d      	ldr	r3, [pc, #500]	; (8007604 <tcp_input+0x29c>)
 8007410:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007412:	7cbb      	ldrb	r3, [r7, #18]
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7fe f856 	bl	80054c8 <pbuf_remove_header>
 800741c:	e04e      	b.n	80074bc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d105      	bne.n	8007432 <tcp_input+0xca>
 8007426:	4b70      	ldr	r3, [pc, #448]	; (80075e8 <tcp_input+0x280>)
 8007428:	22c2      	movs	r2, #194	; 0xc2
 800742a:	4977      	ldr	r1, [pc, #476]	; (8007608 <tcp_input+0x2a0>)
 800742c:	4870      	ldr	r0, [pc, #448]	; (80075f0 <tcp_input+0x288>)
 800742e:	f006 fecf 	bl	800e1d0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007432:	2114      	movs	r1, #20
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7fe f847 	bl	80054c8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	895a      	ldrh	r2, [r3, #10]
 800743e:	4b71      	ldr	r3, [pc, #452]	; (8007604 <tcp_input+0x29c>)
 8007440:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007442:	4b6e      	ldr	r3, [pc, #440]	; (80075fc <tcp_input+0x294>)
 8007444:	881a      	ldrh	r2, [r3, #0]
 8007446:	4b6f      	ldr	r3, [pc, #444]	; (8007604 <tcp_input+0x29c>)
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800744e:	4b6d      	ldr	r3, [pc, #436]	; (8007604 <tcp_input+0x29c>)
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7fe f837 	bl	80054c8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	895b      	ldrh	r3, [r3, #10]
 8007460:	8a3a      	ldrh	r2, [r7, #16]
 8007462:	429a      	cmp	r2, r3
 8007464:	f200 8361 	bhi.w	8007b2a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	4a64      	ldr	r2, [pc, #400]	; (8007600 <tcp_input+0x298>)
 8007470:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	8a3a      	ldrh	r2, [r7, #16]
 8007478:	4611      	mov	r1, r2
 800747a:	4618      	mov	r0, r3
 800747c:	f7fe f824 	bl	80054c8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	891a      	ldrh	r2, [r3, #8]
 8007484:	8a3b      	ldrh	r3, [r7, #16]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	b29a      	uxth	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	895b      	ldrh	r3, [r3, #10]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d005      	beq.n	80074a2 <tcp_input+0x13a>
 8007496:	4b54      	ldr	r3, [pc, #336]	; (80075e8 <tcp_input+0x280>)
 8007498:	22df      	movs	r2, #223	; 0xdf
 800749a:	495c      	ldr	r1, [pc, #368]	; (800760c <tcp_input+0x2a4>)
 800749c:	4854      	ldr	r0, [pc, #336]	; (80075f0 <tcp_input+0x288>)
 800749e:	f006 fe97 	bl	800e1d0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	891a      	ldrh	r2, [r3, #8]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	891b      	ldrh	r3, [r3, #8]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d005      	beq.n	80074bc <tcp_input+0x154>
 80074b0:	4b4d      	ldr	r3, [pc, #308]	; (80075e8 <tcp_input+0x280>)
 80074b2:	22e0      	movs	r2, #224	; 0xe0
 80074b4:	4956      	ldr	r1, [pc, #344]	; (8007610 <tcp_input+0x2a8>)
 80074b6:	484e      	ldr	r0, [pc, #312]	; (80075f0 <tcp_input+0x288>)
 80074b8:	f006 fe8a 	bl	800e1d0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80074bc:	4b4d      	ldr	r3, [pc, #308]	; (80075f4 <tcp_input+0x28c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	4a4b      	ldr	r2, [pc, #300]	; (80075f4 <tcp_input+0x28c>)
 80074c6:	6814      	ldr	r4, [r2, #0]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7fc fdcf 	bl	800406c <lwip_htons>
 80074ce:	4603      	mov	r3, r0
 80074d0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80074d2:	4b48      	ldr	r3, [pc, #288]	; (80075f4 <tcp_input+0x28c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	885b      	ldrh	r3, [r3, #2]
 80074d8:	b29b      	uxth	r3, r3
 80074da:	4a46      	ldr	r2, [pc, #280]	; (80075f4 <tcp_input+0x28c>)
 80074dc:	6814      	ldr	r4, [r2, #0]
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fc fdc4 	bl	800406c <lwip_htons>
 80074e4:	4603      	mov	r3, r0
 80074e6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80074e8:	4b42      	ldr	r3, [pc, #264]	; (80075f4 <tcp_input+0x28c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	4a41      	ldr	r2, [pc, #260]	; (80075f4 <tcp_input+0x28c>)
 80074f0:	6814      	ldr	r4, [r2, #0]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fc fdcf 	bl	8004096 <lwip_htonl>
 80074f8:	4603      	mov	r3, r0
 80074fa:	6063      	str	r3, [r4, #4]
 80074fc:	6863      	ldr	r3, [r4, #4]
 80074fe:	4a45      	ldr	r2, [pc, #276]	; (8007614 <tcp_input+0x2ac>)
 8007500:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007502:	4b3c      	ldr	r3, [pc, #240]	; (80075f4 <tcp_input+0x28c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	4a3a      	ldr	r2, [pc, #232]	; (80075f4 <tcp_input+0x28c>)
 800750a:	6814      	ldr	r4, [r2, #0]
 800750c:	4618      	mov	r0, r3
 800750e:	f7fc fdc2 	bl	8004096 <lwip_htonl>
 8007512:	4603      	mov	r3, r0
 8007514:	60a3      	str	r3, [r4, #8]
 8007516:	68a3      	ldr	r3, [r4, #8]
 8007518:	4a3f      	ldr	r2, [pc, #252]	; (8007618 <tcp_input+0x2b0>)
 800751a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800751c:	4b35      	ldr	r3, [pc, #212]	; (80075f4 <tcp_input+0x28c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	89db      	ldrh	r3, [r3, #14]
 8007522:	b29b      	uxth	r3, r3
 8007524:	4a33      	ldr	r2, [pc, #204]	; (80075f4 <tcp_input+0x28c>)
 8007526:	6814      	ldr	r4, [r2, #0]
 8007528:	4618      	mov	r0, r3
 800752a:	f7fc fd9f 	bl	800406c <lwip_htons>
 800752e:	4603      	mov	r3, r0
 8007530:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007532:	4b30      	ldr	r3, [pc, #192]	; (80075f4 <tcp_input+0x28c>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	899b      	ldrh	r3, [r3, #12]
 8007538:	b29b      	uxth	r3, r3
 800753a:	4618      	mov	r0, r3
 800753c:	f7fc fd96 	bl	800406c <lwip_htons>
 8007540:	4603      	mov	r3, r0
 8007542:	b2db      	uxtb	r3, r3
 8007544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007548:	b2da      	uxtb	r2, r3
 800754a:	4b34      	ldr	r3, [pc, #208]	; (800761c <tcp_input+0x2b4>)
 800754c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	891a      	ldrh	r2, [r3, #8]
 8007552:	4b33      	ldr	r3, [pc, #204]	; (8007620 <tcp_input+0x2b8>)
 8007554:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007556:	4b31      	ldr	r3, [pc, #196]	; (800761c <tcp_input+0x2b4>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	f003 0303 	and.w	r3, r3, #3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00c      	beq.n	800757c <tcp_input+0x214>
    tcplen++;
 8007562:	4b2f      	ldr	r3, [pc, #188]	; (8007620 <tcp_input+0x2b8>)
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	3301      	adds	r3, #1
 8007568:	b29a      	uxth	r2, r3
 800756a:	4b2d      	ldr	r3, [pc, #180]	; (8007620 <tcp_input+0x2b8>)
 800756c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	891a      	ldrh	r2, [r3, #8]
 8007572:	4b2b      	ldr	r3, [pc, #172]	; (8007620 <tcp_input+0x2b8>)
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	429a      	cmp	r2, r3
 8007578:	f200 82d9 	bhi.w	8007b2e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800757c:	2300      	movs	r3, #0
 800757e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007580:	4b28      	ldr	r3, [pc, #160]	; (8007624 <tcp_input+0x2bc>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	61fb      	str	r3, [r7, #28]
 8007586:	e09d      	b.n	80076c4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	7d1b      	ldrb	r3, [r3, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d105      	bne.n	800759c <tcp_input+0x234>
 8007590:	4b15      	ldr	r3, [pc, #84]	; (80075e8 <tcp_input+0x280>)
 8007592:	22fb      	movs	r2, #251	; 0xfb
 8007594:	4924      	ldr	r1, [pc, #144]	; (8007628 <tcp_input+0x2c0>)
 8007596:	4816      	ldr	r0, [pc, #88]	; (80075f0 <tcp_input+0x288>)
 8007598:	f006 fe1a 	bl	800e1d0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	7d1b      	ldrb	r3, [r3, #20]
 80075a0:	2b0a      	cmp	r3, #10
 80075a2:	d105      	bne.n	80075b0 <tcp_input+0x248>
 80075a4:	4b10      	ldr	r3, [pc, #64]	; (80075e8 <tcp_input+0x280>)
 80075a6:	22fc      	movs	r2, #252	; 0xfc
 80075a8:	4920      	ldr	r1, [pc, #128]	; (800762c <tcp_input+0x2c4>)
 80075aa:	4811      	ldr	r0, [pc, #68]	; (80075f0 <tcp_input+0x288>)
 80075ac:	f006 fe10 	bl	800e1d0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	7d1b      	ldrb	r3, [r3, #20]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d105      	bne.n	80075c4 <tcp_input+0x25c>
 80075b8:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <tcp_input+0x280>)
 80075ba:	22fd      	movs	r2, #253	; 0xfd
 80075bc:	491c      	ldr	r1, [pc, #112]	; (8007630 <tcp_input+0x2c8>)
 80075be:	480c      	ldr	r0, [pc, #48]	; (80075f0 <tcp_input+0x288>)
 80075c0:	f006 fe06 	bl	800e1d0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	7a1b      	ldrb	r3, [r3, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d033      	beq.n	8007634 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	7a1a      	ldrb	r2, [r3, #8]
 80075d0:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <tcp_input+0x290>)
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075d8:	3301      	adds	r3, #1
 80075da:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80075dc:	429a      	cmp	r2, r3
 80075de:	d029      	beq.n	8007634 <tcp_input+0x2cc>
      prev = pcb;
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	61bb      	str	r3, [r7, #24]
      continue;
 80075e4:	e06b      	b.n	80076be <tcp_input+0x356>
 80075e6:	bf00      	nop
 80075e8:	080107ec 	.word	0x080107ec
 80075ec:	08010820 	.word	0x08010820
 80075f0:	08010838 	.word	0x08010838
 80075f4:	200000e0 	.word	0x200000e0
 80075f8:	2000344c 	.word	0x2000344c
 80075fc:	200000e4 	.word	0x200000e4
 8007600:	200000e8 	.word	0x200000e8
 8007604:	200000e6 	.word	0x200000e6
 8007608:	08010860 	.word	0x08010860
 800760c:	08010870 	.word	0x08010870
 8007610:	0801087c 	.word	0x0801087c
 8007614:	200000f0 	.word	0x200000f0
 8007618:	200000f4 	.word	0x200000f4
 800761c:	200000fc 	.word	0x200000fc
 8007620:	200000fa 	.word	0x200000fa
 8007624:	20008b50 	.word	0x20008b50
 8007628:	0801089c 	.word	0x0801089c
 800762c:	080108c4 	.word	0x080108c4
 8007630:	080108f0 	.word	0x080108f0
    }

    if (pcb->remote_port == tcphdr->src &&
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	8b1a      	ldrh	r2, [r3, #24]
 8007638:	4b94      	ldr	r3, [pc, #592]	; (800788c <tcp_input+0x524>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	b29b      	uxth	r3, r3
 8007640:	429a      	cmp	r2, r3
 8007642:	d13a      	bne.n	80076ba <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	8ada      	ldrh	r2, [r3, #22]
 8007648:	4b90      	ldr	r3, [pc, #576]	; (800788c <tcp_input+0x524>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	885b      	ldrh	r3, [r3, #2]
 800764e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007650:	429a      	cmp	r2, r3
 8007652:	d132      	bne.n	80076ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	4b8d      	ldr	r3, [pc, #564]	; (8007890 <tcp_input+0x528>)
 800765a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800765c:	429a      	cmp	r2, r3
 800765e:	d12c      	bne.n	80076ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	4b8a      	ldr	r3, [pc, #552]	; (8007890 <tcp_input+0x528>)
 8007666:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007668:	429a      	cmp	r2, r3
 800766a:	d126      	bne.n	80076ba <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	69fa      	ldr	r2, [r7, #28]
 8007672:	429a      	cmp	r2, r3
 8007674:	d106      	bne.n	8007684 <tcp_input+0x31c>
 8007676:	4b87      	ldr	r3, [pc, #540]	; (8007894 <tcp_input+0x52c>)
 8007678:	f240 120d 	movw	r2, #269	; 0x10d
 800767c:	4986      	ldr	r1, [pc, #536]	; (8007898 <tcp_input+0x530>)
 800767e:	4887      	ldr	r0, [pc, #540]	; (800789c <tcp_input+0x534>)
 8007680:	f006 fda6 	bl	800e1d0 <iprintf>
      if (prev != NULL) {
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <tcp_input+0x338>
        prev->next = pcb->next;
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007692:	4b83      	ldr	r3, [pc, #524]	; (80078a0 <tcp_input+0x538>)
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800769a:	4a81      	ldr	r2, [pc, #516]	; (80078a0 <tcp_input+0x538>)
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	69fa      	ldr	r2, [r7, #28]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d111      	bne.n	80076ce <tcp_input+0x366>
 80076aa:	4b7a      	ldr	r3, [pc, #488]	; (8007894 <tcp_input+0x52c>)
 80076ac:	f240 1215 	movw	r2, #277	; 0x115
 80076b0:	497c      	ldr	r1, [pc, #496]	; (80078a4 <tcp_input+0x53c>)
 80076b2:	487a      	ldr	r0, [pc, #488]	; (800789c <tcp_input+0x534>)
 80076b4:	f006 fd8c 	bl	800e1d0 <iprintf>
      break;
 80076b8:	e009      	b.n	80076ce <tcp_input+0x366>
    }
    prev = pcb;
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	61fb      	str	r3, [r7, #28]
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f47f af5e 	bne.w	8007588 <tcp_input+0x220>
 80076cc:	e000      	b.n	80076d0 <tcp_input+0x368>
      break;
 80076ce:	bf00      	nop
  }

  if (pcb == NULL) {
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f040 8095 	bne.w	8007802 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80076d8:	4b73      	ldr	r3, [pc, #460]	; (80078a8 <tcp_input+0x540>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	61fb      	str	r3, [r7, #28]
 80076de:	e03f      	b.n	8007760 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	7d1b      	ldrb	r3, [r3, #20]
 80076e4:	2b0a      	cmp	r3, #10
 80076e6:	d006      	beq.n	80076f6 <tcp_input+0x38e>
 80076e8:	4b6a      	ldr	r3, [pc, #424]	; (8007894 <tcp_input+0x52c>)
 80076ea:	f240 121f 	movw	r2, #287	; 0x11f
 80076ee:	496f      	ldr	r1, [pc, #444]	; (80078ac <tcp_input+0x544>)
 80076f0:	486a      	ldr	r0, [pc, #424]	; (800789c <tcp_input+0x534>)
 80076f2:	f006 fd6d 	bl	800e1d0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	7a1b      	ldrb	r3, [r3, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d009      	beq.n	8007712 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	7a1a      	ldrb	r2, [r3, #8]
 8007702:	4b63      	ldr	r3, [pc, #396]	; (8007890 <tcp_input+0x528>)
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800770a:	3301      	adds	r3, #1
 800770c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800770e:	429a      	cmp	r2, r3
 8007710:	d122      	bne.n	8007758 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	8b1a      	ldrh	r2, [r3, #24]
 8007716:	4b5d      	ldr	r3, [pc, #372]	; (800788c <tcp_input+0x524>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	881b      	ldrh	r3, [r3, #0]
 800771c:	b29b      	uxth	r3, r3
 800771e:	429a      	cmp	r2, r3
 8007720:	d11b      	bne.n	800775a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	8ada      	ldrh	r2, [r3, #22]
 8007726:	4b59      	ldr	r3, [pc, #356]	; (800788c <tcp_input+0x524>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	885b      	ldrh	r3, [r3, #2]
 800772c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800772e:	429a      	cmp	r2, r3
 8007730:	d113      	bne.n	800775a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	4b56      	ldr	r3, [pc, #344]	; (8007890 <tcp_input+0x528>)
 8007738:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800773a:	429a      	cmp	r2, r3
 800773c:	d10d      	bne.n	800775a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	4b53      	ldr	r3, [pc, #332]	; (8007890 <tcp_input+0x528>)
 8007744:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007746:	429a      	cmp	r2, r3
 8007748:	d107      	bne.n	800775a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800774a:	69f8      	ldr	r0, [r7, #28]
 800774c:	f000 fb54 	bl	8007df8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7fd ff3f 	bl	80055d4 <pbuf_free>
        return;
 8007756:	e1f0      	b.n	8007b3a <tcp_input+0x7d2>
        continue;
 8007758:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	61fb      	str	r3, [r7, #28]
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1bc      	bne.n	80076e0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007766:	2300      	movs	r3, #0
 8007768:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800776a:	4b51      	ldr	r3, [pc, #324]	; (80078b0 <tcp_input+0x548>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	e02a      	b.n	80077c8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	7a1b      	ldrb	r3, [r3, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00c      	beq.n	8007794 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	7a1a      	ldrb	r2, [r3, #8]
 800777e:	4b44      	ldr	r3, [pc, #272]	; (8007890 <tcp_input+0x528>)
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007786:	3301      	adds	r3, #1
 8007788:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800778a:	429a      	cmp	r2, r3
 800778c:	d002      	beq.n	8007794 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	61bb      	str	r3, [r7, #24]
        continue;
 8007792:	e016      	b.n	80077c2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	8ada      	ldrh	r2, [r3, #22]
 8007798:	4b3c      	ldr	r3, [pc, #240]	; (800788c <tcp_input+0x524>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	885b      	ldrh	r3, [r3, #2]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d10c      	bne.n	80077be <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	4b39      	ldr	r3, [pc, #228]	; (8007890 <tcp_input+0x528>)
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d00f      	beq.n	80077d0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00d      	beq.n	80077d2 <tcp_input+0x46a>
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d009      	beq.n	80077d2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	617b      	str	r3, [r7, #20]
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1d1      	bne.n	8007772 <tcp_input+0x40a>
 80077ce:	e000      	b.n	80077d2 <tcp_input+0x46a>
            break;
 80077d0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d014      	beq.n	8007802 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	68da      	ldr	r2, [r3, #12]
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80077e6:	4b32      	ldr	r3, [pc, #200]	; (80078b0 <tcp_input+0x548>)
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80077ee:	4a30      	ldr	r2, [pc, #192]	; (80078b0 <tcp_input+0x548>)
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80077f4:	6978      	ldr	r0, [r7, #20]
 80077f6:	f000 fa01 	bl	8007bfc <tcp_listen_input>
      }
      pbuf_free(p);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7fd feea 	bl	80055d4 <pbuf_free>
      return;
 8007800:	e19b      	b.n	8007b3a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 8160 	beq.w	8007aca <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800780a:	4b2a      	ldr	r3, [pc, #168]	; (80078b4 <tcp_input+0x54c>)
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	891a      	ldrh	r2, [r3, #8]
 8007814:	4b27      	ldr	r3, [pc, #156]	; (80078b4 <tcp_input+0x54c>)
 8007816:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007818:	4a26      	ldr	r2, [pc, #152]	; (80078b4 <tcp_input+0x54c>)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800781e:	4b1b      	ldr	r3, [pc, #108]	; (800788c <tcp_input+0x524>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a24      	ldr	r2, [pc, #144]	; (80078b4 <tcp_input+0x54c>)
 8007824:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007826:	4b24      	ldr	r3, [pc, #144]	; (80078b8 <tcp_input+0x550>)
 8007828:	2200      	movs	r2, #0
 800782a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800782c:	4b23      	ldr	r3, [pc, #140]	; (80078bc <tcp_input+0x554>)
 800782e:	2200      	movs	r2, #0
 8007830:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007832:	4b23      	ldr	r3, [pc, #140]	; (80078c0 <tcp_input+0x558>)
 8007834:	2200      	movs	r2, #0
 8007836:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007838:	4b22      	ldr	r3, [pc, #136]	; (80078c4 <tcp_input+0x55c>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	f003 0308 	and.w	r3, r3, #8
 8007840:	2b00      	cmp	r3, #0
 8007842:	d006      	beq.n	8007852 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	7b5b      	ldrb	r3, [r3, #13]
 8007848:	f043 0301 	orr.w	r3, r3, #1
 800784c:	b2da      	uxtb	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007856:	2b00      	cmp	r3, #0
 8007858:	d038      	beq.n	80078cc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800785a:	69f8      	ldr	r0, [r7, #28]
 800785c:	f7ff f93e 	bl	8006adc <tcp_process_refused_data>
 8007860:	4603      	mov	r3, r0
 8007862:	f113 0f0d 	cmn.w	r3, #13
 8007866:	d007      	beq.n	8007878 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800786c:	2b00      	cmp	r3, #0
 800786e:	d02d      	beq.n	80078cc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007870:	4b15      	ldr	r3, [pc, #84]	; (80078c8 <tcp_input+0x560>)
 8007872:	881b      	ldrh	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d029      	beq.n	80078cc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800787c:	2b00      	cmp	r3, #0
 800787e:	f040 8104 	bne.w	8007a8a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007882:	69f8      	ldr	r0, [r7, #28]
 8007884:	f003 f9be 	bl	800ac04 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007888:	e0ff      	b.n	8007a8a <tcp_input+0x722>
 800788a:	bf00      	nop
 800788c:	200000e0 	.word	0x200000e0
 8007890:	2000344c 	.word	0x2000344c
 8007894:	080107ec 	.word	0x080107ec
 8007898:	08010918 	.word	0x08010918
 800789c:	08010838 	.word	0x08010838
 80078a0:	20008b50 	.word	0x20008b50
 80078a4:	08010944 	.word	0x08010944
 80078a8:	20008b60 	.word	0x20008b60
 80078ac:	08010970 	.word	0x08010970
 80078b0:	20008b58 	.word	0x20008b58
 80078b4:	200000d0 	.word	0x200000d0
 80078b8:	20000100 	.word	0x20000100
 80078bc:	200000fd 	.word	0x200000fd
 80078c0:	200000f8 	.word	0x200000f8
 80078c4:	200000fc 	.word	0x200000fc
 80078c8:	200000fa 	.word	0x200000fa
      }
    }
    tcp_input_pcb = pcb;
 80078cc:	4a9c      	ldr	r2, [pc, #624]	; (8007b40 <tcp_input+0x7d8>)
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80078d2:	69f8      	ldr	r0, [r7, #28]
 80078d4:	f000 fb0a 	bl	8007eec <tcp_process>
 80078d8:	4603      	mov	r3, r0
 80078da:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80078dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80078e0:	f113 0f0d 	cmn.w	r3, #13
 80078e4:	f000 80d3 	beq.w	8007a8e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80078e8:	4b96      	ldr	r3, [pc, #600]	; (8007b44 <tcp_input+0x7dc>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	f003 0308 	and.w	r3, r3, #8
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d015      	beq.n	8007920 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d008      	beq.n	8007910 <tcp_input+0x5a8>
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007904:	69fa      	ldr	r2, [r7, #28]
 8007906:	6912      	ldr	r2, [r2, #16]
 8007908:	f06f 010d 	mvn.w	r1, #13
 800790c:	4610      	mov	r0, r2
 800790e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007910:	69f9      	ldr	r1, [r7, #28]
 8007912:	488d      	ldr	r0, [pc, #564]	; (8007b48 <tcp_input+0x7e0>)
 8007914:	f7ff fbb0 	bl	8007078 <tcp_pcb_remove>
        tcp_free(pcb);
 8007918:	69f8      	ldr	r0, [r7, #28]
 800791a:	f7fe f99d 	bl	8005c58 <tcp_free>
 800791e:	e0c1      	b.n	8007aa4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007924:	4b89      	ldr	r3, [pc, #548]	; (8007b4c <tcp_input+0x7e4>)
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d01d      	beq.n	8007968 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800792c:	4b87      	ldr	r3, [pc, #540]	; (8007b4c <tcp_input+0x7e4>)
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00a      	beq.n	8007952 <tcp_input+0x5ea>
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	6910      	ldr	r0, [r2, #16]
 8007946:	89fa      	ldrh	r2, [r7, #14]
 8007948:	69f9      	ldr	r1, [r7, #28]
 800794a:	4798      	blx	r3
 800794c:	4603      	mov	r3, r0
 800794e:	74fb      	strb	r3, [r7, #19]
 8007950:	e001      	b.n	8007956 <tcp_input+0x5ee>
 8007952:	2300      	movs	r3, #0
 8007954:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007956:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800795a:	f113 0f0d 	cmn.w	r3, #13
 800795e:	f000 8098 	beq.w	8007a92 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007962:	4b7a      	ldr	r3, [pc, #488]	; (8007b4c <tcp_input+0x7e4>)
 8007964:	2200      	movs	r2, #0
 8007966:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007968:	69f8      	ldr	r0, [r7, #28]
 800796a:	f000 f907 	bl	8007b7c <tcp_input_delayed_close>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	f040 8090 	bne.w	8007a96 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007976:	4b76      	ldr	r3, [pc, #472]	; (8007b50 <tcp_input+0x7e8>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d041      	beq.n	8007a02 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007982:	2b00      	cmp	r3, #0
 8007984:	d006      	beq.n	8007994 <tcp_input+0x62c>
 8007986:	4b73      	ldr	r3, [pc, #460]	; (8007b54 <tcp_input+0x7ec>)
 8007988:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800798c:	4972      	ldr	r1, [pc, #456]	; (8007b58 <tcp_input+0x7f0>)
 800798e:	4873      	ldr	r0, [pc, #460]	; (8007b5c <tcp_input+0x7f4>)
 8007990:	f006 fc1e 	bl	800e1d0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	8b5b      	ldrh	r3, [r3, #26]
 8007998:	f003 0310 	and.w	r3, r3, #16
 800799c:	2b00      	cmp	r3, #0
 800799e:	d008      	beq.n	80079b2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80079a0:	4b6b      	ldr	r3, [pc, #428]	; (8007b50 <tcp_input+0x7e8>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fd fe15 	bl	80055d4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80079aa:	69f8      	ldr	r0, [r7, #28]
 80079ac:	f7fe fc3c 	bl	8006228 <tcp_abort>
            goto aborted;
 80079b0:	e078      	b.n	8007aa4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00c      	beq.n	80079d6 <tcp_input+0x66e>
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	6918      	ldr	r0, [r3, #16]
 80079c6:	4b62      	ldr	r3, [pc, #392]	; (8007b50 <tcp_input+0x7e8>)
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	2300      	movs	r3, #0
 80079cc:	69f9      	ldr	r1, [r7, #28]
 80079ce:	47a0      	blx	r4
 80079d0:	4603      	mov	r3, r0
 80079d2:	74fb      	strb	r3, [r7, #19]
 80079d4:	e008      	b.n	80079e8 <tcp_input+0x680>
 80079d6:	4b5e      	ldr	r3, [pc, #376]	; (8007b50 <tcp_input+0x7e8>)
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	2300      	movs	r3, #0
 80079dc:	69f9      	ldr	r1, [r7, #28]
 80079de:	2000      	movs	r0, #0
 80079e0:	f7ff f952 	bl	8006c88 <tcp_recv_null>
 80079e4:	4603      	mov	r3, r0
 80079e6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80079e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80079ec:	f113 0f0d 	cmn.w	r3, #13
 80079f0:	d053      	beq.n	8007a9a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80079f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80079fa:	4b55      	ldr	r3, [pc, #340]	; (8007b50 <tcp_input+0x7e8>)
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007a02:	4b50      	ldr	r3, [pc, #320]	; (8007b44 <tcp_input+0x7dc>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d030      	beq.n	8007a70 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d009      	beq.n	8007a2a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a1a:	7b5a      	ldrb	r2, [r3, #13]
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a20:	f042 0220 	orr.w	r2, r2, #32
 8007a24:	b2d2      	uxtb	r2, r2
 8007a26:	735a      	strb	r2, [r3, #13]
 8007a28:	e022      	b.n	8007a70 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a2e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007a32:	d005      	beq.n	8007a40 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a38:	3301      	adds	r3, #1
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00b      	beq.n	8007a62 <tcp_input+0x6fa>
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	6918      	ldr	r0, [r3, #16]
 8007a54:	2300      	movs	r3, #0
 8007a56:	2200      	movs	r2, #0
 8007a58:	69f9      	ldr	r1, [r7, #28]
 8007a5a:	47a0      	blx	r4
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	74fb      	strb	r3, [r7, #19]
 8007a60:	e001      	b.n	8007a66 <tcp_input+0x6fe>
 8007a62:	2300      	movs	r3, #0
 8007a64:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007a66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007a6a:	f113 0f0d 	cmn.w	r3, #13
 8007a6e:	d016      	beq.n	8007a9e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007a70:	4b33      	ldr	r3, [pc, #204]	; (8007b40 <tcp_input+0x7d8>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007a76:	69f8      	ldr	r0, [r7, #28]
 8007a78:	f000 f880 	bl	8007b7c <tcp_input_delayed_close>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10f      	bne.n	8007aa2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007a82:	69f8      	ldr	r0, [r7, #28]
 8007a84:	f002 fab8 	bl	8009ff8 <tcp_output>
 8007a88:	e00c      	b.n	8007aa4 <tcp_input+0x73c>
        goto aborted;
 8007a8a:	bf00      	nop
 8007a8c:	e00a      	b.n	8007aa4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007a8e:	bf00      	nop
 8007a90:	e008      	b.n	8007aa4 <tcp_input+0x73c>
              goto aborted;
 8007a92:	bf00      	nop
 8007a94:	e006      	b.n	8007aa4 <tcp_input+0x73c>
          goto aborted;
 8007a96:	bf00      	nop
 8007a98:	e004      	b.n	8007aa4 <tcp_input+0x73c>
            goto aborted;
 8007a9a:	bf00      	nop
 8007a9c:	e002      	b.n	8007aa4 <tcp_input+0x73c>
              goto aborted;
 8007a9e:	bf00      	nop
 8007aa0:	e000      	b.n	8007aa4 <tcp_input+0x73c>
          goto aborted;
 8007aa2:	bf00      	nop
    tcp_input_pcb = NULL;
 8007aa4:	4b26      	ldr	r3, [pc, #152]	; (8007b40 <tcp_input+0x7d8>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007aaa:	4b29      	ldr	r3, [pc, #164]	; (8007b50 <tcp_input+0x7e8>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007ab0:	4b2b      	ldr	r3, [pc, #172]	; (8007b60 <tcp_input+0x7f8>)
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d03f      	beq.n	8007b38 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8007ab8:	4b29      	ldr	r3, [pc, #164]	; (8007b60 <tcp_input+0x7f8>)
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fd fd89 	bl	80055d4 <pbuf_free>
      inseg.p = NULL;
 8007ac2:	4b27      	ldr	r3, [pc, #156]	; (8007b60 <tcp_input+0x7f8>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007ac8:	e036      	b.n	8007b38 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007aca:	4b26      	ldr	r3, [pc, #152]	; (8007b64 <tcp_input+0x7fc>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	899b      	ldrh	r3, [r3, #12]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fc faca 	bl	800406c <lwip_htons>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	f003 0304 	and.w	r3, r3, #4
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d118      	bne.n	8007b16 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ae4:	4b20      	ldr	r3, [pc, #128]	; (8007b68 <tcp_input+0x800>)
 8007ae6:	6819      	ldr	r1, [r3, #0]
 8007ae8:	4b20      	ldr	r3, [pc, #128]	; (8007b6c <tcp_input+0x804>)
 8007aea:	881b      	ldrh	r3, [r3, #0]
 8007aec:	461a      	mov	r2, r3
 8007aee:	4b20      	ldr	r3, [pc, #128]	; (8007b70 <tcp_input+0x808>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007af4:	4b1b      	ldr	r3, [pc, #108]	; (8007b64 <tcp_input+0x7fc>)
 8007af6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007af8:	885b      	ldrh	r3, [r3, #2]
 8007afa:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007afc:	4a19      	ldr	r2, [pc, #100]	; (8007b64 <tcp_input+0x7fc>)
 8007afe:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b00:	8812      	ldrh	r2, [r2, #0]
 8007b02:	b292      	uxth	r2, r2
 8007b04:	9202      	str	r2, [sp, #8]
 8007b06:	9301      	str	r3, [sp, #4]
 8007b08:	4b1a      	ldr	r3, [pc, #104]	; (8007b74 <tcp_input+0x80c>)
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	4b1a      	ldr	r3, [pc, #104]	; (8007b78 <tcp_input+0x810>)
 8007b0e:	4602      	mov	r2, r0
 8007b10:	2000      	movs	r0, #0
 8007b12:	f003 f825 	bl	800ab60 <tcp_rst>
    pbuf_free(p);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7fd fd5c 	bl	80055d4 <pbuf_free>
  return;
 8007b1c:	e00c      	b.n	8007b38 <tcp_input+0x7d0>
    goto dropped;
 8007b1e:	bf00      	nop
 8007b20:	e006      	b.n	8007b30 <tcp_input+0x7c8>
    goto dropped;
 8007b22:	bf00      	nop
 8007b24:	e004      	b.n	8007b30 <tcp_input+0x7c8>
    goto dropped;
 8007b26:	bf00      	nop
 8007b28:	e002      	b.n	8007b30 <tcp_input+0x7c8>
      goto dropped;
 8007b2a:	bf00      	nop
 8007b2c:	e000      	b.n	8007b30 <tcp_input+0x7c8>
      goto dropped;
 8007b2e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7fd fd4f 	bl	80055d4 <pbuf_free>
 8007b36:	e000      	b.n	8007b3a <tcp_input+0x7d2>
  return;
 8007b38:	bf00      	nop
}
 8007b3a:	3724      	adds	r7, #36	; 0x24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd90      	pop	{r4, r7, pc}
 8007b40:	20008b64 	.word	0x20008b64
 8007b44:	200000fd 	.word	0x200000fd
 8007b48:	20008b50 	.word	0x20008b50
 8007b4c:	200000f8 	.word	0x200000f8
 8007b50:	20000100 	.word	0x20000100
 8007b54:	080107ec 	.word	0x080107ec
 8007b58:	080109a0 	.word	0x080109a0
 8007b5c:	08010838 	.word	0x08010838
 8007b60:	200000d0 	.word	0x200000d0
 8007b64:	200000e0 	.word	0x200000e0
 8007b68:	200000f4 	.word	0x200000f4
 8007b6c:	200000fa 	.word	0x200000fa
 8007b70:	200000f0 	.word	0x200000f0
 8007b74:	2000345c 	.word	0x2000345c
 8007b78:	20003460 	.word	0x20003460

08007b7c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d106      	bne.n	8007b98 <tcp_input_delayed_close+0x1c>
 8007b8a:	4b17      	ldr	r3, [pc, #92]	; (8007be8 <tcp_input_delayed_close+0x6c>)
 8007b8c:	f240 225a 	movw	r2, #602	; 0x25a
 8007b90:	4916      	ldr	r1, [pc, #88]	; (8007bec <tcp_input_delayed_close+0x70>)
 8007b92:	4817      	ldr	r0, [pc, #92]	; (8007bf0 <tcp_input_delayed_close+0x74>)
 8007b94:	f006 fb1c 	bl	800e1d0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007b98:	4b16      	ldr	r3, [pc, #88]	; (8007bf4 <tcp_input_delayed_close+0x78>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	f003 0310 	and.w	r3, r3, #16
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d01c      	beq.n	8007bde <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	8b5b      	ldrh	r3, [r3, #26]
 8007ba8:	f003 0310 	and.w	r3, r3, #16
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10d      	bne.n	8007bcc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d008      	beq.n	8007bcc <tcp_input_delayed_close+0x50>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	6912      	ldr	r2, [r2, #16]
 8007bc4:	f06f 010e 	mvn.w	r1, #14
 8007bc8:	4610      	mov	r0, r2
 8007bca:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007bcc:	6879      	ldr	r1, [r7, #4]
 8007bce:	480a      	ldr	r0, [pc, #40]	; (8007bf8 <tcp_input_delayed_close+0x7c>)
 8007bd0:	f7ff fa52 	bl	8007078 <tcp_pcb_remove>
    tcp_free(pcb);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7fe f83f 	bl	8005c58 <tcp_free>
    return 1;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e000      	b.n	8007be0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	080107ec 	.word	0x080107ec
 8007bec:	080109bc 	.word	0x080109bc
 8007bf0:	08010838 	.word	0x08010838
 8007bf4:	200000fd 	.word	0x200000fd
 8007bf8:	20008b50 	.word	0x20008b50

08007bfc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007bfc:	b590      	push	{r4, r7, lr}
 8007bfe:	b08b      	sub	sp, #44	; 0x2c
 8007c00:	af04      	add	r7, sp, #16
 8007c02:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007c04:	4b6f      	ldr	r3, [pc, #444]	; (8007dc4 <tcp_listen_input+0x1c8>)
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f040 80d2 	bne.w	8007db6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d106      	bne.n	8007c26 <tcp_listen_input+0x2a>
 8007c18:	4b6b      	ldr	r3, [pc, #428]	; (8007dc8 <tcp_listen_input+0x1cc>)
 8007c1a:	f240 2281 	movw	r2, #641	; 0x281
 8007c1e:	496b      	ldr	r1, [pc, #428]	; (8007dcc <tcp_listen_input+0x1d0>)
 8007c20:	486b      	ldr	r0, [pc, #428]	; (8007dd0 <tcp_listen_input+0x1d4>)
 8007c22:	f006 fad5 	bl	800e1d0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007c26:	4b67      	ldr	r3, [pc, #412]	; (8007dc4 <tcp_listen_input+0x1c8>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	f003 0310 	and.w	r3, r3, #16
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d019      	beq.n	8007c66 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c32:	4b68      	ldr	r3, [pc, #416]	; (8007dd4 <tcp_listen_input+0x1d8>)
 8007c34:	6819      	ldr	r1, [r3, #0]
 8007c36:	4b68      	ldr	r3, [pc, #416]	; (8007dd8 <tcp_listen_input+0x1dc>)
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	4b67      	ldr	r3, [pc, #412]	; (8007ddc <tcp_listen_input+0x1e0>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c42:	4b67      	ldr	r3, [pc, #412]	; (8007de0 <tcp_listen_input+0x1e4>)
 8007c44:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c46:	885b      	ldrh	r3, [r3, #2]
 8007c48:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c4a:	4a65      	ldr	r2, [pc, #404]	; (8007de0 <tcp_listen_input+0x1e4>)
 8007c4c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c4e:	8812      	ldrh	r2, [r2, #0]
 8007c50:	b292      	uxth	r2, r2
 8007c52:	9202      	str	r2, [sp, #8]
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	4b63      	ldr	r3, [pc, #396]	; (8007de4 <tcp_listen_input+0x1e8>)
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	4b63      	ldr	r3, [pc, #396]	; (8007de8 <tcp_listen_input+0x1ec>)
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f002 ff7e 	bl	800ab60 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007c64:	e0a9      	b.n	8007dba <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8007c66:	4b57      	ldr	r3, [pc, #348]	; (8007dc4 <tcp_listen_input+0x1c8>)
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 80a3 	beq.w	8007dba <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	7d5b      	ldrb	r3, [r3, #21]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff f929 	bl	8006ed0 <tcp_alloc>
 8007c7e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d111      	bne.n	8007caa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00a      	beq.n	8007ca4 <tcp_listen_input+0xa8>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	6910      	ldr	r0, [r2, #16]
 8007c96:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	4798      	blx	r3
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	73bb      	strb	r3, [r7, #14]
      return;
 8007ca2:	e08b      	b.n	8007dbc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007ca4:	23f0      	movs	r3, #240	; 0xf0
 8007ca6:	73bb      	strb	r3, [r7, #14]
      return;
 8007ca8:	e088      	b.n	8007dbc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007caa:	4b50      	ldr	r3, [pc, #320]	; (8007dec <tcp_listen_input+0x1f0>)
 8007cac:	695a      	ldr	r2, [r3, #20]
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007cb2:	4b4e      	ldr	r3, [pc, #312]	; (8007dec <tcp_listen_input+0x1f0>)
 8007cb4:	691a      	ldr	r2, [r3, #16]
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	8ada      	ldrh	r2, [r3, #22]
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007cc2:	4b47      	ldr	r3, [pc, #284]	; (8007de0 <tcp_listen_input+0x1e4>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2203      	movs	r2, #3
 8007cd2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007cd4:	4b41      	ldr	r3, [pc, #260]	; (8007ddc <tcp_listen_input+0x1e0>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007ce6:	6978      	ldr	r0, [r7, #20]
 8007ce8:	f7ff fa5a 	bl	80071a0 <tcp_next_iss>
 8007cec:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007d06:	4b35      	ldr	r3, [pc, #212]	; (8007ddc <tcp_listen_input+0x1e0>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	1e5a      	subs	r2, r3, #1
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	691a      	ldr	r2, [r3, #16]
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7a5b      	ldrb	r3, [r3, #9]
 8007d22:	f003 030c 	and.w	r3, r3, #12
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	7a1a      	ldrb	r2, [r3, #8]
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007d34:	4b2e      	ldr	r3, [pc, #184]	; (8007df0 <tcp_listen_input+0x1f4>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	60da      	str	r2, [r3, #12]
 8007d3c:	4a2c      	ldr	r2, [pc, #176]	; (8007df0 <tcp_listen_input+0x1f4>)
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	6013      	str	r3, [r2, #0]
 8007d42:	f003 f8cf 	bl	800aee4 <tcp_timer_needed>
 8007d46:	4b2b      	ldr	r3, [pc, #172]	; (8007df4 <tcp_listen_input+0x1f8>)
 8007d48:	2201      	movs	r2, #1
 8007d4a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007d4c:	6978      	ldr	r0, [r7, #20]
 8007d4e:	f001 fd8d 	bl	800986c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007d52:	4b23      	ldr	r3, [pc, #140]	; (8007de0 <tcp_listen_input+0x1e4>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	89db      	ldrh	r3, [r3, #14]
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4618      	mov	r0, r3
 8007d76:	f004 ffe3 	bl	800cd40 <ip4_route>
 8007d7a:	4601      	mov	r1, r0
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	3304      	adds	r3, #4
 8007d80:	461a      	mov	r2, r3
 8007d82:	4620      	mov	r0, r4
 8007d84:	f7ff fa32 	bl	80071ec <tcp_eff_send_mss_netif>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007d90:	2112      	movs	r1, #18
 8007d92:	6978      	ldr	r0, [r7, #20]
 8007d94:	f002 f842 	bl	8009e1c <tcp_enqueue_flags>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d004      	beq.n	8007dae <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007da4:	2100      	movs	r1, #0
 8007da6:	6978      	ldr	r0, [r7, #20]
 8007da8:	f7fe f980 	bl	80060ac <tcp_abandon>
      return;
 8007dac:	e006      	b.n	8007dbc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007dae:	6978      	ldr	r0, [r7, #20]
 8007db0:	f002 f922 	bl	8009ff8 <tcp_output>
  return;
 8007db4:	e001      	b.n	8007dba <tcp_listen_input+0x1be>
    return;
 8007db6:	bf00      	nop
 8007db8:	e000      	b.n	8007dbc <tcp_listen_input+0x1c0>
  return;
 8007dba:	bf00      	nop
}
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd90      	pop	{r4, r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	200000fc 	.word	0x200000fc
 8007dc8:	080107ec 	.word	0x080107ec
 8007dcc:	080109e4 	.word	0x080109e4
 8007dd0:	08010838 	.word	0x08010838
 8007dd4:	200000f4 	.word	0x200000f4
 8007dd8:	200000fa 	.word	0x200000fa
 8007ddc:	200000f0 	.word	0x200000f0
 8007de0:	200000e0 	.word	0x200000e0
 8007de4:	2000345c 	.word	0x2000345c
 8007de8:	20003460 	.word	0x20003460
 8007dec:	2000344c 	.word	0x2000344c
 8007df0:	20008b50 	.word	0x20008b50
 8007df4:	20008b4c 	.word	0x20008b4c

08007df8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af04      	add	r7, sp, #16
 8007dfe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007e00:	4b2f      	ldr	r3, [pc, #188]	; (8007ec0 <tcp_timewait_input+0xc8>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	f003 0304 	and.w	r3, r3, #4
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d153      	bne.n	8007eb4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d106      	bne.n	8007e20 <tcp_timewait_input+0x28>
 8007e12:	4b2c      	ldr	r3, [pc, #176]	; (8007ec4 <tcp_timewait_input+0xcc>)
 8007e14:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007e18:	492b      	ldr	r1, [pc, #172]	; (8007ec8 <tcp_timewait_input+0xd0>)
 8007e1a:	482c      	ldr	r0, [pc, #176]	; (8007ecc <tcp_timewait_input+0xd4>)
 8007e1c:	f006 f9d8 	bl	800e1d0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007e20:	4b27      	ldr	r3, [pc, #156]	; (8007ec0 <tcp_timewait_input+0xc8>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d02a      	beq.n	8007e82 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007e2c:	4b28      	ldr	r3, [pc, #160]	; (8007ed0 <tcp_timewait_input+0xd8>)
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	db2d      	blt.n	8007e96 <tcp_timewait_input+0x9e>
 8007e3a:	4b25      	ldr	r3, [pc, #148]	; (8007ed0 <tcp_timewait_input+0xd8>)
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	6879      	ldr	r1, [r7, #4]
 8007e44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007e46:	440b      	add	r3, r1
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	dc23      	bgt.n	8007e96 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e4e:	4b21      	ldr	r3, [pc, #132]	; (8007ed4 <tcp_timewait_input+0xdc>)
 8007e50:	6819      	ldr	r1, [r3, #0]
 8007e52:	4b21      	ldr	r3, [pc, #132]	; (8007ed8 <tcp_timewait_input+0xe0>)
 8007e54:	881b      	ldrh	r3, [r3, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	4b1d      	ldr	r3, [pc, #116]	; (8007ed0 <tcp_timewait_input+0xd8>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007e5e:	4b1f      	ldr	r3, [pc, #124]	; (8007edc <tcp_timewait_input+0xe4>)
 8007e60:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e62:	885b      	ldrh	r3, [r3, #2]
 8007e64:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007e66:	4a1d      	ldr	r2, [pc, #116]	; (8007edc <tcp_timewait_input+0xe4>)
 8007e68:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e6a:	8812      	ldrh	r2, [r2, #0]
 8007e6c:	b292      	uxth	r2, r2
 8007e6e:	9202      	str	r2, [sp, #8]
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	4b1b      	ldr	r3, [pc, #108]	; (8007ee0 <tcp_timewait_input+0xe8>)
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	4b1b      	ldr	r3, [pc, #108]	; (8007ee4 <tcp_timewait_input+0xec>)
 8007e78:	4602      	mov	r2, r0
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f002 fe70 	bl	800ab60 <tcp_rst>
      return;
 8007e80:	e01b      	b.n	8007eba <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8007e82:	4b0f      	ldr	r3, [pc, #60]	; (8007ec0 <tcp_timewait_input+0xc8>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007e8e:	4b16      	ldr	r3, [pc, #88]	; (8007ee8 <tcp_timewait_input+0xf0>)
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007e96:	4b10      	ldr	r3, [pc, #64]	; (8007ed8 <tcp_timewait_input+0xe0>)
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00c      	beq.n	8007eb8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	8b5b      	ldrh	r3, [r3, #26]
 8007ea2:	f043 0302 	orr.w	r3, r3, #2
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f002 f8a3 	bl	8009ff8 <tcp_output>
  }
  return;
 8007eb2:	e001      	b.n	8007eb8 <tcp_timewait_input+0xc0>
    return;
 8007eb4:	bf00      	nop
 8007eb6:	e000      	b.n	8007eba <tcp_timewait_input+0xc2>
  return;
 8007eb8:	bf00      	nop
}
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	200000fc 	.word	0x200000fc
 8007ec4:	080107ec 	.word	0x080107ec
 8007ec8:	08010a04 	.word	0x08010a04
 8007ecc:	08010838 	.word	0x08010838
 8007ed0:	200000f0 	.word	0x200000f0
 8007ed4:	200000f4 	.word	0x200000f4
 8007ed8:	200000fa 	.word	0x200000fa
 8007edc:	200000e0 	.word	0x200000e0
 8007ee0:	2000345c 	.word	0x2000345c
 8007ee4:	20003460 	.word	0x20003460
 8007ee8:	20008b54 	.word	0x20008b54

08007eec <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007eec:	b590      	push	{r4, r7, lr}
 8007eee:	b08d      	sub	sp, #52	; 0x34
 8007ef0:	af04      	add	r7, sp, #16
 8007ef2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d106      	bne.n	8007f10 <tcp_process+0x24>
 8007f02:	4ba5      	ldr	r3, [pc, #660]	; (8008198 <tcp_process+0x2ac>)
 8007f04:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007f08:	49a4      	ldr	r1, [pc, #656]	; (800819c <tcp_process+0x2b0>)
 8007f0a:	48a5      	ldr	r0, [pc, #660]	; (80081a0 <tcp_process+0x2b4>)
 8007f0c:	f006 f960 	bl	800e1d0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007f10:	4ba4      	ldr	r3, [pc, #656]	; (80081a4 <tcp_process+0x2b8>)
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	f003 0304 	and.w	r3, r3, #4
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d04e      	beq.n	8007fba <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	7d1b      	ldrb	r3, [r3, #20]
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d108      	bne.n	8007f36 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f28:	4b9f      	ldr	r3, [pc, #636]	; (80081a8 <tcp_process+0x2bc>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d123      	bne.n	8007f78 <tcp_process+0x8c>
        acceptable = 1;
 8007f30:	2301      	movs	r3, #1
 8007f32:	76fb      	strb	r3, [r7, #27]
 8007f34:	e020      	b.n	8007f78 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f3a:	4b9c      	ldr	r3, [pc, #624]	; (80081ac <tcp_process+0x2c0>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d102      	bne.n	8007f48 <tcp_process+0x5c>
        acceptable = 1;
 8007f42:	2301      	movs	r3, #1
 8007f44:	76fb      	strb	r3, [r7, #27]
 8007f46:	e017      	b.n	8007f78 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007f48:	4b98      	ldr	r3, [pc, #608]	; (80081ac <tcp_process+0x2c0>)
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	db10      	blt.n	8007f78 <tcp_process+0x8c>
 8007f56:	4b95      	ldr	r3, [pc, #596]	; (80081ac <tcp_process+0x2c0>)
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007f62:	440b      	add	r3, r1
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	dc06      	bgt.n	8007f78 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	8b5b      	ldrh	r3, [r3, #26]
 8007f6e:	f043 0302 	orr.w	r3, r3, #2
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007f78:	7efb      	ldrb	r3, [r7, #27]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d01b      	beq.n	8007fb6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	7d1b      	ldrb	r3, [r3, #20]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d106      	bne.n	8007f94 <tcp_process+0xa8>
 8007f86:	4b84      	ldr	r3, [pc, #528]	; (8008198 <tcp_process+0x2ac>)
 8007f88:	f44f 724e 	mov.w	r2, #824	; 0x338
 8007f8c:	4988      	ldr	r1, [pc, #544]	; (80081b0 <tcp_process+0x2c4>)
 8007f8e:	4884      	ldr	r0, [pc, #528]	; (80081a0 <tcp_process+0x2b4>)
 8007f90:	f006 f91e 	bl	800e1d0 <iprintf>
      recv_flags |= TF_RESET;
 8007f94:	4b87      	ldr	r3, [pc, #540]	; (80081b4 <tcp_process+0x2c8>)
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	f043 0308 	orr.w	r3, r3, #8
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	4b85      	ldr	r3, [pc, #532]	; (80081b4 <tcp_process+0x2c8>)
 8007fa0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	8b5b      	ldrh	r3, [r3, #26]
 8007fa6:	f023 0301 	bic.w	r3, r3, #1
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007fb0:	f06f 030d 	mvn.w	r3, #13
 8007fb4:	e37a      	b.n	80086ac <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e378      	b.n	80086ac <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007fba:	4b7a      	ldr	r3, [pc, #488]	; (80081a4 <tcp_process+0x2b8>)
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	f003 0302 	and.w	r3, r3, #2
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d010      	beq.n	8007fe8 <tcp_process+0xfc>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	7d1b      	ldrb	r3, [r3, #20]
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d00c      	beq.n	8007fe8 <tcp_process+0xfc>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	7d1b      	ldrb	r3, [r3, #20]
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d008      	beq.n	8007fe8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	8b5b      	ldrh	r3, [r3, #26]
 8007fda:	f043 0302 	orr.w	r3, r3, #2
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	e361      	b.n	80086ac <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	8b5b      	ldrh	r3, [r3, #26]
 8007fec:	f003 0310 	and.w	r3, r3, #16
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d103      	bne.n	8007ffc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007ff4:	4b70      	ldr	r3, [pc, #448]	; (80081b8 <tcp_process+0x2cc>)
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 fc2d 	bl	800986c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	7d1b      	ldrb	r3, [r3, #20]
 8008016:	3b02      	subs	r3, #2
 8008018:	2b07      	cmp	r3, #7
 800801a:	f200 8337 	bhi.w	800868c <tcp_process+0x7a0>
 800801e:	a201      	add	r2, pc, #4	; (adr r2, 8008024 <tcp_process+0x138>)
 8008020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008024:	08008045 	.word	0x08008045
 8008028:	08008275 	.word	0x08008275
 800802c:	080083ed 	.word	0x080083ed
 8008030:	08008417 	.word	0x08008417
 8008034:	0800853b 	.word	0x0800853b
 8008038:	080083ed 	.word	0x080083ed
 800803c:	080085c7 	.word	0x080085c7
 8008040:	08008657 	.word	0x08008657
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008044:	4b57      	ldr	r3, [pc, #348]	; (80081a4 <tcp_process+0x2b8>)
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	f003 0310 	and.w	r3, r3, #16
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 80e4 	beq.w	800821a <tcp_process+0x32e>
 8008052:	4b54      	ldr	r3, [pc, #336]	; (80081a4 <tcp_process+0x2b8>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	f003 0302 	and.w	r3, r3, #2
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 80dd 	beq.w	800821a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008064:	1c5a      	adds	r2, r3, #1
 8008066:	4b50      	ldr	r3, [pc, #320]	; (80081a8 <tcp_process+0x2bc>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	f040 80d5 	bne.w	800821a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008070:	4b4e      	ldr	r3, [pc, #312]	; (80081ac <tcp_process+0x2c0>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008082:	4b49      	ldr	r3, [pc, #292]	; (80081a8 <tcp_process+0x2bc>)
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800808a:	4b4c      	ldr	r3, [pc, #304]	; (80081bc <tcp_process+0x2d0>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	89db      	ldrh	r3, [r3, #14]
 8008090:	b29a      	uxth	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80080a4:	4b41      	ldr	r3, [pc, #260]	; (80081ac <tcp_process+0x2c0>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	1e5a      	subs	r2, r3, #1
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2204      	movs	r2, #4
 80080b2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3304      	adds	r3, #4
 80080bc:	4618      	mov	r0, r3
 80080be:	f004 fe3f 	bl	800cd40 <ip4_route>
 80080c2:	4601      	mov	r1, r0
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	3304      	adds	r3, #4
 80080c8:	461a      	mov	r2, r3
 80080ca:	4620      	mov	r0, r4
 80080cc:	f7ff f88e 	bl	80071ec <tcp_eff_send_mss_netif>
 80080d0:	4603      	mov	r3, r0
 80080d2:	461a      	mov	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080dc:	009a      	lsls	r2, r3, #2
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080e2:	005b      	lsls	r3, r3, #1
 80080e4:	f241 111c 	movw	r1, #4380	; 0x111c
 80080e8:	428b      	cmp	r3, r1
 80080ea:	bf38      	it	cc
 80080ec:	460b      	movcc	r3, r1
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d204      	bcs.n	80080fc <tcp_process+0x210>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	e00d      	b.n	8008118 <tcp_process+0x22c>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008100:	005b      	lsls	r3, r3, #1
 8008102:	f241 121c 	movw	r2, #4380	; 0x111c
 8008106:	4293      	cmp	r3, r2
 8008108:	d904      	bls.n	8008114 <tcp_process+0x228>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800810e:	005b      	lsls	r3, r3, #1
 8008110:	b29b      	uxth	r3, r3
 8008112:	e001      	b.n	8008118 <tcp_process+0x22c>
 8008114:	f241 131c 	movw	r3, #4380	; 0x111c
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008124:	2b00      	cmp	r3, #0
 8008126:	d106      	bne.n	8008136 <tcp_process+0x24a>
 8008128:	4b1b      	ldr	r3, [pc, #108]	; (8008198 <tcp_process+0x2ac>)
 800812a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800812e:	4924      	ldr	r1, [pc, #144]	; (80081c0 <tcp_process+0x2d4>)
 8008130:	481b      	ldr	r0, [pc, #108]	; (80081a0 <tcp_process+0x2b4>)
 8008132:	f006 f84d 	bl	800e1d0 <iprintf>
        --pcb->snd_queuelen;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800813c:	3b01      	subs	r3, #1
 800813e:	b29a      	uxth	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d111      	bne.n	8008176 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008156:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d106      	bne.n	800816c <tcp_process+0x280>
 800815e:	4b0e      	ldr	r3, [pc, #56]	; (8008198 <tcp_process+0x2ac>)
 8008160:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008164:	4917      	ldr	r1, [pc, #92]	; (80081c4 <tcp_process+0x2d8>)
 8008166:	480e      	ldr	r0, [pc, #56]	; (80081a0 <tcp_process+0x2b4>)
 8008168:	f006 f832 	bl	800e1d0 <iprintf>
          pcb->unsent = rseg->next;
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	66da      	str	r2, [r3, #108]	; 0x6c
 8008174:	e003      	b.n	800817e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800817e:	69f8      	ldr	r0, [r7, #28]
 8008180:	f7fe fd3d 	bl	8006bfe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008188:	2b00      	cmp	r3, #0
 800818a:	d11d      	bne.n	80081c8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008192:	861a      	strh	r2, [r3, #48]	; 0x30
 8008194:	e01f      	b.n	80081d6 <tcp_process+0x2ea>
 8008196:	bf00      	nop
 8008198:	080107ec 	.word	0x080107ec
 800819c:	08010a24 	.word	0x08010a24
 80081a0:	08010838 	.word	0x08010838
 80081a4:	200000fc 	.word	0x200000fc
 80081a8:	200000f4 	.word	0x200000f4
 80081ac:	200000f0 	.word	0x200000f0
 80081b0:	08010a40 	.word	0x08010a40
 80081b4:	200000fd 	.word	0x200000fd
 80081b8:	20008b54 	.word	0x20008b54
 80081bc:	200000e0 	.word	0x200000e0
 80081c0:	08010a60 	.word	0x08010a60
 80081c4:	08010a78 	.word	0x08010a78
        } else {
          pcb->rtime = 0;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00a      	beq.n	80081f6 <tcp_process+0x30a>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	6910      	ldr	r0, [r2, #16]
 80081ea:	2200      	movs	r2, #0
 80081ec:	6879      	ldr	r1, [r7, #4]
 80081ee:	4798      	blx	r3
 80081f0:	4603      	mov	r3, r0
 80081f2:	76bb      	strb	r3, [r7, #26]
 80081f4:	e001      	b.n	80081fa <tcp_process+0x30e>
 80081f6:	2300      	movs	r3, #0
 80081f8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80081fa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80081fe:	f113 0f0d 	cmn.w	r3, #13
 8008202:	d102      	bne.n	800820a <tcp_process+0x31e>
          return ERR_ABRT;
 8008204:	f06f 030c 	mvn.w	r3, #12
 8008208:	e250      	b.n	80086ac <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	8b5b      	ldrh	r3, [r3, #26]
 800820e:	f043 0302 	orr.w	r3, r3, #2
 8008212:	b29a      	uxth	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008218:	e23a      	b.n	8008690 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800821a:	4b9d      	ldr	r3, [pc, #628]	; (8008490 <tcp_process+0x5a4>)
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	f003 0310 	and.w	r3, r3, #16
 8008222:	2b00      	cmp	r3, #0
 8008224:	f000 8234 	beq.w	8008690 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008228:	4b9a      	ldr	r3, [pc, #616]	; (8008494 <tcp_process+0x5a8>)
 800822a:	6819      	ldr	r1, [r3, #0]
 800822c:	4b9a      	ldr	r3, [pc, #616]	; (8008498 <tcp_process+0x5ac>)
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	461a      	mov	r2, r3
 8008232:	4b9a      	ldr	r3, [pc, #616]	; (800849c <tcp_process+0x5b0>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008238:	4b99      	ldr	r3, [pc, #612]	; (80084a0 <tcp_process+0x5b4>)
 800823a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800823c:	885b      	ldrh	r3, [r3, #2]
 800823e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008240:	4a97      	ldr	r2, [pc, #604]	; (80084a0 <tcp_process+0x5b4>)
 8008242:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008244:	8812      	ldrh	r2, [r2, #0]
 8008246:	b292      	uxth	r2, r2
 8008248:	9202      	str	r2, [sp, #8]
 800824a:	9301      	str	r3, [sp, #4]
 800824c:	4b95      	ldr	r3, [pc, #596]	; (80084a4 <tcp_process+0x5b8>)
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	4b95      	ldr	r3, [pc, #596]	; (80084a8 <tcp_process+0x5bc>)
 8008252:	4602      	mov	r2, r0
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f002 fc83 	bl	800ab60 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008260:	2b05      	cmp	r3, #5
 8008262:	f200 8215 	bhi.w	8008690 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f002 fa4d 	bl	800a70c <tcp_rexmit_rto>
      break;
 8008272:	e20d      	b.n	8008690 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008274:	4b86      	ldr	r3, [pc, #536]	; (8008490 <tcp_process+0x5a4>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	f003 0310 	and.w	r3, r3, #16
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 80a1 	beq.w	80083c4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008282:	4b84      	ldr	r3, [pc, #528]	; (8008494 <tcp_process+0x5a8>)
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	3b01      	subs	r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	db7e      	blt.n	8008390 <tcp_process+0x4a4>
 8008292:	4b80      	ldr	r3, [pc, #512]	; (8008494 <tcp_process+0x5a8>)
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	2b00      	cmp	r3, #0
 800829e:	dc77      	bgt.n	8008390 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2204      	movs	r2, #4
 80082a4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d102      	bne.n	80082b4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80082ae:	23fa      	movs	r3, #250	; 0xfa
 80082b0:	76bb      	strb	r3, [r7, #26]
 80082b2:	e01d      	b.n	80082f0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d106      	bne.n	80082cc <tcp_process+0x3e0>
 80082be:	4b7b      	ldr	r3, [pc, #492]	; (80084ac <tcp_process+0x5c0>)
 80082c0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80082c4:	497a      	ldr	r1, [pc, #488]	; (80084b0 <tcp_process+0x5c4>)
 80082c6:	487b      	ldr	r0, [pc, #492]	; (80084b4 <tcp_process+0x5c8>)
 80082c8:	f005 ff82 	bl	800e1d0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00a      	beq.n	80082ec <tcp_process+0x400>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	6910      	ldr	r0, [r2, #16]
 80082e0:	2200      	movs	r2, #0
 80082e2:	6879      	ldr	r1, [r7, #4]
 80082e4:	4798      	blx	r3
 80082e6:	4603      	mov	r3, r0
 80082e8:	76bb      	strb	r3, [r7, #26]
 80082ea:	e001      	b.n	80082f0 <tcp_process+0x404>
 80082ec:	23f0      	movs	r3, #240	; 0xf0
 80082ee:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80082f0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00a      	beq.n	800830e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80082f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80082fc:	f113 0f0d 	cmn.w	r3, #13
 8008300:	d002      	beq.n	8008308 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7fd ff90 	bl	8006228 <tcp_abort>
            }
            return ERR_ABRT;
 8008308:	f06f 030c 	mvn.w	r3, #12
 800830c:	e1ce      	b.n	80086ac <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fae0 	bl	80088d4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008314:	4b68      	ldr	r3, [pc, #416]	; (80084b8 <tcp_process+0x5cc>)
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d005      	beq.n	8008328 <tcp_process+0x43c>
            recv_acked--;
 800831c:	4b66      	ldr	r3, [pc, #408]	; (80084b8 <tcp_process+0x5cc>)
 800831e:	881b      	ldrh	r3, [r3, #0]
 8008320:	3b01      	subs	r3, #1
 8008322:	b29a      	uxth	r2, r3
 8008324:	4b64      	ldr	r3, [pc, #400]	; (80084b8 <tcp_process+0x5cc>)
 8008326:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800832c:	009a      	lsls	r2, r3, #2
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	f241 111c 	movw	r1, #4380	; 0x111c
 8008338:	428b      	cmp	r3, r1
 800833a:	bf38      	it	cc
 800833c:	460b      	movcc	r3, r1
 800833e:	429a      	cmp	r2, r3
 8008340:	d204      	bcs.n	800834c <tcp_process+0x460>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	b29b      	uxth	r3, r3
 800834a:	e00d      	b.n	8008368 <tcp_process+0x47c>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008350:	005b      	lsls	r3, r3, #1
 8008352:	f241 121c 	movw	r2, #4380	; 0x111c
 8008356:	4293      	cmp	r3, r2
 8008358:	d904      	bls.n	8008364 <tcp_process+0x478>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	b29b      	uxth	r3, r3
 8008362:	e001      	b.n	8008368 <tcp_process+0x47c>
 8008364:	f241 131c 	movw	r3, #4380	; 0x111c
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800836e:	4b53      	ldr	r3, [pc, #332]	; (80084bc <tcp_process+0x5d0>)
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	f003 0320 	and.w	r3, r3, #32
 8008376:	2b00      	cmp	r3, #0
 8008378:	d037      	beq.n	80083ea <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	8b5b      	ldrh	r3, [r3, #26]
 800837e:	f043 0302 	orr.w	r3, r3, #2
 8008382:	b29a      	uxth	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2207      	movs	r2, #7
 800838c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800838e:	e02c      	b.n	80083ea <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008390:	4b40      	ldr	r3, [pc, #256]	; (8008494 <tcp_process+0x5a8>)
 8008392:	6819      	ldr	r1, [r3, #0]
 8008394:	4b40      	ldr	r3, [pc, #256]	; (8008498 <tcp_process+0x5ac>)
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	461a      	mov	r2, r3
 800839a:	4b40      	ldr	r3, [pc, #256]	; (800849c <tcp_process+0x5b0>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083a0:	4b3f      	ldr	r3, [pc, #252]	; (80084a0 <tcp_process+0x5b4>)
 80083a2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083a4:	885b      	ldrh	r3, [r3, #2]
 80083a6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083a8:	4a3d      	ldr	r2, [pc, #244]	; (80084a0 <tcp_process+0x5b4>)
 80083aa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083ac:	8812      	ldrh	r2, [r2, #0]
 80083ae:	b292      	uxth	r2, r2
 80083b0:	9202      	str	r2, [sp, #8]
 80083b2:	9301      	str	r3, [sp, #4]
 80083b4:	4b3b      	ldr	r3, [pc, #236]	; (80084a4 <tcp_process+0x5b8>)
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	4b3b      	ldr	r3, [pc, #236]	; (80084a8 <tcp_process+0x5bc>)
 80083ba:	4602      	mov	r2, r0
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f002 fbcf 	bl	800ab60 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80083c2:	e167      	b.n	8008694 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80083c4:	4b32      	ldr	r3, [pc, #200]	; (8008490 <tcp_process+0x5a4>)
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 8161 	beq.w	8008694 <tcp_process+0x7a8>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d6:	1e5a      	subs	r2, r3, #1
 80083d8:	4b30      	ldr	r3, [pc, #192]	; (800849c <tcp_process+0x5b0>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	429a      	cmp	r2, r3
 80083de:	f040 8159 	bne.w	8008694 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f002 f9b4 	bl	800a750 <tcp_rexmit>
      break;
 80083e8:	e154      	b.n	8008694 <tcp_process+0x7a8>
 80083ea:	e153      	b.n	8008694 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fa71 	bl	80088d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80083f2:	4b32      	ldr	r3, [pc, #200]	; (80084bc <tcp_process+0x5d0>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	f003 0320 	and.w	r3, r3, #32
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f000 814c 	beq.w	8008698 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	8b5b      	ldrh	r3, [r3, #26]
 8008404:	f043 0302 	orr.w	r3, r3, #2
 8008408:	b29a      	uxth	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2207      	movs	r2, #7
 8008412:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008414:	e140      	b.n	8008698 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fa5c 	bl	80088d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800841c:	4b27      	ldr	r3, [pc, #156]	; (80084bc <tcp_process+0x5d0>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	f003 0320 	and.w	r3, r3, #32
 8008424:	2b00      	cmp	r3, #0
 8008426:	d071      	beq.n	800850c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008428:	4b19      	ldr	r3, [pc, #100]	; (8008490 <tcp_process+0x5a4>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	f003 0310 	and.w	r3, r3, #16
 8008430:	2b00      	cmp	r3, #0
 8008432:	d060      	beq.n	80084f6 <tcp_process+0x60a>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008438:	4b16      	ldr	r3, [pc, #88]	; (8008494 <tcp_process+0x5a8>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	429a      	cmp	r2, r3
 800843e:	d15a      	bne.n	80084f6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008444:	2b00      	cmp	r3, #0
 8008446:	d156      	bne.n	80084f6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	8b5b      	ldrh	r3, [r3, #26]
 800844c:	f043 0302 	orr.w	r3, r3, #2
 8008450:	b29a      	uxth	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7fe fdbe 	bl	8006fd8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800845c:	4b18      	ldr	r3, [pc, #96]	; (80084c0 <tcp_process+0x5d4>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	429a      	cmp	r2, r3
 8008464:	d105      	bne.n	8008472 <tcp_process+0x586>
 8008466:	4b16      	ldr	r3, [pc, #88]	; (80084c0 <tcp_process+0x5d4>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	4a14      	ldr	r2, [pc, #80]	; (80084c0 <tcp_process+0x5d4>)
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	e02e      	b.n	80084d0 <tcp_process+0x5e4>
 8008472:	4b13      	ldr	r3, [pc, #76]	; (80084c0 <tcp_process+0x5d4>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	617b      	str	r3, [r7, #20]
 8008478:	e027      	b.n	80084ca <tcp_process+0x5de>
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	429a      	cmp	r2, r3
 8008482:	d11f      	bne.n	80084c4 <tcp_process+0x5d8>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68da      	ldr	r2, [r3, #12]
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	60da      	str	r2, [r3, #12]
 800848c:	e020      	b.n	80084d0 <tcp_process+0x5e4>
 800848e:	bf00      	nop
 8008490:	200000fc 	.word	0x200000fc
 8008494:	200000f4 	.word	0x200000f4
 8008498:	200000fa 	.word	0x200000fa
 800849c:	200000f0 	.word	0x200000f0
 80084a0:	200000e0 	.word	0x200000e0
 80084a4:	2000345c 	.word	0x2000345c
 80084a8:	20003460 	.word	0x20003460
 80084ac:	080107ec 	.word	0x080107ec
 80084b0:	08010a8c 	.word	0x08010a8c
 80084b4:	08010838 	.word	0x08010838
 80084b8:	200000f8 	.word	0x200000f8
 80084bc:	200000fd 	.word	0x200000fd
 80084c0:	20008b50 	.word	0x20008b50
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	617b      	str	r3, [r7, #20]
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1d4      	bne.n	800847a <tcp_process+0x58e>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	60da      	str	r2, [r3, #12]
 80084d6:	4b77      	ldr	r3, [pc, #476]	; (80086b4 <tcp_process+0x7c8>)
 80084d8:	2201      	movs	r2, #1
 80084da:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	220a      	movs	r2, #10
 80084e0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80084e2:	4b75      	ldr	r3, [pc, #468]	; (80086b8 <tcp_process+0x7cc>)
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	60da      	str	r2, [r3, #12]
 80084ea:	4a73      	ldr	r2, [pc, #460]	; (80086b8 <tcp_process+0x7cc>)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6013      	str	r3, [r2, #0]
 80084f0:	f002 fcf8 	bl	800aee4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80084f4:	e0d2      	b.n	800869c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	8b5b      	ldrh	r3, [r3, #26]
 80084fa:	f043 0302 	orr.w	r3, r3, #2
 80084fe:	b29a      	uxth	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2208      	movs	r2, #8
 8008508:	751a      	strb	r2, [r3, #20]
      break;
 800850a:	e0c7      	b.n	800869c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800850c:	4b6b      	ldr	r3, [pc, #428]	; (80086bc <tcp_process+0x7d0>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	f003 0310 	and.w	r3, r3, #16
 8008514:	2b00      	cmp	r3, #0
 8008516:	f000 80c1 	beq.w	800869c <tcp_process+0x7b0>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800851e:	4b68      	ldr	r3, [pc, #416]	; (80086c0 <tcp_process+0x7d4>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	429a      	cmp	r2, r3
 8008524:	f040 80ba 	bne.w	800869c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800852c:	2b00      	cmp	r3, #0
 800852e:	f040 80b5 	bne.w	800869c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2206      	movs	r2, #6
 8008536:	751a      	strb	r2, [r3, #20]
      break;
 8008538:	e0b0      	b.n	800869c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f9ca 	bl	80088d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008540:	4b60      	ldr	r3, [pc, #384]	; (80086c4 <tcp_process+0x7d8>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	f003 0320 	and.w	r3, r3, #32
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 80a9 	beq.w	80086a0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	8b5b      	ldrh	r3, [r3, #26]
 8008552:	f043 0302 	orr.w	r3, r3, #2
 8008556:	b29a      	uxth	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f7fe fd3b 	bl	8006fd8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008562:	4b59      	ldr	r3, [pc, #356]	; (80086c8 <tcp_process+0x7dc>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	429a      	cmp	r2, r3
 800856a:	d105      	bne.n	8008578 <tcp_process+0x68c>
 800856c:	4b56      	ldr	r3, [pc, #344]	; (80086c8 <tcp_process+0x7dc>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	4a55      	ldr	r2, [pc, #340]	; (80086c8 <tcp_process+0x7dc>)
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	e013      	b.n	80085a0 <tcp_process+0x6b4>
 8008578:	4b53      	ldr	r3, [pc, #332]	; (80086c8 <tcp_process+0x7dc>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	613b      	str	r3, [r7, #16]
 800857e:	e00c      	b.n	800859a <tcp_process+0x6ae>
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	429a      	cmp	r2, r3
 8008588:	d104      	bne.n	8008594 <tcp_process+0x6a8>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68da      	ldr	r2, [r3, #12]
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	60da      	str	r2, [r3, #12]
 8008592:	e005      	b.n	80085a0 <tcp_process+0x6b4>
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	613b      	str	r3, [r7, #16]
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1ef      	bne.n	8008580 <tcp_process+0x694>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	60da      	str	r2, [r3, #12]
 80085a6:	4b43      	ldr	r3, [pc, #268]	; (80086b4 <tcp_process+0x7c8>)
 80085a8:	2201      	movs	r2, #1
 80085aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	220a      	movs	r2, #10
 80085b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80085b2:	4b41      	ldr	r3, [pc, #260]	; (80086b8 <tcp_process+0x7cc>)
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	60da      	str	r2, [r3, #12]
 80085ba:	4a3f      	ldr	r2, [pc, #252]	; (80086b8 <tcp_process+0x7cc>)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6013      	str	r3, [r2, #0]
 80085c0:	f002 fc90 	bl	800aee4 <tcp_timer_needed>
      }
      break;
 80085c4:	e06c      	b.n	80086a0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f984 	bl	80088d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80085cc:	4b3b      	ldr	r3, [pc, #236]	; (80086bc <tcp_process+0x7d0>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	f003 0310 	and.w	r3, r3, #16
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d065      	beq.n	80086a4 <tcp_process+0x7b8>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085dc:	4b38      	ldr	r3, [pc, #224]	; (80086c0 <tcp_process+0x7d4>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d15f      	bne.n	80086a4 <tcp_process+0x7b8>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d15b      	bne.n	80086a4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7fe fcf3 	bl	8006fd8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80085f2:	4b35      	ldr	r3, [pc, #212]	; (80086c8 <tcp_process+0x7dc>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d105      	bne.n	8008608 <tcp_process+0x71c>
 80085fc:	4b32      	ldr	r3, [pc, #200]	; (80086c8 <tcp_process+0x7dc>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	4a31      	ldr	r2, [pc, #196]	; (80086c8 <tcp_process+0x7dc>)
 8008604:	6013      	str	r3, [r2, #0]
 8008606:	e013      	b.n	8008630 <tcp_process+0x744>
 8008608:	4b2f      	ldr	r3, [pc, #188]	; (80086c8 <tcp_process+0x7dc>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	e00c      	b.n	800862a <tcp_process+0x73e>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	429a      	cmp	r2, r3
 8008618:	d104      	bne.n	8008624 <tcp_process+0x738>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	68da      	ldr	r2, [r3, #12]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	60da      	str	r2, [r3, #12]
 8008622:	e005      	b.n	8008630 <tcp_process+0x744>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	60fb      	str	r3, [r7, #12]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1ef      	bne.n	8008610 <tcp_process+0x724>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	60da      	str	r2, [r3, #12]
 8008636:	4b1f      	ldr	r3, [pc, #124]	; (80086b4 <tcp_process+0x7c8>)
 8008638:	2201      	movs	r2, #1
 800863a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	220a      	movs	r2, #10
 8008640:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008642:	4b1d      	ldr	r3, [pc, #116]	; (80086b8 <tcp_process+0x7cc>)
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	60da      	str	r2, [r3, #12]
 800864a:	4a1b      	ldr	r2, [pc, #108]	; (80086b8 <tcp_process+0x7cc>)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	f002 fc48 	bl	800aee4 <tcp_timer_needed>
      }
      break;
 8008654:	e026      	b.n	80086a4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f93c 	bl	80088d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800865c:	4b17      	ldr	r3, [pc, #92]	; (80086bc <tcp_process+0x7d0>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	f003 0310 	and.w	r3, r3, #16
 8008664:	2b00      	cmp	r3, #0
 8008666:	d01f      	beq.n	80086a8 <tcp_process+0x7bc>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800866c:	4b14      	ldr	r3, [pc, #80]	; (80086c0 <tcp_process+0x7d4>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	429a      	cmp	r2, r3
 8008672:	d119      	bne.n	80086a8 <tcp_process+0x7bc>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008678:	2b00      	cmp	r3, #0
 800867a:	d115      	bne.n	80086a8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800867c:	4b11      	ldr	r3, [pc, #68]	; (80086c4 <tcp_process+0x7d8>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	f043 0310 	orr.w	r3, r3, #16
 8008684:	b2da      	uxtb	r2, r3
 8008686:	4b0f      	ldr	r3, [pc, #60]	; (80086c4 <tcp_process+0x7d8>)
 8008688:	701a      	strb	r2, [r3, #0]
      }
      break;
 800868a:	e00d      	b.n	80086a8 <tcp_process+0x7bc>
    default:
      break;
 800868c:	bf00      	nop
 800868e:	e00c      	b.n	80086aa <tcp_process+0x7be>
      break;
 8008690:	bf00      	nop
 8008692:	e00a      	b.n	80086aa <tcp_process+0x7be>
      break;
 8008694:	bf00      	nop
 8008696:	e008      	b.n	80086aa <tcp_process+0x7be>
      break;
 8008698:	bf00      	nop
 800869a:	e006      	b.n	80086aa <tcp_process+0x7be>
      break;
 800869c:	bf00      	nop
 800869e:	e004      	b.n	80086aa <tcp_process+0x7be>
      break;
 80086a0:	bf00      	nop
 80086a2:	e002      	b.n	80086aa <tcp_process+0x7be>
      break;
 80086a4:	bf00      	nop
 80086a6:	e000      	b.n	80086aa <tcp_process+0x7be>
      break;
 80086a8:	bf00      	nop
  }
  return ERR_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3724      	adds	r7, #36	; 0x24
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd90      	pop	{r4, r7, pc}
 80086b4:	20008b4c 	.word	0x20008b4c
 80086b8:	20008b60 	.word	0x20008b60
 80086bc:	200000fc 	.word	0x200000fc
 80086c0:	200000f4 	.word	0x200000f4
 80086c4:	200000fd 	.word	0x200000fd
 80086c8:	20008b50 	.word	0x20008b50

080086cc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80086cc:	b590      	push	{r4, r7, lr}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d106      	bne.n	80086ea <tcp_oos_insert_segment+0x1e>
 80086dc:	4b3b      	ldr	r3, [pc, #236]	; (80087cc <tcp_oos_insert_segment+0x100>)
 80086de:	f240 421f 	movw	r2, #1055	; 0x41f
 80086e2:	493b      	ldr	r1, [pc, #236]	; (80087d0 <tcp_oos_insert_segment+0x104>)
 80086e4:	483b      	ldr	r0, [pc, #236]	; (80087d4 <tcp_oos_insert_segment+0x108>)
 80086e6:	f005 fd73 	bl	800e1d0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	899b      	ldrh	r3, [r3, #12]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fb fcba 	bl	800406c <lwip_htons>
 80086f8:	4603      	mov	r3, r0
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	2b00      	cmp	r3, #0
 8008702:	d028      	beq.n	8008756 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008704:	6838      	ldr	r0, [r7, #0]
 8008706:	f7fe fa65 	bl	8006bd4 <tcp_segs_free>
    next = NULL;
 800870a:	2300      	movs	r3, #0
 800870c:	603b      	str	r3, [r7, #0]
 800870e:	e056      	b.n	80087be <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	899b      	ldrh	r3, [r3, #12]
 8008716:	b29b      	uxth	r3, r3
 8008718:	4618      	mov	r0, r3
 800871a:	f7fb fca7 	bl	800406c <lwip_htons>
 800871e:	4603      	mov	r3, r0
 8008720:	b2db      	uxtb	r3, r3
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00d      	beq.n	8008746 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	899b      	ldrh	r3, [r3, #12]
 8008730:	b29c      	uxth	r4, r3
 8008732:	2001      	movs	r0, #1
 8008734:	f7fb fc9a 	bl	800406c <lwip_htons>
 8008738:	4603      	mov	r3, r0
 800873a:	461a      	mov	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	4322      	orrs	r2, r4
 8008742:	b292      	uxth	r2, r2
 8008744:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f7fe fa54 	bl	8006bfe <tcp_seg_free>
    while (next &&
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00e      	beq.n	800877a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	891b      	ldrh	r3, [r3, #8]
 8008760:	461a      	mov	r2, r3
 8008762:	4b1d      	ldr	r3, [pc, #116]	; (80087d8 <tcp_oos_insert_segment+0x10c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	441a      	add	r2, r3
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	8909      	ldrh	r1, [r1, #8]
 8008772:	440b      	add	r3, r1
 8008774:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008776:	2b00      	cmp	r3, #0
 8008778:	daca      	bge.n	8008710 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d01e      	beq.n	80087be <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	891b      	ldrh	r3, [r3, #8]
 8008784:	461a      	mov	r2, r3
 8008786:	4b14      	ldr	r3, [pc, #80]	; (80087d8 <tcp_oos_insert_segment+0x10c>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	441a      	add	r2, r3
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008794:	2b00      	cmp	r3, #0
 8008796:	dd12      	ble.n	80087be <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	b29a      	uxth	r2, r3
 80087a0:	4b0d      	ldr	r3, [pc, #52]	; (80087d8 <tcp_oos_insert_segment+0x10c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	891b      	ldrh	r3, [r3, #8]
 80087b6:	4619      	mov	r1, r3
 80087b8:	4610      	mov	r0, r2
 80087ba:	f7fc fd85 	bl	80052c8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	601a      	str	r2, [r3, #0]
}
 80087c4:	bf00      	nop
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd90      	pop	{r4, r7, pc}
 80087cc:	080107ec 	.word	0x080107ec
 80087d0:	08010aac 	.word	0x08010aac
 80087d4:	08010838 	.word	0x08010838
 80087d8:	200000f0 	.word	0x200000f0

080087dc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80087dc:	b5b0      	push	{r4, r5, r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80087ea:	e03e      	b.n	800886a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fc ff72 	bl	80056e4 <pbuf_clen>
 8008800:	4603      	mov	r3, r0
 8008802:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800880a:	8a7a      	ldrh	r2, [r7, #18]
 800880c:	429a      	cmp	r2, r3
 800880e:	d906      	bls.n	800881e <tcp_free_acked_segments+0x42>
 8008810:	4b2a      	ldr	r3, [pc, #168]	; (80088bc <tcp_free_acked_segments+0xe0>)
 8008812:	f240 4257 	movw	r2, #1111	; 0x457
 8008816:	492a      	ldr	r1, [pc, #168]	; (80088c0 <tcp_free_acked_segments+0xe4>)
 8008818:	482a      	ldr	r0, [pc, #168]	; (80088c4 <tcp_free_acked_segments+0xe8>)
 800881a:	f005 fcd9 	bl	800e1d0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008824:	8a7b      	ldrh	r3, [r7, #18]
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	b29a      	uxth	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	891a      	ldrh	r2, [r3, #8]
 8008834:	4b24      	ldr	r3, [pc, #144]	; (80088c8 <tcp_free_acked_segments+0xec>)
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	4413      	add	r3, r2
 800883a:	b29a      	uxth	r2, r3
 800883c:	4b22      	ldr	r3, [pc, #136]	; (80088c8 <tcp_free_acked_segments+0xec>)
 800883e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008840:	6978      	ldr	r0, [r7, #20]
 8008842:	f7fe f9dc 	bl	8006bfe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00c      	beq.n	800886a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d109      	bne.n	800886a <tcp_free_acked_segments+0x8e>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d106      	bne.n	800886a <tcp_free_acked_segments+0x8e>
 800885c:	4b17      	ldr	r3, [pc, #92]	; (80088bc <tcp_free_acked_segments+0xe0>)
 800885e:	f240 4261 	movw	r2, #1121	; 0x461
 8008862:	491a      	ldr	r1, [pc, #104]	; (80088cc <tcp_free_acked_segments+0xf0>)
 8008864:	4817      	ldr	r0, [pc, #92]	; (80088c4 <tcp_free_acked_segments+0xe8>)
 8008866:	f005 fcb3 	bl	800e1d0 <iprintf>
  while (seg_list != NULL &&
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d020      	beq.n	80088b2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	4618      	mov	r0, r3
 8008878:	f7fb fc0d 	bl	8004096 <lwip_htonl>
 800887c:	4604      	mov	r4, r0
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	891b      	ldrh	r3, [r3, #8]
 8008882:	461d      	mov	r5, r3
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	899b      	ldrh	r3, [r3, #12]
 800888a:	b29b      	uxth	r3, r3
 800888c:	4618      	mov	r0, r3
 800888e:	f7fb fbed 	bl	800406c <lwip_htons>
 8008892:	4603      	mov	r3, r0
 8008894:	b2db      	uxtb	r3, r3
 8008896:	f003 0303 	and.w	r3, r3, #3
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <tcp_free_acked_segments+0xc6>
 800889e:	2301      	movs	r3, #1
 80088a0:	e000      	b.n	80088a4 <tcp_free_acked_segments+0xc8>
 80088a2:	2300      	movs	r3, #0
 80088a4:	442b      	add	r3, r5
 80088a6:	18e2      	adds	r2, r4, r3
 80088a8:	4b09      	ldr	r3, [pc, #36]	; (80088d0 <tcp_free_acked_segments+0xf4>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	dd9c      	ble.n	80087ec <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80088b2:	68bb      	ldr	r3, [r7, #8]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3718      	adds	r7, #24
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bdb0      	pop	{r4, r5, r7, pc}
 80088bc:	080107ec 	.word	0x080107ec
 80088c0:	08010ad4 	.word	0x08010ad4
 80088c4:	08010838 	.word	0x08010838
 80088c8:	200000f8 	.word	0x200000f8
 80088cc:	08010afc 	.word	0x08010afc
 80088d0:	200000f4 	.word	0x200000f4

080088d4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80088d4:	b5b0      	push	{r4, r5, r7, lr}
 80088d6:	b094      	sub	sp, #80	; 0x50
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80088dc:	2300      	movs	r3, #0
 80088de:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d106      	bne.n	80088f4 <tcp_receive+0x20>
 80088e6:	4ba6      	ldr	r3, [pc, #664]	; (8008b80 <tcp_receive+0x2ac>)
 80088e8:	f240 427b 	movw	r2, #1147	; 0x47b
 80088ec:	49a5      	ldr	r1, [pc, #660]	; (8008b84 <tcp_receive+0x2b0>)
 80088ee:	48a6      	ldr	r0, [pc, #664]	; (8008b88 <tcp_receive+0x2b4>)
 80088f0:	f005 fc6e 	bl	800e1d0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	7d1b      	ldrb	r3, [r3, #20]
 80088f8:	2b03      	cmp	r3, #3
 80088fa:	d806      	bhi.n	800890a <tcp_receive+0x36>
 80088fc:	4ba0      	ldr	r3, [pc, #640]	; (8008b80 <tcp_receive+0x2ac>)
 80088fe:	f240 427c 	movw	r2, #1148	; 0x47c
 8008902:	49a2      	ldr	r1, [pc, #648]	; (8008b8c <tcp_receive+0x2b8>)
 8008904:	48a0      	ldr	r0, [pc, #640]	; (8008b88 <tcp_receive+0x2b4>)
 8008906:	f005 fc63 	bl	800e1d0 <iprintf>

  if (flags & TCP_ACK) {
 800890a:	4ba1      	ldr	r3, [pc, #644]	; (8008b90 <tcp_receive+0x2bc>)
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	f003 0310 	and.w	r3, r3, #16
 8008912:	2b00      	cmp	r3, #0
 8008914:	f000 8263 	beq.w	8008dde <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800891e:	461a      	mov	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008924:	4413      	add	r3, r2
 8008926:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800892c:	4b99      	ldr	r3, [pc, #612]	; (8008b94 <tcp_receive+0x2c0>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	db1b      	blt.n	800896e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800893a:	4b96      	ldr	r3, [pc, #600]	; (8008b94 <tcp_receive+0x2c0>)
 800893c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800893e:	429a      	cmp	r2, r3
 8008940:	d106      	bne.n	8008950 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008946:	4b94      	ldr	r3, [pc, #592]	; (8008b98 <tcp_receive+0x2c4>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	2b00      	cmp	r3, #0
 800894e:	db0e      	blt.n	800896e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008954:	4b90      	ldr	r3, [pc, #576]	; (8008b98 <tcp_receive+0x2c4>)
 8008956:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008958:	429a      	cmp	r2, r3
 800895a:	d125      	bne.n	80089a8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800895c:	4b8f      	ldr	r3, [pc, #572]	; (8008b9c <tcp_receive+0x2c8>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	89db      	ldrh	r3, [r3, #14]
 8008962:	b29a      	uxth	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800896a:	429a      	cmp	r2, r3
 800896c:	d91c      	bls.n	80089a8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800896e:	4b8b      	ldr	r3, [pc, #556]	; (8008b9c <tcp_receive+0x2c8>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	89db      	ldrh	r3, [r3, #14]
 8008974:	b29a      	uxth	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008988:	429a      	cmp	r2, r3
 800898a:	d205      	bcs.n	8008998 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008998:	4b7e      	ldr	r3, [pc, #504]	; (8008b94 <tcp_receive+0x2c0>)
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80089a0:	4b7d      	ldr	r3, [pc, #500]	; (8008b98 <tcp_receive+0x2c4>)
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80089a8:	4b7b      	ldr	r3, [pc, #492]	; (8008b98 <tcp_receive+0x2c4>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	dc58      	bgt.n	8008a68 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80089b6:	4b7a      	ldr	r3, [pc, #488]	; (8008ba0 <tcp_receive+0x2cc>)
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d14b      	bne.n	8008a56 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80089c8:	4413      	add	r3, r2
 80089ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d142      	bne.n	8008a56 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	db3d      	blt.n	8008a56 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089de:	4b6e      	ldr	r3, [pc, #440]	; (8008b98 <tcp_receive+0x2c4>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d137      	bne.n	8008a56 <tcp_receive+0x182>
              found_dupack = 1;
 80089e6:	2301      	movs	r3, #1
 80089e8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80089f0:	2bff      	cmp	r3, #255	; 0xff
 80089f2:	d007      	beq.n	8008a04 <tcp_receive+0x130>
                ++pcb->dupacks;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80089fa:	3301      	adds	r3, #1
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a0a:	2b03      	cmp	r3, #3
 8008a0c:	d91b      	bls.n	8008a46 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a18:	4413      	add	r3, r2
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d30a      	bcc.n	8008a3c <tcp_receive+0x168>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a30:	4413      	add	r3, r2
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008a3a:	e004      	b.n	8008a46 <tcp_receive+0x172>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d902      	bls.n	8008a56 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f001 fee9 	bl	800a828 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f040 8160 	bne.w	8008d1e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a66:	e15a      	b.n	8008d1e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008a68:	4b4b      	ldr	r3, [pc, #300]	; (8008b98 <tcp_receive+0x2c4>)
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	3b01      	subs	r3, #1
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f2c0 814d 	blt.w	8008d14 <tcp_receive+0x440>
 8008a7a:	4b47      	ldr	r3, [pc, #284]	; (8008b98 <tcp_receive+0x2c4>)
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f300 8145 	bgt.w	8008d14 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	8b5b      	ldrh	r3, [r3, #26]
 8008a8e:	f003 0304 	and.w	r3, r3, #4
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d010      	beq.n	8008ab8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	8b5b      	ldrh	r3, [r3, #26]
 8008a9a:	f023 0304 	bic.w	r3, r3, #4
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008ac6:	10db      	asrs	r3, r3, #3
 8008ac8:	b21b      	sxth	r3, r3
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	4413      	add	r3, r2
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	b21a      	sxth	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008ae0:	4b2d      	ldr	r3, [pc, #180]	; (8008b98 <tcp_receive+0x2c4>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008af8:	4b27      	ldr	r3, [pc, #156]	; (8008b98 <tcp_receive+0x2c4>)
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	7d1b      	ldrb	r3, [r3, #20]
 8008b04:	2b03      	cmp	r3, #3
 8008b06:	f240 8096 	bls.w	8008c36 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d244      	bcs.n	8008ba4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	8b5b      	ldrh	r3, [r3, #26]
 8008b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <tcp_receive+0x256>
 8008b26:	2301      	movs	r3, #1
 8008b28:	e000      	b.n	8008b2c <tcp_receive+0x258>
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008b30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b3a:	fb12 f303 	smulbb	r3, r2, r3
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008b42:	4293      	cmp	r3, r2
 8008b44:	bf28      	it	cs
 8008b46:	4613      	movcs	r3, r2
 8008b48:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008b50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008b52:	4413      	add	r3, r2
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d309      	bcc.n	8008b74 <tcp_receive+0x2a0>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008b66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008b68:	4413      	add	r3, r2
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008b72:	e060      	b.n	8008c36 <tcp_receive+0x362>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008b7e:	e05a      	b.n	8008c36 <tcp_receive+0x362>
 8008b80:	080107ec 	.word	0x080107ec
 8008b84:	08010b1c 	.word	0x08010b1c
 8008b88:	08010838 	.word	0x08010838
 8008b8c:	08010b38 	.word	0x08010b38
 8008b90:	200000fc 	.word	0x200000fc
 8008b94:	200000f0 	.word	0x200000f0
 8008b98:	200000f4 	.word	0x200000f4
 8008b9c:	200000e0 	.word	0x200000e0
 8008ba0:	200000fa 	.word	0x200000fa
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008baa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008bac:	4413      	add	r3, r2
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d309      	bcc.n	8008bce <tcp_receive+0x2fa>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008bc0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008bc2:	4413      	add	r3, r2
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008bcc:	e004      	b.n	8008bd8 <tcp_receive+0x304>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d326      	bcc.n	8008c36 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c08:	4413      	add	r3, r2
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d30a      	bcc.n	8008c2c <tcp_receive+0x358>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c20:	4413      	add	r3, r2
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008c2a:	e004      	b.n	8008c36 <tcp_receive+0x362>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c3e:	4a98      	ldr	r2, [pc, #608]	; (8008ea0 <tcp_receive+0x5cc>)
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7ff fdcb 	bl	80087dc <tcp_free_acked_segments>
 8008c46:	4602      	mov	r2, r0
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c54:	4a93      	ldr	r2, [pc, #588]	; (8008ea4 <tcp_receive+0x5d0>)
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7ff fdc0 	bl	80087dc <tcp_free_acked_segments>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d104      	bne.n	8008c74 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c70:	861a      	strh	r2, [r3, #48]	; 0x30
 8008c72:	e002      	b.n	8008c7a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d103      	bne.n	8008c90 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8008c96:	4b84      	ldr	r3, [pc, #528]	; (8008ea8 <tcp_receive+0x5d4>)
 8008c98:	881b      	ldrh	r3, [r3, #0]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	8b5b      	ldrh	r3, [r3, #26]
 8008ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d035      	beq.n	8008d1c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d118      	bne.n	8008cea <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00c      	beq.n	8008cda <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fb f9e2 	bl	8004096 <lwip_htonl>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	dc20      	bgt.n	8008d1c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	8b5b      	ldrh	r3, [r3, #26]
 8008cde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008ce8:	e018      	b.n	8008d1c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fb f9cd 	bl	8004096 <lwip_htonl>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	1ae3      	subs	r3, r4, r3
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	dc0b      	bgt.n	8008d1c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	8b5b      	ldrh	r3, [r3, #26]
 8008d08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008d12:	e003      	b.n	8008d1c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f001 ff75 	bl	800ac04 <tcp_send_empty_ack>
 8008d1a:	e000      	b.n	8008d1e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008d1c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d05b      	beq.n	8008dde <tcp_receive+0x50a>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d2a:	4b60      	ldr	r3, [pc, #384]	; (8008eac <tcp_receive+0x5d8>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	da54      	bge.n	8008dde <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008d34:	4b5e      	ldr	r3, [pc, #376]	; (8008eb0 <tcp_receive+0x5dc>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008d48:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008d52:	10db      	asrs	r3, r3, #3
 8008d54:	b21b      	sxth	r3, r3
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008d6c:	4413      	add	r3, r2
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	b21a      	sxth	r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008d76:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	da05      	bge.n	8008d8a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8008d7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008d82:	425b      	negs	r3, r3
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008d8a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008d94:	109b      	asrs	r3, r3, #2
 8008d96:	b21b      	sxth	r3, r3
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008dae:	4413      	add	r3, r2
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	b21a      	sxth	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008dbe:	10db      	asrs	r3, r3, #3
 8008dc0:	b21b      	sxth	r3, r3
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	4413      	add	r3, r2
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	b21a      	sxth	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008dde:	4b35      	ldr	r3, [pc, #212]	; (8008eb4 <tcp_receive+0x5e0>)
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 84e1 	beq.w	80097aa <tcp_receive+0xed6>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	7d1b      	ldrb	r3, [r3, #20]
 8008dec:	2b06      	cmp	r3, #6
 8008dee:	f200 84dc 	bhi.w	80097aa <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008df6:	4b30      	ldr	r3, [pc, #192]	; (8008eb8 <tcp_receive+0x5e4>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f2c0 808e 	blt.w	8008f20 <tcp_receive+0x64c>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e08:	4b2a      	ldr	r3, [pc, #168]	; (8008eb4 <tcp_receive+0x5e0>)
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	4b2a      	ldr	r3, [pc, #168]	; (8008eb8 <tcp_receive+0x5e4>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	440b      	add	r3, r1
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	3301      	adds	r3, #1
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f300 8081 	bgt.w	8008f20 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008e1e:	4b27      	ldr	r3, [pc, #156]	; (8008ebc <tcp_receive+0x5e8>)
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e28:	4b23      	ldr	r3, [pc, #140]	; (8008eb8 <tcp_receive+0x5e4>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008e30:	4b22      	ldr	r3, [pc, #136]	; (8008ebc <tcp_receive+0x5e8>)
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d106      	bne.n	8008e46 <tcp_receive+0x572>
 8008e38:	4b21      	ldr	r3, [pc, #132]	; (8008ec0 <tcp_receive+0x5ec>)
 8008e3a:	f240 5294 	movw	r2, #1428	; 0x594
 8008e3e:	4921      	ldr	r1, [pc, #132]	; (8008ec4 <tcp_receive+0x5f0>)
 8008e40:	4821      	ldr	r0, [pc, #132]	; (8008ec8 <tcp_receive+0x5f4>)
 8008e42:	f005 f9c5 	bl	800e1d0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d906      	bls.n	8008e5e <tcp_receive+0x58a>
 8008e50:	4b1b      	ldr	r3, [pc, #108]	; (8008ec0 <tcp_receive+0x5ec>)
 8008e52:	f240 5295 	movw	r2, #1429	; 0x595
 8008e56:	491d      	ldr	r1, [pc, #116]	; (8008ecc <tcp_receive+0x5f8>)
 8008e58:	481b      	ldr	r0, [pc, #108]	; (8008ec8 <tcp_receive+0x5f4>)
 8008e5a:	f005 f9b9 	bl	800e1d0 <iprintf>
      off = (u16_t)off32;
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008e64:	4b15      	ldr	r3, [pc, #84]	; (8008ebc <tcp_receive+0x5e8>)
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	891b      	ldrh	r3, [r3, #8]
 8008e6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d906      	bls.n	8008e80 <tcp_receive+0x5ac>
 8008e72:	4b13      	ldr	r3, [pc, #76]	; (8008ec0 <tcp_receive+0x5ec>)
 8008e74:	f240 5297 	movw	r2, #1431	; 0x597
 8008e78:	4915      	ldr	r1, [pc, #84]	; (8008ed0 <tcp_receive+0x5fc>)
 8008e7a:	4813      	ldr	r0, [pc, #76]	; (8008ec8 <tcp_receive+0x5f4>)
 8008e7c:	f005 f9a8 	bl	800e1d0 <iprintf>
      inseg.len -= off;
 8008e80:	4b0e      	ldr	r3, [pc, #56]	; (8008ebc <tcp_receive+0x5e8>)
 8008e82:	891a      	ldrh	r2, [r3, #8]
 8008e84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	4b0b      	ldr	r3, [pc, #44]	; (8008ebc <tcp_receive+0x5e8>)
 8008e8e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008e90:	4b0a      	ldr	r3, [pc, #40]	; (8008ebc <tcp_receive+0x5e8>)
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	891a      	ldrh	r2, [r3, #8]
 8008e96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8008e9e:	e029      	b.n	8008ef4 <tcp_receive+0x620>
 8008ea0:	08010b54 	.word	0x08010b54
 8008ea4:	08010b5c 	.word	0x08010b5c
 8008ea8:	200000f8 	.word	0x200000f8
 8008eac:	200000f4 	.word	0x200000f4
 8008eb0:	20008b54 	.word	0x20008b54
 8008eb4:	200000fa 	.word	0x200000fa
 8008eb8:	200000f0 	.word	0x200000f0
 8008ebc:	200000d0 	.word	0x200000d0
 8008ec0:	080107ec 	.word	0x080107ec
 8008ec4:	08010b64 	.word	0x08010b64
 8008ec8:	08010838 	.word	0x08010838
 8008ecc:	08010b74 	.word	0x08010b74
 8008ed0:	08010b84 	.word	0x08010b84
        off -= p->len;
 8008ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ed6:	895b      	ldrh	r3, [r3, #10]
 8008ed8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ee4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008ee6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eea:	2200      	movs	r2, #0
 8008eec:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ef6:	895b      	ldrh	r3, [r3, #10]
 8008ef8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d8e9      	bhi.n	8008ed4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008f00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008f04:	4619      	mov	r1, r3
 8008f06:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008f08:	f7fc fade 	bl	80054c8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f10:	4a91      	ldr	r2, [pc, #580]	; (8009158 <tcp_receive+0x884>)
 8008f12:	6013      	str	r3, [r2, #0]
 8008f14:	4b91      	ldr	r3, [pc, #580]	; (800915c <tcp_receive+0x888>)
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	4a8f      	ldr	r2, [pc, #572]	; (8009158 <tcp_receive+0x884>)
 8008f1a:	6812      	ldr	r2, [r2, #0]
 8008f1c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008f1e:	e00d      	b.n	8008f3c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008f20:	4b8d      	ldr	r3, [pc, #564]	; (8009158 <tcp_receive+0x884>)
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	da06      	bge.n	8008f3c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	8b5b      	ldrh	r3, [r3, #26]
 8008f32:	f043 0302 	orr.w	r3, r3, #2
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008f3c:	4b86      	ldr	r3, [pc, #536]	; (8009158 <tcp_receive+0x884>)
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f2c0 842a 	blt.w	80097a0 <tcp_receive+0xecc>
 8008f4c:	4b82      	ldr	r3, [pc, #520]	; (8009158 <tcp_receive+0x884>)
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	6879      	ldr	r1, [r7, #4]
 8008f56:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008f58:	440b      	add	r3, r1
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f300 841e 	bgt.w	80097a0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f68:	4b7b      	ldr	r3, [pc, #492]	; (8009158 <tcp_receive+0x884>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	f040 829a 	bne.w	80094a6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008f72:	4b7a      	ldr	r3, [pc, #488]	; (800915c <tcp_receive+0x888>)
 8008f74:	891c      	ldrh	r4, [r3, #8]
 8008f76:	4b79      	ldr	r3, [pc, #484]	; (800915c <tcp_receive+0x888>)
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	899b      	ldrh	r3, [r3, #12]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fb f874 	bl	800406c <lwip_htons>
 8008f84:	4603      	mov	r3, r0
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	f003 0303 	and.w	r3, r3, #3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <tcp_receive+0x6c0>
 8008f90:	2301      	movs	r3, #1
 8008f92:	e000      	b.n	8008f96 <tcp_receive+0x6c2>
 8008f94:	2300      	movs	r3, #0
 8008f96:	4423      	add	r3, r4
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	4b71      	ldr	r3, [pc, #452]	; (8009160 <tcp_receive+0x88c>)
 8008f9c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008fa2:	4b6f      	ldr	r3, [pc, #444]	; (8009160 <tcp_receive+0x88c>)
 8008fa4:	881b      	ldrh	r3, [r3, #0]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d275      	bcs.n	8009096 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008faa:	4b6c      	ldr	r3, [pc, #432]	; (800915c <tcp_receive+0x888>)
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	899b      	ldrh	r3, [r3, #12]
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fb f85a 	bl	800406c <lwip_htons>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d01f      	beq.n	8009004 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008fc4:	4b65      	ldr	r3, [pc, #404]	; (800915c <tcp_receive+0x888>)
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	899b      	ldrh	r3, [r3, #12]
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	b21b      	sxth	r3, r3
 8008fce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008fd2:	b21c      	sxth	r4, r3
 8008fd4:	4b61      	ldr	r3, [pc, #388]	; (800915c <tcp_receive+0x888>)
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	899b      	ldrh	r3, [r3, #12]
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fb f845 	bl	800406c <lwip_htons>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fb f83c 	bl	800406c <lwip_htons>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	b21b      	sxth	r3, r3
 8008ff8:	4323      	orrs	r3, r4
 8008ffa:	b21a      	sxth	r2, r3
 8008ffc:	4b57      	ldr	r3, [pc, #348]	; (800915c <tcp_receive+0x888>)
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	b292      	uxth	r2, r2
 8009002:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009008:	4b54      	ldr	r3, [pc, #336]	; (800915c <tcp_receive+0x888>)
 800900a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800900c:	4b53      	ldr	r3, [pc, #332]	; (800915c <tcp_receive+0x888>)
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	899b      	ldrh	r3, [r3, #12]
 8009012:	b29b      	uxth	r3, r3
 8009014:	4618      	mov	r0, r3
 8009016:	f7fb f829 	bl	800406c <lwip_htons>
 800901a:	4603      	mov	r3, r0
 800901c:	b2db      	uxtb	r3, r3
 800901e:	f003 0302 	and.w	r3, r3, #2
 8009022:	2b00      	cmp	r3, #0
 8009024:	d005      	beq.n	8009032 <tcp_receive+0x75e>
            inseg.len -= 1;
 8009026:	4b4d      	ldr	r3, [pc, #308]	; (800915c <tcp_receive+0x888>)
 8009028:	891b      	ldrh	r3, [r3, #8]
 800902a:	3b01      	subs	r3, #1
 800902c:	b29a      	uxth	r2, r3
 800902e:	4b4b      	ldr	r3, [pc, #300]	; (800915c <tcp_receive+0x888>)
 8009030:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009032:	4b4a      	ldr	r3, [pc, #296]	; (800915c <tcp_receive+0x888>)
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	4a49      	ldr	r2, [pc, #292]	; (800915c <tcp_receive+0x888>)
 8009038:	8912      	ldrh	r2, [r2, #8]
 800903a:	4611      	mov	r1, r2
 800903c:	4618      	mov	r0, r3
 800903e:	f7fc f943 	bl	80052c8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009042:	4b46      	ldr	r3, [pc, #280]	; (800915c <tcp_receive+0x888>)
 8009044:	891c      	ldrh	r4, [r3, #8]
 8009046:	4b45      	ldr	r3, [pc, #276]	; (800915c <tcp_receive+0x888>)
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	899b      	ldrh	r3, [r3, #12]
 800904c:	b29b      	uxth	r3, r3
 800904e:	4618      	mov	r0, r3
 8009050:	f7fb f80c 	bl	800406c <lwip_htons>
 8009054:	4603      	mov	r3, r0
 8009056:	b2db      	uxtb	r3, r3
 8009058:	f003 0303 	and.w	r3, r3, #3
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <tcp_receive+0x790>
 8009060:	2301      	movs	r3, #1
 8009062:	e000      	b.n	8009066 <tcp_receive+0x792>
 8009064:	2300      	movs	r3, #0
 8009066:	4423      	add	r3, r4
 8009068:	b29a      	uxth	r2, r3
 800906a:	4b3d      	ldr	r3, [pc, #244]	; (8009160 <tcp_receive+0x88c>)
 800906c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800906e:	4b3c      	ldr	r3, [pc, #240]	; (8009160 <tcp_receive+0x88c>)
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	461a      	mov	r2, r3
 8009074:	4b38      	ldr	r3, [pc, #224]	; (8009158 <tcp_receive+0x884>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	441a      	add	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	6879      	ldr	r1, [r7, #4]
 8009080:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009082:	440b      	add	r3, r1
 8009084:	429a      	cmp	r2, r3
 8009086:	d006      	beq.n	8009096 <tcp_receive+0x7c2>
 8009088:	4b36      	ldr	r3, [pc, #216]	; (8009164 <tcp_receive+0x890>)
 800908a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800908e:	4936      	ldr	r1, [pc, #216]	; (8009168 <tcp_receive+0x894>)
 8009090:	4836      	ldr	r0, [pc, #216]	; (800916c <tcp_receive+0x898>)
 8009092:	f005 f89d 	bl	800e1d0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 80e7 	beq.w	800926e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80090a0:	4b2e      	ldr	r3, [pc, #184]	; (800915c <tcp_receive+0x888>)
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	899b      	ldrh	r3, [r3, #12]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fa ffdf 	bl	800406c <lwip_htons>
 80090ae:	4603      	mov	r3, r0
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	f003 0301 	and.w	r3, r3, #1
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d010      	beq.n	80090dc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80090ba:	e00a      	b.n	80090d2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090c0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f7fd fd96 	bl	8006bfe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1f0      	bne.n	80090bc <tcp_receive+0x7e8>
 80090da:	e0c8      	b.n	800926e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090e0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80090e2:	e052      	b.n	800918a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80090e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	899b      	ldrh	r3, [r3, #12]
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fa ffbd 	bl	800406c <lwip_htons>
 80090f2:	4603      	mov	r3, r0
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	f003 0301 	and.w	r3, r3, #1
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d03d      	beq.n	800917a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80090fe:	4b17      	ldr	r3, [pc, #92]	; (800915c <tcp_receive+0x888>)
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	899b      	ldrh	r3, [r3, #12]
 8009104:	b29b      	uxth	r3, r3
 8009106:	4618      	mov	r0, r3
 8009108:	f7fa ffb0 	bl	800406c <lwip_htons>
 800910c:	4603      	mov	r3, r0
 800910e:	b2db      	uxtb	r3, r3
 8009110:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009114:	2b00      	cmp	r3, #0
 8009116:	d130      	bne.n	800917a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009118:	4b10      	ldr	r3, [pc, #64]	; (800915c <tcp_receive+0x888>)
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	899b      	ldrh	r3, [r3, #12]
 800911e:	b29c      	uxth	r4, r3
 8009120:	2001      	movs	r0, #1
 8009122:	f7fa ffa3 	bl	800406c <lwip_htons>
 8009126:	4603      	mov	r3, r0
 8009128:	461a      	mov	r2, r3
 800912a:	4b0c      	ldr	r3, [pc, #48]	; (800915c <tcp_receive+0x888>)
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	4322      	orrs	r2, r4
 8009130:	b292      	uxth	r2, r2
 8009132:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009134:	4b09      	ldr	r3, [pc, #36]	; (800915c <tcp_receive+0x888>)
 8009136:	891c      	ldrh	r4, [r3, #8]
 8009138:	4b08      	ldr	r3, [pc, #32]	; (800915c <tcp_receive+0x888>)
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	899b      	ldrh	r3, [r3, #12]
 800913e:	b29b      	uxth	r3, r3
 8009140:	4618      	mov	r0, r3
 8009142:	f7fa ff93 	bl	800406c <lwip_htons>
 8009146:	4603      	mov	r3, r0
 8009148:	b2db      	uxtb	r3, r3
 800914a:	f003 0303 	and.w	r3, r3, #3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00e      	beq.n	8009170 <tcp_receive+0x89c>
 8009152:	2301      	movs	r3, #1
 8009154:	e00d      	b.n	8009172 <tcp_receive+0x89e>
 8009156:	bf00      	nop
 8009158:	200000f0 	.word	0x200000f0
 800915c:	200000d0 	.word	0x200000d0
 8009160:	200000fa 	.word	0x200000fa
 8009164:	080107ec 	.word	0x080107ec
 8009168:	08010b94 	.word	0x08010b94
 800916c:	08010838 	.word	0x08010838
 8009170:	2300      	movs	r3, #0
 8009172:	4423      	add	r3, r4
 8009174:	b29a      	uxth	r2, r3
 8009176:	4b98      	ldr	r3, [pc, #608]	; (80093d8 <tcp_receive+0xb04>)
 8009178:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800917a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800917c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800917e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009184:	6938      	ldr	r0, [r7, #16]
 8009186:	f7fd fd3a 	bl	8006bfe <tcp_seg_free>
            while (next &&
 800918a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00e      	beq.n	80091ae <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009190:	4b91      	ldr	r3, [pc, #580]	; (80093d8 <tcp_receive+0xb04>)
 8009192:	881b      	ldrh	r3, [r3, #0]
 8009194:	461a      	mov	r2, r3
 8009196:	4b91      	ldr	r3, [pc, #580]	; (80093dc <tcp_receive+0xb08>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	441a      	add	r2, r3
 800919c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091a4:	8909      	ldrh	r1, [r1, #8]
 80091a6:	440b      	add	r3, r1
 80091a8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	da9a      	bge.n	80090e4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80091ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d059      	beq.n	8009268 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80091b4:	4b88      	ldr	r3, [pc, #544]	; (80093d8 <tcp_receive+0xb04>)
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	461a      	mov	r2, r3
 80091ba:	4b88      	ldr	r3, [pc, #544]	; (80093dc <tcp_receive+0xb08>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	441a      	add	r2, r3
 80091c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	dd4d      	ble.n	8009268 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80091cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	4b81      	ldr	r3, [pc, #516]	; (80093dc <tcp_receive+0xb08>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	b29b      	uxth	r3, r3
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	b29a      	uxth	r2, r3
 80091de:	4b80      	ldr	r3, [pc, #512]	; (80093e0 <tcp_receive+0xb0c>)
 80091e0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80091e2:	4b7f      	ldr	r3, [pc, #508]	; (80093e0 <tcp_receive+0xb0c>)
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	899b      	ldrh	r3, [r3, #12]
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fa ff3e 	bl	800406c <lwip_htons>
 80091f0:	4603      	mov	r3, r0
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	f003 0302 	and.w	r3, r3, #2
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d005      	beq.n	8009208 <tcp_receive+0x934>
                inseg.len -= 1;
 80091fc:	4b78      	ldr	r3, [pc, #480]	; (80093e0 <tcp_receive+0xb0c>)
 80091fe:	891b      	ldrh	r3, [r3, #8]
 8009200:	3b01      	subs	r3, #1
 8009202:	b29a      	uxth	r2, r3
 8009204:	4b76      	ldr	r3, [pc, #472]	; (80093e0 <tcp_receive+0xb0c>)
 8009206:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009208:	4b75      	ldr	r3, [pc, #468]	; (80093e0 <tcp_receive+0xb0c>)
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	4a74      	ldr	r2, [pc, #464]	; (80093e0 <tcp_receive+0xb0c>)
 800920e:	8912      	ldrh	r2, [r2, #8]
 8009210:	4611      	mov	r1, r2
 8009212:	4618      	mov	r0, r3
 8009214:	f7fc f858 	bl	80052c8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009218:	4b71      	ldr	r3, [pc, #452]	; (80093e0 <tcp_receive+0xb0c>)
 800921a:	891c      	ldrh	r4, [r3, #8]
 800921c:	4b70      	ldr	r3, [pc, #448]	; (80093e0 <tcp_receive+0xb0c>)
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	899b      	ldrh	r3, [r3, #12]
 8009222:	b29b      	uxth	r3, r3
 8009224:	4618      	mov	r0, r3
 8009226:	f7fa ff21 	bl	800406c <lwip_htons>
 800922a:	4603      	mov	r3, r0
 800922c:	b2db      	uxtb	r3, r3
 800922e:	f003 0303 	and.w	r3, r3, #3
 8009232:	2b00      	cmp	r3, #0
 8009234:	d001      	beq.n	800923a <tcp_receive+0x966>
 8009236:	2301      	movs	r3, #1
 8009238:	e000      	b.n	800923c <tcp_receive+0x968>
 800923a:	2300      	movs	r3, #0
 800923c:	4423      	add	r3, r4
 800923e:	b29a      	uxth	r2, r3
 8009240:	4b65      	ldr	r3, [pc, #404]	; (80093d8 <tcp_receive+0xb04>)
 8009242:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009244:	4b64      	ldr	r3, [pc, #400]	; (80093d8 <tcp_receive+0xb04>)
 8009246:	881b      	ldrh	r3, [r3, #0]
 8009248:	461a      	mov	r2, r3
 800924a:	4b64      	ldr	r3, [pc, #400]	; (80093dc <tcp_receive+0xb08>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	441a      	add	r2, r3
 8009250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	429a      	cmp	r2, r3
 8009258:	d006      	beq.n	8009268 <tcp_receive+0x994>
 800925a:	4b62      	ldr	r3, [pc, #392]	; (80093e4 <tcp_receive+0xb10>)
 800925c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009260:	4961      	ldr	r1, [pc, #388]	; (80093e8 <tcp_receive+0xb14>)
 8009262:	4862      	ldr	r0, [pc, #392]	; (80093ec <tcp_receive+0xb18>)
 8009264:	f004 ffb4 	bl	800e1d0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800926c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800926e:	4b5a      	ldr	r3, [pc, #360]	; (80093d8 <tcp_receive+0xb04>)
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	4b59      	ldr	r3, [pc, #356]	; (80093dc <tcp_receive+0xb08>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	441a      	add	r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009282:	4b55      	ldr	r3, [pc, #340]	; (80093d8 <tcp_receive+0xb04>)
 8009284:	881b      	ldrh	r3, [r3, #0]
 8009286:	429a      	cmp	r2, r3
 8009288:	d206      	bcs.n	8009298 <tcp_receive+0x9c4>
 800928a:	4b56      	ldr	r3, [pc, #344]	; (80093e4 <tcp_receive+0xb10>)
 800928c:	f240 6207 	movw	r2, #1543	; 0x607
 8009290:	4957      	ldr	r1, [pc, #348]	; (80093f0 <tcp_receive+0xb1c>)
 8009292:	4856      	ldr	r0, [pc, #344]	; (80093ec <tcp_receive+0xb18>)
 8009294:	f004 ff9c 	bl	800e1d0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800929c:	4b4e      	ldr	r3, [pc, #312]	; (80093d8 <tcp_receive+0xb04>)
 800929e:	881b      	ldrh	r3, [r3, #0]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7fc ffc9 	bl	8006240 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80092ae:	4b4c      	ldr	r3, [pc, #304]	; (80093e0 <tcp_receive+0xb0c>)
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	891b      	ldrh	r3, [r3, #8]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d006      	beq.n	80092c6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80092b8:	4b49      	ldr	r3, [pc, #292]	; (80093e0 <tcp_receive+0xb0c>)
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	4a4d      	ldr	r2, [pc, #308]	; (80093f4 <tcp_receive+0xb20>)
 80092be:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80092c0:	4b47      	ldr	r3, [pc, #284]	; (80093e0 <tcp_receive+0xb0c>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80092c6:	4b46      	ldr	r3, [pc, #280]	; (80093e0 <tcp_receive+0xb0c>)
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	899b      	ldrh	r3, [r3, #12]
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7fa fecc 	bl	800406c <lwip_htons>
 80092d4:	4603      	mov	r3, r0
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f000 80b8 	beq.w	8009452 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80092e2:	4b45      	ldr	r3, [pc, #276]	; (80093f8 <tcp_receive+0xb24>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	f043 0320 	orr.w	r3, r3, #32
 80092ea:	b2da      	uxtb	r2, r3
 80092ec:	4b42      	ldr	r3, [pc, #264]	; (80093f8 <tcp_receive+0xb24>)
 80092ee:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80092f0:	e0af      	b.n	8009452 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092f6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	4a36      	ldr	r2, [pc, #216]	; (80093dc <tcp_receive+0xb08>)
 8009302:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	891b      	ldrh	r3, [r3, #8]
 8009308:	461c      	mov	r4, r3
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	899b      	ldrh	r3, [r3, #12]
 8009310:	b29b      	uxth	r3, r3
 8009312:	4618      	mov	r0, r3
 8009314:	f7fa feaa 	bl	800406c <lwip_htons>
 8009318:	4603      	mov	r3, r0
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 0303 	and.w	r3, r3, #3
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <tcp_receive+0xa54>
 8009324:	2301      	movs	r3, #1
 8009326:	e000      	b.n	800932a <tcp_receive+0xa56>
 8009328:	2300      	movs	r3, #0
 800932a:	191a      	adds	r2, r3, r4
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009330:	441a      	add	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800933a:	461c      	mov	r4, r3
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	891b      	ldrh	r3, [r3, #8]
 8009340:	461d      	mov	r5, r3
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	899b      	ldrh	r3, [r3, #12]
 8009348:	b29b      	uxth	r3, r3
 800934a:	4618      	mov	r0, r3
 800934c:	f7fa fe8e 	bl	800406c <lwip_htons>
 8009350:	4603      	mov	r3, r0
 8009352:	b2db      	uxtb	r3, r3
 8009354:	f003 0303 	and.w	r3, r3, #3
 8009358:	2b00      	cmp	r3, #0
 800935a:	d001      	beq.n	8009360 <tcp_receive+0xa8c>
 800935c:	2301      	movs	r3, #1
 800935e:	e000      	b.n	8009362 <tcp_receive+0xa8e>
 8009360:	2300      	movs	r3, #0
 8009362:	442b      	add	r3, r5
 8009364:	429c      	cmp	r4, r3
 8009366:	d206      	bcs.n	8009376 <tcp_receive+0xaa2>
 8009368:	4b1e      	ldr	r3, [pc, #120]	; (80093e4 <tcp_receive+0xb10>)
 800936a:	f240 622b 	movw	r2, #1579	; 0x62b
 800936e:	4923      	ldr	r1, [pc, #140]	; (80093fc <tcp_receive+0xb28>)
 8009370:	481e      	ldr	r0, [pc, #120]	; (80093ec <tcp_receive+0xb18>)
 8009372:	f004 ff2d 	bl	800e1d0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	891b      	ldrh	r3, [r3, #8]
 800937a:	461c      	mov	r4, r3
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	899b      	ldrh	r3, [r3, #12]
 8009382:	b29b      	uxth	r3, r3
 8009384:	4618      	mov	r0, r3
 8009386:	f7fa fe71 	bl	800406c <lwip_htons>
 800938a:	4603      	mov	r3, r0
 800938c:	b2db      	uxtb	r3, r3
 800938e:	f003 0303 	and.w	r3, r3, #3
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <tcp_receive+0xac6>
 8009396:	2301      	movs	r3, #1
 8009398:	e000      	b.n	800939c <tcp_receive+0xac8>
 800939a:	2300      	movs	r3, #0
 800939c:	1919      	adds	r1, r3, r4
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80093a2:	b28b      	uxth	r3, r1
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7fc ff47 	bl	8006240 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	891b      	ldrh	r3, [r3, #8]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d028      	beq.n	800940e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80093bc:	4b0d      	ldr	r3, [pc, #52]	; (80093f4 <tcp_receive+0xb20>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d01d      	beq.n	8009400 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80093c4:	4b0b      	ldr	r3, [pc, #44]	; (80093f4 <tcp_receive+0xb20>)
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	4619      	mov	r1, r3
 80093ce:	4610      	mov	r0, r2
 80093d0:	f7fc f9c2 	bl	8005758 <pbuf_cat>
 80093d4:	e018      	b.n	8009408 <tcp_receive+0xb34>
 80093d6:	bf00      	nop
 80093d8:	200000fa 	.word	0x200000fa
 80093dc:	200000f0 	.word	0x200000f0
 80093e0:	200000d0 	.word	0x200000d0
 80093e4:	080107ec 	.word	0x080107ec
 80093e8:	08010bcc 	.word	0x08010bcc
 80093ec:	08010838 	.word	0x08010838
 80093f0:	08010c08 	.word	0x08010c08
 80093f4:	20000100 	.word	0x20000100
 80093f8:	200000fd 	.word	0x200000fd
 80093fc:	08010c28 	.word	0x08010c28
            } else {
              recv_data = cseg->p;
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	4a70      	ldr	r2, [pc, #448]	; (80095c8 <tcp_receive+0xcf4>)
 8009406:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	2200      	movs	r2, #0
 800940c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	899b      	ldrh	r3, [r3, #12]
 8009414:	b29b      	uxth	r3, r3
 8009416:	4618      	mov	r0, r3
 8009418:	f7fa fe28 	bl	800406c <lwip_htons>
 800941c:	4603      	mov	r3, r0
 800941e:	b2db      	uxtb	r3, r3
 8009420:	f003 0301 	and.w	r3, r3, #1
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00d      	beq.n	8009444 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009428:	4b68      	ldr	r3, [pc, #416]	; (80095cc <tcp_receive+0xcf8>)
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	f043 0320 	orr.w	r3, r3, #32
 8009430:	b2da      	uxtb	r2, r3
 8009432:	4b66      	ldr	r3, [pc, #408]	; (80095cc <tcp_receive+0xcf8>)
 8009434:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	7d1b      	ldrb	r3, [r3, #20]
 800943a:	2b04      	cmp	r3, #4
 800943c:	d102      	bne.n	8009444 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2207      	movs	r2, #7
 8009442:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800944c:	68b8      	ldr	r0, [r7, #8]
 800944e:	f7fd fbd6 	bl	8006bfe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009456:	2b00      	cmp	r3, #0
 8009458:	d008      	beq.n	800946c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	685a      	ldr	r2, [r3, #4]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009466:	429a      	cmp	r2, r3
 8009468:	f43f af43 	beq.w	80092f2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	8b5b      	ldrh	r3, [r3, #26]
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00e      	beq.n	8009496 <tcp_receive+0xbc2>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	8b5b      	ldrh	r3, [r3, #26]
 800947c:	f023 0301 	bic.w	r3, r3, #1
 8009480:	b29a      	uxth	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	835a      	strh	r2, [r3, #26]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	8b5b      	ldrh	r3, [r3, #26]
 800948a:	f043 0302 	orr.w	r3, r3, #2
 800948e:	b29a      	uxth	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009494:	e188      	b.n	80097a8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	8b5b      	ldrh	r3, [r3, #26]
 800949a:	f043 0301 	orr.w	r3, r3, #1
 800949e:	b29a      	uxth	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80094a4:	e180      	b.n	80097a8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d106      	bne.n	80094bc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80094ae:	4848      	ldr	r0, [pc, #288]	; (80095d0 <tcp_receive+0xcfc>)
 80094b0:	f7fd fbbe 	bl	8006c30 <tcp_seg_copy>
 80094b4:	4602      	mov	r2, r0
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	675a      	str	r2, [r3, #116]	; 0x74
 80094ba:	e16d      	b.n	8009798 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80094bc:	2300      	movs	r3, #0
 80094be:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80094c6:	e157      	b.n	8009778 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80094c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	685a      	ldr	r2, [r3, #4]
 80094ce:	4b41      	ldr	r3, [pc, #260]	; (80095d4 <tcp_receive+0xd00>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d11d      	bne.n	8009512 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80094d6:	4b3e      	ldr	r3, [pc, #248]	; (80095d0 <tcp_receive+0xcfc>)
 80094d8:	891a      	ldrh	r2, [r3, #8]
 80094da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094dc:	891b      	ldrh	r3, [r3, #8]
 80094de:	429a      	cmp	r2, r3
 80094e0:	f240 814f 	bls.w	8009782 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80094e4:	483a      	ldr	r0, [pc, #232]	; (80095d0 <tcp_receive+0xcfc>)
 80094e6:	f7fd fba3 	bl	8006c30 <tcp_seg_copy>
 80094ea:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f000 8149 	beq.w	8009786 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80094f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80094fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	601a      	str	r2, [r3, #0]
 8009500:	e002      	b.n	8009508 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009508:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800950a:	6978      	ldr	r0, [r7, #20]
 800950c:	f7ff f8de 	bl	80086cc <tcp_oos_insert_segment>
                }
                break;
 8009510:	e139      	b.n	8009786 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009514:	2b00      	cmp	r3, #0
 8009516:	d117      	bne.n	8009548 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009518:	4b2e      	ldr	r3, [pc, #184]	; (80095d4 <tcp_receive+0xd00>)
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	2b00      	cmp	r3, #0
 8009526:	da57      	bge.n	80095d8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009528:	4829      	ldr	r0, [pc, #164]	; (80095d0 <tcp_receive+0xcfc>)
 800952a:	f7fd fb81 	bl	8006c30 <tcp_seg_copy>
 800952e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 8129 	beq.w	800978a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	69ba      	ldr	r2, [r7, #24]
 800953c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800953e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009540:	69b8      	ldr	r0, [r7, #24]
 8009542:	f7ff f8c3 	bl	80086cc <tcp_oos_insert_segment>
                  }
                  break;
 8009546:	e120      	b.n	800978a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009548:	4b22      	ldr	r3, [pc, #136]	; (80095d4 <tcp_receive+0xd00>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	3b01      	subs	r3, #1
 8009556:	2b00      	cmp	r3, #0
 8009558:	db3e      	blt.n	80095d8 <tcp_receive+0xd04>
 800955a:	4b1e      	ldr	r3, [pc, #120]	; (80095d4 <tcp_receive+0xd00>)
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	1ad3      	subs	r3, r2, r3
 8009566:	3301      	adds	r3, #1
 8009568:	2b00      	cmp	r3, #0
 800956a:	dc35      	bgt.n	80095d8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800956c:	4818      	ldr	r0, [pc, #96]	; (80095d0 <tcp_receive+0xcfc>)
 800956e:	f7fd fb5f 	bl	8006c30 <tcp_seg_copy>
 8009572:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	2b00      	cmp	r3, #0
 8009578:	f000 8109 	beq.w	800978e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800957c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009584:	8912      	ldrh	r2, [r2, #8]
 8009586:	441a      	add	r2, r3
 8009588:	4b12      	ldr	r3, [pc, #72]	; (80095d4 <tcp_receive+0xd00>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	dd12      	ble.n	80095b8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009592:	4b10      	ldr	r3, [pc, #64]	; (80095d4 <tcp_receive+0xd00>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	b29a      	uxth	r2, r3
 8009598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	b29b      	uxth	r3, r3
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80095a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ae:	891b      	ldrh	r3, [r3, #8]
 80095b0:	4619      	mov	r1, r3
 80095b2:	4610      	mov	r0, r2
 80095b4:	f7fb fe88 	bl	80052c8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80095b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ba:	69fa      	ldr	r2, [r7, #28]
 80095bc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80095be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095c0:	69f8      	ldr	r0, [r7, #28]
 80095c2:	f7ff f883 	bl	80086cc <tcp_oos_insert_segment>
                  }
                  break;
 80095c6:	e0e2      	b.n	800978e <tcp_receive+0xeba>
 80095c8:	20000100 	.word	0x20000100
 80095cc:	200000fd 	.word	0x200000fd
 80095d0:	200000d0 	.word	0x200000d0
 80095d4:	200000f0 	.word	0x200000f0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80095d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095da:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80095dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f040 80c6 	bne.w	8009772 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80095e6:	4b80      	ldr	r3, [pc, #512]	; (80097e8 <tcp_receive+0xf14>)
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f340 80bd 	ble.w	8009772 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80095f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	899b      	ldrh	r3, [r3, #12]
 80095fe:	b29b      	uxth	r3, r3
 8009600:	4618      	mov	r0, r3
 8009602:	f7fa fd33 	bl	800406c <lwip_htons>
 8009606:	4603      	mov	r3, r0
 8009608:	b2db      	uxtb	r3, r3
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	f040 80bf 	bne.w	8009792 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009614:	4875      	ldr	r0, [pc, #468]	; (80097ec <tcp_receive+0xf18>)
 8009616:	f7fd fb0b 	bl	8006c30 <tcp_seg_copy>
 800961a:	4602      	mov	r2, r0
 800961c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	f000 80b6 	beq.w	8009796 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800962a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009632:	8912      	ldrh	r2, [r2, #8]
 8009634:	441a      	add	r2, r3
 8009636:	4b6c      	ldr	r3, [pc, #432]	; (80097e8 <tcp_receive+0xf14>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	dd12      	ble.n	8009666 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009640:	4b69      	ldr	r3, [pc, #420]	; (80097e8 <tcp_receive+0xf14>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	b29a      	uxth	r2, r3
 8009646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	b29b      	uxth	r3, r3
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	b29a      	uxth	r2, r3
 8009652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009654:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009658:	685a      	ldr	r2, [r3, #4]
 800965a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965c:	891b      	ldrh	r3, [r3, #8]
 800965e:	4619      	mov	r1, r3
 8009660:	4610      	mov	r0, r2
 8009662:	f7fb fe31 	bl	80052c8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009666:	4b62      	ldr	r3, [pc, #392]	; (80097f0 <tcp_receive+0xf1c>)
 8009668:	881b      	ldrh	r3, [r3, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	4b5e      	ldr	r3, [pc, #376]	; (80097e8 <tcp_receive+0xf14>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	441a      	add	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009676:	6879      	ldr	r1, [r7, #4]
 8009678:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800967a:	440b      	add	r3, r1
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	2b00      	cmp	r3, #0
 8009680:	f340 8089 	ble.w	8009796 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	899b      	ldrh	r3, [r3, #12]
 800968c:	b29b      	uxth	r3, r3
 800968e:	4618      	mov	r0, r3
 8009690:	f7fa fcec 	bl	800406c <lwip_htons>
 8009694:	4603      	mov	r3, r0
 8009696:	b2db      	uxtb	r3, r3
 8009698:	f003 0301 	and.w	r3, r3, #1
 800969c:	2b00      	cmp	r3, #0
 800969e:	d022      	beq.n	80096e6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80096a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	899b      	ldrh	r3, [r3, #12]
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	b21b      	sxth	r3, r3
 80096ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80096b0:	b21c      	sxth	r4, r3
 80096b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	899b      	ldrh	r3, [r3, #12]
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fa fcd5 	bl	800406c <lwip_htons>
 80096c2:	4603      	mov	r3, r0
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fa fccc 	bl	800406c <lwip_htons>
 80096d4:	4603      	mov	r3, r0
 80096d6:	b21b      	sxth	r3, r3
 80096d8:	4323      	orrs	r3, r4
 80096da:	b21a      	sxth	r2, r3
 80096dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	b292      	uxth	r2, r2
 80096e4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096f0:	4413      	add	r3, r2
 80096f2:	b299      	uxth	r1, r3
 80096f4:	4b3c      	ldr	r3, [pc, #240]	; (80097e8 <tcp_receive+0xf14>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	1a8a      	subs	r2, r1, r2
 8009700:	b292      	uxth	r2, r2
 8009702:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	891b      	ldrh	r3, [r3, #8]
 8009710:	4619      	mov	r1, r3
 8009712:	4610      	mov	r0, r2
 8009714:	f7fb fdd8 	bl	80052c8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	891c      	ldrh	r4, [r3, #8]
 800971e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	899b      	ldrh	r3, [r3, #12]
 8009726:	b29b      	uxth	r3, r3
 8009728:	4618      	mov	r0, r3
 800972a:	f7fa fc9f 	bl	800406c <lwip_htons>
 800972e:	4603      	mov	r3, r0
 8009730:	b2db      	uxtb	r3, r3
 8009732:	f003 0303 	and.w	r3, r3, #3
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <tcp_receive+0xe6a>
 800973a:	2301      	movs	r3, #1
 800973c:	e000      	b.n	8009740 <tcp_receive+0xe6c>
 800973e:	2300      	movs	r3, #0
 8009740:	4423      	add	r3, r4
 8009742:	b29a      	uxth	r2, r3
 8009744:	4b2a      	ldr	r3, [pc, #168]	; (80097f0 <tcp_receive+0xf1c>)
 8009746:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009748:	4b29      	ldr	r3, [pc, #164]	; (80097f0 <tcp_receive+0xf1c>)
 800974a:	881b      	ldrh	r3, [r3, #0]
 800974c:	461a      	mov	r2, r3
 800974e:	4b26      	ldr	r3, [pc, #152]	; (80097e8 <tcp_receive+0xf14>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	441a      	add	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009758:	6879      	ldr	r1, [r7, #4]
 800975a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800975c:	440b      	add	r3, r1
 800975e:	429a      	cmp	r2, r3
 8009760:	d019      	beq.n	8009796 <tcp_receive+0xec2>
 8009762:	4b24      	ldr	r3, [pc, #144]	; (80097f4 <tcp_receive+0xf20>)
 8009764:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009768:	4923      	ldr	r1, [pc, #140]	; (80097f8 <tcp_receive+0xf24>)
 800976a:	4824      	ldr	r0, [pc, #144]	; (80097fc <tcp_receive+0xf28>)
 800976c:	f004 fd30 	bl	800e1d0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009770:	e011      	b.n	8009796 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	63bb      	str	r3, [r7, #56]	; 0x38
 8009778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977a:	2b00      	cmp	r3, #0
 800977c:	f47f aea4 	bne.w	80094c8 <tcp_receive+0xbf4>
 8009780:	e00a      	b.n	8009798 <tcp_receive+0xec4>
                break;
 8009782:	bf00      	nop
 8009784:	e008      	b.n	8009798 <tcp_receive+0xec4>
                break;
 8009786:	bf00      	nop
 8009788:	e006      	b.n	8009798 <tcp_receive+0xec4>
                  break;
 800978a:	bf00      	nop
 800978c:	e004      	b.n	8009798 <tcp_receive+0xec4>
                  break;
 800978e:	bf00      	nop
 8009790:	e002      	b.n	8009798 <tcp_receive+0xec4>
                  break;
 8009792:	bf00      	nop
 8009794:	e000      	b.n	8009798 <tcp_receive+0xec4>
                break;
 8009796:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f001 fa33 	bl	800ac04 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800979e:	e003      	b.n	80097a8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f001 fa2f 	bl	800ac04 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80097a6:	e01a      	b.n	80097de <tcp_receive+0xf0a>
 80097a8:	e019      	b.n	80097de <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80097aa:	4b0f      	ldr	r3, [pc, #60]	; (80097e8 <tcp_receive+0xf14>)
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	db0a      	blt.n	80097ce <tcp_receive+0xefa>
 80097b8:	4b0b      	ldr	r3, [pc, #44]	; (80097e8 <tcp_receive+0xf14>)
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c0:	6879      	ldr	r1, [r7, #4]
 80097c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80097c4:	440b      	add	r3, r1
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	3301      	adds	r3, #1
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	dd07      	ble.n	80097de <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	8b5b      	ldrh	r3, [r3, #26]
 80097d2:	f043 0302 	orr.w	r3, r3, #2
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80097dc:	e7ff      	b.n	80097de <tcp_receive+0xf0a>
 80097de:	bf00      	nop
 80097e0:	3750      	adds	r7, #80	; 0x50
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bdb0      	pop	{r4, r5, r7, pc}
 80097e6:	bf00      	nop
 80097e8:	200000f0 	.word	0x200000f0
 80097ec:	200000d0 	.word	0x200000d0
 80097f0:	200000fa 	.word	0x200000fa
 80097f4:	080107ec 	.word	0x080107ec
 80097f8:	08010b94 	.word	0x08010b94
 80097fc:	08010838 	.word	0x08010838

08009800 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009806:	4b15      	ldr	r3, [pc, #84]	; (800985c <tcp_get_next_optbyte+0x5c>)
 8009808:	881b      	ldrh	r3, [r3, #0]
 800980a:	1c5a      	adds	r2, r3, #1
 800980c:	b291      	uxth	r1, r2
 800980e:	4a13      	ldr	r2, [pc, #76]	; (800985c <tcp_get_next_optbyte+0x5c>)
 8009810:	8011      	strh	r1, [r2, #0]
 8009812:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009814:	4b12      	ldr	r3, [pc, #72]	; (8009860 <tcp_get_next_optbyte+0x60>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d004      	beq.n	8009826 <tcp_get_next_optbyte+0x26>
 800981c:	4b11      	ldr	r3, [pc, #68]	; (8009864 <tcp_get_next_optbyte+0x64>)
 800981e:	881b      	ldrh	r3, [r3, #0]
 8009820:	88fa      	ldrh	r2, [r7, #6]
 8009822:	429a      	cmp	r2, r3
 8009824:	d208      	bcs.n	8009838 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009826:	4b10      	ldr	r3, [pc, #64]	; (8009868 <tcp_get_next_optbyte+0x68>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	3314      	adds	r3, #20
 800982c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800982e:	88fb      	ldrh	r3, [r7, #6]
 8009830:	683a      	ldr	r2, [r7, #0]
 8009832:	4413      	add	r3, r2
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	e00b      	b.n	8009850 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009838:	88fb      	ldrh	r3, [r7, #6]
 800983a:	b2da      	uxtb	r2, r3
 800983c:	4b09      	ldr	r3, [pc, #36]	; (8009864 <tcp_get_next_optbyte+0x64>)
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	b2db      	uxtb	r3, r3
 8009842:	1ad3      	subs	r3, r2, r3
 8009844:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009846:	4b06      	ldr	r3, [pc, #24]	; (8009860 <tcp_get_next_optbyte+0x60>)
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	797b      	ldrb	r3, [r7, #5]
 800984c:	4413      	add	r3, r2
 800984e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009850:	4618      	mov	r0, r3
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	200000ec 	.word	0x200000ec
 8009860:	200000e8 	.word	0x200000e8
 8009864:	200000e6 	.word	0x200000e6
 8009868:	200000e0 	.word	0x200000e0

0800986c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d106      	bne.n	8009888 <tcp_parseopt+0x1c>
 800987a:	4b32      	ldr	r3, [pc, #200]	; (8009944 <tcp_parseopt+0xd8>)
 800987c:	f240 727d 	movw	r2, #1917	; 0x77d
 8009880:	4931      	ldr	r1, [pc, #196]	; (8009948 <tcp_parseopt+0xdc>)
 8009882:	4832      	ldr	r0, [pc, #200]	; (800994c <tcp_parseopt+0xe0>)
 8009884:	f004 fca4 	bl	800e1d0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009888:	4b31      	ldr	r3, [pc, #196]	; (8009950 <tcp_parseopt+0xe4>)
 800988a:	881b      	ldrh	r3, [r3, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d055      	beq.n	800993c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009890:	4b30      	ldr	r3, [pc, #192]	; (8009954 <tcp_parseopt+0xe8>)
 8009892:	2200      	movs	r2, #0
 8009894:	801a      	strh	r2, [r3, #0]
 8009896:	e045      	b.n	8009924 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009898:	f7ff ffb2 	bl	8009800 <tcp_get_next_optbyte>
 800989c:	4603      	mov	r3, r0
 800989e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80098a0:	7bfb      	ldrb	r3, [r7, #15]
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d006      	beq.n	80098b4 <tcp_parseopt+0x48>
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	dc2b      	bgt.n	8009902 <tcp_parseopt+0x96>
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d041      	beq.n	8009932 <tcp_parseopt+0xc6>
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d127      	bne.n	8009902 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80098b2:	e037      	b.n	8009924 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80098b4:	f7ff ffa4 	bl	8009800 <tcp_get_next_optbyte>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d13b      	bne.n	8009936 <tcp_parseopt+0xca>
 80098be:	4b25      	ldr	r3, [pc, #148]	; (8009954 <tcp_parseopt+0xe8>)
 80098c0:	881b      	ldrh	r3, [r3, #0]
 80098c2:	3301      	adds	r3, #1
 80098c4:	4a22      	ldr	r2, [pc, #136]	; (8009950 <tcp_parseopt+0xe4>)
 80098c6:	8812      	ldrh	r2, [r2, #0]
 80098c8:	4293      	cmp	r3, r2
 80098ca:	da34      	bge.n	8009936 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80098cc:	f7ff ff98 	bl	8009800 <tcp_get_next_optbyte>
 80098d0:	4603      	mov	r3, r0
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	021b      	lsls	r3, r3, #8
 80098d6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80098d8:	f7ff ff92 	bl	8009800 <tcp_get_next_optbyte>
 80098dc:	4603      	mov	r3, r0
 80098de:	b29a      	uxth	r2, r3
 80098e0:	89bb      	ldrh	r3, [r7, #12]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80098e6:	89bb      	ldrh	r3, [r7, #12]
 80098e8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80098ec:	d804      	bhi.n	80098f8 <tcp_parseopt+0x8c>
 80098ee:	89bb      	ldrh	r3, [r7, #12]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <tcp_parseopt+0x8c>
 80098f4:	89ba      	ldrh	r2, [r7, #12]
 80098f6:	e001      	b.n	80098fc <tcp_parseopt+0x90>
 80098f8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009900:	e010      	b.n	8009924 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009902:	f7ff ff7d 	bl	8009800 <tcp_get_next_optbyte>
 8009906:	4603      	mov	r3, r0
 8009908:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800990a:	7afb      	ldrb	r3, [r7, #11]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d914      	bls.n	800993a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009910:	7afb      	ldrb	r3, [r7, #11]
 8009912:	b29a      	uxth	r2, r3
 8009914:	4b0f      	ldr	r3, [pc, #60]	; (8009954 <tcp_parseopt+0xe8>)
 8009916:	881b      	ldrh	r3, [r3, #0]
 8009918:	4413      	add	r3, r2
 800991a:	b29b      	uxth	r3, r3
 800991c:	3b02      	subs	r3, #2
 800991e:	b29a      	uxth	r2, r3
 8009920:	4b0c      	ldr	r3, [pc, #48]	; (8009954 <tcp_parseopt+0xe8>)
 8009922:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009924:	4b0b      	ldr	r3, [pc, #44]	; (8009954 <tcp_parseopt+0xe8>)
 8009926:	881a      	ldrh	r2, [r3, #0]
 8009928:	4b09      	ldr	r3, [pc, #36]	; (8009950 <tcp_parseopt+0xe4>)
 800992a:	881b      	ldrh	r3, [r3, #0]
 800992c:	429a      	cmp	r2, r3
 800992e:	d3b3      	bcc.n	8009898 <tcp_parseopt+0x2c>
 8009930:	e004      	b.n	800993c <tcp_parseopt+0xd0>
          return;
 8009932:	bf00      	nop
 8009934:	e002      	b.n	800993c <tcp_parseopt+0xd0>
            return;
 8009936:	bf00      	nop
 8009938:	e000      	b.n	800993c <tcp_parseopt+0xd0>
            return;
 800993a:	bf00      	nop
      }
    }
  }
}
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	080107ec 	.word	0x080107ec
 8009948:	08010c50 	.word	0x08010c50
 800994c:	08010838 	.word	0x08010838
 8009950:	200000e4 	.word	0x200000e4
 8009954:	200000ec 	.word	0x200000ec

08009958 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009958:	b480      	push	{r7}
 800995a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800995c:	4b05      	ldr	r3, [pc, #20]	; (8009974 <tcp_trigger_input_pcb_close+0x1c>)
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	f043 0310 	orr.w	r3, r3, #16
 8009964:	b2da      	uxtb	r2, r3
 8009966:	4b03      	ldr	r3, [pc, #12]	; (8009974 <tcp_trigger_input_pcb_close+0x1c>)
 8009968:	701a      	strb	r2, [r3, #0]
}
 800996a:	bf00      	nop
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr
 8009974:	200000fd 	.word	0x200000fd

08009978 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00a      	beq.n	80099a0 <tcp_route+0x28>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	7a1b      	ldrb	r3, [r3, #8]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d006      	beq.n	80099a0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	7a1b      	ldrb	r3, [r3, #8]
 8009996:	4618      	mov	r0, r3
 8009998:	f7fb fabc 	bl	8004f14 <netif_get_by_index>
 800999c:	4603      	mov	r3, r0
 800999e:	e003      	b.n	80099a8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f003 f9cd 	bl	800cd40 <ip4_route>
 80099a6:	4603      	mov	r3, r0
  }
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80099b0:	b590      	push	{r4, r7, lr}
 80099b2:	b087      	sub	sp, #28
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	603b      	str	r3, [r7, #0]
 80099bc:	4613      	mov	r3, r2
 80099be:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d105      	bne.n	80099d2 <tcp_create_segment+0x22>
 80099c6:	4b44      	ldr	r3, [pc, #272]	; (8009ad8 <tcp_create_segment+0x128>)
 80099c8:	22a3      	movs	r2, #163	; 0xa3
 80099ca:	4944      	ldr	r1, [pc, #272]	; (8009adc <tcp_create_segment+0x12c>)
 80099cc:	4844      	ldr	r0, [pc, #272]	; (8009ae0 <tcp_create_segment+0x130>)
 80099ce:	f004 fbff 	bl	800e1d0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d105      	bne.n	80099e4 <tcp_create_segment+0x34>
 80099d8:	4b3f      	ldr	r3, [pc, #252]	; (8009ad8 <tcp_create_segment+0x128>)
 80099da:	22a4      	movs	r2, #164	; 0xa4
 80099dc:	4941      	ldr	r1, [pc, #260]	; (8009ae4 <tcp_create_segment+0x134>)
 80099de:	4840      	ldr	r0, [pc, #256]	; (8009ae0 <tcp_create_segment+0x130>)
 80099e0:	f004 fbf6 	bl	800e1d0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80099e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	f003 0304 	and.w	r3, r3, #4
 80099f0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80099f2:	2003      	movs	r0, #3
 80099f4:	f7fa ff90 	bl	8004918 <memp_malloc>
 80099f8:	6138      	str	r0, [r7, #16]
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d104      	bne.n	8009a0a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009a00:	68b8      	ldr	r0, [r7, #8]
 8009a02:	f7fb fde7 	bl	80055d4 <pbuf_free>
    return NULL;
 8009a06:	2300      	movs	r3, #0
 8009a08:	e061      	b.n	8009ace <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009a10:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	2200      	movs	r2, #0
 8009a16:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	891a      	ldrh	r2, [r3, #8]
 8009a22:	7dfb      	ldrb	r3, [r7, #23]
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d205      	bcs.n	8009a36 <tcp_create_segment+0x86>
 8009a2a:	4b2b      	ldr	r3, [pc, #172]	; (8009ad8 <tcp_create_segment+0x128>)
 8009a2c:	22b0      	movs	r2, #176	; 0xb0
 8009a2e:	492e      	ldr	r1, [pc, #184]	; (8009ae8 <tcp_create_segment+0x138>)
 8009a30:	482b      	ldr	r0, [pc, #172]	; (8009ae0 <tcp_create_segment+0x130>)
 8009a32:	f004 fbcd 	bl	800e1d0 <iprintf>
  seg->len = p->tot_len - optlen;
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	891a      	ldrh	r2, [r3, #8]
 8009a3a:	7dfb      	ldrb	r3, [r7, #23]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009a46:	2114      	movs	r1, #20
 8009a48:	68b8      	ldr	r0, [r7, #8]
 8009a4a:	f7fb fd2d 	bl	80054a8 <pbuf_add_header>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d004      	beq.n	8009a5e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009a54:	6938      	ldr	r0, [r7, #16]
 8009a56:	f7fd f8d2 	bl	8006bfe <tcp_seg_free>
    return NULL;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	e037      	b.n	8009ace <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	8ada      	ldrh	r2, [r3, #22]
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	68dc      	ldr	r4, [r3, #12]
 8009a70:	4610      	mov	r0, r2
 8009a72:	f7fa fafb 	bl	800406c <lwip_htons>
 8009a76:	4603      	mov	r3, r0
 8009a78:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	8b1a      	ldrh	r2, [r3, #24]
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	68dc      	ldr	r4, [r3, #12]
 8009a82:	4610      	mov	r0, r2
 8009a84:	f7fa faf2 	bl	800406c <lwip_htons>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	68dc      	ldr	r4, [r3, #12]
 8009a90:	6838      	ldr	r0, [r7, #0]
 8009a92:	f7fa fb00 	bl	8004096 <lwip_htonl>
 8009a96:	4603      	mov	r3, r0
 8009a98:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
 8009a9c:	089b      	lsrs	r3, r3, #2
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	3305      	adds	r3, #5
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	031b      	lsls	r3, r3, #12
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	79fb      	ldrb	r3, [r7, #7]
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	68dc      	ldr	r4, [r3, #12]
 8009ab6:	4610      	mov	r0, r2
 8009ab8:	f7fa fad8 	bl	800406c <lwip_htons>
 8009abc:	4603      	mov	r3, r0
 8009abe:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	749a      	strb	r2, [r3, #18]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	74da      	strb	r2, [r3, #19]
  return seg;
 8009acc:	693b      	ldr	r3, [r7, #16]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	371c      	adds	r7, #28
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd90      	pop	{r4, r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	08010c6c 	.word	0x08010c6c
 8009adc:	08010ca0 	.word	0x08010ca0
 8009ae0:	08010cc0 	.word	0x08010cc0
 8009ae4:	08010ce8 	.word	0x08010ce8
 8009ae8:	08010d0c 	.word	0x08010d0c

08009aec <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009aec:	b590      	push	{r4, r7, lr}
 8009aee:	b08b      	sub	sp, #44	; 0x2c
 8009af0:	af02      	add	r7, sp, #8
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009af8:	2300      	movs	r3, #0
 8009afa:	61fb      	str	r3, [r7, #28]
 8009afc:	2300      	movs	r3, #0
 8009afe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009b00:	2300      	movs	r3, #0
 8009b02:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d106      	bne.n	8009b18 <tcp_split_unsent_seg+0x2c>
 8009b0a:	4b95      	ldr	r3, [pc, #596]	; (8009d60 <tcp_split_unsent_seg+0x274>)
 8009b0c:	f240 324b 	movw	r2, #843	; 0x34b
 8009b10:	4994      	ldr	r1, [pc, #592]	; (8009d64 <tcp_split_unsent_seg+0x278>)
 8009b12:	4895      	ldr	r0, [pc, #596]	; (8009d68 <tcp_split_unsent_seg+0x27c>)
 8009b14:	f004 fb5c 	bl	800e1d0 <iprintf>

  useg = pcb->unsent;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b1c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d102      	bne.n	8009b2a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009b24:	f04f 33ff 	mov.w	r3, #4294967295
 8009b28:	e116      	b.n	8009d58 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009b2a:	887b      	ldrh	r3, [r7, #2]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d109      	bne.n	8009b44 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009b30:	4b8b      	ldr	r3, [pc, #556]	; (8009d60 <tcp_split_unsent_seg+0x274>)
 8009b32:	f240 3253 	movw	r2, #851	; 0x353
 8009b36:	498d      	ldr	r1, [pc, #564]	; (8009d6c <tcp_split_unsent_seg+0x280>)
 8009b38:	488b      	ldr	r0, [pc, #556]	; (8009d68 <tcp_split_unsent_seg+0x27c>)
 8009b3a:	f004 fb49 	bl	800e1d0 <iprintf>
    return ERR_VAL;
 8009b3e:	f06f 0305 	mvn.w	r3, #5
 8009b42:	e109      	b.n	8009d58 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	891b      	ldrh	r3, [r3, #8]
 8009b48:	887a      	ldrh	r2, [r7, #2]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d301      	bcc.n	8009b52 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	e102      	b.n	8009d58 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b56:	887a      	ldrh	r2, [r7, #2]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d906      	bls.n	8009b6a <tcp_split_unsent_seg+0x7e>
 8009b5c:	4b80      	ldr	r3, [pc, #512]	; (8009d60 <tcp_split_unsent_seg+0x274>)
 8009b5e:	f240 325b 	movw	r2, #859	; 0x35b
 8009b62:	4983      	ldr	r1, [pc, #524]	; (8009d70 <tcp_split_unsent_seg+0x284>)
 8009b64:	4880      	ldr	r0, [pc, #512]	; (8009d68 <tcp_split_unsent_seg+0x27c>)
 8009b66:	f004 fb33 	bl	800e1d0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	891b      	ldrh	r3, [r3, #8]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d106      	bne.n	8009b80 <tcp_split_unsent_seg+0x94>
 8009b72:	4b7b      	ldr	r3, [pc, #492]	; (8009d60 <tcp_split_unsent_seg+0x274>)
 8009b74:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8009b78:	497e      	ldr	r1, [pc, #504]	; (8009d74 <tcp_split_unsent_seg+0x288>)
 8009b7a:	487b      	ldr	r0, [pc, #492]	; (8009d68 <tcp_split_unsent_seg+0x27c>)
 8009b7c:	f004 fb28 	bl	800e1d0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	7a9b      	ldrb	r3, [r3, #10]
 8009b84:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009b86:	7bfb      	ldrb	r3, [r7, #15]
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	f003 0304 	and.w	r3, r3, #4
 8009b90:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	891a      	ldrh	r2, [r3, #8]
 8009b96:	887b      	ldrh	r3, [r7, #2]
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009b9c:	7bbb      	ldrb	r3, [r7, #14]
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	89bb      	ldrh	r3, [r7, #12]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009baa:	4619      	mov	r1, r3
 8009bac:	2036      	movs	r0, #54	; 0x36
 8009bae:	f7fb fa2d 	bl	800500c <pbuf_alloc>
 8009bb2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f000 80b7 	beq.w	8009d2a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	891a      	ldrh	r2, [r3, #8]
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	891b      	ldrh	r3, [r3, #8]
 8009bc6:	1ad3      	subs	r3, r2, r3
 8009bc8:	b29a      	uxth	r2, r3
 8009bca:	887b      	ldrh	r3, [r7, #2]
 8009bcc:	4413      	add	r3, r2
 8009bce:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	6858      	ldr	r0, [r3, #4]
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	685a      	ldr	r2, [r3, #4]
 8009bd8:	7bbb      	ldrb	r3, [r7, #14]
 8009bda:	18d1      	adds	r1, r2, r3
 8009bdc:	897b      	ldrh	r3, [r7, #10]
 8009bde:	89ba      	ldrh	r2, [r7, #12]
 8009be0:	f7fb fef2 	bl	80059c8 <pbuf_copy_partial>
 8009be4:	4603      	mov	r3, r0
 8009be6:	461a      	mov	r2, r3
 8009be8:	89bb      	ldrh	r3, [r7, #12]
 8009bea:	4293      	cmp	r3, r2
 8009bec:	f040 809f 	bne.w	8009d2e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	899b      	ldrh	r3, [r3, #12]
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fa fa37 	bl	800406c <lwip_htons>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c06:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009c08:	2300      	movs	r3, #0
 8009c0a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009c0c:	7efb      	ldrb	r3, [r7, #27]
 8009c0e:	f003 0308 	and.w	r3, r3, #8
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d007      	beq.n	8009c26 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009c16:	7efb      	ldrb	r3, [r7, #27]
 8009c18:	f023 0308 	bic.w	r3, r3, #8
 8009c1c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8009c1e:	7ebb      	ldrb	r3, [r7, #26]
 8009c20:	f043 0308 	orr.w	r3, r3, #8
 8009c24:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009c26:	7efb      	ldrb	r3, [r7, #27]
 8009c28:	f003 0301 	and.w	r3, r3, #1
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d007      	beq.n	8009c40 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8009c30:	7efb      	ldrb	r3, [r7, #27]
 8009c32:	f023 0301 	bic.w	r3, r3, #1
 8009c36:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009c38:	7ebb      	ldrb	r3, [r7, #26]
 8009c3a:	f043 0301 	orr.w	r3, r3, #1
 8009c3e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fa fa25 	bl	8004096 <lwip_htonl>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	887b      	ldrh	r3, [r7, #2]
 8009c50:	18d1      	adds	r1, r2, r3
 8009c52:	7eba      	ldrb	r2, [r7, #26]
 8009c54:	7bfb      	ldrb	r3, [r7, #15]
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	6939      	ldr	r1, [r7, #16]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f7ff fea7 	bl	80099b0 <tcp_create_segment>
 8009c62:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d063      	beq.n	8009d32 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fb fd38 	bl	80056e4 <pbuf_clen>
 8009c74:	4603      	mov	r3, r0
 8009c76:	461a      	mov	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009c7e:	1a9b      	subs	r3, r3, r2
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	6858      	ldr	r0, [r3, #4]
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	891a      	ldrh	r2, [r3, #8]
 8009c92:	89bb      	ldrh	r3, [r7, #12]
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	4619      	mov	r1, r3
 8009c9a:	f7fb fb15 	bl	80052c8 <pbuf_realloc>
  useg->len -= remainder;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	891a      	ldrh	r2, [r3, #8]
 8009ca2:	89bb      	ldrh	r3, [r7, #12]
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	899b      	ldrh	r3, [r3, #12]
 8009cb2:	b29c      	uxth	r4, r3
 8009cb4:	7efb      	ldrb	r3, [r7, #27]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fa f9d7 	bl	800406c <lwip_htons>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	4322      	orrs	r2, r4
 8009cc8:	b292      	uxth	r2, r2
 8009cca:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7fb fd07 	bl	80056e4 <pbuf_clen>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	461a      	mov	r2, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009ce0:	4413      	add	r3, r2
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fb fcf8 	bl	80056e4 <pbuf_clen>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009cfe:	4413      	add	r3, r2
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	69fa      	ldr	r2, [r7, #28]
 8009d14:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d103      	bne.n	8009d26 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	e016      	b.n	8009d58 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009d2a:	bf00      	nop
 8009d2c:	e002      	b.n	8009d34 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009d2e:	bf00      	nop
 8009d30:	e000      	b.n	8009d34 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009d32:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d006      	beq.n	8009d48 <tcp_split_unsent_seg+0x25c>
 8009d3a:	4b09      	ldr	r3, [pc, #36]	; (8009d60 <tcp_split_unsent_seg+0x274>)
 8009d3c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009d40:	490d      	ldr	r1, [pc, #52]	; (8009d78 <tcp_split_unsent_seg+0x28c>)
 8009d42:	4809      	ldr	r0, [pc, #36]	; (8009d68 <tcp_split_unsent_seg+0x27c>)
 8009d44:	f004 fa44 	bl	800e1d0 <iprintf>
  if (p != NULL) {
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d002      	beq.n	8009d54 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8009d4e:	6938      	ldr	r0, [r7, #16]
 8009d50:	f7fb fc40 	bl	80055d4 <pbuf_free>
  }

  return ERR_MEM;
 8009d54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3724      	adds	r7, #36	; 0x24
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd90      	pop	{r4, r7, pc}
 8009d60:	08010c6c 	.word	0x08010c6c
 8009d64:	08011000 	.word	0x08011000
 8009d68:	08010cc0 	.word	0x08010cc0
 8009d6c:	08011024 	.word	0x08011024
 8009d70:	08011048 	.word	0x08011048
 8009d74:	08011058 	.word	0x08011058
 8009d78:	08011068 	.word	0x08011068

08009d7c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009d7c:	b590      	push	{r4, r7, lr}
 8009d7e:	b085      	sub	sp, #20
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d106      	bne.n	8009d98 <tcp_send_fin+0x1c>
 8009d8a:	4b21      	ldr	r3, [pc, #132]	; (8009e10 <tcp_send_fin+0x94>)
 8009d8c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009d90:	4920      	ldr	r1, [pc, #128]	; (8009e14 <tcp_send_fin+0x98>)
 8009d92:	4821      	ldr	r0, [pc, #132]	; (8009e18 <tcp_send_fin+0x9c>)
 8009d94:	f004 fa1c 	bl	800e1d0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d02e      	beq.n	8009dfe <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009da4:	60fb      	str	r3, [r7, #12]
 8009da6:	e002      	b.n	8009dae <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1f8      	bne.n	8009da8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	899b      	ldrh	r3, [r3, #12]
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fa f954 	bl	800406c <lwip_htons>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	f003 0307 	and.w	r3, r3, #7
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d116      	bne.n	8009dfe <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	899b      	ldrh	r3, [r3, #12]
 8009dd6:	b29c      	uxth	r4, r3
 8009dd8:	2001      	movs	r0, #1
 8009dda:	f7fa f947 	bl	800406c <lwip_htons>
 8009dde:	4603      	mov	r3, r0
 8009de0:	461a      	mov	r2, r3
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	4322      	orrs	r2, r4
 8009de8:	b292      	uxth	r2, r2
 8009dea:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	8b5b      	ldrh	r3, [r3, #26]
 8009df0:	f043 0320 	orr.w	r3, r3, #32
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	e004      	b.n	8009e08 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009dfe:	2101      	movs	r1, #1
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f80b 	bl	8009e1c <tcp_enqueue_flags>
 8009e06:	4603      	mov	r3, r0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3714      	adds	r7, #20
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd90      	pop	{r4, r7, pc}
 8009e10:	08010c6c 	.word	0x08010c6c
 8009e14:	08011074 	.word	0x08011074
 8009e18:	08010cc0 	.word	0x08010cc0

08009e1c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b08a      	sub	sp, #40	; 0x28
 8009e20:	af02      	add	r7, sp, #8
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009e30:	78fb      	ldrb	r3, [r7, #3]
 8009e32:	f003 0303 	and.w	r3, r3, #3
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d106      	bne.n	8009e48 <tcp_enqueue_flags+0x2c>
 8009e3a:	4b67      	ldr	r3, [pc, #412]	; (8009fd8 <tcp_enqueue_flags+0x1bc>)
 8009e3c:	f240 4211 	movw	r2, #1041	; 0x411
 8009e40:	4966      	ldr	r1, [pc, #408]	; (8009fdc <tcp_enqueue_flags+0x1c0>)
 8009e42:	4867      	ldr	r0, [pc, #412]	; (8009fe0 <tcp_enqueue_flags+0x1c4>)
 8009e44:	f004 f9c4 	bl	800e1d0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d106      	bne.n	8009e5c <tcp_enqueue_flags+0x40>
 8009e4e:	4b62      	ldr	r3, [pc, #392]	; (8009fd8 <tcp_enqueue_flags+0x1bc>)
 8009e50:	f240 4213 	movw	r2, #1043	; 0x413
 8009e54:	4963      	ldr	r1, [pc, #396]	; (8009fe4 <tcp_enqueue_flags+0x1c8>)
 8009e56:	4862      	ldr	r0, [pc, #392]	; (8009fe0 <tcp_enqueue_flags+0x1c4>)
 8009e58:	f004 f9ba 	bl	800e1d0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009e5c:	78fb      	ldrb	r3, [r7, #3]
 8009e5e:	f003 0302 	and.w	r3, r3, #2
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009e66:	2301      	movs	r3, #1
 8009e68:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009e6a:	7ffb      	ldrb	r3, [r7, #31]
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	f003 0304 	and.w	r3, r3, #4
 8009e74:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009e76:	7dfb      	ldrb	r3, [r7, #23]
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009e7e:	4619      	mov	r1, r3
 8009e80:	2036      	movs	r0, #54	; 0x36
 8009e82:	f7fb f8c3 	bl	800500c <pbuf_alloc>
 8009e86:	6138      	str	r0, [r7, #16]
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d109      	bne.n	8009ea2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	8b5b      	ldrh	r3, [r3, #26]
 8009e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea0:	e095      	b.n	8009fce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	895a      	ldrh	r2, [r3, #10]
 8009ea6:	7dfb      	ldrb	r3, [r7, #23]
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d206      	bcs.n	8009ebc <tcp_enqueue_flags+0xa0>
 8009eae:	4b4a      	ldr	r3, [pc, #296]	; (8009fd8 <tcp_enqueue_flags+0x1bc>)
 8009eb0:	f240 4239 	movw	r2, #1081	; 0x439
 8009eb4:	494c      	ldr	r1, [pc, #304]	; (8009fe8 <tcp_enqueue_flags+0x1cc>)
 8009eb6:	484a      	ldr	r0, [pc, #296]	; (8009fe0 <tcp_enqueue_flags+0x1c4>)
 8009eb8:	f004 f98a 	bl	800e1d0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009ec0:	78fa      	ldrb	r2, [r7, #3]
 8009ec2:	7ffb      	ldrb	r3, [r7, #31]
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	6939      	ldr	r1, [r7, #16]
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f7ff fd70 	bl	80099b0 <tcp_create_segment>
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d109      	bne.n	8009eec <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	8b5b      	ldrh	r3, [r3, #26]
 8009edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eea:	e070      	b.n	8009fce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	f003 0303 	and.w	r3, r3, #3
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d006      	beq.n	8009f06 <tcp_enqueue_flags+0xea>
 8009ef8:	4b37      	ldr	r3, [pc, #220]	; (8009fd8 <tcp_enqueue_flags+0x1bc>)
 8009efa:	f240 4242 	movw	r2, #1090	; 0x442
 8009efe:	493b      	ldr	r1, [pc, #236]	; (8009fec <tcp_enqueue_flags+0x1d0>)
 8009f00:	4837      	ldr	r0, [pc, #220]	; (8009fe0 <tcp_enqueue_flags+0x1c4>)
 8009f02:	f004 f965 	bl	800e1d0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	891b      	ldrh	r3, [r3, #8]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d006      	beq.n	8009f1c <tcp_enqueue_flags+0x100>
 8009f0e:	4b32      	ldr	r3, [pc, #200]	; (8009fd8 <tcp_enqueue_flags+0x1bc>)
 8009f10:	f240 4243 	movw	r2, #1091	; 0x443
 8009f14:	4936      	ldr	r1, [pc, #216]	; (8009ff0 <tcp_enqueue_flags+0x1d4>)
 8009f16:	4832      	ldr	r0, [pc, #200]	; (8009fe0 <tcp_enqueue_flags+0x1c4>)
 8009f18:	f004 f95a 	bl	800e1d0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d103      	bne.n	8009f2c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	66da      	str	r2, [r3, #108]	; 0x6c
 8009f2a:	e00d      	b.n	8009f48 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f30:	61bb      	str	r3, [r7, #24]
 8009f32:	e002      	b.n	8009f3a <tcp_enqueue_flags+0x11e>
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	61bb      	str	r3, [r7, #24]
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1f8      	bne.n	8009f34 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009f50:	78fb      	ldrb	r3, [r7, #3]
 8009f52:	f003 0302 	and.w	r3, r3, #2
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d104      	bne.n	8009f64 <tcp_enqueue_flags+0x148>
 8009f5a:	78fb      	ldrb	r3, [r7, #3]
 8009f5c:	f003 0301 	and.w	r3, r3, #1
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d004      	beq.n	8009f6e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009f6e:	78fb      	ldrb	r3, [r7, #3]
 8009f70:	f003 0301 	and.w	r3, r3, #1
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d006      	beq.n	8009f86 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	8b5b      	ldrh	r3, [r3, #26]
 8009f7c:	f043 0320 	orr.w	r3, r3, #32
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fb fbaa 	bl	80056e4 <pbuf_clen>
 8009f90:	4603      	mov	r3, r0
 8009f92:	461a      	mov	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009f9a:	4413      	add	r3, r2
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00e      	beq.n	8009fcc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d10a      	bne.n	8009fcc <tcp_enqueue_flags+0x1b0>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d106      	bne.n	8009fcc <tcp_enqueue_flags+0x1b0>
 8009fbe:	4b06      	ldr	r3, [pc, #24]	; (8009fd8 <tcp_enqueue_flags+0x1bc>)
 8009fc0:	f240 4265 	movw	r2, #1125	; 0x465
 8009fc4:	490b      	ldr	r1, [pc, #44]	; (8009ff4 <tcp_enqueue_flags+0x1d8>)
 8009fc6:	4806      	ldr	r0, [pc, #24]	; (8009fe0 <tcp_enqueue_flags+0x1c4>)
 8009fc8:	f004 f902 	bl	800e1d0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3720      	adds	r7, #32
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	08010c6c 	.word	0x08010c6c
 8009fdc:	08011090 	.word	0x08011090
 8009fe0:	08010cc0 	.word	0x08010cc0
 8009fe4:	080110e8 	.word	0x080110e8
 8009fe8:	08011108 	.word	0x08011108
 8009fec:	08011144 	.word	0x08011144
 8009ff0:	0801115c 	.word	0x0801115c
 8009ff4:	08011188 	.word	0x08011188

08009ff8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009ff8:	b5b0      	push	{r4, r5, r7, lr}
 8009ffa:	b08a      	sub	sp, #40	; 0x28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d106      	bne.n	800a014 <tcp_output+0x1c>
 800a006:	4b9e      	ldr	r3, [pc, #632]	; (800a280 <tcp_output+0x288>)
 800a008:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a00c:	499d      	ldr	r1, [pc, #628]	; (800a284 <tcp_output+0x28c>)
 800a00e:	489e      	ldr	r0, [pc, #632]	; (800a288 <tcp_output+0x290>)
 800a010:	f004 f8de 	bl	800e1d0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	7d1b      	ldrb	r3, [r3, #20]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d106      	bne.n	800a02a <tcp_output+0x32>
 800a01c:	4b98      	ldr	r3, [pc, #608]	; (800a280 <tcp_output+0x288>)
 800a01e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a022:	499a      	ldr	r1, [pc, #616]	; (800a28c <tcp_output+0x294>)
 800a024:	4898      	ldr	r0, [pc, #608]	; (800a288 <tcp_output+0x290>)
 800a026:	f004 f8d3 	bl	800e1d0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a02a:	4b99      	ldr	r3, [pc, #612]	; (800a290 <tcp_output+0x298>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	429a      	cmp	r2, r3
 800a032:	d101      	bne.n	800a038 <tcp_output+0x40>
    return ERR_OK;
 800a034:	2300      	movs	r3, #0
 800a036:	e1ce      	b.n	800a3d6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a044:	4293      	cmp	r3, r2
 800a046:	bf28      	it	cs
 800a048:	4613      	movcs	r3, r2
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a052:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10b      	bne.n	800a072 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	8b5b      	ldrh	r3, [r3, #26]
 800a05e:	f003 0302 	and.w	r3, r3, #2
 800a062:	2b00      	cmp	r3, #0
 800a064:	f000 81aa 	beq.w	800a3bc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fdcb 	bl	800ac04 <tcp_send_empty_ack>
 800a06e:	4603      	mov	r3, r0
 800a070:	e1b1      	b.n	800a3d6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a072:	6879      	ldr	r1, [r7, #4]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	3304      	adds	r3, #4
 800a078:	461a      	mov	r2, r3
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7ff fc7c 	bl	8009978 <tcp_route>
 800a080:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d102      	bne.n	800a08e <tcp_output+0x96>
    return ERR_RTE;
 800a088:	f06f 0303 	mvn.w	r3, #3
 800a08c:	e1a3      	b.n	800a3d6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d003      	beq.n	800a09c <tcp_output+0xa4>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d111      	bne.n	800a0c0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d002      	beq.n	800a0a8 <tcp_output+0xb0>
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	3304      	adds	r3, #4
 800a0a6:	e000      	b.n	800a0aa <tcp_output+0xb2>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d102      	bne.n	800a0b8 <tcp_output+0xc0>
      return ERR_RTE;
 800a0b2:	f06f 0303 	mvn.w	r3, #3
 800a0b6:	e18e      	b.n	800a3d6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7f9 ffe5 	bl	8004096 <lwip_htonl>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0d6:	8912      	ldrh	r2, [r2, #8]
 800a0d8:	4413      	add	r3, r2
 800a0da:	69ba      	ldr	r2, [r7, #24]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d227      	bcs.n	800a130 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d114      	bne.n	800a118 <tcp_output+0x120>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d110      	bne.n	800a118 <tcp_output+0x120>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10b      	bne.n	800a118 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	8b5b      	ldrh	r3, [r3, #26]
 800a11c:	f003 0302 	and.w	r3, r3, #2
 800a120:	2b00      	cmp	r3, #0
 800a122:	f000 814d 	beq.w	800a3c0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 fd6c 	bl	800ac04 <tcp_send_empty_ack>
 800a12c:	4603      	mov	r3, r0
 800a12e:	e152      	b.n	800a3d6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a13c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a13e:	6a3b      	ldr	r3, [r7, #32]
 800a140:	2b00      	cmp	r3, #0
 800a142:	f000 811c 	beq.w	800a37e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a146:	e002      	b.n	800a14e <tcp_output+0x156>
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	623b      	str	r3, [r7, #32]
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1f8      	bne.n	800a148 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a156:	e112      	b.n	800a37e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	899b      	ldrh	r3, [r3, #12]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	4618      	mov	r0, r3
 800a162:	f7f9 ff83 	bl	800406c <lwip_htons>
 800a166:	4603      	mov	r3, r0
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	f003 0304 	and.w	r3, r3, #4
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d006      	beq.n	800a180 <tcp_output+0x188>
 800a172:	4b43      	ldr	r3, [pc, #268]	; (800a280 <tcp_output+0x288>)
 800a174:	f240 5236 	movw	r2, #1334	; 0x536
 800a178:	4946      	ldr	r1, [pc, #280]	; (800a294 <tcp_output+0x29c>)
 800a17a:	4843      	ldr	r0, [pc, #268]	; (800a288 <tcp_output+0x290>)
 800a17c:	f004 f828 	bl	800e1d0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a184:	2b00      	cmp	r3, #0
 800a186:	d01f      	beq.n	800a1c8 <tcp_output+0x1d0>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	8b5b      	ldrh	r3, [r3, #26]
 800a18c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800a190:	2b00      	cmp	r3, #0
 800a192:	d119      	bne.n	800a1c8 <tcp_output+0x1d0>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00b      	beq.n	800a1b4 <tcp_output+0x1bc>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d110      	bne.n	800a1c8 <tcp_output+0x1d0>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1aa:	891a      	ldrh	r2, [r3, #8]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d209      	bcs.n	800a1c8 <tcp_output+0x1d0>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d004      	beq.n	800a1c8 <tcp_output+0x1d0>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a1c4:	2b08      	cmp	r3, #8
 800a1c6:	d901      	bls.n	800a1cc <tcp_output+0x1d4>
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e000      	b.n	800a1ce <tcp_output+0x1d6>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d106      	bne.n	800a1e0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	8b5b      	ldrh	r3, [r3, #26]
 800a1d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f000 80e4 	beq.w	800a3a8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	7d1b      	ldrb	r3, [r3, #20]
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d00d      	beq.n	800a204 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	899b      	ldrh	r3, [r3, #12]
 800a1ee:	b29c      	uxth	r4, r3
 800a1f0:	2010      	movs	r0, #16
 800a1f2:	f7f9 ff3b 	bl	800406c <lwip_htons>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	4322      	orrs	r2, r4
 800a200:	b292      	uxth	r2, r2
 800a202:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	6879      	ldr	r1, [r7, #4]
 800a208:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a20a:	f000 f909 	bl	800a420 <tcp_output_segment>
 800a20e:	4603      	mov	r3, r0
 800a210:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d009      	beq.n	800a22e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	8b5b      	ldrh	r3, [r3, #26]
 800a21e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a222:	b29a      	uxth	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	835a      	strh	r2, [r3, #26]
      return err;
 800a228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a22c:	e0d3      	b.n	800a3d6 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	7d1b      	ldrb	r3, [r3, #20]
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d006      	beq.n	800a24c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	8b5b      	ldrh	r3, [r3, #26]
 800a242:	f023 0303 	bic.w	r3, r3, #3
 800a246:	b29a      	uxth	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	4618      	mov	r0, r3
 800a254:	f7f9 ff1f 	bl	8004096 <lwip_htonl>
 800a258:	4604      	mov	r4, r0
 800a25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25c:	891b      	ldrh	r3, [r3, #8]
 800a25e:	461d      	mov	r5, r3
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	899b      	ldrh	r3, [r3, #12]
 800a266:	b29b      	uxth	r3, r3
 800a268:	4618      	mov	r0, r3
 800a26a:	f7f9 feff 	bl	800406c <lwip_htons>
 800a26e:	4603      	mov	r3, r0
 800a270:	b2db      	uxtb	r3, r3
 800a272:	f003 0303 	and.w	r3, r3, #3
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00e      	beq.n	800a298 <tcp_output+0x2a0>
 800a27a:	2301      	movs	r3, #1
 800a27c:	e00d      	b.n	800a29a <tcp_output+0x2a2>
 800a27e:	bf00      	nop
 800a280:	08010c6c 	.word	0x08010c6c
 800a284:	080111b0 	.word	0x080111b0
 800a288:	08010cc0 	.word	0x08010cc0
 800a28c:	080111c8 	.word	0x080111c8
 800a290:	20008b64 	.word	0x20008b64
 800a294:	080111f0 	.word	0x080111f0
 800a298:	2300      	movs	r3, #0
 800a29a:	442b      	add	r3, r5
 800a29c:	4423      	add	r3, r4
 800a29e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	da02      	bge.n	800a2b2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	68ba      	ldr	r2, [r7, #8]
 800a2b0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b4:	891b      	ldrh	r3, [r3, #8]
 800a2b6:	461c      	mov	r4, r3
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	899b      	ldrh	r3, [r3, #12]
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7f9 fed3 	bl	800406c <lwip_htons>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	f003 0303 	and.w	r3, r3, #3
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d001      	beq.n	800a2d6 <tcp_output+0x2de>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e000      	b.n	800a2d8 <tcp_output+0x2e0>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	4423      	add	r3, r4
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d049      	beq.n	800a372 <tcp_output+0x37a>
      seg->next = NULL;
 800a2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d105      	bne.n	800a2f8 <tcp_output+0x300>
        pcb->unacked = seg;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2f0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800a2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f4:	623b      	str	r3, [r7, #32]
 800a2f6:	e03f      	b.n	800a378 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7f9 fec9 	bl	8004096 <lwip_htonl>
 800a304:	4604      	mov	r4, r0
 800a306:	6a3b      	ldr	r3, [r7, #32]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7f9 fec2 	bl	8004096 <lwip_htonl>
 800a312:	4603      	mov	r3, r0
 800a314:	1ae3      	subs	r3, r4, r3
 800a316:	2b00      	cmp	r3, #0
 800a318:	da24      	bge.n	800a364 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	3370      	adds	r3, #112	; 0x70
 800a31e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a320:	e002      	b.n	800a328 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d011      	beq.n	800a354 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	4618      	mov	r0, r3
 800a33a:	f7f9 feac 	bl	8004096 <lwip_htonl>
 800a33e:	4604      	mov	r4, r0
 800a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	4618      	mov	r0, r3
 800a348:	f7f9 fea5 	bl	8004096 <lwip_htonl>
 800a34c:	4603      	mov	r3, r0
 800a34e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a350:	2b00      	cmp	r3, #0
 800a352:	dbe6      	blt.n	800a322 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a360:	601a      	str	r2, [r3, #0]
 800a362:	e009      	b.n	800a378 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a368:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a36a:	6a3b      	ldr	r3, [r7, #32]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	623b      	str	r3, [r7, #32]
 800a370:	e002      	b.n	800a378 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a372:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a374:	f7fc fc43 	bl	8006bfe <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a37c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a380:	2b00      	cmp	r3, #0
 800a382:	d012      	beq.n	800a3aa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7f9 fe83 	bl	8004096 <lwip_htonl>
 800a390:	4602      	mov	r2, r0
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a39a:	8912      	ldrh	r2, [r2, #8]
 800a39c:	4413      	add	r3, r2
  while (seg != NULL &&
 800a39e:	69ba      	ldr	r2, [r7, #24]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	f4bf aed9 	bcs.w	800a158 <tcp_output+0x160>
 800a3a6:	e000      	b.n	800a3aa <tcp_output+0x3b2>
      break;
 800a3a8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d108      	bne.n	800a3c4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a3ba:	e004      	b.n	800a3c6 <tcp_output+0x3ce>
    goto output_done;
 800a3bc:	bf00      	nop
 800a3be:	e002      	b.n	800a3c6 <tcp_output+0x3ce>
    goto output_done;
 800a3c0:	bf00      	nop
 800a3c2:	e000      	b.n	800a3c6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a3c4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	8b5b      	ldrh	r3, [r3, #26]
 800a3ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3728      	adds	r7, #40	; 0x28
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bdb0      	pop	{r4, r5, r7, pc}
 800a3de:	bf00      	nop

0800a3e0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d106      	bne.n	800a3fc <tcp_output_segment_busy+0x1c>
 800a3ee:	4b09      	ldr	r3, [pc, #36]	; (800a414 <tcp_output_segment_busy+0x34>)
 800a3f0:	f240 529a 	movw	r2, #1434	; 0x59a
 800a3f4:	4908      	ldr	r1, [pc, #32]	; (800a418 <tcp_output_segment_busy+0x38>)
 800a3f6:	4809      	ldr	r0, [pc, #36]	; (800a41c <tcp_output_segment_busy+0x3c>)
 800a3f8:	f003 feea 	bl	800e1d0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	7b9b      	ldrb	r3, [r3, #14]
 800a402:	2b01      	cmp	r3, #1
 800a404:	d001      	beq.n	800a40a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a406:	2301      	movs	r3, #1
 800a408:	e000      	b.n	800a40c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	08010c6c 	.word	0x08010c6c
 800a418:	08011208 	.word	0x08011208
 800a41c:	08010cc0 	.word	0x08010cc0

0800a420 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a420:	b5b0      	push	{r4, r5, r7, lr}
 800a422:	b08c      	sub	sp, #48	; 0x30
 800a424:	af04      	add	r7, sp, #16
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d106      	bne.n	800a440 <tcp_output_segment+0x20>
 800a432:	4b63      	ldr	r3, [pc, #396]	; (800a5c0 <tcp_output_segment+0x1a0>)
 800a434:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800a438:	4962      	ldr	r1, [pc, #392]	; (800a5c4 <tcp_output_segment+0x1a4>)
 800a43a:	4863      	ldr	r0, [pc, #396]	; (800a5c8 <tcp_output_segment+0x1a8>)
 800a43c:	f003 fec8 	bl	800e1d0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d106      	bne.n	800a454 <tcp_output_segment+0x34>
 800a446:	4b5e      	ldr	r3, [pc, #376]	; (800a5c0 <tcp_output_segment+0x1a0>)
 800a448:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a44c:	495f      	ldr	r1, [pc, #380]	; (800a5cc <tcp_output_segment+0x1ac>)
 800a44e:	485e      	ldr	r0, [pc, #376]	; (800a5c8 <tcp_output_segment+0x1a8>)
 800a450:	f003 febe 	bl	800e1d0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d106      	bne.n	800a468 <tcp_output_segment+0x48>
 800a45a:	4b59      	ldr	r3, [pc, #356]	; (800a5c0 <tcp_output_segment+0x1a0>)
 800a45c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800a460:	495b      	ldr	r1, [pc, #364]	; (800a5d0 <tcp_output_segment+0x1b0>)
 800a462:	4859      	ldr	r0, [pc, #356]	; (800a5c8 <tcp_output_segment+0x1a8>)
 800a464:	f003 feb4 	bl	800e1d0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f7ff ffb9 	bl	800a3e0 <tcp_output_segment_busy>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d001      	beq.n	800a478 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a474:	2300      	movs	r3, #0
 800a476:	e09f      	b.n	800a5b8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	68dc      	ldr	r4, [r3, #12]
 800a480:	4610      	mov	r0, r2
 800a482:	f7f9 fe08 	bl	8004096 <lwip_htonl>
 800a486:	4603      	mov	r3, r0
 800a488:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	68dc      	ldr	r4, [r3, #12]
 800a492:	4610      	mov	r0, r2
 800a494:	f7f9 fdea 	bl	800406c <lwip_htons>
 800a498:	4603      	mov	r3, r0
 800a49a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a4a4:	441a      	add	r2, r3
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	3314      	adds	r3, #20
 800a4b0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	7a9b      	ldrb	r3, [r3, #10]
 800a4b6:	f003 0301 	and.w	r3, r3, #1
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d015      	beq.n	800a4ea <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	3304      	adds	r3, #4
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	6879      	ldr	r1, [r7, #4]
 800a4c6:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a4ca:	f7fc fe8f 	bl	80071ec <tcp_eff_send_mss_netif>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a4d2:	8b7b      	ldrh	r3, [r7, #26]
 800a4d4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7f9 fddc 	bl	8004096 <lwip_htonl>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	3304      	adds	r3, #4
 800a4e8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	da02      	bge.n	800a4fa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10c      	bne.n	800a51c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a502:	4b34      	ldr	r3, [pc, #208]	; (800a5d4 <tcp_output_segment+0x1b4>)
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	4618      	mov	r0, r3
 800a512:	f7f9 fdc0 	bl	8004096 <lwip_htonl>
 800a516:	4602      	mov	r2, r0
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	68da      	ldr	r2, [r3, #12]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	1ad3      	subs	r3, r2, r3
 800a528:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	8959      	ldrh	r1, [r3, #10]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	8b3a      	ldrh	r2, [r7, #24]
 800a536:	1a8a      	subs	r2, r1, r2
 800a538:	b292      	uxth	r2, r2
 800a53a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	8919      	ldrh	r1, [r3, #8]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	8b3a      	ldrh	r2, [r7, #24]
 800a548:	1a8a      	subs	r2, r1, r2
 800a54a:	b292      	uxth	r2, r2
 800a54c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	68d2      	ldr	r2, [r2, #12]
 800a556:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	2200      	movs	r2, #0
 800a55e:	741a      	strb	r2, [r3, #16]
 800a560:	2200      	movs	r2, #0
 800a562:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	f103 0214 	add.w	r2, r3, #20
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	7a9b      	ldrb	r3, [r3, #10]
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	f003 0304 	and.w	r3, r3, #4
 800a576:	4413      	add	r3, r2
 800a578:	69fa      	ldr	r2, [r7, #28]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d006      	beq.n	800a58c <tcp_output_segment+0x16c>
 800a57e:	4b10      	ldr	r3, [pc, #64]	; (800a5c0 <tcp_output_segment+0x1a0>)
 800a580:	f240 621c 	movw	r2, #1564	; 0x61c
 800a584:	4914      	ldr	r1, [pc, #80]	; (800a5d8 <tcp_output_segment+0x1b8>)
 800a586:	4810      	ldr	r0, [pc, #64]	; (800a5c8 <tcp_output_segment+0x1a8>)
 800a588:	f003 fe22 	bl	800e1d0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6858      	ldr	r0, [r3, #4]
 800a590:	68b9      	ldr	r1, [r7, #8]
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	1d1c      	adds	r4, r3, #4
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	7add      	ldrb	r5, [r3, #11]
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	7a9b      	ldrb	r3, [r3, #10]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	9202      	str	r2, [sp, #8]
 800a5a2:	2206      	movs	r2, #6
 800a5a4:	9201      	str	r2, [sp, #4]
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	462b      	mov	r3, r5
 800a5aa:	4622      	mov	r2, r4
 800a5ac:	f002 fd86 	bl	800d0bc <ip4_output_if>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a5b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3720      	adds	r7, #32
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bdb0      	pop	{r4, r5, r7, pc}
 800a5c0:	08010c6c 	.word	0x08010c6c
 800a5c4:	08011230 	.word	0x08011230
 800a5c8:	08010cc0 	.word	0x08010cc0
 800a5cc:	08011250 	.word	0x08011250
 800a5d0:	08011270 	.word	0x08011270
 800a5d4:	20008b54 	.word	0x20008b54
 800a5d8:	08011294 	.word	0x08011294

0800a5dc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a5dc:	b5b0      	push	{r4, r5, r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d106      	bne.n	800a5f8 <tcp_rexmit_rto_prepare+0x1c>
 800a5ea:	4b31      	ldr	r3, [pc, #196]	; (800a6b0 <tcp_rexmit_rto_prepare+0xd4>)
 800a5ec:	f240 6263 	movw	r2, #1635	; 0x663
 800a5f0:	4930      	ldr	r1, [pc, #192]	; (800a6b4 <tcp_rexmit_rto_prepare+0xd8>)
 800a5f2:	4831      	ldr	r0, [pc, #196]	; (800a6b8 <tcp_rexmit_rto_prepare+0xdc>)
 800a5f4:	f003 fdec 	bl	800e1d0 <iprintf>

  if (pcb->unacked == NULL) {
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d102      	bne.n	800a606 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a600:	f06f 0305 	mvn.w	r3, #5
 800a604:	e050      	b.n	800a6a8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a60a:	60fb      	str	r3, [r7, #12]
 800a60c:	e00b      	b.n	800a626 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f7ff fee6 	bl	800a3e0 <tcp_output_segment_busy>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d002      	beq.n	800a620 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a61a:	f06f 0305 	mvn.w	r3, #5
 800a61e:	e043      	b.n	800a6a8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	60fb      	str	r3, [r7, #12]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1ef      	bne.n	800a60e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f7ff fed6 	bl	800a3e0 <tcp_output_segment_busy>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d002      	beq.n	800a640 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a63a:	f06f 0305 	mvn.w	r3, #5
 800a63e:	e033      	b.n	800a6a8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	8b5b      	ldrh	r3, [r3, #26]
 800a65a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a65e:	b29a      	uxth	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7f9 fd13 	bl	8004096 <lwip_htonl>
 800a670:	4604      	mov	r4, r0
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	891b      	ldrh	r3, [r3, #8]
 800a676:	461d      	mov	r5, r3
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	899b      	ldrh	r3, [r3, #12]
 800a67e:	b29b      	uxth	r3, r3
 800a680:	4618      	mov	r0, r3
 800a682:	f7f9 fcf3 	bl	800406c <lwip_htons>
 800a686:	4603      	mov	r3, r0
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	f003 0303 	and.w	r3, r3, #3
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d001      	beq.n	800a696 <tcp_rexmit_rto_prepare+0xba>
 800a692:	2301      	movs	r3, #1
 800a694:	e000      	b.n	800a698 <tcp_rexmit_rto_prepare+0xbc>
 800a696:	2300      	movs	r3, #0
 800a698:	442b      	add	r3, r5
 800a69a:	18e2      	adds	r2, r4, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bdb0      	pop	{r4, r5, r7, pc}
 800a6b0:	08010c6c 	.word	0x08010c6c
 800a6b4:	080112a8 	.word	0x080112a8
 800a6b8:	08010cc0 	.word	0x08010cc0

0800a6bc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d106      	bne.n	800a6d8 <tcp_rexmit_rto_commit+0x1c>
 800a6ca:	4b0d      	ldr	r3, [pc, #52]	; (800a700 <tcp_rexmit_rto_commit+0x44>)
 800a6cc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a6d0:	490c      	ldr	r1, [pc, #48]	; (800a704 <tcp_rexmit_rto_commit+0x48>)
 800a6d2:	480d      	ldr	r0, [pc, #52]	; (800a708 <tcp_rexmit_rto_commit+0x4c>)
 800a6d4:	f003 fd7c 	bl	800e1d0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a6de:	2bff      	cmp	r3, #255	; 0xff
 800a6e0:	d007      	beq.n	800a6f2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	b2da      	uxtb	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f7ff fc80 	bl	8009ff8 <tcp_output>
}
 800a6f8:	bf00      	nop
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	08010c6c 	.word	0x08010c6c
 800a704:	080112cc 	.word	0x080112cc
 800a708:	08010cc0 	.word	0x08010cc0

0800a70c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d106      	bne.n	800a728 <tcp_rexmit_rto+0x1c>
 800a71a:	4b0a      	ldr	r3, [pc, #40]	; (800a744 <tcp_rexmit_rto+0x38>)
 800a71c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a720:	4909      	ldr	r1, [pc, #36]	; (800a748 <tcp_rexmit_rto+0x3c>)
 800a722:	480a      	ldr	r0, [pc, #40]	; (800a74c <tcp_rexmit_rto+0x40>)
 800a724:	f003 fd54 	bl	800e1d0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f7ff ff57 	bl	800a5dc <tcp_rexmit_rto_prepare>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d102      	bne.n	800a73a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f7ff ffc1 	bl	800a6bc <tcp_rexmit_rto_commit>
  }
}
 800a73a:	bf00      	nop
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	08010c6c 	.word	0x08010c6c
 800a748:	080112f0 	.word	0x080112f0
 800a74c:	08010cc0 	.word	0x08010cc0

0800a750 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a750:	b590      	push	{r4, r7, lr}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d106      	bne.n	800a76c <tcp_rexmit+0x1c>
 800a75e:	4b2f      	ldr	r3, [pc, #188]	; (800a81c <tcp_rexmit+0xcc>)
 800a760:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a764:	492e      	ldr	r1, [pc, #184]	; (800a820 <tcp_rexmit+0xd0>)
 800a766:	482f      	ldr	r0, [pc, #188]	; (800a824 <tcp_rexmit+0xd4>)
 800a768:	f003 fd32 	bl	800e1d0 <iprintf>

  if (pcb->unacked == NULL) {
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a770:	2b00      	cmp	r3, #0
 800a772:	d102      	bne.n	800a77a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a774:	f06f 0305 	mvn.w	r3, #5
 800a778:	e04c      	b.n	800a814 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a77e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a780:	68b8      	ldr	r0, [r7, #8]
 800a782:	f7ff fe2d 	bl	800a3e0 <tcp_output_segment_busy>
 800a786:	4603      	mov	r3, r0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d002      	beq.n	800a792 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a78c:	f06f 0305 	mvn.w	r3, #5
 800a790:	e040      	b.n	800a814 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	336c      	adds	r3, #108	; 0x6c
 800a79e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a7a0:	e002      	b.n	800a7a8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d011      	beq.n	800a7d4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7f9 fc6c 	bl	8004096 <lwip_htonl>
 800a7be:	4604      	mov	r4, r0
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7f9 fc65 	bl	8004096 <lwip_htonl>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	dbe6      	blt.n	800a7a2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	68ba      	ldr	r2, [r7, #8]
 800a7e0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d103      	bne.n	800a7f2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a7f8:	2bff      	cmp	r3, #255	; 0xff
 800a7fa:	d007      	beq.n	800a80c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a802:	3301      	adds	r3, #1
 800a804:	b2da      	uxtb	r2, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd90      	pop	{r4, r7, pc}
 800a81c:	08010c6c 	.word	0x08010c6c
 800a820:	0801130c 	.word	0x0801130c
 800a824:	08010cc0 	.word	0x08010cc0

0800a828 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d106      	bne.n	800a844 <tcp_rexmit_fast+0x1c>
 800a836:	4b2a      	ldr	r3, [pc, #168]	; (800a8e0 <tcp_rexmit_fast+0xb8>)
 800a838:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a83c:	4929      	ldr	r1, [pc, #164]	; (800a8e4 <tcp_rexmit_fast+0xbc>)
 800a83e:	482a      	ldr	r0, [pc, #168]	; (800a8e8 <tcp_rexmit_fast+0xc0>)
 800a840:	f003 fcc6 	bl	800e1d0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d045      	beq.n	800a8d8 <tcp_rexmit_fast+0xb0>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	8b5b      	ldrh	r3, [r3, #26]
 800a850:	f003 0304 	and.w	r3, r3, #4
 800a854:	2b00      	cmp	r3, #0
 800a856:	d13f      	bne.n	800a8d8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f7ff ff79 	bl	800a750 <tcp_rexmit>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d139      	bne.n	800a8d8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a870:	4293      	cmp	r3, r2
 800a872:	bf28      	it	cs
 800a874:	4613      	movcs	r3, r2
 800a876:	b29b      	uxth	r3, r3
 800a878:	2b00      	cmp	r3, #0
 800a87a:	da00      	bge.n	800a87e <tcp_rexmit_fast+0x56>
 800a87c:	3301      	adds	r3, #1
 800a87e:	105b      	asrs	r3, r3, #1
 800a880:	b29a      	uxth	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a88e:	461a      	mov	r2, r3
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a894:	005b      	lsls	r3, r3, #1
 800a896:	429a      	cmp	r2, r3
 800a898:	d206      	bcs.n	800a8a8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a89e:	005b      	lsls	r3, r3, #1
 800a8a0:	b29a      	uxth	r2, r3
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	0049      	lsls	r1, r1, #1
 800a8b6:	440b      	add	r3, r1
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	4413      	add	r3, r2
 800a8bc:	b29a      	uxth	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	8b5b      	ldrh	r3, [r3, #26]
 800a8c8:	f043 0304 	orr.w	r3, r3, #4
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a8d8:	bf00      	nop
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	08010c6c 	.word	0x08010c6c
 800a8e4:	08011324 	.word	0x08011324
 800a8e8:	08010cc0 	.word	0x08010cc0

0800a8ec <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b086      	sub	sp, #24
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	607b      	str	r3, [r7, #4]
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	817b      	strh	r3, [r7, #10]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a8fe:	897a      	ldrh	r2, [r7, #10]
 800a900:	893b      	ldrh	r3, [r7, #8]
 800a902:	4413      	add	r3, r2
 800a904:	b29b      	uxth	r3, r3
 800a906:	3314      	adds	r3, #20
 800a908:	b29b      	uxth	r3, r3
 800a90a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a90e:	4619      	mov	r1, r3
 800a910:	2022      	movs	r0, #34	; 0x22
 800a912:	f7fa fb7b 	bl	800500c <pbuf_alloc>
 800a916:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d04d      	beq.n	800a9ba <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a91e:	897b      	ldrh	r3, [r7, #10]
 800a920:	3313      	adds	r3, #19
 800a922:	697a      	ldr	r2, [r7, #20]
 800a924:	8952      	ldrh	r2, [r2, #10]
 800a926:	4293      	cmp	r3, r2
 800a928:	db06      	blt.n	800a938 <tcp_output_alloc_header_common+0x4c>
 800a92a:	4b26      	ldr	r3, [pc, #152]	; (800a9c4 <tcp_output_alloc_header_common+0xd8>)
 800a92c:	f240 7223 	movw	r2, #1827	; 0x723
 800a930:	4925      	ldr	r1, [pc, #148]	; (800a9c8 <tcp_output_alloc_header_common+0xdc>)
 800a932:	4826      	ldr	r0, [pc, #152]	; (800a9cc <tcp_output_alloc_header_common+0xe0>)
 800a934:	f003 fc4c 	bl	800e1d0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a93e:	8c3b      	ldrh	r3, [r7, #32]
 800a940:	4618      	mov	r0, r3
 800a942:	f7f9 fb93 	bl	800406c <lwip_htons>
 800a946:	4603      	mov	r3, r0
 800a948:	461a      	mov	r2, r3
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a94e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a950:	4618      	mov	r0, r3
 800a952:	f7f9 fb8b 	bl	800406c <lwip_htons>
 800a956:	4603      	mov	r3, r0
 800a958:	461a      	mov	r2, r3
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f7f9 fb96 	bl	8004096 <lwip_htonl>
 800a96a:	4602      	mov	r2, r0
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a970:	897b      	ldrh	r3, [r7, #10]
 800a972:	089b      	lsrs	r3, r3, #2
 800a974:	b29b      	uxth	r3, r3
 800a976:	3305      	adds	r3, #5
 800a978:	b29b      	uxth	r3, r3
 800a97a:	031b      	lsls	r3, r3, #12
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a982:	b29b      	uxth	r3, r3
 800a984:	4313      	orrs	r3, r2
 800a986:	b29b      	uxth	r3, r3
 800a988:	4618      	mov	r0, r3
 800a98a:	f7f9 fb6f 	bl	800406c <lwip_htons>
 800a98e:	4603      	mov	r3, r0
 800a990:	461a      	mov	r2, r3
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a996:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a998:	4618      	mov	r0, r3
 800a99a:	f7f9 fb67 	bl	800406c <lwip_htons>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	741a      	strb	r2, [r3, #16]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	749a      	strb	r2, [r3, #18]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a9ba:	697b      	ldr	r3, [r7, #20]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3718      	adds	r7, #24
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	08010c6c 	.word	0x08010c6c
 800a9c8:	08011344 	.word	0x08011344
 800a9cc:	08010cc0 	.word	0x08010cc0

0800a9d0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a9d0:	b5b0      	push	{r4, r5, r7, lr}
 800a9d2:	b08a      	sub	sp, #40	; 0x28
 800a9d4:	af04      	add	r7, sp, #16
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	607b      	str	r3, [r7, #4]
 800a9da:	460b      	mov	r3, r1
 800a9dc:	817b      	strh	r3, [r7, #10]
 800a9de:	4613      	mov	r3, r2
 800a9e0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d106      	bne.n	800a9f6 <tcp_output_alloc_header+0x26>
 800a9e8:	4b15      	ldr	r3, [pc, #84]	; (800aa40 <tcp_output_alloc_header+0x70>)
 800a9ea:	f240 7242 	movw	r2, #1858	; 0x742
 800a9ee:	4915      	ldr	r1, [pc, #84]	; (800aa44 <tcp_output_alloc_header+0x74>)
 800a9f0:	4815      	ldr	r0, [pc, #84]	; (800aa48 <tcp_output_alloc_header+0x78>)
 800a9f2:	f003 fbed 	bl	800e1d0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	8adb      	ldrh	r3, [r3, #22]
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	8b12      	ldrh	r2, [r2, #24]
 800aa02:	68f9      	ldr	r1, [r7, #12]
 800aa04:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800aa06:	893d      	ldrh	r5, [r7, #8]
 800aa08:	897c      	ldrh	r4, [r7, #10]
 800aa0a:	9103      	str	r1, [sp, #12]
 800aa0c:	2110      	movs	r1, #16
 800aa0e:	9102      	str	r1, [sp, #8]
 800aa10:	9201      	str	r2, [sp, #4]
 800aa12:	9300      	str	r3, [sp, #0]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	462a      	mov	r2, r5
 800aa18:	4621      	mov	r1, r4
 800aa1a:	f7ff ff67 	bl	800a8ec <tcp_output_alloc_header_common>
 800aa1e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d006      	beq.n	800aa34 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800aa2e:	441a      	add	r2, r3
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800aa34:	697b      	ldr	r3, [r7, #20]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3718      	adds	r7, #24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bdb0      	pop	{r4, r5, r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	08010c6c 	.word	0x08010c6c
 800aa44:	08011374 	.word	0x08011374
 800aa48:	08010cc0 	.word	0x08010cc0

0800aa4c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b088      	sub	sp, #32
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	4611      	mov	r1, r2
 800aa58:	461a      	mov	r2, r3
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	71fb      	strb	r3, [r7, #7]
 800aa5e:	4613      	mov	r3, r2
 800aa60:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800aa62:	2300      	movs	r3, #0
 800aa64:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d106      	bne.n	800aa7a <tcp_output_fill_options+0x2e>
 800aa6c:	4b13      	ldr	r3, [pc, #76]	; (800aabc <tcp_output_fill_options+0x70>)
 800aa6e:	f240 7256 	movw	r2, #1878	; 0x756
 800aa72:	4913      	ldr	r1, [pc, #76]	; (800aac0 <tcp_output_fill_options+0x74>)
 800aa74:	4813      	ldr	r0, [pc, #76]	; (800aac4 <tcp_output_fill_options+0x78>)
 800aa76:	f003 fbab 	bl	800e1d0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	3314      	adds	r3, #20
 800aa84:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	f103 0214 	add.w	r2, r3, #20
 800aa8c:	8bfb      	ldrh	r3, [r7, #30]
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	4619      	mov	r1, r3
 800aa92:	79fb      	ldrb	r3, [r7, #7]
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	f003 0304 	and.w	r3, r3, #4
 800aa9a:	440b      	add	r3, r1
 800aa9c:	4413      	add	r3, r2
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d006      	beq.n	800aab2 <tcp_output_fill_options+0x66>
 800aaa4:	4b05      	ldr	r3, [pc, #20]	; (800aabc <tcp_output_fill_options+0x70>)
 800aaa6:	f240 7275 	movw	r2, #1909	; 0x775
 800aaaa:	4907      	ldr	r1, [pc, #28]	; (800aac8 <tcp_output_fill_options+0x7c>)
 800aaac:	4805      	ldr	r0, [pc, #20]	; (800aac4 <tcp_output_fill_options+0x78>)
 800aaae:	f003 fb8f 	bl	800e1d0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800aab2:	bf00      	nop
 800aab4:	3720      	adds	r7, #32
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	08010c6c 	.word	0x08010c6c
 800aac0:	0801139c 	.word	0x0801139c
 800aac4:	08010cc0 	.word	0x08010cc0
 800aac8:	08011294 	.word	0x08011294

0800aacc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b08a      	sub	sp, #40	; 0x28
 800aad0:	af04      	add	r7, sp, #16
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d106      	bne.n	800aaee <tcp_output_control_segment+0x22>
 800aae0:	4b1c      	ldr	r3, [pc, #112]	; (800ab54 <tcp_output_control_segment+0x88>)
 800aae2:	f240 7287 	movw	r2, #1927	; 0x787
 800aae6:	491c      	ldr	r1, [pc, #112]	; (800ab58 <tcp_output_control_segment+0x8c>)
 800aae8:	481c      	ldr	r0, [pc, #112]	; (800ab5c <tcp_output_control_segment+0x90>)
 800aaea:	f003 fb71 	bl	800e1d0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	6879      	ldr	r1, [r7, #4]
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f7fe ff40 	bl	8009978 <tcp_route>
 800aaf8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d102      	bne.n	800ab06 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ab00:	23fc      	movs	r3, #252	; 0xfc
 800ab02:	75fb      	strb	r3, [r7, #23]
 800ab04:	e01c      	b.n	800ab40 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d006      	beq.n	800ab1a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	7adb      	ldrb	r3, [r3, #11]
 800ab10:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	7a9b      	ldrb	r3, [r3, #10]
 800ab16:	757b      	strb	r3, [r7, #21]
 800ab18:	e003      	b.n	800ab22 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ab1a:	23ff      	movs	r3, #255	; 0xff
 800ab1c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ab22:	7dba      	ldrb	r2, [r7, #22]
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	9302      	str	r3, [sp, #8]
 800ab28:	2306      	movs	r3, #6
 800ab2a:	9301      	str	r3, [sp, #4]
 800ab2c:	7d7b      	ldrb	r3, [r7, #21]
 800ab2e:	9300      	str	r3, [sp, #0]
 800ab30:	4613      	mov	r3, r2
 800ab32:	683a      	ldr	r2, [r7, #0]
 800ab34:	6879      	ldr	r1, [r7, #4]
 800ab36:	68b8      	ldr	r0, [r7, #8]
 800ab38:	f002 fac0 	bl	800d0bc <ip4_output_if>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ab40:	68b8      	ldr	r0, [r7, #8]
 800ab42:	f7fa fd47 	bl	80055d4 <pbuf_free>
  return err;
 800ab46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3718      	adds	r7, #24
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	08010c6c 	.word	0x08010c6c
 800ab58:	080113c4 	.word	0x080113c4
 800ab5c:	08010cc0 	.word	0x08010cc0

0800ab60 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ab60:	b590      	push	{r4, r7, lr}
 800ab62:	b08b      	sub	sp, #44	; 0x2c
 800ab64:	af04      	add	r7, sp, #16
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
 800ab6c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d106      	bne.n	800ab82 <tcp_rst+0x22>
 800ab74:	4b1f      	ldr	r3, [pc, #124]	; (800abf4 <tcp_rst+0x94>)
 800ab76:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800ab7a:	491f      	ldr	r1, [pc, #124]	; (800abf8 <tcp_rst+0x98>)
 800ab7c:	481f      	ldr	r0, [pc, #124]	; (800abfc <tcp_rst+0x9c>)
 800ab7e:	f003 fb27 	bl	800e1d0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ab82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d106      	bne.n	800ab96 <tcp_rst+0x36>
 800ab88:	4b1a      	ldr	r3, [pc, #104]	; (800abf4 <tcp_rst+0x94>)
 800ab8a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ab8e:	491c      	ldr	r1, [pc, #112]	; (800ac00 <tcp_rst+0xa0>)
 800ab90:	481a      	ldr	r0, [pc, #104]	; (800abfc <tcp_rst+0x9c>)
 800ab92:	f003 fb1d 	bl	800e1d0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ab96:	2300      	movs	r3, #0
 800ab98:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ab9a:	f246 0308 	movw	r3, #24584	; 0x6008
 800ab9e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800aba0:	7dfb      	ldrb	r3, [r7, #23]
 800aba2:	b29c      	uxth	r4, r3
 800aba4:	68b8      	ldr	r0, [r7, #8]
 800aba6:	f7f9 fa76 	bl	8004096 <lwip_htonl>
 800abaa:	4602      	mov	r2, r0
 800abac:	8abb      	ldrh	r3, [r7, #20]
 800abae:	9303      	str	r3, [sp, #12]
 800abb0:	2314      	movs	r3, #20
 800abb2:	9302      	str	r3, [sp, #8]
 800abb4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800abb6:	9301      	str	r3, [sp, #4]
 800abb8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	4613      	mov	r3, r2
 800abbe:	2200      	movs	r2, #0
 800abc0:	4621      	mov	r1, r4
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f7ff fe92 	bl	800a8ec <tcp_output_alloc_header_common>
 800abc8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00c      	beq.n	800abea <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800abd0:	7dfb      	ldrb	r3, [r7, #23]
 800abd2:	2200      	movs	r2, #0
 800abd4:	6939      	ldr	r1, [r7, #16]
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f7ff ff38 	bl	800aa4c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800abdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abde:	683a      	ldr	r2, [r7, #0]
 800abe0:	6939      	ldr	r1, [r7, #16]
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f7ff ff72 	bl	800aacc <tcp_output_control_segment>
 800abe8:	e000      	b.n	800abec <tcp_rst+0x8c>
    return;
 800abea:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800abec:	371c      	adds	r7, #28
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd90      	pop	{r4, r7, pc}
 800abf2:	bf00      	nop
 800abf4:	08010c6c 	.word	0x08010c6c
 800abf8:	080113f0 	.word	0x080113f0
 800abfc:	08010cc0 	.word	0x08010cc0
 800ac00:	0801140c 	.word	0x0801140c

0800ac04 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ac04:	b590      	push	{r4, r7, lr}
 800ac06:	b087      	sub	sp, #28
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ac10:	2300      	movs	r3, #0
 800ac12:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d106      	bne.n	800ac28 <tcp_send_empty_ack+0x24>
 800ac1a:	4b28      	ldr	r3, [pc, #160]	; (800acbc <tcp_send_empty_ack+0xb8>)
 800ac1c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ac20:	4927      	ldr	r1, [pc, #156]	; (800acc0 <tcp_send_empty_ack+0xbc>)
 800ac22:	4828      	ldr	r0, [pc, #160]	; (800acc4 <tcp_send_empty_ack+0xc0>)
 800ac24:	f003 fad4 	bl	800e1d0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ac28:	7dfb      	ldrb	r3, [r7, #23]
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	f003 0304 	and.w	r3, r3, #4
 800ac32:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ac34:	7d7b      	ldrb	r3, [r7, #21]
 800ac36:	b29c      	uxth	r4, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7f9 fa2a 	bl	8004096 <lwip_htonl>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2200      	movs	r2, #0
 800ac46:	4621      	mov	r1, r4
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f7ff fec1 	bl	800a9d0 <tcp_output_alloc_header>
 800ac4e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d109      	bne.n	800ac6a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	8b5b      	ldrh	r3, [r3, #26]
 800ac5a:	f043 0303 	orr.w	r3, r3, #3
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ac64:	f06f 0301 	mvn.w	r3, #1
 800ac68:	e023      	b.n	800acb2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ac6a:	7dbb      	ldrb	r3, [r7, #22]
 800ac6c:	7dfa      	ldrb	r2, [r7, #23]
 800ac6e:	6939      	ldr	r1, [r7, #16]
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f7ff feeb 	bl	800aa4c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	6939      	ldr	r1, [r7, #16]
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7ff ff24 	bl	800aacc <tcp_output_control_segment>
 800ac84:	4603      	mov	r3, r0
 800ac86:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ac88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d007      	beq.n	800aca0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	8b5b      	ldrh	r3, [r3, #26]
 800ac94:	f043 0303 	orr.w	r3, r3, #3
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	835a      	strh	r2, [r3, #26]
 800ac9e:	e006      	b.n	800acae <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	8b5b      	ldrh	r3, [r3, #26]
 800aca4:	f023 0303 	bic.w	r3, r3, #3
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800acae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	371c      	adds	r7, #28
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd90      	pop	{r4, r7, pc}
 800acba:	bf00      	nop
 800acbc:	08010c6c 	.word	0x08010c6c
 800acc0:	08011428 	.word	0x08011428
 800acc4:	08010cc0 	.word	0x08010cc0

0800acc8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800acc8:	b590      	push	{r4, r7, lr}
 800acca:	b087      	sub	sp, #28
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800acd0:	2300      	movs	r3, #0
 800acd2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d106      	bne.n	800ace8 <tcp_keepalive+0x20>
 800acda:	4b18      	ldr	r3, [pc, #96]	; (800ad3c <tcp_keepalive+0x74>)
 800acdc:	f640 0224 	movw	r2, #2084	; 0x824
 800ace0:	4917      	ldr	r1, [pc, #92]	; (800ad40 <tcp_keepalive+0x78>)
 800ace2:	4818      	ldr	r0, [pc, #96]	; (800ad44 <tcp_keepalive+0x7c>)
 800ace4:	f003 fa74 	bl	800e1d0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ace8:	7dfb      	ldrb	r3, [r7, #23]
 800acea:	b29c      	uxth	r4, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acf0:	3b01      	subs	r3, #1
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7f9 f9cf 	bl	8004096 <lwip_htonl>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2200      	movs	r2, #0
 800acfc:	4621      	mov	r1, r4
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7ff fe66 	bl	800a9d0 <tcp_output_alloc_header>
 800ad04:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d102      	bne.n	800ad12 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ad0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad10:	e010      	b.n	800ad34 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ad12:	7dfb      	ldrb	r3, [r7, #23]
 800ad14:	2200      	movs	r2, #0
 800ad16:	6939      	ldr	r1, [r7, #16]
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f7ff fe97 	bl	800aa4c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	3304      	adds	r3, #4
 800ad24:	6939      	ldr	r1, [r7, #16]
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f7ff fed0 	bl	800aacc <tcp_output_control_segment>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ad30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	371c      	adds	r7, #28
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd90      	pop	{r4, r7, pc}
 800ad3c:	08010c6c 	.word	0x08010c6c
 800ad40:	08011448 	.word	0x08011448
 800ad44:	08010cc0 	.word	0x08010cc0

0800ad48 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ad48:	b590      	push	{r4, r7, lr}
 800ad4a:	b08b      	sub	sp, #44	; 0x2c
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ad50:	2300      	movs	r3, #0
 800ad52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d106      	bne.n	800ad6a <tcp_zero_window_probe+0x22>
 800ad5c:	4b4c      	ldr	r3, [pc, #304]	; (800ae90 <tcp_zero_window_probe+0x148>)
 800ad5e:	f640 024f 	movw	r2, #2127	; 0x84f
 800ad62:	494c      	ldr	r1, [pc, #304]	; (800ae94 <tcp_zero_window_probe+0x14c>)
 800ad64:	484c      	ldr	r0, [pc, #304]	; (800ae98 <tcp_zero_window_probe+0x150>)
 800ad66:	f003 fa33 	bl	800e1d0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad6e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ad70:	6a3b      	ldr	r3, [r7, #32]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d101      	bne.n	800ad7a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	e086      	b.n	800ae88 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ad80:	2bff      	cmp	r3, #255	; 0xff
 800ad82:	d007      	beq.n	800ad94 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	b2da      	uxtb	r2, r3
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ad94:	6a3b      	ldr	r3, [r7, #32]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	899b      	ldrh	r3, [r3, #12]
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7f9 f965 	bl	800406c <lwip_htons>
 800ada2:	4603      	mov	r3, r0
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	f003 0301 	and.w	r3, r3, #1
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d005      	beq.n	800adba <tcp_zero_window_probe+0x72>
 800adae:	6a3b      	ldr	r3, [r7, #32]
 800adb0:	891b      	ldrh	r3, [r3, #8]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d101      	bne.n	800adba <tcp_zero_window_probe+0x72>
 800adb6:	2301      	movs	r3, #1
 800adb8:	e000      	b.n	800adbc <tcp_zero_window_probe+0x74>
 800adba:	2300      	movs	r3, #0
 800adbc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800adbe:	7ffb      	ldrb	r3, [r7, #31]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	bf0c      	ite	eq
 800adc4:	2301      	moveq	r3, #1
 800adc6:	2300      	movne	r3, #0
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800adcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800add0:	b299      	uxth	r1, r3
 800add2:	6a3b      	ldr	r3, [r7, #32]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	8bba      	ldrh	r2, [r7, #28]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f7ff fdf8 	bl	800a9d0 <tcp_output_alloc_header>
 800ade0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d102      	bne.n	800adee <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ade8:	f04f 33ff 	mov.w	r3, #4294967295
 800adec:	e04c      	b.n	800ae88 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800adf4:	7ffb      	ldrb	r3, [r7, #31]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d011      	beq.n	800ae1e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	899b      	ldrh	r3, [r3, #12]
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	b21b      	sxth	r3, r3
 800ae02:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ae06:	b21c      	sxth	r4, r3
 800ae08:	2011      	movs	r0, #17
 800ae0a:	f7f9 f92f 	bl	800406c <lwip_htons>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	b21b      	sxth	r3, r3
 800ae12:	4323      	orrs	r3, r4
 800ae14:	b21b      	sxth	r3, r3
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	819a      	strh	r2, [r3, #12]
 800ae1c:	e010      	b.n	800ae40 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	3314      	adds	r3, #20
 800ae24:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ae26:	6a3b      	ldr	r3, [r7, #32]
 800ae28:	6858      	ldr	r0, [r3, #4]
 800ae2a:	6a3b      	ldr	r3, [r7, #32]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	891a      	ldrh	r2, [r3, #8]
 800ae30:	6a3b      	ldr	r3, [r7, #32]
 800ae32:	891b      	ldrh	r3, [r3, #8]
 800ae34:	1ad3      	subs	r3, r2, r3
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	2201      	movs	r2, #1
 800ae3a:	6939      	ldr	r1, [r7, #16]
 800ae3c:	f7fa fdc4 	bl	80059c8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ae40:	6a3b      	ldr	r3, [r7, #32]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7f9 f925 	bl	8004096 <lwip_htonl>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	3301      	adds	r3, #1
 800ae50:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	da02      	bge.n	800ae64 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	68fa      	ldr	r2, [r7, #12]
 800ae62:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ae64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae68:	2200      	movs	r2, #0
 800ae6a:	69b9      	ldr	r1, [r7, #24]
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f7ff fded 	bl	800aa4c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	3304      	adds	r3, #4
 800ae78:	69b9      	ldr	r1, [r7, #24]
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7ff fe26 	bl	800aacc <tcp_output_control_segment>
 800ae80:	4603      	mov	r3, r0
 800ae82:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ae84:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	372c      	adds	r7, #44	; 0x2c
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd90      	pop	{r4, r7, pc}
 800ae90:	08010c6c 	.word	0x08010c6c
 800ae94:	08011464 	.word	0x08011464
 800ae98:	08010cc0 	.word	0x08010cc0

0800ae9c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800aea4:	f7fa ff10 	bl	8005cc8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800aea8:	4b0a      	ldr	r3, [pc, #40]	; (800aed4 <tcpip_tcp_timer+0x38>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d103      	bne.n	800aeb8 <tcpip_tcp_timer+0x1c>
 800aeb0:	4b09      	ldr	r3, [pc, #36]	; (800aed8 <tcpip_tcp_timer+0x3c>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d005      	beq.n	800aec4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800aeb8:	2200      	movs	r2, #0
 800aeba:	4908      	ldr	r1, [pc, #32]	; (800aedc <tcpip_tcp_timer+0x40>)
 800aebc:	20fa      	movs	r0, #250	; 0xfa
 800aebe:	f000 f8f3 	bl	800b0a8 <sys_timeout>
 800aec2:	e003      	b.n	800aecc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800aec4:	4b06      	ldr	r3, [pc, #24]	; (800aee0 <tcpip_tcp_timer+0x44>)
 800aec6:	2200      	movs	r2, #0
 800aec8:	601a      	str	r2, [r3, #0]
  }
}
 800aeca:	bf00      	nop
 800aecc:	bf00      	nop
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	20008b50 	.word	0x20008b50
 800aed8:	20008b60 	.word	0x20008b60
 800aedc:	0800ae9d 	.word	0x0800ae9d
 800aee0:	2000010c 	.word	0x2000010c

0800aee4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800aee8:	4b0a      	ldr	r3, [pc, #40]	; (800af14 <tcp_timer_needed+0x30>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d10f      	bne.n	800af10 <tcp_timer_needed+0x2c>
 800aef0:	4b09      	ldr	r3, [pc, #36]	; (800af18 <tcp_timer_needed+0x34>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d103      	bne.n	800af00 <tcp_timer_needed+0x1c>
 800aef8:	4b08      	ldr	r3, [pc, #32]	; (800af1c <tcp_timer_needed+0x38>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d007      	beq.n	800af10 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800af00:	4b04      	ldr	r3, [pc, #16]	; (800af14 <tcp_timer_needed+0x30>)
 800af02:	2201      	movs	r2, #1
 800af04:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800af06:	2200      	movs	r2, #0
 800af08:	4905      	ldr	r1, [pc, #20]	; (800af20 <tcp_timer_needed+0x3c>)
 800af0a:	20fa      	movs	r0, #250	; 0xfa
 800af0c:	f000 f8cc 	bl	800b0a8 <sys_timeout>
  }
}
 800af10:	bf00      	nop
 800af12:	bd80      	pop	{r7, pc}
 800af14:	2000010c 	.word	0x2000010c
 800af18:	20008b50 	.word	0x20008b50
 800af1c:	20008b60 	.word	0x20008b60
 800af20:	0800ae9d 	.word	0x0800ae9d

0800af24 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b086      	sub	sp, #24
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800af30:	2006      	movs	r0, #6
 800af32:	f7f9 fcf1 	bl	8004918 <memp_malloc>
 800af36:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d109      	bne.n	800af52 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d151      	bne.n	800afe8 <sys_timeout_abs+0xc4>
 800af44:	4b2a      	ldr	r3, [pc, #168]	; (800aff0 <sys_timeout_abs+0xcc>)
 800af46:	22be      	movs	r2, #190	; 0xbe
 800af48:	492a      	ldr	r1, [pc, #168]	; (800aff4 <sys_timeout_abs+0xd0>)
 800af4a:	482b      	ldr	r0, [pc, #172]	; (800aff8 <sys_timeout_abs+0xd4>)
 800af4c:	f003 f940 	bl	800e1d0 <iprintf>
    return;
 800af50:	e04a      	b.n	800afe8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	2200      	movs	r2, #0
 800af56:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	68fa      	ldr	r2, [r7, #12]
 800af68:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800af6a:	4b24      	ldr	r3, [pc, #144]	; (800affc <sys_timeout_abs+0xd8>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d103      	bne.n	800af7a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800af72:	4a22      	ldr	r2, [pc, #136]	; (800affc <sys_timeout_abs+0xd8>)
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	6013      	str	r3, [r2, #0]
    return;
 800af78:	e037      	b.n	800afea <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	685a      	ldr	r2, [r3, #4]
 800af7e:	4b1f      	ldr	r3, [pc, #124]	; (800affc <sys_timeout_abs+0xd8>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	1ad3      	subs	r3, r2, r3
 800af86:	0fdb      	lsrs	r3, r3, #31
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d007      	beq.n	800afa2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800af92:	4b1a      	ldr	r3, [pc, #104]	; (800affc <sys_timeout_abs+0xd8>)
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800af9a:	4a18      	ldr	r2, [pc, #96]	; (800affc <sys_timeout_abs+0xd8>)
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	6013      	str	r3, [r2, #0]
 800afa0:	e023      	b.n	800afea <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800afa2:	4b16      	ldr	r3, [pc, #88]	; (800affc <sys_timeout_abs+0xd8>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	617b      	str	r3, [r7, #20]
 800afa8:	e01a      	b.n	800afe0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00b      	beq.n	800afca <sys_timeout_abs+0xa6>
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	685a      	ldr	r2, [r3, #4]
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	0fdb      	lsrs	r3, r3, #31
 800afc0:	f003 0301 	and.w	r3, r3, #1
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d007      	beq.n	800afda <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	693a      	ldr	r2, [r7, #16]
 800afd6:	601a      	str	r2, [r3, #0]
        break;
 800afd8:	e007      	b.n	800afea <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	617b      	str	r3, [r7, #20]
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1e1      	bne.n	800afaa <sys_timeout_abs+0x86>
 800afe6:	e000      	b.n	800afea <sys_timeout_abs+0xc6>
    return;
 800afe8:	bf00      	nop
      }
    }
  }
}
 800afea:	3718      	adds	r7, #24
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	08011488 	.word	0x08011488
 800aff4:	080114bc 	.word	0x080114bc
 800aff8:	080114fc 	.word	0x080114fc
 800affc:	20000104 	.word	0x20000104

0800b000 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b086      	sub	sp, #24
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	4798      	blx	r3

  now = sys_now();
 800b012:	f7f8 ff9d 	bl	8003f50 <sys_now>
 800b016:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	4b0f      	ldr	r3, [pc, #60]	; (800b05c <lwip_cyclic_timer+0x5c>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4413      	add	r3, r2
 800b022:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	1ad3      	subs	r3, r2, r3
 800b02a:	0fdb      	lsrs	r3, r3, #31
 800b02c:	f003 0301 	and.w	r3, r3, #1
 800b030:	b2db      	uxtb	r3, r3
 800b032:	2b00      	cmp	r3, #0
 800b034:	d009      	beq.n	800b04a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	4413      	add	r3, r2
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	4907      	ldr	r1, [pc, #28]	; (800b060 <lwip_cyclic_timer+0x60>)
 800b042:	4618      	mov	r0, r3
 800b044:	f7ff ff6e 	bl	800af24 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b048:	e004      	b.n	800b054 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	4904      	ldr	r1, [pc, #16]	; (800b060 <lwip_cyclic_timer+0x60>)
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f7ff ff68 	bl	800af24 <sys_timeout_abs>
}
 800b054:	bf00      	nop
 800b056:	3718      	adds	r7, #24
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	20000108 	.word	0x20000108
 800b060:	0800b001 	.word	0x0800b001

0800b064 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b06a:	2301      	movs	r3, #1
 800b06c:	607b      	str	r3, [r7, #4]
 800b06e:	e00e      	b.n	800b08e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b070:	4a0b      	ldr	r2, [pc, #44]	; (800b0a0 <sys_timeouts_init+0x3c>)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	00db      	lsls	r3, r3, #3
 800b07c:	4a08      	ldr	r2, [pc, #32]	; (800b0a0 <sys_timeouts_init+0x3c>)
 800b07e:	4413      	add	r3, r2
 800b080:	461a      	mov	r2, r3
 800b082:	4908      	ldr	r1, [pc, #32]	; (800b0a4 <sys_timeouts_init+0x40>)
 800b084:	f000 f810 	bl	800b0a8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	3301      	adds	r3, #1
 800b08c:	607b      	str	r3, [r7, #4]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2b02      	cmp	r3, #2
 800b092:	d9ed      	bls.n	800b070 <sys_timeouts_init+0xc>
  }
}
 800b094:	bf00      	nop
 800b096:	bf00      	nop
 800b098:	3708      	adds	r7, #8
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	08012068 	.word	0x08012068
 800b0a4:	0800b001 	.word	0x0800b001

0800b0a8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b086      	sub	sp, #24
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0ba:	d306      	bcc.n	800b0ca <sys_timeout+0x22>
 800b0bc:	4b0a      	ldr	r3, [pc, #40]	; (800b0e8 <sys_timeout+0x40>)
 800b0be:	f240 1229 	movw	r2, #297	; 0x129
 800b0c2:	490a      	ldr	r1, [pc, #40]	; (800b0ec <sys_timeout+0x44>)
 800b0c4:	480a      	ldr	r0, [pc, #40]	; (800b0f0 <sys_timeout+0x48>)
 800b0c6:	f003 f883 	bl	800e1d0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b0ca:	f7f8 ff41 	bl	8003f50 <sys_now>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	68b9      	ldr	r1, [r7, #8]
 800b0da:	6978      	ldr	r0, [r7, #20]
 800b0dc:	f7ff ff22 	bl	800af24 <sys_timeout_abs>
#endif
}
 800b0e0:	bf00      	nop
 800b0e2:	3718      	adds	r7, #24
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	08011488 	.word	0x08011488
 800b0ec:	08011524 	.word	0x08011524
 800b0f0:	080114fc 	.word	0x080114fc

0800b0f4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b0fa:	f7f8 ff29 	bl	8003f50 <sys_now>
 800b0fe:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b100:	4b1a      	ldr	r3, [pc, #104]	; (800b16c <sys_check_timeouts+0x78>)
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	b2db      	uxtb	r3, r3
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <sys_check_timeouts+0x1a>
 800b10a:	f7f9 ff29 	bl	8004f60 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b10e:	4b18      	ldr	r3, [pc, #96]	; (800b170 <sys_check_timeouts+0x7c>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d022      	beq.n	800b160 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	68fa      	ldr	r2, [r7, #12]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	0fdb      	lsrs	r3, r3, #31
 800b124:	f003 0301 	and.w	r3, r3, #1
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d11a      	bne.n	800b164 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a0f      	ldr	r2, [pc, #60]	; (800b170 <sys_check_timeouts+0x7c>)
 800b134:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	4a0b      	ldr	r2, [pc, #44]	; (800b174 <sys_check_timeouts+0x80>)
 800b148:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b14a:	68b9      	ldr	r1, [r7, #8]
 800b14c:	2006      	movs	r0, #6
 800b14e:	f7f9 fc2f 	bl	80049b0 <memp_free>
    if (handler != NULL) {
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d0d3      	beq.n	800b100 <sys_check_timeouts+0xc>
      handler(arg);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6838      	ldr	r0, [r7, #0]
 800b15c:	4798      	blx	r3
  do {
 800b15e:	e7cf      	b.n	800b100 <sys_check_timeouts+0xc>
      return;
 800b160:	bf00      	nop
 800b162:	e000      	b.n	800b166 <sys_check_timeouts+0x72>
      return;
 800b164:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	20008b48 	.word	0x20008b48
 800b170:	20000104 	.word	0x20000104
 800b174:	20000108 	.word	0x20000108

0800b178 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b17c:	f003 f840 	bl	800e200 <rand>
 800b180:	4603      	mov	r3, r0
 800b182:	b29b      	uxth	r3, r3
 800b184:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b188:	b29b      	uxth	r3, r3
 800b18a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b18e:	b29a      	uxth	r2, r3
 800b190:	4b01      	ldr	r3, [pc, #4]	; (800b198 <udp_init+0x20>)
 800b192:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b194:	bf00      	nop
 800b196:	bd80      	pop	{r7, pc}
 800b198:	20000010 	.word	0x20000010

0800b19c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b1a6:	4b17      	ldr	r3, [pc, #92]	; (800b204 <udp_new_port+0x68>)
 800b1a8:	881b      	ldrh	r3, [r3, #0]
 800b1aa:	1c5a      	adds	r2, r3, #1
 800b1ac:	b291      	uxth	r1, r2
 800b1ae:	4a15      	ldr	r2, [pc, #84]	; (800b204 <udp_new_port+0x68>)
 800b1b0:	8011      	strh	r1, [r2, #0]
 800b1b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d103      	bne.n	800b1c2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b1ba:	4b12      	ldr	r3, [pc, #72]	; (800b204 <udp_new_port+0x68>)
 800b1bc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b1c0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1c2:	4b11      	ldr	r3, [pc, #68]	; (800b208 <udp_new_port+0x6c>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	603b      	str	r3, [r7, #0]
 800b1c8:	e011      	b.n	800b1ee <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	8a5a      	ldrh	r2, [r3, #18]
 800b1ce:	4b0d      	ldr	r3, [pc, #52]	; (800b204 <udp_new_port+0x68>)
 800b1d0:	881b      	ldrh	r3, [r3, #0]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d108      	bne.n	800b1e8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b1d6:	88fb      	ldrh	r3, [r7, #6]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	80fb      	strh	r3, [r7, #6]
 800b1dc:	88fb      	ldrh	r3, [r7, #6]
 800b1de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1e2:	d3e0      	bcc.n	800b1a6 <udp_new_port+0xa>
        return 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	e007      	b.n	800b1f8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	603b      	str	r3, [r7, #0]
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1ea      	bne.n	800b1ca <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b1f4:	4b03      	ldr	r3, [pc, #12]	; (800b204 <udp_new_port+0x68>)
 800b1f6:	881b      	ldrh	r3, [r3, #0]
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr
 800b204:	20000010 	.word	0x20000010
 800b208:	20008b68 	.word	0x20008b68

0800b20c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	4613      	mov	r3, r2
 800b218:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d105      	bne.n	800b22c <udp_input_local_match+0x20>
 800b220:	4b27      	ldr	r3, [pc, #156]	; (800b2c0 <udp_input_local_match+0xb4>)
 800b222:	2287      	movs	r2, #135	; 0x87
 800b224:	4927      	ldr	r1, [pc, #156]	; (800b2c4 <udp_input_local_match+0xb8>)
 800b226:	4828      	ldr	r0, [pc, #160]	; (800b2c8 <udp_input_local_match+0xbc>)
 800b228:	f002 ffd2 	bl	800e1d0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d105      	bne.n	800b23e <udp_input_local_match+0x32>
 800b232:	4b23      	ldr	r3, [pc, #140]	; (800b2c0 <udp_input_local_match+0xb4>)
 800b234:	2288      	movs	r2, #136	; 0x88
 800b236:	4925      	ldr	r1, [pc, #148]	; (800b2cc <udp_input_local_match+0xc0>)
 800b238:	4823      	ldr	r0, [pc, #140]	; (800b2c8 <udp_input_local_match+0xbc>)
 800b23a:	f002 ffc9 	bl	800e1d0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	7a1b      	ldrb	r3, [r3, #8]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00b      	beq.n	800b25e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	7a1a      	ldrb	r2, [r3, #8]
 800b24a:	4b21      	ldr	r3, [pc, #132]	; (800b2d0 <udp_input_local_match+0xc4>)
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b252:	3301      	adds	r3, #1
 800b254:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b256:	429a      	cmp	r2, r3
 800b258:	d001      	beq.n	800b25e <udp_input_local_match+0x52>
    return 0;
 800b25a:	2300      	movs	r3, #0
 800b25c:	e02b      	b.n	800b2b6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b25e:	79fb      	ldrb	r3, [r7, #7]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d018      	beq.n	800b296 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d013      	beq.n	800b292 <udp_input_local_match+0x86>
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00f      	beq.n	800b292 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b272:	4b17      	ldr	r3, [pc, #92]	; (800b2d0 <udp_input_local_match+0xc4>)
 800b274:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b27a:	d00a      	beq.n	800b292 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	4b13      	ldr	r3, [pc, #76]	; (800b2d0 <udp_input_local_match+0xc4>)
 800b282:	695b      	ldr	r3, [r3, #20]
 800b284:	405a      	eors	r2, r3
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	3308      	adds	r3, #8
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d110      	bne.n	800b2b4 <udp_input_local_match+0xa8>
          return 1;
 800b292:	2301      	movs	r3, #1
 800b294:	e00f      	b.n	800b2b6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d009      	beq.n	800b2b0 <udp_input_local_match+0xa4>
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d005      	beq.n	800b2b0 <udp_input_local_match+0xa4>
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	4b09      	ldr	r3, [pc, #36]	; (800b2d0 <udp_input_local_match+0xc4>)
 800b2aa:	695b      	ldr	r3, [r3, #20]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d101      	bne.n	800b2b4 <udp_input_local_match+0xa8>
        return 1;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e000      	b.n	800b2b6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	08011570 	.word	0x08011570
 800b2c4:	080115a0 	.word	0x080115a0
 800b2c8:	080115c4 	.word	0x080115c4
 800b2cc:	080115ec 	.word	0x080115ec
 800b2d0:	2000344c 	.word	0x2000344c

0800b2d4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b2d4:	b590      	push	{r4, r7, lr}
 800b2d6:	b08d      	sub	sp, #52	; 0x34
 800b2d8:	af02      	add	r7, sp, #8
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d105      	bne.n	800b2f4 <udp_input+0x20>
 800b2e8:	4b7c      	ldr	r3, [pc, #496]	; (800b4dc <udp_input+0x208>)
 800b2ea:	22cf      	movs	r2, #207	; 0xcf
 800b2ec:	497c      	ldr	r1, [pc, #496]	; (800b4e0 <udp_input+0x20c>)
 800b2ee:	487d      	ldr	r0, [pc, #500]	; (800b4e4 <udp_input+0x210>)
 800b2f0:	f002 ff6e 	bl	800e1d0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d105      	bne.n	800b306 <udp_input+0x32>
 800b2fa:	4b78      	ldr	r3, [pc, #480]	; (800b4dc <udp_input+0x208>)
 800b2fc:	22d0      	movs	r2, #208	; 0xd0
 800b2fe:	497a      	ldr	r1, [pc, #488]	; (800b4e8 <udp_input+0x214>)
 800b300:	4878      	ldr	r0, [pc, #480]	; (800b4e4 <udp_input+0x210>)
 800b302:	f002 ff65 	bl	800e1d0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	895b      	ldrh	r3, [r3, #10]
 800b30a:	2b07      	cmp	r3, #7
 800b30c:	d803      	bhi.n	800b316 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f7fa f960 	bl	80055d4 <pbuf_free>
    goto end;
 800b314:	e0de      	b.n	800b4d4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b31c:	4b73      	ldr	r3, [pc, #460]	; (800b4ec <udp_input+0x218>)
 800b31e:	695b      	ldr	r3, [r3, #20]
 800b320:	4a72      	ldr	r2, [pc, #456]	; (800b4ec <udp_input+0x218>)
 800b322:	6812      	ldr	r2, [r2, #0]
 800b324:	4611      	mov	r1, r2
 800b326:	4618      	mov	r0, r3
 800b328:	f001 ffa0 	bl	800d26c <ip4_addr_isbroadcast_u32>
 800b32c:	4603      	mov	r3, r0
 800b32e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	881b      	ldrh	r3, [r3, #0]
 800b334:	b29b      	uxth	r3, r3
 800b336:	4618      	mov	r0, r3
 800b338:	f7f8 fe98 	bl	800406c <lwip_htons>
 800b33c:	4603      	mov	r3, r0
 800b33e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	885b      	ldrh	r3, [r3, #2]
 800b344:	b29b      	uxth	r3, r3
 800b346:	4618      	mov	r0, r3
 800b348:	f7f8 fe90 	bl	800406c <lwip_htons>
 800b34c:	4603      	mov	r3, r0
 800b34e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b350:	2300      	movs	r3, #0
 800b352:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b354:	2300      	movs	r3, #0
 800b356:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b358:	2300      	movs	r3, #0
 800b35a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b35c:	4b64      	ldr	r3, [pc, #400]	; (800b4f0 <udp_input+0x21c>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	627b      	str	r3, [r7, #36]	; 0x24
 800b362:	e054      	b.n	800b40e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b366:	8a5b      	ldrh	r3, [r3, #18]
 800b368:	89fa      	ldrh	r2, [r7, #14]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d14a      	bne.n	800b404 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b36e:	7cfb      	ldrb	r3, [r7, #19]
 800b370:	461a      	mov	r2, r3
 800b372:	6839      	ldr	r1, [r7, #0]
 800b374:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b376:	f7ff ff49 	bl	800b20c <udp_input_local_match>
 800b37a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d041      	beq.n	800b404 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b382:	7c1b      	ldrb	r3, [r3, #16]
 800b384:	f003 0304 	and.w	r3, r3, #4
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d11d      	bne.n	800b3c8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d102      	bne.n	800b398 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b394:	61fb      	str	r3, [r7, #28]
 800b396:	e017      	b.n	800b3c8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b398:	7cfb      	ldrb	r3, [r7, #19]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d014      	beq.n	800b3c8 <udp_input+0xf4>
 800b39e:	4b53      	ldr	r3, [pc, #332]	; (800b4ec <udp_input+0x218>)
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a6:	d10f      	bne.n	800b3c8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	3304      	adds	r3, #4
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d008      	beq.n	800b3c8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	3304      	adds	r3, #4
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d101      	bne.n	800b3c8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ca:	8a9b      	ldrh	r3, [r3, #20]
 800b3cc:	8a3a      	ldrh	r2, [r7, #16]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d118      	bne.n	800b404 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d005      	beq.n	800b3e6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	685a      	ldr	r2, [r3, #4]
 800b3de:	4b43      	ldr	r3, [pc, #268]	; (800b4ec <udp_input+0x218>)
 800b3e0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d10e      	bne.n	800b404 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b3e6:	6a3b      	ldr	r3, [r7, #32]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d014      	beq.n	800b416 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ee:	68da      	ldr	r2, [r3, #12]
 800b3f0:	6a3b      	ldr	r3, [r7, #32]
 800b3f2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b3f4:	4b3e      	ldr	r3, [pc, #248]	; (800b4f0 <udp_input+0x21c>)
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b3fc:	4a3c      	ldr	r2, [pc, #240]	; (800b4f0 <udp_input+0x21c>)
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b400:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b402:	e008      	b.n	800b416 <udp_input+0x142>
      }
    }

    prev = pcb;
 800b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b406:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	627b      	str	r3, [r7, #36]	; 0x24
 800b40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1a7      	bne.n	800b364 <udp_input+0x90>
 800b414:	e000      	b.n	800b418 <udp_input+0x144>
        break;
 800b416:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d101      	bne.n	800b422 <udp_input+0x14e>
    pcb = uncon_pcb;
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <udp_input+0x15a>
    for_us = 1;
 800b428:	2301      	movs	r3, #1
 800b42a:	76fb      	strb	r3, [r7, #27]
 800b42c:	e00a      	b.n	800b444 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	3304      	adds	r3, #4
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	4b2d      	ldr	r3, [pc, #180]	; (800b4ec <udp_input+0x218>)
 800b436:	695b      	ldr	r3, [r3, #20]
 800b438:	429a      	cmp	r2, r3
 800b43a:	bf0c      	ite	eq
 800b43c:	2301      	moveq	r3, #1
 800b43e:	2300      	movne	r3, #0
 800b440:	b2db      	uxtb	r3, r3
 800b442:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b444:	7efb      	ldrb	r3, [r7, #27]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d041      	beq.n	800b4ce <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b44a:	2108      	movs	r1, #8
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f7fa f83b 	bl	80054c8 <pbuf_remove_header>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00a      	beq.n	800b46e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b458:	4b20      	ldr	r3, [pc, #128]	; (800b4dc <udp_input+0x208>)
 800b45a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b45e:	4925      	ldr	r1, [pc, #148]	; (800b4f4 <udp_input+0x220>)
 800b460:	4820      	ldr	r0, [pc, #128]	; (800b4e4 <udp_input+0x210>)
 800b462:	f002 feb5 	bl	800e1d0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7fa f8b4 	bl	80055d4 <pbuf_free>
      goto end;
 800b46c:	e032      	b.n	800b4d4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b470:	2b00      	cmp	r3, #0
 800b472:	d012      	beq.n	800b49a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b476:	699b      	ldr	r3, [r3, #24]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00a      	beq.n	800b492 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47e:	699c      	ldr	r4, [r3, #24]
 800b480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b482:	69d8      	ldr	r0, [r3, #28]
 800b484:	8a3b      	ldrh	r3, [r7, #16]
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	4b1b      	ldr	r3, [pc, #108]	; (800b4f8 <udp_input+0x224>)
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b48e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b490:	e021      	b.n	800b4d6 <udp_input+0x202>
        pbuf_free(p);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7fa f89e 	bl	80055d4 <pbuf_free>
        goto end;
 800b498:	e01c      	b.n	800b4d4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b49a:	7cfb      	ldrb	r3, [r7, #19]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d112      	bne.n	800b4c6 <udp_input+0x1f2>
 800b4a0:	4b12      	ldr	r3, [pc, #72]	; (800b4ec <udp_input+0x218>)
 800b4a2:	695b      	ldr	r3, [r3, #20]
 800b4a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4a8:	2be0      	cmp	r3, #224	; 0xe0
 800b4aa:	d00c      	beq.n	800b4c6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b4ac:	4b0f      	ldr	r3, [pc, #60]	; (800b4ec <udp_input+0x218>)
 800b4ae:	899b      	ldrh	r3, [r3, #12]
 800b4b0:	3308      	adds	r3, #8
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	b21b      	sxth	r3, r3
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7fa f878 	bl	80055ae <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b4be:	2103      	movs	r1, #3
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f001 fbb3 	bl	800cc2c <icmp_dest_unreach>
      pbuf_free(p);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f7fa f884 	bl	80055d4 <pbuf_free>
  return;
 800b4cc:	e003      	b.n	800b4d6 <udp_input+0x202>
    pbuf_free(p);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f7fa f880 	bl	80055d4 <pbuf_free>
  return;
 800b4d4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b4d6:	372c      	adds	r7, #44	; 0x2c
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd90      	pop	{r4, r7, pc}
 800b4dc:	08011570 	.word	0x08011570
 800b4e0:	08011614 	.word	0x08011614
 800b4e4:	080115c4 	.word	0x080115c4
 800b4e8:	0801162c 	.word	0x0801162c
 800b4ec:	2000344c 	.word	0x2000344c
 800b4f0:	20008b68 	.word	0x20008b68
 800b4f4:	08011648 	.word	0x08011648
 800b4f8:	2000345c 	.word	0x2000345c

0800b4fc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d109      	bne.n	800b520 <udp_send+0x24>
 800b50c:	4b11      	ldr	r3, [pc, #68]	; (800b554 <udp_send+0x58>)
 800b50e:	f240 12d5 	movw	r2, #469	; 0x1d5
 800b512:	4911      	ldr	r1, [pc, #68]	; (800b558 <udp_send+0x5c>)
 800b514:	4811      	ldr	r0, [pc, #68]	; (800b55c <udp_send+0x60>)
 800b516:	f002 fe5b 	bl	800e1d0 <iprintf>
 800b51a:	f06f 030f 	mvn.w	r3, #15
 800b51e:	e015      	b.n	800b54c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d109      	bne.n	800b53a <udp_send+0x3e>
 800b526:	4b0b      	ldr	r3, [pc, #44]	; (800b554 <udp_send+0x58>)
 800b528:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b52c:	490c      	ldr	r1, [pc, #48]	; (800b560 <udp_send+0x64>)
 800b52e:	480b      	ldr	r0, [pc, #44]	; (800b55c <udp_send+0x60>)
 800b530:	f002 fe4e 	bl	800e1d0 <iprintf>
 800b534:	f06f 030f 	mvn.w	r3, #15
 800b538:	e008      	b.n	800b54c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	1d1a      	adds	r2, r3, #4
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	8a9b      	ldrh	r3, [r3, #20]
 800b542:	6839      	ldr	r1, [r7, #0]
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 f80d 	bl	800b564 <udp_sendto>
 800b54a:	4603      	mov	r3, r0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3708      	adds	r7, #8
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	08011570 	.word	0x08011570
 800b558:	08011664 	.word	0x08011664
 800b55c:	080115c4 	.word	0x080115c4
 800b560:	0801167c 	.word	0x0801167c

0800b564 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b088      	sub	sp, #32
 800b568:	af02      	add	r7, sp, #8
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
 800b570:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d109      	bne.n	800b58c <udp_sendto+0x28>
 800b578:	4b23      	ldr	r3, [pc, #140]	; (800b608 <udp_sendto+0xa4>)
 800b57a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b57e:	4923      	ldr	r1, [pc, #140]	; (800b60c <udp_sendto+0xa8>)
 800b580:	4823      	ldr	r0, [pc, #140]	; (800b610 <udp_sendto+0xac>)
 800b582:	f002 fe25 	bl	800e1d0 <iprintf>
 800b586:	f06f 030f 	mvn.w	r3, #15
 800b58a:	e038      	b.n	800b5fe <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d109      	bne.n	800b5a6 <udp_sendto+0x42>
 800b592:	4b1d      	ldr	r3, [pc, #116]	; (800b608 <udp_sendto+0xa4>)
 800b594:	f240 2219 	movw	r2, #537	; 0x219
 800b598:	491e      	ldr	r1, [pc, #120]	; (800b614 <udp_sendto+0xb0>)
 800b59a:	481d      	ldr	r0, [pc, #116]	; (800b610 <udp_sendto+0xac>)
 800b59c:	f002 fe18 	bl	800e1d0 <iprintf>
 800b5a0:	f06f 030f 	mvn.w	r3, #15
 800b5a4:	e02b      	b.n	800b5fe <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d109      	bne.n	800b5c0 <udp_sendto+0x5c>
 800b5ac:	4b16      	ldr	r3, [pc, #88]	; (800b608 <udp_sendto+0xa4>)
 800b5ae:	f240 221a 	movw	r2, #538	; 0x21a
 800b5b2:	4919      	ldr	r1, [pc, #100]	; (800b618 <udp_sendto+0xb4>)
 800b5b4:	4816      	ldr	r0, [pc, #88]	; (800b610 <udp_sendto+0xac>)
 800b5b6:	f002 fe0b 	bl	800e1d0 <iprintf>
 800b5ba:	f06f 030f 	mvn.w	r3, #15
 800b5be:	e01e      	b.n	800b5fe <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	7a1b      	ldrb	r3, [r3, #8]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d006      	beq.n	800b5d6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	7a1b      	ldrb	r3, [r3, #8]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7f9 fca1 	bl	8004f14 <netif_get_by_index>
 800b5d2:	6178      	str	r0, [r7, #20]
 800b5d4:	e003      	b.n	800b5de <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f001 fbb2 	bl	800cd40 <ip4_route>
 800b5dc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d102      	bne.n	800b5ea <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800b5e4:	f06f 0303 	mvn.w	r3, #3
 800b5e8:	e009      	b.n	800b5fe <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800b5ea:	887a      	ldrh	r2, [r7, #2]
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	9300      	str	r3, [sp, #0]
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	68b9      	ldr	r1, [r7, #8]
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	f000 f810 	bl	800b61c <udp_sendto_if>
 800b5fc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3718      	adds	r7, #24
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	08011570 	.word	0x08011570
 800b60c:	08011694 	.word	0x08011694
 800b610:	080115c4 	.word	0x080115c4
 800b614:	080116ac 	.word	0x080116ac
 800b618:	080116c8 	.word	0x080116c8

0800b61c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b088      	sub	sp, #32
 800b620:	af02      	add	r7, sp, #8
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
 800b628:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d109      	bne.n	800b644 <udp_sendto_if+0x28>
 800b630:	4b2e      	ldr	r3, [pc, #184]	; (800b6ec <udp_sendto_if+0xd0>)
 800b632:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b636:	492e      	ldr	r1, [pc, #184]	; (800b6f0 <udp_sendto_if+0xd4>)
 800b638:	482e      	ldr	r0, [pc, #184]	; (800b6f4 <udp_sendto_if+0xd8>)
 800b63a:	f002 fdc9 	bl	800e1d0 <iprintf>
 800b63e:	f06f 030f 	mvn.w	r3, #15
 800b642:	e04f      	b.n	800b6e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d109      	bne.n	800b65e <udp_sendto_if+0x42>
 800b64a:	4b28      	ldr	r3, [pc, #160]	; (800b6ec <udp_sendto_if+0xd0>)
 800b64c:	f240 2281 	movw	r2, #641	; 0x281
 800b650:	4929      	ldr	r1, [pc, #164]	; (800b6f8 <udp_sendto_if+0xdc>)
 800b652:	4828      	ldr	r0, [pc, #160]	; (800b6f4 <udp_sendto_if+0xd8>)
 800b654:	f002 fdbc 	bl	800e1d0 <iprintf>
 800b658:	f06f 030f 	mvn.w	r3, #15
 800b65c:	e042      	b.n	800b6e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d109      	bne.n	800b678 <udp_sendto_if+0x5c>
 800b664:	4b21      	ldr	r3, [pc, #132]	; (800b6ec <udp_sendto_if+0xd0>)
 800b666:	f240 2282 	movw	r2, #642	; 0x282
 800b66a:	4924      	ldr	r1, [pc, #144]	; (800b6fc <udp_sendto_if+0xe0>)
 800b66c:	4821      	ldr	r0, [pc, #132]	; (800b6f4 <udp_sendto_if+0xd8>)
 800b66e:	f002 fdaf 	bl	800e1d0 <iprintf>
 800b672:	f06f 030f 	mvn.w	r3, #15
 800b676:	e035      	b.n	800b6e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b678:	6a3b      	ldr	r3, [r7, #32]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d109      	bne.n	800b692 <udp_sendto_if+0x76>
 800b67e:	4b1b      	ldr	r3, [pc, #108]	; (800b6ec <udp_sendto_if+0xd0>)
 800b680:	f240 2283 	movw	r2, #643	; 0x283
 800b684:	491e      	ldr	r1, [pc, #120]	; (800b700 <udp_sendto_if+0xe4>)
 800b686:	481b      	ldr	r0, [pc, #108]	; (800b6f4 <udp_sendto_if+0xd8>)
 800b688:	f002 fda2 	bl	800e1d0 <iprintf>
 800b68c:	f06f 030f 	mvn.w	r3, #15
 800b690:	e028      	b.n	800b6e4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d009      	beq.n	800b6ac <udp_sendto_if+0x90>
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d005      	beq.n	800b6ac <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b6a8:	2be0      	cmp	r3, #224	; 0xe0
 800b6aa:	d103      	bne.n	800b6b4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800b6ac:	6a3b      	ldr	r3, [r7, #32]
 800b6ae:	3304      	adds	r3, #4
 800b6b0:	617b      	str	r3, [r7, #20]
 800b6b2:	e00b      	b.n	800b6cc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	6a3b      	ldr	r3, [r7, #32]
 800b6ba:	3304      	adds	r3, #4
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d002      	beq.n	800b6c8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800b6c2:	f06f 0303 	mvn.w	r3, #3
 800b6c6:	e00d      	b.n	800b6e4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b6cc:	887a      	ldrh	r2, [r7, #2]
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	9301      	str	r3, [sp, #4]
 800b6d2:	6a3b      	ldr	r3, [r7, #32]
 800b6d4:	9300      	str	r3, [sp, #0]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	68b9      	ldr	r1, [r7, #8]
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f000 f811 	bl	800b704 <udp_sendto_if_src>
 800b6e2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3718      	adds	r7, #24
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	08011570 	.word	0x08011570
 800b6f0:	080116e4 	.word	0x080116e4
 800b6f4:	080115c4 	.word	0x080115c4
 800b6f8:	08011700 	.word	0x08011700
 800b6fc:	0801171c 	.word	0x0801171c
 800b700:	0801173c 	.word	0x0801173c

0800b704 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b08c      	sub	sp, #48	; 0x30
 800b708:	af04      	add	r7, sp, #16
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	607a      	str	r2, [r7, #4]
 800b710:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d109      	bne.n	800b72c <udp_sendto_if_src+0x28>
 800b718:	4b65      	ldr	r3, [pc, #404]	; (800b8b0 <udp_sendto_if_src+0x1ac>)
 800b71a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b71e:	4965      	ldr	r1, [pc, #404]	; (800b8b4 <udp_sendto_if_src+0x1b0>)
 800b720:	4865      	ldr	r0, [pc, #404]	; (800b8b8 <udp_sendto_if_src+0x1b4>)
 800b722:	f002 fd55 	bl	800e1d0 <iprintf>
 800b726:	f06f 030f 	mvn.w	r3, #15
 800b72a:	e0bc      	b.n	800b8a6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d109      	bne.n	800b746 <udp_sendto_if_src+0x42>
 800b732:	4b5f      	ldr	r3, [pc, #380]	; (800b8b0 <udp_sendto_if_src+0x1ac>)
 800b734:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b738:	4960      	ldr	r1, [pc, #384]	; (800b8bc <udp_sendto_if_src+0x1b8>)
 800b73a:	485f      	ldr	r0, [pc, #380]	; (800b8b8 <udp_sendto_if_src+0x1b4>)
 800b73c:	f002 fd48 	bl	800e1d0 <iprintf>
 800b740:	f06f 030f 	mvn.w	r3, #15
 800b744:	e0af      	b.n	800b8a6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d109      	bne.n	800b760 <udp_sendto_if_src+0x5c>
 800b74c:	4b58      	ldr	r3, [pc, #352]	; (800b8b0 <udp_sendto_if_src+0x1ac>)
 800b74e:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b752:	495b      	ldr	r1, [pc, #364]	; (800b8c0 <udp_sendto_if_src+0x1bc>)
 800b754:	4858      	ldr	r0, [pc, #352]	; (800b8b8 <udp_sendto_if_src+0x1b4>)
 800b756:	f002 fd3b 	bl	800e1d0 <iprintf>
 800b75a:	f06f 030f 	mvn.w	r3, #15
 800b75e:	e0a2      	b.n	800b8a6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800b760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b762:	2b00      	cmp	r3, #0
 800b764:	d109      	bne.n	800b77a <udp_sendto_if_src+0x76>
 800b766:	4b52      	ldr	r3, [pc, #328]	; (800b8b0 <udp_sendto_if_src+0x1ac>)
 800b768:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b76c:	4955      	ldr	r1, [pc, #340]	; (800b8c4 <udp_sendto_if_src+0x1c0>)
 800b76e:	4852      	ldr	r0, [pc, #328]	; (800b8b8 <udp_sendto_if_src+0x1b4>)
 800b770:	f002 fd2e 	bl	800e1d0 <iprintf>
 800b774:	f06f 030f 	mvn.w	r3, #15
 800b778:	e095      	b.n	800b8a6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800b77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d109      	bne.n	800b794 <udp_sendto_if_src+0x90>
 800b780:	4b4b      	ldr	r3, [pc, #300]	; (800b8b0 <udp_sendto_if_src+0x1ac>)
 800b782:	f240 22d5 	movw	r2, #725	; 0x2d5
 800b786:	4950      	ldr	r1, [pc, #320]	; (800b8c8 <udp_sendto_if_src+0x1c4>)
 800b788:	484b      	ldr	r0, [pc, #300]	; (800b8b8 <udp_sendto_if_src+0x1b4>)
 800b78a:	f002 fd21 	bl	800e1d0 <iprintf>
 800b78e:	f06f 030f 	mvn.w	r3, #15
 800b792:	e088      	b.n	800b8a6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	8a5b      	ldrh	r3, [r3, #18]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10f      	bne.n	800b7bc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b79c:	68f9      	ldr	r1, [r7, #12]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	8a5b      	ldrh	r3, [r3, #18]
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	f000 f893 	bl	800b8d0 <udp_bind>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b7ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d002      	beq.n	800b7bc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b7b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b7ba:	e074      	b.n	800b8a6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	891b      	ldrh	r3, [r3, #8]
 800b7c0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d902      	bls.n	800b7ce <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800b7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7cc:	e06b      	b.n	800b8a6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800b7ce:	2108      	movs	r1, #8
 800b7d0:	68b8      	ldr	r0, [r7, #8]
 800b7d2:	f7f9 fe69 	bl	80054a8 <pbuf_add_header>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d015      	beq.n	800b808 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b7dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b7e0:	2108      	movs	r1, #8
 800b7e2:	2022      	movs	r0, #34	; 0x22
 800b7e4:	f7f9 fc12 	bl	800500c <pbuf_alloc>
 800b7e8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b7ea:	69fb      	ldr	r3, [r7, #28]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d102      	bne.n	800b7f6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7f4:	e057      	b.n	800b8a6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	891b      	ldrh	r3, [r3, #8]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d006      	beq.n	800b80c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b7fe:	68b9      	ldr	r1, [r7, #8]
 800b800:	69f8      	ldr	r0, [r7, #28]
 800b802:	f7f9 ffff 	bl	8005804 <pbuf_chain>
 800b806:	e001      	b.n	800b80c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	895b      	ldrh	r3, [r3, #10]
 800b810:	2b07      	cmp	r3, #7
 800b812:	d806      	bhi.n	800b822 <udp_sendto_if_src+0x11e>
 800b814:	4b26      	ldr	r3, [pc, #152]	; (800b8b0 <udp_sendto_if_src+0x1ac>)
 800b816:	f240 320d 	movw	r2, #781	; 0x30d
 800b81a:	492c      	ldr	r1, [pc, #176]	; (800b8cc <udp_sendto_if_src+0x1c8>)
 800b81c:	4826      	ldr	r0, [pc, #152]	; (800b8b8 <udp_sendto_if_src+0x1b4>)
 800b81e:	f002 fcd7 	bl	800e1d0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b822:	69fb      	ldr	r3, [r7, #28]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	8a5b      	ldrh	r3, [r3, #18]
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7f8 fc1d 	bl	800406c <lwip_htons>
 800b832:	4603      	mov	r3, r0
 800b834:	461a      	mov	r2, r3
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b83a:	887b      	ldrh	r3, [r7, #2]
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7f8 fc15 	bl	800406c <lwip_htons>
 800b842:	4603      	mov	r3, r0
 800b844:	461a      	mov	r2, r3
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	2200      	movs	r2, #0
 800b84e:	719a      	strb	r2, [r3, #6]
 800b850:	2200      	movs	r2, #0
 800b852:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	891b      	ldrh	r3, [r3, #8]
 800b858:	4618      	mov	r0, r3
 800b85a:	f7f8 fc07 	bl	800406c <lwip_htons>
 800b85e:	4603      	mov	r3, r0
 800b860:	461a      	mov	r2, r3
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b866:	2311      	movs	r3, #17
 800b868:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	7adb      	ldrb	r3, [r3, #11]
 800b86e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	7a9b      	ldrb	r3, [r3, #10]
 800b874:	7cb9      	ldrb	r1, [r7, #18]
 800b876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b878:	9202      	str	r2, [sp, #8]
 800b87a:	7cfa      	ldrb	r2, [r7, #19]
 800b87c:	9201      	str	r2, [sp, #4]
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	460b      	mov	r3, r1
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b886:	69f8      	ldr	r0, [r7, #28]
 800b888:	f001 fc42 	bl	800d110 <ip4_output_if_src>
 800b88c:	4603      	mov	r3, r0
 800b88e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800b890:	69fa      	ldr	r2, [r7, #28]
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	429a      	cmp	r2, r3
 800b896:	d004      	beq.n	800b8a2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800b898:	69f8      	ldr	r0, [r7, #28]
 800b89a:	f7f9 fe9b 	bl	80055d4 <pbuf_free>
    q = NULL;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800b8a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3720      	adds	r7, #32
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	08011570 	.word	0x08011570
 800b8b4:	0801175c 	.word	0x0801175c
 800b8b8:	080115c4 	.word	0x080115c4
 800b8bc:	0801177c 	.word	0x0801177c
 800b8c0:	0801179c 	.word	0x0801179c
 800b8c4:	080117c0 	.word	0x080117c0
 800b8c8:	080117e4 	.word	0x080117e4
 800b8cc:	08011808 	.word	0x08011808

0800b8d0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	4613      	mov	r3, r2
 800b8dc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d101      	bne.n	800b8e8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b8e4:	4b39      	ldr	r3, [pc, #228]	; (800b9cc <udp_bind+0xfc>)
 800b8e6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d109      	bne.n	800b902 <udp_bind+0x32>
 800b8ee:	4b38      	ldr	r3, [pc, #224]	; (800b9d0 <udp_bind+0x100>)
 800b8f0:	f240 32b7 	movw	r2, #951	; 0x3b7
 800b8f4:	4937      	ldr	r1, [pc, #220]	; (800b9d4 <udp_bind+0x104>)
 800b8f6:	4838      	ldr	r0, [pc, #224]	; (800b9d8 <udp_bind+0x108>)
 800b8f8:	f002 fc6a 	bl	800e1d0 <iprintf>
 800b8fc:	f06f 030f 	mvn.w	r3, #15
 800b900:	e060      	b.n	800b9c4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b902:	2300      	movs	r3, #0
 800b904:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b906:	4b35      	ldr	r3, [pc, #212]	; (800b9dc <udp_bind+0x10c>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	617b      	str	r3, [r7, #20]
 800b90c:	e009      	b.n	800b922 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b90e:	68fa      	ldr	r2, [r7, #12]
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	429a      	cmp	r2, r3
 800b914:	d102      	bne.n	800b91c <udp_bind+0x4c>
      rebind = 1;
 800b916:	2301      	movs	r3, #1
 800b918:	74fb      	strb	r3, [r7, #19]
      break;
 800b91a:	e005      	b.n	800b928 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	617b      	str	r3, [r7, #20]
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d1f2      	bne.n	800b90e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800b928:	88fb      	ldrh	r3, [r7, #6]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d109      	bne.n	800b942 <udp_bind+0x72>
    port = udp_new_port();
 800b92e:	f7ff fc35 	bl	800b19c <udp_new_port>
 800b932:	4603      	mov	r3, r0
 800b934:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b936:	88fb      	ldrh	r3, [r7, #6]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d12c      	bne.n	800b996 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b93c:	f06f 0307 	mvn.w	r3, #7
 800b940:	e040      	b.n	800b9c4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b942:	4b26      	ldr	r3, [pc, #152]	; (800b9dc <udp_bind+0x10c>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	617b      	str	r3, [r7, #20]
 800b948:	e022      	b.n	800b990 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800b94a:	68fa      	ldr	r2, [r7, #12]
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d01b      	beq.n	800b98a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	8a5b      	ldrh	r3, [r3, #18]
 800b956:	88fa      	ldrh	r2, [r7, #6]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d116      	bne.n	800b98a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800b964:	429a      	cmp	r2, r3
 800b966:	d00d      	beq.n	800b984 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00a      	beq.n	800b984 <udp_bind+0xb4>
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d006      	beq.n	800b984 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b976:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d003      	beq.n	800b984 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d102      	bne.n	800b98a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800b984:	f06f 0307 	mvn.w	r3, #7
 800b988:	e01c      	b.n	800b9c4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	68db      	ldr	r3, [r3, #12]
 800b98e:	617b      	str	r3, [r7, #20]
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d1d9      	bne.n	800b94a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d002      	beq.n	800b9a2 <udp_bind+0xd2>
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	e000      	b.n	800b9a4 <udp_bind+0xd4>
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	88fa      	ldrh	r2, [r7, #6]
 800b9ac:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b9ae:	7cfb      	ldrb	r3, [r7, #19]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d106      	bne.n	800b9c2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b9b4:	4b09      	ldr	r3, [pc, #36]	; (800b9dc <udp_bind+0x10c>)
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800b9bc:	4a07      	ldr	r2, [pc, #28]	; (800b9dc <udp_bind+0x10c>)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b9c2:	2300      	movs	r3, #0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3718      	adds	r7, #24
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}
 800b9cc:	08012080 	.word	0x08012080
 800b9d0:	08011570 	.word	0x08011570
 800b9d4:	08011838 	.word	0x08011838
 800b9d8:	080115c4 	.word	0x080115c4
 800b9dc:	20008b68 	.word	0x20008b68

0800b9e0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b086      	sub	sp, #24
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	4613      	mov	r3, r2
 800b9ec:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d109      	bne.n	800ba08 <udp_connect+0x28>
 800b9f4:	4b2c      	ldr	r3, [pc, #176]	; (800baa8 <udp_connect+0xc8>)
 800b9f6:	f240 4235 	movw	r2, #1077	; 0x435
 800b9fa:	492c      	ldr	r1, [pc, #176]	; (800baac <udp_connect+0xcc>)
 800b9fc:	482c      	ldr	r0, [pc, #176]	; (800bab0 <udp_connect+0xd0>)
 800b9fe:	f002 fbe7 	bl	800e1d0 <iprintf>
 800ba02:	f06f 030f 	mvn.w	r3, #15
 800ba06:	e04b      	b.n	800baa0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d109      	bne.n	800ba22 <udp_connect+0x42>
 800ba0e:	4b26      	ldr	r3, [pc, #152]	; (800baa8 <udp_connect+0xc8>)
 800ba10:	f240 4236 	movw	r2, #1078	; 0x436
 800ba14:	4927      	ldr	r1, [pc, #156]	; (800bab4 <udp_connect+0xd4>)
 800ba16:	4826      	ldr	r0, [pc, #152]	; (800bab0 <udp_connect+0xd0>)
 800ba18:	f002 fbda 	bl	800e1d0 <iprintf>
 800ba1c:	f06f 030f 	mvn.w	r3, #15
 800ba20:	e03e      	b.n	800baa0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	8a5b      	ldrh	r3, [r3, #18]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d10f      	bne.n	800ba4a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ba2a:	68f9      	ldr	r1, [r7, #12]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	8a5b      	ldrh	r3, [r3, #18]
 800ba30:	461a      	mov	r2, r3
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f7ff ff4c 	bl	800b8d0 <udp_bind>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ba3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d002      	beq.n	800ba4a <udp_connect+0x6a>
      return err;
 800ba44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba48:	e02a      	b.n	800baa0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d002      	beq.n	800ba56 <udp_connect+0x76>
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	e000      	b.n	800ba58 <udp_connect+0x78>
 800ba56:	2300      	movs	r3, #0
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	88fa      	ldrh	r2, [r7, #6]
 800ba60:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	7c1b      	ldrb	r3, [r3, #16]
 800ba66:	f043 0304 	orr.w	r3, r3, #4
 800ba6a:	b2da      	uxtb	r2, r3
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ba70:	4b11      	ldr	r3, [pc, #68]	; (800bab8 <udp_connect+0xd8>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	617b      	str	r3, [r7, #20]
 800ba76:	e008      	b.n	800ba8a <udp_connect+0xaa>
    if (pcb == ipcb) {
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d101      	bne.n	800ba84 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800ba80:	2300      	movs	r3, #0
 800ba82:	e00d      	b.n	800baa0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	617b      	str	r3, [r7, #20]
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d1f3      	bne.n	800ba78 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800ba90:	4b09      	ldr	r3, [pc, #36]	; (800bab8 <udp_connect+0xd8>)
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800ba98:	4a07      	ldr	r2, [pc, #28]	; (800bab8 <udp_connect+0xd8>)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3718      	adds	r7, #24
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	08011570 	.word	0x08011570
 800baac:	08011850 	.word	0x08011850
 800bab0:	080115c4 	.word	0x080115c4
 800bab4:	0801186c 	.word	0x0801186c
 800bab8:	20008b68 	.word	0x20008b68

0800babc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d107      	bne.n	800bade <udp_recv+0x22>
 800bace:	4b08      	ldr	r3, [pc, #32]	; (800baf0 <udp_recv+0x34>)
 800bad0:	f240 428a 	movw	r2, #1162	; 0x48a
 800bad4:	4907      	ldr	r1, [pc, #28]	; (800baf4 <udp_recv+0x38>)
 800bad6:	4808      	ldr	r0, [pc, #32]	; (800baf8 <udp_recv+0x3c>)
 800bad8:	f002 fb7a 	bl	800e1d0 <iprintf>
 800badc:	e005      	b.n	800baea <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	68ba      	ldr	r2, [r7, #8]
 800bae2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	61da      	str	r2, [r3, #28]
}
 800baea:	3710      	adds	r7, #16
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	08011570 	.word	0x08011570
 800baf4:	080118a4 	.word	0x080118a4
 800baf8:	080115c4 	.word	0x080115c4

0800bafc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800bb02:	2000      	movs	r0, #0
 800bb04:	f7f8 ff08 	bl	8004918 <memp_malloc>
 800bb08:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d007      	beq.n	800bb20 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800bb10:	2220      	movs	r2, #32
 800bb12:	2100      	movs	r1, #0
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f002 fb53 	bl	800e1c0 <memset>
    pcb->ttl = UDP_TTL;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	22ff      	movs	r2, #255	; 0xff
 800bb1e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800bb20:	687b      	ldr	r3, [r7, #4]
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
	...

0800bb2c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d01e      	beq.n	800bb7a <udp_netif_ip_addr_changed+0x4e>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d01a      	beq.n	800bb7a <udp_netif_ip_addr_changed+0x4e>
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d017      	beq.n	800bb7a <udp_netif_ip_addr_changed+0x4e>
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d013      	beq.n	800bb7a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bb52:	4b0d      	ldr	r3, [pc, #52]	; (800bb88 <udp_netif_ip_addr_changed+0x5c>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	60fb      	str	r3, [r7, #12]
 800bb58:	e00c      	b.n	800bb74 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d103      	bne.n	800bb6e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	60fb      	str	r3, [r7, #12]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d1ef      	bne.n	800bb5a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800bb7a:	bf00      	nop
 800bb7c:	3714      	adds	r7, #20
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	20008b68 	.word	0x20008b68

0800bb8c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800bb94:	4915      	ldr	r1, [pc, #84]	; (800bbec <etharp_free_entry+0x60>)
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	4613      	mov	r3, r2
 800bb9a:	005b      	lsls	r3, r3, #1
 800bb9c:	4413      	add	r3, r2
 800bb9e:	00db      	lsls	r3, r3, #3
 800bba0:	440b      	add	r3, r1
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d013      	beq.n	800bbd0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800bba8:	4910      	ldr	r1, [pc, #64]	; (800bbec <etharp_free_entry+0x60>)
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	4613      	mov	r3, r2
 800bbae:	005b      	lsls	r3, r3, #1
 800bbb0:	4413      	add	r3, r2
 800bbb2:	00db      	lsls	r3, r3, #3
 800bbb4:	440b      	add	r3, r1
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7f9 fd0b 	bl	80055d4 <pbuf_free>
    arp_table[i].q = NULL;
 800bbbe:	490b      	ldr	r1, [pc, #44]	; (800bbec <etharp_free_entry+0x60>)
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	4613      	mov	r3, r2
 800bbc4:	005b      	lsls	r3, r3, #1
 800bbc6:	4413      	add	r3, r2
 800bbc8:	00db      	lsls	r3, r3, #3
 800bbca:	440b      	add	r3, r1
 800bbcc:	2200      	movs	r2, #0
 800bbce:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800bbd0:	4906      	ldr	r1, [pc, #24]	; (800bbec <etharp_free_entry+0x60>)
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	005b      	lsls	r3, r3, #1
 800bbd8:	4413      	add	r3, r2
 800bbda:	00db      	lsls	r3, r3, #3
 800bbdc:	440b      	add	r3, r1
 800bbde:	3314      	adds	r3, #20
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800bbe4:	bf00      	nop
 800bbe6:	3708      	adds	r7, #8
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	20000110 	.word	0x20000110

0800bbf0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	607b      	str	r3, [r7, #4]
 800bbfa:	e096      	b.n	800bd2a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800bbfc:	494f      	ldr	r1, [pc, #316]	; (800bd3c <etharp_tmr+0x14c>)
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	4613      	mov	r3, r2
 800bc02:	005b      	lsls	r3, r3, #1
 800bc04:	4413      	add	r3, r2
 800bc06:	00db      	lsls	r3, r3, #3
 800bc08:	440b      	add	r3, r1
 800bc0a:	3314      	adds	r3, #20
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800bc10:	78fb      	ldrb	r3, [r7, #3]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f000 8086 	beq.w	800bd24 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800bc18:	4948      	ldr	r1, [pc, #288]	; (800bd3c <etharp_tmr+0x14c>)
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	005b      	lsls	r3, r3, #1
 800bc20:	4413      	add	r3, r2
 800bc22:	00db      	lsls	r3, r3, #3
 800bc24:	440b      	add	r3, r1
 800bc26:	3312      	adds	r3, #18
 800bc28:	881b      	ldrh	r3, [r3, #0]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	b298      	uxth	r0, r3
 800bc2e:	4943      	ldr	r1, [pc, #268]	; (800bd3c <etharp_tmr+0x14c>)
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	4613      	mov	r3, r2
 800bc34:	005b      	lsls	r3, r3, #1
 800bc36:	4413      	add	r3, r2
 800bc38:	00db      	lsls	r3, r3, #3
 800bc3a:	440b      	add	r3, r1
 800bc3c:	3312      	adds	r3, #18
 800bc3e:	4602      	mov	r2, r0
 800bc40:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bc42:	493e      	ldr	r1, [pc, #248]	; (800bd3c <etharp_tmr+0x14c>)
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	4613      	mov	r3, r2
 800bc48:	005b      	lsls	r3, r3, #1
 800bc4a:	4413      	add	r3, r2
 800bc4c:	00db      	lsls	r3, r3, #3
 800bc4e:	440b      	add	r3, r1
 800bc50:	3312      	adds	r3, #18
 800bc52:	881b      	ldrh	r3, [r3, #0]
 800bc54:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800bc58:	d215      	bcs.n	800bc86 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bc5a:	4938      	ldr	r1, [pc, #224]	; (800bd3c <etharp_tmr+0x14c>)
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	005b      	lsls	r3, r3, #1
 800bc62:	4413      	add	r3, r2
 800bc64:	00db      	lsls	r3, r3, #3
 800bc66:	440b      	add	r3, r1
 800bc68:	3314      	adds	r3, #20
 800bc6a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d10e      	bne.n	800bc8e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800bc70:	4932      	ldr	r1, [pc, #200]	; (800bd3c <etharp_tmr+0x14c>)
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	4613      	mov	r3, r2
 800bc76:	005b      	lsls	r3, r3, #1
 800bc78:	4413      	add	r3, r2
 800bc7a:	00db      	lsls	r3, r3, #3
 800bc7c:	440b      	add	r3, r1
 800bc7e:	3312      	adds	r3, #18
 800bc80:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bc82:	2b04      	cmp	r3, #4
 800bc84:	d903      	bls.n	800bc8e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7ff ff80 	bl	800bb8c <etharp_free_entry>
 800bc8c:	e04a      	b.n	800bd24 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800bc8e:	492b      	ldr	r1, [pc, #172]	; (800bd3c <etharp_tmr+0x14c>)
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	4613      	mov	r3, r2
 800bc94:	005b      	lsls	r3, r3, #1
 800bc96:	4413      	add	r3, r2
 800bc98:	00db      	lsls	r3, r3, #3
 800bc9a:	440b      	add	r3, r1
 800bc9c:	3314      	adds	r3, #20
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	2b03      	cmp	r3, #3
 800bca2:	d10a      	bne.n	800bcba <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800bca4:	4925      	ldr	r1, [pc, #148]	; (800bd3c <etharp_tmr+0x14c>)
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	4613      	mov	r3, r2
 800bcaa:	005b      	lsls	r3, r3, #1
 800bcac:	4413      	add	r3, r2
 800bcae:	00db      	lsls	r3, r3, #3
 800bcb0:	440b      	add	r3, r1
 800bcb2:	3314      	adds	r3, #20
 800bcb4:	2204      	movs	r2, #4
 800bcb6:	701a      	strb	r2, [r3, #0]
 800bcb8:	e034      	b.n	800bd24 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800bcba:	4920      	ldr	r1, [pc, #128]	; (800bd3c <etharp_tmr+0x14c>)
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	4613      	mov	r3, r2
 800bcc0:	005b      	lsls	r3, r3, #1
 800bcc2:	4413      	add	r3, r2
 800bcc4:	00db      	lsls	r3, r3, #3
 800bcc6:	440b      	add	r3, r1
 800bcc8:	3314      	adds	r3, #20
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	2b04      	cmp	r3, #4
 800bcce:	d10a      	bne.n	800bce6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bcd0:	491a      	ldr	r1, [pc, #104]	; (800bd3c <etharp_tmr+0x14c>)
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	005b      	lsls	r3, r3, #1
 800bcd8:	4413      	add	r3, r2
 800bcda:	00db      	lsls	r3, r3, #3
 800bcdc:	440b      	add	r3, r1
 800bcde:	3314      	adds	r3, #20
 800bce0:	2202      	movs	r2, #2
 800bce2:	701a      	strb	r2, [r3, #0]
 800bce4:	e01e      	b.n	800bd24 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bce6:	4915      	ldr	r1, [pc, #84]	; (800bd3c <etharp_tmr+0x14c>)
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	4613      	mov	r3, r2
 800bcec:	005b      	lsls	r3, r3, #1
 800bcee:	4413      	add	r3, r2
 800bcf0:	00db      	lsls	r3, r3, #3
 800bcf2:	440b      	add	r3, r1
 800bcf4:	3314      	adds	r3, #20
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d113      	bne.n	800bd24 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800bcfc:	490f      	ldr	r1, [pc, #60]	; (800bd3c <etharp_tmr+0x14c>)
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	4613      	mov	r3, r2
 800bd02:	005b      	lsls	r3, r3, #1
 800bd04:	4413      	add	r3, r2
 800bd06:	00db      	lsls	r3, r3, #3
 800bd08:	440b      	add	r3, r1
 800bd0a:	3308      	adds	r3, #8
 800bd0c:	6818      	ldr	r0, [r3, #0]
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	4613      	mov	r3, r2
 800bd12:	005b      	lsls	r3, r3, #1
 800bd14:	4413      	add	r3, r2
 800bd16:	00db      	lsls	r3, r3, #3
 800bd18:	4a08      	ldr	r2, [pc, #32]	; (800bd3c <etharp_tmr+0x14c>)
 800bd1a:	4413      	add	r3, r2
 800bd1c:	3304      	adds	r3, #4
 800bd1e:	4619      	mov	r1, r3
 800bd20:	f000 fe6e 	bl	800ca00 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	3301      	adds	r3, #1
 800bd28:	607b      	str	r3, [r7, #4]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b09      	cmp	r3, #9
 800bd2e:	f77f af65 	ble.w	800bbfc <etharp_tmr+0xc>
      }
    }
  }
}
 800bd32:	bf00      	nop
 800bd34:	bf00      	nop
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	20000110 	.word	0x20000110

0800bd40 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b08a      	sub	sp, #40	; 0x28
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	460b      	mov	r3, r1
 800bd4a:	607a      	str	r2, [r7, #4]
 800bd4c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bd4e:	230a      	movs	r3, #10
 800bd50:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bd52:	230a      	movs	r3, #10
 800bd54:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800bd56:	230a      	movs	r3, #10
 800bd58:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800bd5e:	230a      	movs	r3, #10
 800bd60:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bd62:	2300      	movs	r3, #0
 800bd64:	83bb      	strh	r3, [r7, #28]
 800bd66:	2300      	movs	r3, #0
 800bd68:	837b      	strh	r3, [r7, #26]
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bd6e:	2300      	movs	r3, #0
 800bd70:	843b      	strh	r3, [r7, #32]
 800bd72:	e0ae      	b.n	800bed2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800bd74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd78:	49a6      	ldr	r1, [pc, #664]	; (800c014 <etharp_find_entry+0x2d4>)
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	005b      	lsls	r3, r3, #1
 800bd7e:	4413      	add	r3, r2
 800bd80:	00db      	lsls	r3, r3, #3
 800bd82:	440b      	add	r3, r1
 800bd84:	3314      	adds	r3, #20
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bd8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bd8e:	2b0a      	cmp	r3, #10
 800bd90:	d105      	bne.n	800bd9e <etharp_find_entry+0x5e>
 800bd92:	7dfb      	ldrb	r3, [r7, #23]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d102      	bne.n	800bd9e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800bd98:	8c3b      	ldrh	r3, [r7, #32]
 800bd9a:	847b      	strh	r3, [r7, #34]	; 0x22
 800bd9c:	e095      	b.n	800beca <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800bd9e:	7dfb      	ldrb	r3, [r7, #23]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f000 8092 	beq.w	800beca <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bda6:	7dfb      	ldrb	r3, [r7, #23]
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d009      	beq.n	800bdc0 <etharp_find_entry+0x80>
 800bdac:	7dfb      	ldrb	r3, [r7, #23]
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d806      	bhi.n	800bdc0 <etharp_find_entry+0x80>
 800bdb2:	4b99      	ldr	r3, [pc, #612]	; (800c018 <etharp_find_entry+0x2d8>)
 800bdb4:	f240 1223 	movw	r2, #291	; 0x123
 800bdb8:	4998      	ldr	r1, [pc, #608]	; (800c01c <etharp_find_entry+0x2dc>)
 800bdba:	4899      	ldr	r0, [pc, #612]	; (800c020 <etharp_find_entry+0x2e0>)
 800bdbc:	f002 fa08 	bl	800e1d0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d020      	beq.n	800be08 <etharp_find_entry+0xc8>
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6819      	ldr	r1, [r3, #0]
 800bdca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bdce:	4891      	ldr	r0, [pc, #580]	; (800c014 <etharp_find_entry+0x2d4>)
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	005b      	lsls	r3, r3, #1
 800bdd4:	4413      	add	r3, r2
 800bdd6:	00db      	lsls	r3, r3, #3
 800bdd8:	4403      	add	r3, r0
 800bdda:	3304      	adds	r3, #4
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4299      	cmp	r1, r3
 800bde0:	d112      	bne.n	800be08 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00c      	beq.n	800be02 <etharp_find_entry+0xc2>
 800bde8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bdec:	4989      	ldr	r1, [pc, #548]	; (800c014 <etharp_find_entry+0x2d4>)
 800bdee:	4613      	mov	r3, r2
 800bdf0:	005b      	lsls	r3, r3, #1
 800bdf2:	4413      	add	r3, r2
 800bdf4:	00db      	lsls	r3, r3, #3
 800bdf6:	440b      	add	r3, r1
 800bdf8:	3308      	adds	r3, #8
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d102      	bne.n	800be08 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800be02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800be06:	e100      	b.n	800c00a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800be08:	7dfb      	ldrb	r3, [r7, #23]
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d140      	bne.n	800be90 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800be0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be12:	4980      	ldr	r1, [pc, #512]	; (800c014 <etharp_find_entry+0x2d4>)
 800be14:	4613      	mov	r3, r2
 800be16:	005b      	lsls	r3, r3, #1
 800be18:	4413      	add	r3, r2
 800be1a:	00db      	lsls	r3, r3, #3
 800be1c:	440b      	add	r3, r1
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d01a      	beq.n	800be5a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800be24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be28:	497a      	ldr	r1, [pc, #488]	; (800c014 <etharp_find_entry+0x2d4>)
 800be2a:	4613      	mov	r3, r2
 800be2c:	005b      	lsls	r3, r3, #1
 800be2e:	4413      	add	r3, r2
 800be30:	00db      	lsls	r3, r3, #3
 800be32:	440b      	add	r3, r1
 800be34:	3312      	adds	r3, #18
 800be36:	881b      	ldrh	r3, [r3, #0]
 800be38:	8bba      	ldrh	r2, [r7, #28]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d845      	bhi.n	800beca <etharp_find_entry+0x18a>
            old_queue = i;
 800be3e:	8c3b      	ldrh	r3, [r7, #32]
 800be40:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800be42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be46:	4973      	ldr	r1, [pc, #460]	; (800c014 <etharp_find_entry+0x2d4>)
 800be48:	4613      	mov	r3, r2
 800be4a:	005b      	lsls	r3, r3, #1
 800be4c:	4413      	add	r3, r2
 800be4e:	00db      	lsls	r3, r3, #3
 800be50:	440b      	add	r3, r1
 800be52:	3312      	adds	r3, #18
 800be54:	881b      	ldrh	r3, [r3, #0]
 800be56:	83bb      	strh	r3, [r7, #28]
 800be58:	e037      	b.n	800beca <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800be5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be5e:	496d      	ldr	r1, [pc, #436]	; (800c014 <etharp_find_entry+0x2d4>)
 800be60:	4613      	mov	r3, r2
 800be62:	005b      	lsls	r3, r3, #1
 800be64:	4413      	add	r3, r2
 800be66:	00db      	lsls	r3, r3, #3
 800be68:	440b      	add	r3, r1
 800be6a:	3312      	adds	r3, #18
 800be6c:	881b      	ldrh	r3, [r3, #0]
 800be6e:	8b7a      	ldrh	r2, [r7, #26]
 800be70:	429a      	cmp	r2, r3
 800be72:	d82a      	bhi.n	800beca <etharp_find_entry+0x18a>
            old_pending = i;
 800be74:	8c3b      	ldrh	r3, [r7, #32]
 800be76:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800be78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be7c:	4965      	ldr	r1, [pc, #404]	; (800c014 <etharp_find_entry+0x2d4>)
 800be7e:	4613      	mov	r3, r2
 800be80:	005b      	lsls	r3, r3, #1
 800be82:	4413      	add	r3, r2
 800be84:	00db      	lsls	r3, r3, #3
 800be86:	440b      	add	r3, r1
 800be88:	3312      	adds	r3, #18
 800be8a:	881b      	ldrh	r3, [r3, #0]
 800be8c:	837b      	strh	r3, [r7, #26]
 800be8e:	e01c      	b.n	800beca <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800be90:	7dfb      	ldrb	r3, [r7, #23]
 800be92:	2b01      	cmp	r3, #1
 800be94:	d919      	bls.n	800beca <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800be96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be9a:	495e      	ldr	r1, [pc, #376]	; (800c014 <etharp_find_entry+0x2d4>)
 800be9c:	4613      	mov	r3, r2
 800be9e:	005b      	lsls	r3, r3, #1
 800bea0:	4413      	add	r3, r2
 800bea2:	00db      	lsls	r3, r3, #3
 800bea4:	440b      	add	r3, r1
 800bea6:	3312      	adds	r3, #18
 800bea8:	881b      	ldrh	r3, [r3, #0]
 800beaa:	8b3a      	ldrh	r2, [r7, #24]
 800beac:	429a      	cmp	r2, r3
 800beae:	d80c      	bhi.n	800beca <etharp_find_entry+0x18a>
            old_stable = i;
 800beb0:	8c3b      	ldrh	r3, [r7, #32]
 800beb2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800beb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800beb8:	4956      	ldr	r1, [pc, #344]	; (800c014 <etharp_find_entry+0x2d4>)
 800beba:	4613      	mov	r3, r2
 800bebc:	005b      	lsls	r3, r3, #1
 800bebe:	4413      	add	r3, r2
 800bec0:	00db      	lsls	r3, r3, #3
 800bec2:	440b      	add	r3, r1
 800bec4:	3312      	adds	r3, #18
 800bec6:	881b      	ldrh	r3, [r3, #0]
 800bec8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800beca:	8c3b      	ldrh	r3, [r7, #32]
 800becc:	3301      	adds	r3, #1
 800bece:	b29b      	uxth	r3, r3
 800bed0:	843b      	strh	r3, [r7, #32]
 800bed2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bed6:	2b09      	cmp	r3, #9
 800bed8:	f77f af4c 	ble.w	800bd74 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800bedc:	7afb      	ldrb	r3, [r7, #11]
 800bede:	f003 0302 	and.w	r3, r3, #2
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d108      	bne.n	800bef8 <etharp_find_entry+0x1b8>
 800bee6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800beea:	2b0a      	cmp	r3, #10
 800beec:	d107      	bne.n	800befe <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800beee:	7afb      	ldrb	r3, [r7, #11]
 800bef0:	f003 0301 	and.w	r3, r3, #1
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d102      	bne.n	800befe <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800bef8:	f04f 33ff 	mov.w	r3, #4294967295
 800befc:	e085      	b.n	800c00a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800befe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bf02:	2b09      	cmp	r3, #9
 800bf04:	dc02      	bgt.n	800bf0c <etharp_find_entry+0x1cc>
    i = empty;
 800bf06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf08:	843b      	strh	r3, [r7, #32]
 800bf0a:	e039      	b.n	800bf80 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800bf0c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bf10:	2b09      	cmp	r3, #9
 800bf12:	dc14      	bgt.n	800bf3e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800bf14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf16:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800bf18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf1c:	493d      	ldr	r1, [pc, #244]	; (800c014 <etharp_find_entry+0x2d4>)
 800bf1e:	4613      	mov	r3, r2
 800bf20:	005b      	lsls	r3, r3, #1
 800bf22:	4413      	add	r3, r2
 800bf24:	00db      	lsls	r3, r3, #3
 800bf26:	440b      	add	r3, r1
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d018      	beq.n	800bf60 <etharp_find_entry+0x220>
 800bf2e:	4b3a      	ldr	r3, [pc, #232]	; (800c018 <etharp_find_entry+0x2d8>)
 800bf30:	f240 126d 	movw	r2, #365	; 0x16d
 800bf34:	493b      	ldr	r1, [pc, #236]	; (800c024 <etharp_find_entry+0x2e4>)
 800bf36:	483a      	ldr	r0, [pc, #232]	; (800c020 <etharp_find_entry+0x2e0>)
 800bf38:	f002 f94a 	bl	800e1d0 <iprintf>
 800bf3c:	e010      	b.n	800bf60 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800bf3e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bf42:	2b09      	cmp	r3, #9
 800bf44:	dc02      	bgt.n	800bf4c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800bf46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf48:	843b      	strh	r3, [r7, #32]
 800bf4a:	e009      	b.n	800bf60 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800bf4c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bf50:	2b09      	cmp	r3, #9
 800bf52:	dc02      	bgt.n	800bf5a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800bf54:	8bfb      	ldrh	r3, [r7, #30]
 800bf56:	843b      	strh	r3, [r7, #32]
 800bf58:	e002      	b.n	800bf60 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800bf5a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf5e:	e054      	b.n	800c00a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bf60:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bf64:	2b09      	cmp	r3, #9
 800bf66:	dd06      	ble.n	800bf76 <etharp_find_entry+0x236>
 800bf68:	4b2b      	ldr	r3, [pc, #172]	; (800c018 <etharp_find_entry+0x2d8>)
 800bf6a:	f240 127f 	movw	r2, #383	; 0x17f
 800bf6e:	492e      	ldr	r1, [pc, #184]	; (800c028 <etharp_find_entry+0x2e8>)
 800bf70:	482b      	ldr	r0, [pc, #172]	; (800c020 <etharp_find_entry+0x2e0>)
 800bf72:	f002 f92d 	bl	800e1d0 <iprintf>
    etharp_free_entry(i);
 800bf76:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7ff fe06 	bl	800bb8c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bf80:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bf84:	2b09      	cmp	r3, #9
 800bf86:	dd06      	ble.n	800bf96 <etharp_find_entry+0x256>
 800bf88:	4b23      	ldr	r3, [pc, #140]	; (800c018 <etharp_find_entry+0x2d8>)
 800bf8a:	f240 1283 	movw	r2, #387	; 0x183
 800bf8e:	4926      	ldr	r1, [pc, #152]	; (800c028 <etharp_find_entry+0x2e8>)
 800bf90:	4823      	ldr	r0, [pc, #140]	; (800c020 <etharp_find_entry+0x2e0>)
 800bf92:	f002 f91d 	bl	800e1d0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800bf96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf9a:	491e      	ldr	r1, [pc, #120]	; (800c014 <etharp_find_entry+0x2d4>)
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	005b      	lsls	r3, r3, #1
 800bfa0:	4413      	add	r3, r2
 800bfa2:	00db      	lsls	r3, r3, #3
 800bfa4:	440b      	add	r3, r1
 800bfa6:	3314      	adds	r3, #20
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d006      	beq.n	800bfbc <etharp_find_entry+0x27c>
 800bfae:	4b1a      	ldr	r3, [pc, #104]	; (800c018 <etharp_find_entry+0x2d8>)
 800bfb0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800bfb4:	491d      	ldr	r1, [pc, #116]	; (800c02c <etharp_find_entry+0x2ec>)
 800bfb6:	481a      	ldr	r0, [pc, #104]	; (800c020 <etharp_find_entry+0x2e0>)
 800bfb8:	f002 f90a 	bl	800e1d0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00b      	beq.n	800bfda <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800bfc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	6819      	ldr	r1, [r3, #0]
 800bfca:	4812      	ldr	r0, [pc, #72]	; (800c014 <etharp_find_entry+0x2d4>)
 800bfcc:	4613      	mov	r3, r2
 800bfce:	005b      	lsls	r3, r3, #1
 800bfd0:	4413      	add	r3, r2
 800bfd2:	00db      	lsls	r3, r3, #3
 800bfd4:	4403      	add	r3, r0
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800bfda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfde:	490d      	ldr	r1, [pc, #52]	; (800c014 <etharp_find_entry+0x2d4>)
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	005b      	lsls	r3, r3, #1
 800bfe4:	4413      	add	r3, r2
 800bfe6:	00db      	lsls	r3, r3, #3
 800bfe8:	440b      	add	r3, r1
 800bfea:	3312      	adds	r3, #18
 800bfec:	2200      	movs	r2, #0
 800bfee:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800bff0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bff4:	4907      	ldr	r1, [pc, #28]	; (800c014 <etharp_find_entry+0x2d4>)
 800bff6:	4613      	mov	r3, r2
 800bff8:	005b      	lsls	r3, r3, #1
 800bffa:	4413      	add	r3, r2
 800bffc:	00db      	lsls	r3, r3, #3
 800bffe:	440b      	add	r3, r1
 800c000:	3308      	adds	r3, #8
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c006:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3728      	adds	r7, #40	; 0x28
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	20000110 	.word	0x20000110
 800c018:	080118d4 	.word	0x080118d4
 800c01c:	0801190c 	.word	0x0801190c
 800c020:	0801194c 	.word	0x0801194c
 800c024:	08011974 	.word	0x08011974
 800c028:	0801198c 	.word	0x0801198c
 800c02c:	080119a0 	.word	0x080119a0

0800c030 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b088      	sub	sp, #32
 800c034:	af02      	add	r7, sp, #8
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	607a      	str	r2, [r7, #4]
 800c03c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c044:	2b06      	cmp	r3, #6
 800c046:	d006      	beq.n	800c056 <etharp_update_arp_entry+0x26>
 800c048:	4b48      	ldr	r3, [pc, #288]	; (800c16c <etharp_update_arp_entry+0x13c>)
 800c04a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c04e:	4948      	ldr	r1, [pc, #288]	; (800c170 <etharp_update_arp_entry+0x140>)
 800c050:	4848      	ldr	r0, [pc, #288]	; (800c174 <etharp_update_arp_entry+0x144>)
 800c052:	f002 f8bd 	bl	800e1d0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d012      	beq.n	800c082 <etharp_update_arp_entry+0x52>
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d00e      	beq.n	800c082 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	68f9      	ldr	r1, [r7, #12]
 800c06a:	4618      	mov	r0, r3
 800c06c:	f001 f8fe 	bl	800d26c <ip4_addr_isbroadcast_u32>
 800c070:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c072:	2b00      	cmp	r3, #0
 800c074:	d105      	bne.n	800c082 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c07e:	2be0      	cmp	r3, #224	; 0xe0
 800c080:	d102      	bne.n	800c088 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c082:	f06f 030f 	mvn.w	r3, #15
 800c086:	e06c      	b.n	800c162 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c088:	78fb      	ldrb	r3, [r7, #3]
 800c08a:	68fa      	ldr	r2, [r7, #12]
 800c08c:	4619      	mov	r1, r3
 800c08e:	68b8      	ldr	r0, [r7, #8]
 800c090:	f7ff fe56 	bl	800bd40 <etharp_find_entry>
 800c094:	4603      	mov	r3, r0
 800c096:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c098:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	da02      	bge.n	800c0a6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c0a0:	8afb      	ldrh	r3, [r7, #22]
 800c0a2:	b25b      	sxtb	r3, r3
 800c0a4:	e05d      	b.n	800c162 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c0a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c0aa:	4933      	ldr	r1, [pc, #204]	; (800c178 <etharp_update_arp_entry+0x148>)
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	005b      	lsls	r3, r3, #1
 800c0b0:	4413      	add	r3, r2
 800c0b2:	00db      	lsls	r3, r3, #3
 800c0b4:	440b      	add	r3, r1
 800c0b6:	3314      	adds	r3, #20
 800c0b8:	2202      	movs	r2, #2
 800c0ba:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c0bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c0c0:	492d      	ldr	r1, [pc, #180]	; (800c178 <etharp_update_arp_entry+0x148>)
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	005b      	lsls	r3, r3, #1
 800c0c6:	4413      	add	r3, r2
 800c0c8:	00db      	lsls	r3, r3, #3
 800c0ca:	440b      	add	r3, r1
 800c0cc:	3308      	adds	r3, #8
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c0d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	005b      	lsls	r3, r3, #1
 800c0da:	4413      	add	r3, r2
 800c0dc:	00db      	lsls	r3, r3, #3
 800c0de:	3308      	adds	r3, #8
 800c0e0:	4a25      	ldr	r2, [pc, #148]	; (800c178 <etharp_update_arp_entry+0x148>)
 800c0e2:	4413      	add	r3, r2
 800c0e4:	3304      	adds	r3, #4
 800c0e6:	2206      	movs	r2, #6
 800c0e8:	6879      	ldr	r1, [r7, #4]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f002 f840 	bl	800e170 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c0f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c0f4:	4920      	ldr	r1, [pc, #128]	; (800c178 <etharp_update_arp_entry+0x148>)
 800c0f6:	4613      	mov	r3, r2
 800c0f8:	005b      	lsls	r3, r3, #1
 800c0fa:	4413      	add	r3, r2
 800c0fc:	00db      	lsls	r3, r3, #3
 800c0fe:	440b      	add	r3, r1
 800c100:	3312      	adds	r3, #18
 800c102:	2200      	movs	r2, #0
 800c104:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c106:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c10a:	491b      	ldr	r1, [pc, #108]	; (800c178 <etharp_update_arp_entry+0x148>)
 800c10c:	4613      	mov	r3, r2
 800c10e:	005b      	lsls	r3, r3, #1
 800c110:	4413      	add	r3, r2
 800c112:	00db      	lsls	r3, r3, #3
 800c114:	440b      	add	r3, r1
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d021      	beq.n	800c160 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c11c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c120:	4915      	ldr	r1, [pc, #84]	; (800c178 <etharp_update_arp_entry+0x148>)
 800c122:	4613      	mov	r3, r2
 800c124:	005b      	lsls	r3, r3, #1
 800c126:	4413      	add	r3, r2
 800c128:	00db      	lsls	r3, r3, #3
 800c12a:	440b      	add	r3, r1
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c130:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c134:	4910      	ldr	r1, [pc, #64]	; (800c178 <etharp_update_arp_entry+0x148>)
 800c136:	4613      	mov	r3, r2
 800c138:	005b      	lsls	r3, r3, #1
 800c13a:	4413      	add	r3, r2
 800c13c:	00db      	lsls	r3, r3, #3
 800c13e:	440b      	add	r3, r1
 800c140:	2200      	movs	r2, #0
 800c142:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c14a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c14e:	9300      	str	r3, [sp, #0]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6939      	ldr	r1, [r7, #16]
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f001 ff91 	bl	800e07c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c15a:	6938      	ldr	r0, [r7, #16]
 800c15c:	f7f9 fa3a 	bl	80055d4 <pbuf_free>
  }
  return ERR_OK;
 800c160:	2300      	movs	r3, #0
}
 800c162:	4618      	mov	r0, r3
 800c164:	3718      	adds	r7, #24
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	080118d4 	.word	0x080118d4
 800c170:	080119cc 	.word	0x080119cc
 800c174:	0801194c 	.word	0x0801194c
 800c178:	20000110 	.word	0x20000110

0800c17c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c184:	2300      	movs	r3, #0
 800c186:	60fb      	str	r3, [r7, #12]
 800c188:	e01e      	b.n	800c1c8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c18a:	4913      	ldr	r1, [pc, #76]	; (800c1d8 <etharp_cleanup_netif+0x5c>)
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	4613      	mov	r3, r2
 800c190:	005b      	lsls	r3, r3, #1
 800c192:	4413      	add	r3, r2
 800c194:	00db      	lsls	r3, r3, #3
 800c196:	440b      	add	r3, r1
 800c198:	3314      	adds	r3, #20
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c19e:	7afb      	ldrb	r3, [r7, #11]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d00e      	beq.n	800c1c2 <etharp_cleanup_netif+0x46>
 800c1a4:	490c      	ldr	r1, [pc, #48]	; (800c1d8 <etharp_cleanup_netif+0x5c>)
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	005b      	lsls	r3, r3, #1
 800c1ac:	4413      	add	r3, r2
 800c1ae:	00db      	lsls	r3, r3, #3
 800c1b0:	440b      	add	r3, r1
 800c1b2:	3308      	adds	r3, #8
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d102      	bne.n	800c1c2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c1bc:	68f8      	ldr	r0, [r7, #12]
 800c1be:	f7ff fce5 	bl	800bb8c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	60fb      	str	r3, [r7, #12]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2b09      	cmp	r3, #9
 800c1cc:	dddd      	ble.n	800c18a <etharp_cleanup_netif+0xe>
    }
  }
}
 800c1ce:	bf00      	nop
 800c1d0:	bf00      	nop
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	20000110 	.word	0x20000110

0800c1dc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c1dc:	b5b0      	push	{r4, r5, r7, lr}
 800c1de:	b08a      	sub	sp, #40	; 0x28
 800c1e0:	af04      	add	r7, sp, #16
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d107      	bne.n	800c1fc <etharp_input+0x20>
 800c1ec:	4b3d      	ldr	r3, [pc, #244]	; (800c2e4 <etharp_input+0x108>)
 800c1ee:	f240 228a 	movw	r2, #650	; 0x28a
 800c1f2:	493d      	ldr	r1, [pc, #244]	; (800c2e8 <etharp_input+0x10c>)
 800c1f4:	483d      	ldr	r0, [pc, #244]	; (800c2ec <etharp_input+0x110>)
 800c1f6:	f001 ffeb 	bl	800e1d0 <iprintf>
 800c1fa:	e06f      	b.n	800c2dc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	881b      	ldrh	r3, [r3, #0]
 800c206:	b29b      	uxth	r3, r3
 800c208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c20c:	d10c      	bne.n	800c228 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c212:	2b06      	cmp	r3, #6
 800c214:	d108      	bne.n	800c228 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c21a:	2b04      	cmp	r3, #4
 800c21c:	d104      	bne.n	800c228 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	885b      	ldrh	r3, [r3, #2]
 800c222:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c224:	2b08      	cmp	r3, #8
 800c226:	d003      	beq.n	800c230 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f7f9 f9d3 	bl	80055d4 <pbuf_free>
    return;
 800c22e:	e055      	b.n	800c2dc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	330e      	adds	r3, #14
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	3318      	adds	r3, #24
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	3304      	adds	r3, #4
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d102      	bne.n	800c250 <etharp_input+0x74>
    for_us = 0;
 800c24a:	2300      	movs	r3, #0
 800c24c:	75fb      	strb	r3, [r7, #23]
 800c24e:	e009      	b.n	800c264 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c250:	68ba      	ldr	r2, [r7, #8]
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	3304      	adds	r3, #4
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	429a      	cmp	r2, r3
 800c25a:	bf0c      	ite	eq
 800c25c:	2301      	moveq	r3, #1
 800c25e:	2300      	movne	r3, #0
 800c260:	b2db      	uxtb	r3, r3
 800c262:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	f103 0208 	add.w	r2, r3, #8
 800c26a:	7dfb      	ldrb	r3, [r7, #23]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d001      	beq.n	800c274 <etharp_input+0x98>
 800c270:	2301      	movs	r3, #1
 800c272:	e000      	b.n	800c276 <etharp_input+0x9a>
 800c274:	2302      	movs	r3, #2
 800c276:	f107 010c 	add.w	r1, r7, #12
 800c27a:	6838      	ldr	r0, [r7, #0]
 800c27c:	f7ff fed8 	bl	800c030 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	88db      	ldrh	r3, [r3, #6]
 800c284:	b29b      	uxth	r3, r3
 800c286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c28a:	d003      	beq.n	800c294 <etharp_input+0xb8>
 800c28c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c290:	d01e      	beq.n	800c2d0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c292:	e020      	b.n	800c2d6 <etharp_input+0xfa>
      if (for_us) {
 800c294:	7dfb      	ldrb	r3, [r7, #23]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d01c      	beq.n	800c2d4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c2b0:	693a      	ldr	r2, [r7, #16]
 800c2b2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c2b4:	2102      	movs	r1, #2
 800c2b6:	9103      	str	r1, [sp, #12]
 800c2b8:	f107 010c 	add.w	r1, r7, #12
 800c2bc:	9102      	str	r1, [sp, #8]
 800c2be:	9201      	str	r2, [sp, #4]
 800c2c0:	9300      	str	r3, [sp, #0]
 800c2c2:	462b      	mov	r3, r5
 800c2c4:	4622      	mov	r2, r4
 800c2c6:	4601      	mov	r1, r0
 800c2c8:	6838      	ldr	r0, [r7, #0]
 800c2ca:	f000 faeb 	bl	800c8a4 <etharp_raw>
      break;
 800c2ce:	e001      	b.n	800c2d4 <etharp_input+0xf8>
      break;
 800c2d0:	bf00      	nop
 800c2d2:	e000      	b.n	800c2d6 <etharp_input+0xfa>
      break;
 800c2d4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f7f9 f97c 	bl	80055d4 <pbuf_free>
}
 800c2dc:	3718      	adds	r7, #24
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bdb0      	pop	{r4, r5, r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	080118d4 	.word	0x080118d4
 800c2e8:	08011a24 	.word	0x08011a24
 800c2ec:	0801194c 	.word	0x0801194c

0800c2f0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af02      	add	r7, sp, #8
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c2fe:	79fa      	ldrb	r2, [r7, #7]
 800c300:	4944      	ldr	r1, [pc, #272]	; (800c414 <etharp_output_to_arp_index+0x124>)
 800c302:	4613      	mov	r3, r2
 800c304:	005b      	lsls	r3, r3, #1
 800c306:	4413      	add	r3, r2
 800c308:	00db      	lsls	r3, r3, #3
 800c30a:	440b      	add	r3, r1
 800c30c:	3314      	adds	r3, #20
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	2b01      	cmp	r3, #1
 800c312:	d806      	bhi.n	800c322 <etharp_output_to_arp_index+0x32>
 800c314:	4b40      	ldr	r3, [pc, #256]	; (800c418 <etharp_output_to_arp_index+0x128>)
 800c316:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c31a:	4940      	ldr	r1, [pc, #256]	; (800c41c <etharp_output_to_arp_index+0x12c>)
 800c31c:	4840      	ldr	r0, [pc, #256]	; (800c420 <etharp_output_to_arp_index+0x130>)
 800c31e:	f001 ff57 	bl	800e1d0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c322:	79fa      	ldrb	r2, [r7, #7]
 800c324:	493b      	ldr	r1, [pc, #236]	; (800c414 <etharp_output_to_arp_index+0x124>)
 800c326:	4613      	mov	r3, r2
 800c328:	005b      	lsls	r3, r3, #1
 800c32a:	4413      	add	r3, r2
 800c32c:	00db      	lsls	r3, r3, #3
 800c32e:	440b      	add	r3, r1
 800c330:	3314      	adds	r3, #20
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	2b02      	cmp	r3, #2
 800c336:	d153      	bne.n	800c3e0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c338:	79fa      	ldrb	r2, [r7, #7]
 800c33a:	4936      	ldr	r1, [pc, #216]	; (800c414 <etharp_output_to_arp_index+0x124>)
 800c33c:	4613      	mov	r3, r2
 800c33e:	005b      	lsls	r3, r3, #1
 800c340:	4413      	add	r3, r2
 800c342:	00db      	lsls	r3, r3, #3
 800c344:	440b      	add	r3, r1
 800c346:	3312      	adds	r3, #18
 800c348:	881b      	ldrh	r3, [r3, #0]
 800c34a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c34e:	d919      	bls.n	800c384 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c350:	79fa      	ldrb	r2, [r7, #7]
 800c352:	4613      	mov	r3, r2
 800c354:	005b      	lsls	r3, r3, #1
 800c356:	4413      	add	r3, r2
 800c358:	00db      	lsls	r3, r3, #3
 800c35a:	4a2e      	ldr	r2, [pc, #184]	; (800c414 <etharp_output_to_arp_index+0x124>)
 800c35c:	4413      	add	r3, r2
 800c35e:	3304      	adds	r3, #4
 800c360:	4619      	mov	r1, r3
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f000 fb4c 	bl	800ca00 <etharp_request>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d138      	bne.n	800c3e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c36e:	79fa      	ldrb	r2, [r7, #7]
 800c370:	4928      	ldr	r1, [pc, #160]	; (800c414 <etharp_output_to_arp_index+0x124>)
 800c372:	4613      	mov	r3, r2
 800c374:	005b      	lsls	r3, r3, #1
 800c376:	4413      	add	r3, r2
 800c378:	00db      	lsls	r3, r3, #3
 800c37a:	440b      	add	r3, r1
 800c37c:	3314      	adds	r3, #20
 800c37e:	2203      	movs	r2, #3
 800c380:	701a      	strb	r2, [r3, #0]
 800c382:	e02d      	b.n	800c3e0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c384:	79fa      	ldrb	r2, [r7, #7]
 800c386:	4923      	ldr	r1, [pc, #140]	; (800c414 <etharp_output_to_arp_index+0x124>)
 800c388:	4613      	mov	r3, r2
 800c38a:	005b      	lsls	r3, r3, #1
 800c38c:	4413      	add	r3, r2
 800c38e:	00db      	lsls	r3, r3, #3
 800c390:	440b      	add	r3, r1
 800c392:	3312      	adds	r3, #18
 800c394:	881b      	ldrh	r3, [r3, #0]
 800c396:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c39a:	d321      	bcc.n	800c3e0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c39c:	79fa      	ldrb	r2, [r7, #7]
 800c39e:	4613      	mov	r3, r2
 800c3a0:	005b      	lsls	r3, r3, #1
 800c3a2:	4413      	add	r3, r2
 800c3a4:	00db      	lsls	r3, r3, #3
 800c3a6:	4a1b      	ldr	r2, [pc, #108]	; (800c414 <etharp_output_to_arp_index+0x124>)
 800c3a8:	4413      	add	r3, r2
 800c3aa:	1d19      	adds	r1, r3, #4
 800c3ac:	79fa      	ldrb	r2, [r7, #7]
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	005b      	lsls	r3, r3, #1
 800c3b2:	4413      	add	r3, r2
 800c3b4:	00db      	lsls	r3, r3, #3
 800c3b6:	3308      	adds	r3, #8
 800c3b8:	4a16      	ldr	r2, [pc, #88]	; (800c414 <etharp_output_to_arp_index+0x124>)
 800c3ba:	4413      	add	r3, r2
 800c3bc:	3304      	adds	r3, #4
 800c3be:	461a      	mov	r2, r3
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f000 fafb 	bl	800c9bc <etharp_request_dst>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d109      	bne.n	800c3e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c3cc:	79fa      	ldrb	r2, [r7, #7]
 800c3ce:	4911      	ldr	r1, [pc, #68]	; (800c414 <etharp_output_to_arp_index+0x124>)
 800c3d0:	4613      	mov	r3, r2
 800c3d2:	005b      	lsls	r3, r3, #1
 800c3d4:	4413      	add	r3, r2
 800c3d6:	00db      	lsls	r3, r3, #3
 800c3d8:	440b      	add	r3, r1
 800c3da:	3314      	adds	r3, #20
 800c3dc:	2203      	movs	r2, #3
 800c3de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c3e6:	79fa      	ldrb	r2, [r7, #7]
 800c3e8:	4613      	mov	r3, r2
 800c3ea:	005b      	lsls	r3, r3, #1
 800c3ec:	4413      	add	r3, r2
 800c3ee:	00db      	lsls	r3, r3, #3
 800c3f0:	3308      	adds	r3, #8
 800c3f2:	4a08      	ldr	r2, [pc, #32]	; (800c414 <etharp_output_to_arp_index+0x124>)
 800c3f4:	4413      	add	r3, r2
 800c3f6:	3304      	adds	r3, #4
 800c3f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3fc:	9200      	str	r2, [sp, #0]
 800c3fe:	460a      	mov	r2, r1
 800c400:	68b9      	ldr	r1, [r7, #8]
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	f001 fe3a 	bl	800e07c <ethernet_output>
 800c408:	4603      	mov	r3, r0
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	20000110 	.word	0x20000110
 800c418:	080118d4 	.word	0x080118d4
 800c41c:	08011a44 	.word	0x08011a44
 800c420:	0801194c 	.word	0x0801194c

0800c424 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b08a      	sub	sp, #40	; 0x28
 800c428:	af02      	add	r7, sp, #8
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d106      	bne.n	800c448 <etharp_output+0x24>
 800c43a:	4b73      	ldr	r3, [pc, #460]	; (800c608 <etharp_output+0x1e4>)
 800c43c:	f240 321e 	movw	r2, #798	; 0x31e
 800c440:	4972      	ldr	r1, [pc, #456]	; (800c60c <etharp_output+0x1e8>)
 800c442:	4873      	ldr	r0, [pc, #460]	; (800c610 <etharp_output+0x1ec>)
 800c444:	f001 fec4 	bl	800e1d0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d106      	bne.n	800c45c <etharp_output+0x38>
 800c44e:	4b6e      	ldr	r3, [pc, #440]	; (800c608 <etharp_output+0x1e4>)
 800c450:	f240 321f 	movw	r2, #799	; 0x31f
 800c454:	496f      	ldr	r1, [pc, #444]	; (800c614 <etharp_output+0x1f0>)
 800c456:	486e      	ldr	r0, [pc, #440]	; (800c610 <etharp_output+0x1ec>)
 800c458:	f001 feba 	bl	800e1d0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d106      	bne.n	800c470 <etharp_output+0x4c>
 800c462:	4b69      	ldr	r3, [pc, #420]	; (800c608 <etharp_output+0x1e4>)
 800c464:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c468:	496b      	ldr	r1, [pc, #428]	; (800c618 <etharp_output+0x1f4>)
 800c46a:	4869      	ldr	r0, [pc, #420]	; (800c610 <etharp_output+0x1ec>)
 800c46c:	f001 feb0 	bl	800e1d0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	68f9      	ldr	r1, [r7, #12]
 800c476:	4618      	mov	r0, r3
 800c478:	f000 fef8 	bl	800d26c <ip4_addr_isbroadcast_u32>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d002      	beq.n	800c488 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c482:	4b66      	ldr	r3, [pc, #408]	; (800c61c <etharp_output+0x1f8>)
 800c484:	61fb      	str	r3, [r7, #28]
 800c486:	e0af      	b.n	800c5e8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c490:	2be0      	cmp	r3, #224	; 0xe0
 800c492:	d118      	bne.n	800c4c6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c494:	2301      	movs	r3, #1
 800c496:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c498:	2300      	movs	r3, #0
 800c49a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c49c:	235e      	movs	r3, #94	; 0x5e
 800c49e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	3302      	adds	r3, #2
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	3303      	adds	r3, #3
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c4be:	f107 0310 	add.w	r3, r7, #16
 800c4c2:	61fb      	str	r3, [r7, #28]
 800c4c4:	e090      	b.n	800c5e8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	3304      	adds	r3, #4
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	405a      	eors	r2, r3
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	3308      	adds	r3, #8
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4013      	ands	r3, r2
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d012      	beq.n	800c504 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c4e4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d00b      	beq.n	800c504 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	330c      	adds	r3, #12
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d003      	beq.n	800c4fe <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	330c      	adds	r3, #12
 800c4fa:	61bb      	str	r3, [r7, #24]
 800c4fc:	e002      	b.n	800c504 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c4fe:	f06f 0303 	mvn.w	r3, #3
 800c502:	e07d      	b.n	800c600 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c504:	4b46      	ldr	r3, [pc, #280]	; (800c620 <etharp_output+0x1fc>)
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	4619      	mov	r1, r3
 800c50a:	4a46      	ldr	r2, [pc, #280]	; (800c624 <etharp_output+0x200>)
 800c50c:	460b      	mov	r3, r1
 800c50e:	005b      	lsls	r3, r3, #1
 800c510:	440b      	add	r3, r1
 800c512:	00db      	lsls	r3, r3, #3
 800c514:	4413      	add	r3, r2
 800c516:	3314      	adds	r3, #20
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d925      	bls.n	800c56a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c51e:	4b40      	ldr	r3, [pc, #256]	; (800c620 <etharp_output+0x1fc>)
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	4619      	mov	r1, r3
 800c524:	4a3f      	ldr	r2, [pc, #252]	; (800c624 <etharp_output+0x200>)
 800c526:	460b      	mov	r3, r1
 800c528:	005b      	lsls	r3, r3, #1
 800c52a:	440b      	add	r3, r1
 800c52c:	00db      	lsls	r3, r3, #3
 800c52e:	4413      	add	r3, r2
 800c530:	3308      	adds	r3, #8
 800c532:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	429a      	cmp	r2, r3
 800c538:	d117      	bne.n	800c56a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c53a:	69bb      	ldr	r3, [r7, #24]
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	4b38      	ldr	r3, [pc, #224]	; (800c620 <etharp_output+0x1fc>)
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	4618      	mov	r0, r3
 800c544:	4937      	ldr	r1, [pc, #220]	; (800c624 <etharp_output+0x200>)
 800c546:	4603      	mov	r3, r0
 800c548:	005b      	lsls	r3, r3, #1
 800c54a:	4403      	add	r3, r0
 800c54c:	00db      	lsls	r3, r3, #3
 800c54e:	440b      	add	r3, r1
 800c550:	3304      	adds	r3, #4
 800c552:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c554:	429a      	cmp	r2, r3
 800c556:	d108      	bne.n	800c56a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c558:	4b31      	ldr	r3, [pc, #196]	; (800c620 <etharp_output+0x1fc>)
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	461a      	mov	r2, r3
 800c55e:	68b9      	ldr	r1, [r7, #8]
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f7ff fec5 	bl	800c2f0 <etharp_output_to_arp_index>
 800c566:	4603      	mov	r3, r0
 800c568:	e04a      	b.n	800c600 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c56a:	2300      	movs	r3, #0
 800c56c:	75fb      	strb	r3, [r7, #23]
 800c56e:	e031      	b.n	800c5d4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c570:	7dfa      	ldrb	r2, [r7, #23]
 800c572:	492c      	ldr	r1, [pc, #176]	; (800c624 <etharp_output+0x200>)
 800c574:	4613      	mov	r3, r2
 800c576:	005b      	lsls	r3, r3, #1
 800c578:	4413      	add	r3, r2
 800c57a:	00db      	lsls	r3, r3, #3
 800c57c:	440b      	add	r3, r1
 800c57e:	3314      	adds	r3, #20
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	2b01      	cmp	r3, #1
 800c584:	d923      	bls.n	800c5ce <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c586:	7dfa      	ldrb	r2, [r7, #23]
 800c588:	4926      	ldr	r1, [pc, #152]	; (800c624 <etharp_output+0x200>)
 800c58a:	4613      	mov	r3, r2
 800c58c:	005b      	lsls	r3, r3, #1
 800c58e:	4413      	add	r3, r2
 800c590:	00db      	lsls	r3, r3, #3
 800c592:	440b      	add	r3, r1
 800c594:	3308      	adds	r3, #8
 800c596:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d117      	bne.n	800c5ce <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	6819      	ldr	r1, [r3, #0]
 800c5a2:	7dfa      	ldrb	r2, [r7, #23]
 800c5a4:	481f      	ldr	r0, [pc, #124]	; (800c624 <etharp_output+0x200>)
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	005b      	lsls	r3, r3, #1
 800c5aa:	4413      	add	r3, r2
 800c5ac:	00db      	lsls	r3, r3, #3
 800c5ae:	4403      	add	r3, r0
 800c5b0:	3304      	adds	r3, #4
 800c5b2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c5b4:	4299      	cmp	r1, r3
 800c5b6:	d10a      	bne.n	800c5ce <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c5b8:	4a19      	ldr	r2, [pc, #100]	; (800c620 <etharp_output+0x1fc>)
 800c5ba:	7dfb      	ldrb	r3, [r7, #23]
 800c5bc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c5be:	7dfb      	ldrb	r3, [r7, #23]
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	68b9      	ldr	r1, [r7, #8]
 800c5c4:	68f8      	ldr	r0, [r7, #12]
 800c5c6:	f7ff fe93 	bl	800c2f0 <etharp_output_to_arp_index>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	e018      	b.n	800c600 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c5ce:	7dfb      	ldrb	r3, [r7, #23]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	75fb      	strb	r3, [r7, #23]
 800c5d4:	7dfb      	ldrb	r3, [r7, #23]
 800c5d6:	2b09      	cmp	r3, #9
 800c5d8:	d9ca      	bls.n	800c570 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c5da:	68ba      	ldr	r2, [r7, #8]
 800c5dc:	69b9      	ldr	r1, [r7, #24]
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	f000 f822 	bl	800c628 <etharp_query>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	e00b      	b.n	800c600 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c5ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c5f2:	9300      	str	r3, [sp, #0]
 800c5f4:	69fb      	ldr	r3, [r7, #28]
 800c5f6:	68b9      	ldr	r1, [r7, #8]
 800c5f8:	68f8      	ldr	r0, [r7, #12]
 800c5fa:	f001 fd3f 	bl	800e07c <ethernet_output>
 800c5fe:	4603      	mov	r3, r0
}
 800c600:	4618      	mov	r0, r3
 800c602:	3720      	adds	r7, #32
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}
 800c608:	080118d4 	.word	0x080118d4
 800c60c:	08011a24 	.word	0x08011a24
 800c610:	0801194c 	.word	0x0801194c
 800c614:	08011a74 	.word	0x08011a74
 800c618:	08011a14 	.word	0x08011a14
 800c61c:	08012084 	.word	0x08012084
 800c620:	20000200 	.word	0x20000200
 800c624:	20000110 	.word	0x20000110

0800c628 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b08c      	sub	sp, #48	; 0x30
 800c62c:	af02      	add	r7, sp, #8
 800c62e:	60f8      	str	r0, [r7, #12]
 800c630:	60b9      	str	r1, [r7, #8]
 800c632:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	3326      	adds	r3, #38	; 0x26
 800c638:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c63a:	23ff      	movs	r3, #255	; 0xff
 800c63c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c640:	2300      	movs	r3, #0
 800c642:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68f9      	ldr	r1, [r7, #12]
 800c64a:	4618      	mov	r0, r3
 800c64c:	f000 fe0e 	bl	800d26c <ip4_addr_isbroadcast_u32>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10c      	bne.n	800c670 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c65e:	2be0      	cmp	r3, #224	; 0xe0
 800c660:	d006      	beq.n	800c670 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d003      	beq.n	800c670 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d102      	bne.n	800c676 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c670:	f06f 030f 	mvn.w	r3, #15
 800c674:	e101      	b.n	800c87a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	2101      	movs	r1, #1
 800c67a:	68b8      	ldr	r0, [r7, #8]
 800c67c:	f7ff fb60 	bl	800bd40 <etharp_find_entry>
 800c680:	4603      	mov	r3, r0
 800c682:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c684:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	da02      	bge.n	800c692 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c68c:	8a7b      	ldrh	r3, [r7, #18]
 800c68e:	b25b      	sxtb	r3, r3
 800c690:	e0f3      	b.n	800c87a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c692:	8a7b      	ldrh	r3, [r7, #18]
 800c694:	2b7e      	cmp	r3, #126	; 0x7e
 800c696:	d906      	bls.n	800c6a6 <etharp_query+0x7e>
 800c698:	4b7a      	ldr	r3, [pc, #488]	; (800c884 <etharp_query+0x25c>)
 800c69a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800c69e:	497a      	ldr	r1, [pc, #488]	; (800c888 <etharp_query+0x260>)
 800c6a0:	487a      	ldr	r0, [pc, #488]	; (800c88c <etharp_query+0x264>)
 800c6a2:	f001 fd95 	bl	800e1d0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c6a6:	8a7b      	ldrh	r3, [r7, #18]
 800c6a8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c6aa:	7c7a      	ldrb	r2, [r7, #17]
 800c6ac:	4978      	ldr	r1, [pc, #480]	; (800c890 <etharp_query+0x268>)
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	005b      	lsls	r3, r3, #1
 800c6b2:	4413      	add	r3, r2
 800c6b4:	00db      	lsls	r3, r3, #3
 800c6b6:	440b      	add	r3, r1
 800c6b8:	3314      	adds	r3, #20
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d115      	bne.n	800c6ec <etharp_query+0xc4>
    is_new_entry = 1;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c6c4:	7c7a      	ldrb	r2, [r7, #17]
 800c6c6:	4972      	ldr	r1, [pc, #456]	; (800c890 <etharp_query+0x268>)
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	005b      	lsls	r3, r3, #1
 800c6cc:	4413      	add	r3, r2
 800c6ce:	00db      	lsls	r3, r3, #3
 800c6d0:	440b      	add	r3, r1
 800c6d2:	3314      	adds	r3, #20
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c6d8:	7c7a      	ldrb	r2, [r7, #17]
 800c6da:	496d      	ldr	r1, [pc, #436]	; (800c890 <etharp_query+0x268>)
 800c6dc:	4613      	mov	r3, r2
 800c6de:	005b      	lsls	r3, r3, #1
 800c6e0:	4413      	add	r3, r2
 800c6e2:	00db      	lsls	r3, r3, #3
 800c6e4:	440b      	add	r3, r1
 800c6e6:	3308      	adds	r3, #8
 800c6e8:	68fa      	ldr	r2, [r7, #12]
 800c6ea:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c6ec:	7c7a      	ldrb	r2, [r7, #17]
 800c6ee:	4968      	ldr	r1, [pc, #416]	; (800c890 <etharp_query+0x268>)
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	005b      	lsls	r3, r3, #1
 800c6f4:	4413      	add	r3, r2
 800c6f6:	00db      	lsls	r3, r3, #3
 800c6f8:	440b      	add	r3, r1
 800c6fa:	3314      	adds	r3, #20
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d011      	beq.n	800c726 <etharp_query+0xfe>
 800c702:	7c7a      	ldrb	r2, [r7, #17]
 800c704:	4962      	ldr	r1, [pc, #392]	; (800c890 <etharp_query+0x268>)
 800c706:	4613      	mov	r3, r2
 800c708:	005b      	lsls	r3, r3, #1
 800c70a:	4413      	add	r3, r2
 800c70c:	00db      	lsls	r3, r3, #3
 800c70e:	440b      	add	r3, r1
 800c710:	3314      	adds	r3, #20
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	2b01      	cmp	r3, #1
 800c716:	d806      	bhi.n	800c726 <etharp_query+0xfe>
 800c718:	4b5a      	ldr	r3, [pc, #360]	; (800c884 <etharp_query+0x25c>)
 800c71a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c71e:	495d      	ldr	r1, [pc, #372]	; (800c894 <etharp_query+0x26c>)
 800c720:	485a      	ldr	r0, [pc, #360]	; (800c88c <etharp_query+0x264>)
 800c722:	f001 fd55 	bl	800e1d0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c726:	6a3b      	ldr	r3, [r7, #32]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d102      	bne.n	800c732 <etharp_query+0x10a>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d10c      	bne.n	800c74c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c732:	68b9      	ldr	r1, [r7, #8]
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	f000 f963 	bl	800ca00 <etharp_request>
 800c73a:	4603      	mov	r3, r0
 800c73c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d102      	bne.n	800c74c <etharp_query+0x124>
      return result;
 800c746:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c74a:	e096      	b.n	800c87a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d106      	bne.n	800c760 <etharp_query+0x138>
 800c752:	4b4c      	ldr	r3, [pc, #304]	; (800c884 <etharp_query+0x25c>)
 800c754:	f240 32e1 	movw	r2, #993	; 0x3e1
 800c758:	494f      	ldr	r1, [pc, #316]	; (800c898 <etharp_query+0x270>)
 800c75a:	484c      	ldr	r0, [pc, #304]	; (800c88c <etharp_query+0x264>)
 800c75c:	f001 fd38 	bl	800e1d0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c760:	7c7a      	ldrb	r2, [r7, #17]
 800c762:	494b      	ldr	r1, [pc, #300]	; (800c890 <etharp_query+0x268>)
 800c764:	4613      	mov	r3, r2
 800c766:	005b      	lsls	r3, r3, #1
 800c768:	4413      	add	r3, r2
 800c76a:	00db      	lsls	r3, r3, #3
 800c76c:	440b      	add	r3, r1
 800c76e:	3314      	adds	r3, #20
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	2b01      	cmp	r3, #1
 800c774:	d917      	bls.n	800c7a6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c776:	4a49      	ldr	r2, [pc, #292]	; (800c89c <etharp_query+0x274>)
 800c778:	7c7b      	ldrb	r3, [r7, #17]
 800c77a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c77c:	7c7a      	ldrb	r2, [r7, #17]
 800c77e:	4613      	mov	r3, r2
 800c780:	005b      	lsls	r3, r3, #1
 800c782:	4413      	add	r3, r2
 800c784:	00db      	lsls	r3, r3, #3
 800c786:	3308      	adds	r3, #8
 800c788:	4a41      	ldr	r2, [pc, #260]	; (800c890 <etharp_query+0x268>)
 800c78a:	4413      	add	r3, r2
 800c78c:	3304      	adds	r3, #4
 800c78e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c792:	9200      	str	r2, [sp, #0]
 800c794:	697a      	ldr	r2, [r7, #20]
 800c796:	6879      	ldr	r1, [r7, #4]
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f001 fc6f 	bl	800e07c <ethernet_output>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c7a4:	e067      	b.n	800c876 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c7a6:	7c7a      	ldrb	r2, [r7, #17]
 800c7a8:	4939      	ldr	r1, [pc, #228]	; (800c890 <etharp_query+0x268>)
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	005b      	lsls	r3, r3, #1
 800c7ae:	4413      	add	r3, r2
 800c7b0:	00db      	lsls	r3, r3, #3
 800c7b2:	440b      	add	r3, r1
 800c7b4:	3314      	adds	r3, #20
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d15c      	bne.n	800c876 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c7c4:	e01c      	b.n	800c800 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	895a      	ldrh	r2, [r3, #10]
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	891b      	ldrh	r3, [r3, #8]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d10a      	bne.n	800c7e8 <etharp_query+0x1c0>
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d006      	beq.n	800c7e8 <etharp_query+0x1c0>
 800c7da:	4b2a      	ldr	r3, [pc, #168]	; (800c884 <etharp_query+0x25c>)
 800c7dc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800c7e0:	492f      	ldr	r1, [pc, #188]	; (800c8a0 <etharp_query+0x278>)
 800c7e2:	482a      	ldr	r0, [pc, #168]	; (800c88c <etharp_query+0x264>)
 800c7e4:	f001 fcf4 	bl	800e1d0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	7b1b      	ldrb	r3, [r3, #12]
 800c7ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d002      	beq.n	800c7fa <etharp_query+0x1d2>
        copy_needed = 1;
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	61bb      	str	r3, [r7, #24]
        break;
 800c7f8:	e005      	b.n	800c806 <etharp_query+0x1de>
      }
      p = p->next;
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d1df      	bne.n	800c7c6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800c806:	69bb      	ldr	r3, [r7, #24]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d007      	beq.n	800c81c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	f44f 7120 	mov.w	r1, #640	; 0x280
 800c812:	200e      	movs	r0, #14
 800c814:	f7f9 f9dc 	bl	8005bd0 <pbuf_clone>
 800c818:	61f8      	str	r0, [r7, #28]
 800c81a:	e004      	b.n	800c826 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c820:	69f8      	ldr	r0, [r7, #28]
 800c822:	f7f8 ff77 	bl	8005714 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c826:	69fb      	ldr	r3, [r7, #28]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d021      	beq.n	800c870 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c82c:	7c7a      	ldrb	r2, [r7, #17]
 800c82e:	4918      	ldr	r1, [pc, #96]	; (800c890 <etharp_query+0x268>)
 800c830:	4613      	mov	r3, r2
 800c832:	005b      	lsls	r3, r3, #1
 800c834:	4413      	add	r3, r2
 800c836:	00db      	lsls	r3, r3, #3
 800c838:	440b      	add	r3, r1
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d00a      	beq.n	800c856 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c840:	7c7a      	ldrb	r2, [r7, #17]
 800c842:	4913      	ldr	r1, [pc, #76]	; (800c890 <etharp_query+0x268>)
 800c844:	4613      	mov	r3, r2
 800c846:	005b      	lsls	r3, r3, #1
 800c848:	4413      	add	r3, r2
 800c84a:	00db      	lsls	r3, r3, #3
 800c84c:	440b      	add	r3, r1
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4618      	mov	r0, r3
 800c852:	f7f8 febf 	bl	80055d4 <pbuf_free>
      }
      arp_table[i].q = p;
 800c856:	7c7a      	ldrb	r2, [r7, #17]
 800c858:	490d      	ldr	r1, [pc, #52]	; (800c890 <etharp_query+0x268>)
 800c85a:	4613      	mov	r3, r2
 800c85c:	005b      	lsls	r3, r3, #1
 800c85e:	4413      	add	r3, r2
 800c860:	00db      	lsls	r3, r3, #3
 800c862:	440b      	add	r3, r1
 800c864:	69fa      	ldr	r2, [r7, #28]
 800c866:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c868:	2300      	movs	r3, #0
 800c86a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c86e:	e002      	b.n	800c876 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c870:	23ff      	movs	r3, #255	; 0xff
 800c872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c876:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3728      	adds	r7, #40	; 0x28
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	080118d4 	.word	0x080118d4
 800c888:	08011a80 	.word	0x08011a80
 800c88c:	0801194c 	.word	0x0801194c
 800c890:	20000110 	.word	0x20000110
 800c894:	08011a90 	.word	0x08011a90
 800c898:	08011a74 	.word	0x08011a74
 800c89c:	20000200 	.word	0x20000200
 800c8a0:	08011ab8 	.word	0x08011ab8

0800c8a4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b08a      	sub	sp, #40	; 0x28
 800c8a8:	af02      	add	r7, sp, #8
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]
 800c8b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d106      	bne.n	800c8ca <etharp_raw+0x26>
 800c8bc:	4b3a      	ldr	r3, [pc, #232]	; (800c9a8 <etharp_raw+0x104>)
 800c8be:	f240 4257 	movw	r2, #1111	; 0x457
 800c8c2:	493a      	ldr	r1, [pc, #232]	; (800c9ac <etharp_raw+0x108>)
 800c8c4:	483a      	ldr	r0, [pc, #232]	; (800c9b0 <etharp_raw+0x10c>)
 800c8c6:	f001 fc83 	bl	800e1d0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c8ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c8ce:	211c      	movs	r1, #28
 800c8d0:	200e      	movs	r0, #14
 800c8d2:	f7f8 fb9b 	bl	800500c <pbuf_alloc>
 800c8d6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c8d8:	69bb      	ldr	r3, [r7, #24]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d102      	bne.n	800c8e4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c8de:	f04f 33ff 	mov.w	r3, #4294967295
 800c8e2:	e05d      	b.n	800c9a0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c8e4:	69bb      	ldr	r3, [r7, #24]
 800c8e6:	895b      	ldrh	r3, [r3, #10]
 800c8e8:	2b1b      	cmp	r3, #27
 800c8ea:	d806      	bhi.n	800c8fa <etharp_raw+0x56>
 800c8ec:	4b2e      	ldr	r3, [pc, #184]	; (800c9a8 <etharp_raw+0x104>)
 800c8ee:	f240 4262 	movw	r2, #1122	; 0x462
 800c8f2:	4930      	ldr	r1, [pc, #192]	; (800c9b4 <etharp_raw+0x110>)
 800c8f4:	482e      	ldr	r0, [pc, #184]	; (800c9b0 <etharp_raw+0x10c>)
 800c8f6:	f001 fc6b 	bl	800e1d0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c8fa:	69bb      	ldr	r3, [r7, #24]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c900:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c902:	4618      	mov	r0, r3
 800c904:	f7f7 fbb2 	bl	800406c <lwip_htons>
 800c908:	4603      	mov	r3, r0
 800c90a:	461a      	mov	r2, r3
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c916:	2b06      	cmp	r3, #6
 800c918:	d006      	beq.n	800c928 <etharp_raw+0x84>
 800c91a:	4b23      	ldr	r3, [pc, #140]	; (800c9a8 <etharp_raw+0x104>)
 800c91c:	f240 4269 	movw	r2, #1129	; 0x469
 800c920:	4925      	ldr	r1, [pc, #148]	; (800c9b8 <etharp_raw+0x114>)
 800c922:	4823      	ldr	r0, [pc, #140]	; (800c9b0 <etharp_raw+0x10c>)
 800c924:	f001 fc54 	bl	800e1d0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	3308      	adds	r3, #8
 800c92c:	2206      	movs	r2, #6
 800c92e:	6839      	ldr	r1, [r7, #0]
 800c930:	4618      	mov	r0, r3
 800c932:	f001 fc1d 	bl	800e170 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	3312      	adds	r3, #18
 800c93a:	2206      	movs	r2, #6
 800c93c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c93e:	4618      	mov	r0, r3
 800c940:	f001 fc16 	bl	800e170 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	330e      	adds	r3, #14
 800c948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c94a:	6812      	ldr	r2, [r2, #0]
 800c94c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	3318      	adds	r3, #24
 800c952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c954:	6812      	ldr	r2, [r2, #0]
 800c956:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	2200      	movs	r2, #0
 800c95c:	701a      	strb	r2, [r3, #0]
 800c95e:	2200      	movs	r2, #0
 800c960:	f042 0201 	orr.w	r2, r2, #1
 800c964:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	2200      	movs	r2, #0
 800c96a:	f042 0208 	orr.w	r2, r2, #8
 800c96e:	709a      	strb	r2, [r3, #2]
 800c970:	2200      	movs	r2, #0
 800c972:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	2206      	movs	r2, #6
 800c978:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	2204      	movs	r2, #4
 800c97e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c980:	f640 0306 	movw	r3, #2054	; 0x806
 800c984:	9300      	str	r3, [sp, #0]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	68ba      	ldr	r2, [r7, #8]
 800c98a:	69b9      	ldr	r1, [r7, #24]
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f001 fb75 	bl	800e07c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c992:	69b8      	ldr	r0, [r7, #24]
 800c994:	f7f8 fe1e 	bl	80055d4 <pbuf_free>
  p = NULL;
 800c998:	2300      	movs	r3, #0
 800c99a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c99c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3720      	adds	r7, #32
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	080118d4 	.word	0x080118d4
 800c9ac:	08011a24 	.word	0x08011a24
 800c9b0:	0801194c 	.word	0x0801194c
 800c9b4:	08011ad4 	.word	0x08011ad4
 800c9b8:	08011b08 	.word	0x08011b08

0800c9bc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b088      	sub	sp, #32
 800c9c0:	af04      	add	r7, sp, #16
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c9d8:	2201      	movs	r2, #1
 800c9da:	9203      	str	r2, [sp, #12]
 800c9dc:	68ba      	ldr	r2, [r7, #8]
 800c9de:	9202      	str	r2, [sp, #8]
 800c9e0:	4a06      	ldr	r2, [pc, #24]	; (800c9fc <etharp_request_dst+0x40>)
 800c9e2:	9201      	str	r2, [sp, #4]
 800c9e4:	9300      	str	r3, [sp, #0]
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	687a      	ldr	r2, [r7, #4]
 800c9ea:	68f8      	ldr	r0, [r7, #12]
 800c9ec:	f7ff ff5a 	bl	800c8a4 <etharp_raw>
 800c9f0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3710      	adds	r7, #16
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	0801208c 	.word	0x0801208c

0800ca00 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ca0a:	4a05      	ldr	r2, [pc, #20]	; (800ca20 <etharp_request+0x20>)
 800ca0c:	6839      	ldr	r1, [r7, #0]
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f7ff ffd4 	bl	800c9bc <etharp_request_dst>
 800ca14:	4603      	mov	r3, r0
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3708      	adds	r7, #8
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	08012084 	.word	0x08012084

0800ca24 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b08e      	sub	sp, #56	; 0x38
 800ca28:	af04      	add	r7, sp, #16
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ca2e:	4b79      	ldr	r3, [pc, #484]	; (800cc14 <icmp_input+0x1f0>)
 800ca30:	689b      	ldr	r3, [r3, #8]
 800ca32:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ca34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	f003 030f 	and.w	r3, r3, #15
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ca44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca46:	2b13      	cmp	r3, #19
 800ca48:	f240 80cd 	bls.w	800cbe6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	895b      	ldrh	r3, [r3, #10]
 800ca50:	2b03      	cmp	r3, #3
 800ca52:	f240 80ca 	bls.w	800cbea <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	685b      	ldr	r3, [r3, #4]
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ca60:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	f000 80b7 	beq.w	800cbd8 <icmp_input+0x1b4>
 800ca6a:	2b08      	cmp	r3, #8
 800ca6c:	f040 80b7 	bne.w	800cbde <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ca70:	4b69      	ldr	r3, [pc, #420]	; (800cc18 <icmp_input+0x1f4>)
 800ca72:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ca74:	4b67      	ldr	r3, [pc, #412]	; (800cc14 <icmp_input+0x1f0>)
 800ca76:	695b      	ldr	r3, [r3, #20]
 800ca78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca7c:	2be0      	cmp	r3, #224	; 0xe0
 800ca7e:	f000 80bb 	beq.w	800cbf8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ca82:	4b64      	ldr	r3, [pc, #400]	; (800cc14 <icmp_input+0x1f0>)
 800ca84:	695b      	ldr	r3, [r3, #20]
 800ca86:	4a63      	ldr	r2, [pc, #396]	; (800cc14 <icmp_input+0x1f0>)
 800ca88:	6812      	ldr	r2, [r2, #0]
 800ca8a:	4611      	mov	r1, r2
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f000 fbed 	bl	800d26c <ip4_addr_isbroadcast_u32>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	f040 80b1 	bne.w	800cbfc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	891b      	ldrh	r3, [r3, #8]
 800ca9e:	2b07      	cmp	r3, #7
 800caa0:	f240 80a5 	bls.w	800cbee <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800caa4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800caa6:	330e      	adds	r3, #14
 800caa8:	4619      	mov	r1, r3
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f7f8 fcfc 	bl	80054a8 <pbuf_add_header>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d04b      	beq.n	800cb4e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	891a      	ldrh	r2, [r3, #8]
 800caba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cabc:	4413      	add	r3, r2
 800cabe:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	891b      	ldrh	r3, [r3, #8]
 800cac4:	8b7a      	ldrh	r2, [r7, #26]
 800cac6:	429a      	cmp	r2, r3
 800cac8:	f0c0 809a 	bcc.w	800cc00 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800cacc:	8b7b      	ldrh	r3, [r7, #26]
 800cace:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cad2:	4619      	mov	r1, r3
 800cad4:	200e      	movs	r0, #14
 800cad6:	f7f8 fa99 	bl	800500c <pbuf_alloc>
 800cada:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	f000 8090 	beq.w	800cc04 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	895b      	ldrh	r3, [r3, #10]
 800cae8:	461a      	mov	r2, r3
 800caea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800caec:	3308      	adds	r3, #8
 800caee:	429a      	cmp	r2, r3
 800caf0:	d203      	bcs.n	800cafa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800caf2:	6978      	ldr	r0, [r7, #20]
 800caf4:	f7f8 fd6e 	bl	80055d4 <pbuf_free>
          goto icmperr;
 800caf8:	e085      	b.n	800cc06 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cb00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb02:	4618      	mov	r0, r3
 800cb04:	f001 fb34 	bl	800e170 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800cb08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	6978      	ldr	r0, [r7, #20]
 800cb0e:	f7f8 fcdb 	bl	80054c8 <pbuf_remove_header>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d009      	beq.n	800cb2c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cb18:	4b40      	ldr	r3, [pc, #256]	; (800cc1c <icmp_input+0x1f8>)
 800cb1a:	22b6      	movs	r2, #182	; 0xb6
 800cb1c:	4940      	ldr	r1, [pc, #256]	; (800cc20 <icmp_input+0x1fc>)
 800cb1e:	4841      	ldr	r0, [pc, #260]	; (800cc24 <icmp_input+0x200>)
 800cb20:	f001 fb56 	bl	800e1d0 <iprintf>
          pbuf_free(r);
 800cb24:	6978      	ldr	r0, [r7, #20]
 800cb26:	f7f8 fd55 	bl	80055d4 <pbuf_free>
          goto icmperr;
 800cb2a:	e06c      	b.n	800cc06 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800cb2c:	6879      	ldr	r1, [r7, #4]
 800cb2e:	6978      	ldr	r0, [r7, #20]
 800cb30:	f7f8 fe78 	bl	8005824 <pbuf_copy>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d003      	beq.n	800cb42 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800cb3a:	6978      	ldr	r0, [r7, #20]
 800cb3c:	f7f8 fd4a 	bl	80055d4 <pbuf_free>
          goto icmperr;
 800cb40:	e061      	b.n	800cc06 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f7f8 fd46 	bl	80055d4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	607b      	str	r3, [r7, #4]
 800cb4c:	e00f      	b.n	800cb6e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cb4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb50:	330e      	adds	r3, #14
 800cb52:	4619      	mov	r1, r3
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f7f8 fcb7 	bl	80054c8 <pbuf_remove_header>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d006      	beq.n	800cb6e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cb60:	4b2e      	ldr	r3, [pc, #184]	; (800cc1c <icmp_input+0x1f8>)
 800cb62:	22c7      	movs	r2, #199	; 0xc7
 800cb64:	4930      	ldr	r1, [pc, #192]	; (800cc28 <icmp_input+0x204>)
 800cb66:	482f      	ldr	r0, [pc, #188]	; (800cc24 <icmp_input+0x200>)
 800cb68:	f001 fb32 	bl	800e1d0 <iprintf>
          goto icmperr;
 800cb6c:	e04b      	b.n	800cc06 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800cb74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb76:	4619      	mov	r1, r3
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7f8 fc95 	bl	80054a8 <pbuf_add_header>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d12b      	bne.n	800cbdc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cb92:	4b20      	ldr	r3, [pc, #128]	; (800cc14 <icmp_input+0x1f0>)
 800cb94:	691a      	ldr	r2, [r3, #16]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	2200      	movs	r2, #0
 800cba4:	709a      	strb	r2, [r3, #2]
 800cba6:	2200      	movs	r2, #0
 800cba8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	22ff      	movs	r2, #255	; 0xff
 800cbae:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	729a      	strb	r2, [r3, #10]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	9302      	str	r3, [sp, #8]
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	9301      	str	r3, [sp, #4]
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	9300      	str	r3, [sp, #0]
 800cbc6:	23ff      	movs	r3, #255	; 0xff
 800cbc8:	2200      	movs	r2, #0
 800cbca:	69f9      	ldr	r1, [r7, #28]
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 fa75 	bl	800d0bc <ip4_output_if>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800cbd6:	e001      	b.n	800cbdc <icmp_input+0x1b8>
      break;
 800cbd8:	bf00      	nop
 800cbda:	e000      	b.n	800cbde <icmp_input+0x1ba>
      break;
 800cbdc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f7f8 fcf8 	bl	80055d4 <pbuf_free>
  return;
 800cbe4:	e013      	b.n	800cc0e <icmp_input+0x1ea>
    goto lenerr;
 800cbe6:	bf00      	nop
 800cbe8:	e002      	b.n	800cbf0 <icmp_input+0x1cc>
    goto lenerr;
 800cbea:	bf00      	nop
 800cbec:	e000      	b.n	800cbf0 <icmp_input+0x1cc>
        goto lenerr;
 800cbee:	bf00      	nop
lenerr:
  pbuf_free(p);
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f7f8 fcef 	bl	80055d4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cbf6:	e00a      	b.n	800cc0e <icmp_input+0x1ea>
        goto icmperr;
 800cbf8:	bf00      	nop
 800cbfa:	e004      	b.n	800cc06 <icmp_input+0x1e2>
        goto icmperr;
 800cbfc:	bf00      	nop
 800cbfe:	e002      	b.n	800cc06 <icmp_input+0x1e2>
          goto icmperr;
 800cc00:	bf00      	nop
 800cc02:	e000      	b.n	800cc06 <icmp_input+0x1e2>
          goto icmperr;
 800cc04:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f7f8 fce4 	bl	80055d4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cc0c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800cc0e:	3728      	adds	r7, #40	; 0x28
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}
 800cc14:	2000344c 	.word	0x2000344c
 800cc18:	20003460 	.word	0x20003460
 800cc1c:	08011b4c 	.word	0x08011b4c
 800cc20:	08011b84 	.word	0x08011b84
 800cc24:	08011bbc 	.word	0x08011bbc
 800cc28:	08011be4 	.word	0x08011be4

0800cc2c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	460b      	mov	r3, r1
 800cc36:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800cc38:	78fb      	ldrb	r3, [r7, #3]
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	2103      	movs	r1, #3
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 f814 	bl	800cc6c <icmp_send_response>
}
 800cc44:	bf00      	nop
 800cc46:	3708      	adds	r7, #8
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	460b      	mov	r3, r1
 800cc56:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800cc58:	78fb      	ldrb	r3, [r7, #3]
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	210b      	movs	r1, #11
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f000 f804 	bl	800cc6c <icmp_send_response>
}
 800cc64:	bf00      	nop
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b08c      	sub	sp, #48	; 0x30
 800cc70:	af04      	add	r7, sp, #16
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	460b      	mov	r3, r1
 800cc76:	70fb      	strb	r3, [r7, #3]
 800cc78:	4613      	mov	r3, r2
 800cc7a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cc7c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc80:	2124      	movs	r1, #36	; 0x24
 800cc82:	2022      	movs	r0, #34	; 0x22
 800cc84:	f7f8 f9c2 	bl	800500c <pbuf_alloc>
 800cc88:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d04c      	beq.n	800cd2a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cc90:	69fb      	ldr	r3, [r7, #28]
 800cc92:	895b      	ldrh	r3, [r3, #10]
 800cc94:	2b23      	cmp	r3, #35	; 0x23
 800cc96:	d806      	bhi.n	800cca6 <icmp_send_response+0x3a>
 800cc98:	4b26      	ldr	r3, [pc, #152]	; (800cd34 <icmp_send_response+0xc8>)
 800cc9a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800cc9e:	4926      	ldr	r1, [pc, #152]	; (800cd38 <icmp_send_response+0xcc>)
 800cca0:	4826      	ldr	r0, [pc, #152]	; (800cd3c <icmp_send_response+0xd0>)
 800cca2:	f001 fa95 	bl	800e1d0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	78fa      	ldrb	r2, [r7, #3]
 800ccb6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	78ba      	ldrb	r2, [r7, #2]
 800ccbc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	711a      	strb	r2, [r3, #4]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	2200      	movs	r2, #0
 800cccc:	719a      	strb	r2, [r3, #6]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ccd2:	69fb      	ldr	r3, [r7, #28]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	f103 0008 	add.w	r0, r3, #8
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	221c      	movs	r2, #28
 800cce0:	4619      	mov	r1, r3
 800cce2:	f001 fa45 	bl	800e170 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cce6:	69bb      	ldr	r3, [r7, #24]
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ccec:	f107 030c 	add.w	r3, r7, #12
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f000 f825 	bl	800cd40 <ip4_route>
 800ccf6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d011      	beq.n	800cd22 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	2200      	movs	r2, #0
 800cd02:	709a      	strb	r2, [r3, #2]
 800cd04:	2200      	movs	r2, #0
 800cd06:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cd08:	f107 020c 	add.w	r2, r7, #12
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	9302      	str	r3, [sp, #8]
 800cd10:	2301      	movs	r3, #1
 800cd12:	9301      	str	r3, [sp, #4]
 800cd14:	2300      	movs	r3, #0
 800cd16:	9300      	str	r3, [sp, #0]
 800cd18:	23ff      	movs	r3, #255	; 0xff
 800cd1a:	2100      	movs	r1, #0
 800cd1c:	69f8      	ldr	r0, [r7, #28]
 800cd1e:	f000 f9cd 	bl	800d0bc <ip4_output_if>
  }
  pbuf_free(q);
 800cd22:	69f8      	ldr	r0, [r7, #28]
 800cd24:	f7f8 fc56 	bl	80055d4 <pbuf_free>
 800cd28:	e000      	b.n	800cd2c <icmp_send_response+0xc0>
    return;
 800cd2a:	bf00      	nop
}
 800cd2c:	3720      	adds	r7, #32
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	08011b4c 	.word	0x08011b4c
 800cd38:	08011c18 	.word	0x08011c18
 800cd3c:	08011bbc 	.word	0x08011bbc

0800cd40 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b085      	sub	sp, #20
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800cd48:	4b33      	ldr	r3, [pc, #204]	; (800ce18 <ip4_route+0xd8>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	60fb      	str	r3, [r7, #12]
 800cd4e:	e036      	b.n	800cdbe <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd56:	f003 0301 	and.w	r3, r3, #1
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d02b      	beq.n	800cdb8 <ip4_route+0x78>
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd66:	089b      	lsrs	r3, r3, #2
 800cd68:	f003 0301 	and.w	r3, r3, #1
 800cd6c:	b2db      	uxtb	r3, r3
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d022      	beq.n	800cdb8 <ip4_route+0x78>
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	3304      	adds	r3, #4
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d01d      	beq.n	800cdb8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	3304      	adds	r3, #4
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	405a      	eors	r2, r3
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	3308      	adds	r3, #8
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4013      	ands	r3, r2
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d101      	bne.n	800cd98 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	e038      	b.n	800ce0a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd9e:	f003 0302 	and.w	r3, r3, #2
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d108      	bne.n	800cdb8 <ip4_route+0x78>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	330c      	adds	r3, #12
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d101      	bne.n	800cdb8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	e028      	b.n	800ce0a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	60fb      	str	r3, [r7, #12]
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d1c5      	bne.n	800cd50 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cdc4:	4b15      	ldr	r3, [pc, #84]	; (800ce1c <ip4_route+0xdc>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d01a      	beq.n	800ce02 <ip4_route+0xc2>
 800cdcc:	4b13      	ldr	r3, [pc, #76]	; (800ce1c <ip4_route+0xdc>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cdd4:	f003 0301 	and.w	r3, r3, #1
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d012      	beq.n	800ce02 <ip4_route+0xc2>
 800cddc:	4b0f      	ldr	r3, [pc, #60]	; (800ce1c <ip4_route+0xdc>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cde4:	f003 0304 	and.w	r3, r3, #4
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d00a      	beq.n	800ce02 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cdec:	4b0b      	ldr	r3, [pc, #44]	; (800ce1c <ip4_route+0xdc>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	3304      	adds	r3, #4
 800cdf2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d004      	beq.n	800ce02 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	b2db      	uxtb	r3, r3
 800cdfe:	2b7f      	cmp	r3, #127	; 0x7f
 800ce00:	d101      	bne.n	800ce06 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ce02:	2300      	movs	r3, #0
 800ce04:	e001      	b.n	800ce0a <ip4_route+0xca>
  }

  return netif_default;
 800ce06:	4b05      	ldr	r3, [pc, #20]	; (800ce1c <ip4_route+0xdc>)
 800ce08:	681b      	ldr	r3, [r3, #0]
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3714      	adds	r7, #20
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	20008b40 	.word	0x20008b40
 800ce1c:	20008b44 	.word	0x20008b44

0800ce20 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce2e:	f003 0301 	and.w	r3, r3, #1
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d016      	beq.n	800ce66 <ip4_input_accept+0x46>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	3304      	adds	r3, #4
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d011      	beq.n	800ce66 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ce42:	4b0b      	ldr	r3, [pc, #44]	; (800ce70 <ip4_input_accept+0x50>)
 800ce44:	695a      	ldr	r2, [r3, #20]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	3304      	adds	r3, #4
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d008      	beq.n	800ce62 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ce50:	4b07      	ldr	r3, [pc, #28]	; (800ce70 <ip4_input_accept+0x50>)
 800ce52:	695b      	ldr	r3, [r3, #20]
 800ce54:	6879      	ldr	r1, [r7, #4]
 800ce56:	4618      	mov	r0, r3
 800ce58:	f000 fa08 	bl	800d26c <ip4_addr_isbroadcast_u32>
 800ce5c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d001      	beq.n	800ce66 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800ce62:	2301      	movs	r3, #1
 800ce64:	e000      	b.n	800ce68 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ce66:	2300      	movs	r3, #0
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3708      	adds	r7, #8
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	2000344c 	.word	0x2000344c

0800ce74 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b086      	sub	sp, #24
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	091b      	lsrs	r3, r3, #4
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	2b04      	cmp	r3, #4
 800ce8e:	d004      	beq.n	800ce9a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f7f8 fb9f 	bl	80055d4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ce96:	2300      	movs	r3, #0
 800ce98:	e107      	b.n	800d0aa <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	f003 030f 	and.w	r3, r3, #15
 800cea2:	b2db      	uxtb	r3, r3
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	885b      	ldrh	r3, [r3, #2]
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7f7 f8db 	bl	800406c <lwip_htons>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	891b      	ldrh	r3, [r3, #8]
 800cebe:	89ba      	ldrh	r2, [r7, #12]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d204      	bcs.n	800cece <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800cec4:	89bb      	ldrh	r3, [r7, #12]
 800cec6:	4619      	mov	r1, r3
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f7f8 f9fd 	bl	80052c8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	895b      	ldrh	r3, [r3, #10]
 800ced2:	89fa      	ldrh	r2, [r7, #14]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d807      	bhi.n	800cee8 <ip4_input+0x74>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	891b      	ldrh	r3, [r3, #8]
 800cedc:	89ba      	ldrh	r2, [r7, #12]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d802      	bhi.n	800cee8 <ip4_input+0x74>
 800cee2:	89fb      	ldrh	r3, [r7, #14]
 800cee4:	2b13      	cmp	r3, #19
 800cee6:	d804      	bhi.n	800cef2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7f8 fb73 	bl	80055d4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ceee:	2300      	movs	r3, #0
 800cef0:	e0db      	b.n	800d0aa <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	691b      	ldr	r3, [r3, #16]
 800cef6:	4a6f      	ldr	r2, [pc, #444]	; (800d0b4 <ip4_input+0x240>)
 800cef8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	4a6d      	ldr	r2, [pc, #436]	; (800d0b4 <ip4_input+0x240>)
 800cf00:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cf02:	4b6c      	ldr	r3, [pc, #432]	; (800d0b4 <ip4_input+0x240>)
 800cf04:	695b      	ldr	r3, [r3, #20]
 800cf06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf0a:	2be0      	cmp	r3, #224	; 0xe0
 800cf0c:	d112      	bne.n	800cf34 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf14:	f003 0301 	and.w	r3, r3, #1
 800cf18:	b2db      	uxtb	r3, r3
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d007      	beq.n	800cf2e <ip4_input+0xba>
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	3304      	adds	r3, #4
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d002      	beq.n	800cf2e <ip4_input+0xba>
      netif = inp;
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	613b      	str	r3, [r7, #16]
 800cf2c:	e02a      	b.n	800cf84 <ip4_input+0x110>
    } else {
      netif = NULL;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	613b      	str	r3, [r7, #16]
 800cf32:	e027      	b.n	800cf84 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800cf34:	6838      	ldr	r0, [r7, #0]
 800cf36:	f7ff ff73 	bl	800ce20 <ip4_input_accept>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d002      	beq.n	800cf46 <ip4_input+0xd2>
      netif = inp;
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	613b      	str	r3, [r7, #16]
 800cf44:	e01e      	b.n	800cf84 <ip4_input+0x110>
    } else {
      netif = NULL;
 800cf46:	2300      	movs	r3, #0
 800cf48:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800cf4a:	4b5a      	ldr	r3, [pc, #360]	; (800d0b4 <ip4_input+0x240>)
 800cf4c:	695b      	ldr	r3, [r3, #20]
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	2b7f      	cmp	r3, #127	; 0x7f
 800cf52:	d017      	beq.n	800cf84 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800cf54:	4b58      	ldr	r3, [pc, #352]	; (800d0b8 <ip4_input+0x244>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	613b      	str	r3, [r7, #16]
 800cf5a:	e00e      	b.n	800cf7a <ip4_input+0x106>
          if (netif == inp) {
 800cf5c:	693a      	ldr	r2, [r7, #16]
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d006      	beq.n	800cf72 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800cf64:	6938      	ldr	r0, [r7, #16]
 800cf66:	f7ff ff5b 	bl	800ce20 <ip4_input_accept>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d108      	bne.n	800cf82 <ip4_input+0x10e>
 800cf70:	e000      	b.n	800cf74 <ip4_input+0x100>
            continue;
 800cf72:	bf00      	nop
        NETIF_FOREACH(netif) {
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	613b      	str	r3, [r7, #16]
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1ed      	bne.n	800cf5c <ip4_input+0xe8>
 800cf80:	e000      	b.n	800cf84 <ip4_input+0x110>
            break;
 800cf82:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cf84:	4b4b      	ldr	r3, [pc, #300]	; (800d0b4 <ip4_input+0x240>)
 800cf86:	691b      	ldr	r3, [r3, #16]
 800cf88:	6839      	ldr	r1, [r7, #0]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f000 f96e 	bl	800d26c <ip4_addr_isbroadcast_u32>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d105      	bne.n	800cfa2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800cf96:	4b47      	ldr	r3, [pc, #284]	; (800d0b4 <ip4_input+0x240>)
 800cf98:	691b      	ldr	r3, [r3, #16]
 800cf9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cf9e:	2be0      	cmp	r3, #224	; 0xe0
 800cfa0:	d104      	bne.n	800cfac <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f7f8 fb16 	bl	80055d4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	e07e      	b.n	800d0aa <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d104      	bne.n	800cfbc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f7f8 fb0e 	bl	80055d4 <pbuf_free>
    return ERR_OK;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	e076      	b.n	800d0aa <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	88db      	ldrh	r3, [r3, #6]
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800cfc8:	4013      	ands	r3, r2
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d00b      	beq.n	800cfe6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 fc92 	bl	800d8f8 <ip4_reass>
 800cfd4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d101      	bne.n	800cfe0 <ip4_input+0x16c>
      return ERR_OK;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	e064      	b.n	800d0aa <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800cfe6:	4a33      	ldr	r2, [pc, #204]	; (800d0b4 <ip4_input+0x240>)
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800cfec:	4a31      	ldr	r2, [pc, #196]	; (800d0b4 <ip4_input+0x240>)
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800cff2:	4a30      	ldr	r2, [pc, #192]	; (800d0b4 <ip4_input+0x240>)
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	f003 030f 	and.w	r3, r3, #15
 800d000:	b2db      	uxtb	r3, r3
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	b2db      	uxtb	r3, r3
 800d006:	b29a      	uxth	r2, r3
 800d008:	4b2a      	ldr	r3, [pc, #168]	; (800d0b4 <ip4_input+0x240>)
 800d00a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d00c:	89fb      	ldrh	r3, [r7, #14]
 800d00e:	4619      	mov	r1, r3
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f7f8 fa59 	bl	80054c8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	7a5b      	ldrb	r3, [r3, #9]
 800d01a:	2b11      	cmp	r3, #17
 800d01c:	d006      	beq.n	800d02c <ip4_input+0x1b8>
 800d01e:	2b11      	cmp	r3, #17
 800d020:	dc13      	bgt.n	800d04a <ip4_input+0x1d6>
 800d022:	2b01      	cmp	r3, #1
 800d024:	d00c      	beq.n	800d040 <ip4_input+0x1cc>
 800d026:	2b06      	cmp	r3, #6
 800d028:	d005      	beq.n	800d036 <ip4_input+0x1c2>
 800d02a:	e00e      	b.n	800d04a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d02c:	6839      	ldr	r1, [r7, #0]
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f7fe f950 	bl	800b2d4 <udp_input>
        break;
 800d034:	e026      	b.n	800d084 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d036:	6839      	ldr	r1, [r7, #0]
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f7fa f995 	bl	8007368 <tcp_input>
        break;
 800d03e:	e021      	b.n	800d084 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d040:	6839      	ldr	r1, [r7, #0]
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f7ff fcee 	bl	800ca24 <icmp_input>
        break;
 800d048:	e01c      	b.n	800d084 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d04a:	4b1a      	ldr	r3, [pc, #104]	; (800d0b4 <ip4_input+0x240>)
 800d04c:	695b      	ldr	r3, [r3, #20]
 800d04e:	6939      	ldr	r1, [r7, #16]
 800d050:	4618      	mov	r0, r3
 800d052:	f000 f90b 	bl	800d26c <ip4_addr_isbroadcast_u32>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d10f      	bne.n	800d07c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d05c:	4b15      	ldr	r3, [pc, #84]	; (800d0b4 <ip4_input+0x240>)
 800d05e:	695b      	ldr	r3, [r3, #20]
 800d060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d064:	2be0      	cmp	r3, #224	; 0xe0
 800d066:	d009      	beq.n	800d07c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d068:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d06c:	4619      	mov	r1, r3
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f7f8 fa9d 	bl	80055ae <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d074:	2102      	movs	r1, #2
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f7ff fdd8 	bl	800cc2c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f7f8 faa9 	bl	80055d4 <pbuf_free>
        break;
 800d082:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d084:	4b0b      	ldr	r3, [pc, #44]	; (800d0b4 <ip4_input+0x240>)
 800d086:	2200      	movs	r2, #0
 800d088:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d08a:	4b0a      	ldr	r3, [pc, #40]	; (800d0b4 <ip4_input+0x240>)
 800d08c:	2200      	movs	r2, #0
 800d08e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d090:	4b08      	ldr	r3, [pc, #32]	; (800d0b4 <ip4_input+0x240>)
 800d092:	2200      	movs	r2, #0
 800d094:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d096:	4b07      	ldr	r3, [pc, #28]	; (800d0b4 <ip4_input+0x240>)
 800d098:	2200      	movs	r2, #0
 800d09a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d09c:	4b05      	ldr	r3, [pc, #20]	; (800d0b4 <ip4_input+0x240>)
 800d09e:	2200      	movs	r2, #0
 800d0a0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d0a2:	4b04      	ldr	r3, [pc, #16]	; (800d0b4 <ip4_input+0x240>)
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d0a8:	2300      	movs	r3, #0
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3718      	adds	r7, #24
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	2000344c 	.word	0x2000344c
 800d0b8:	20008b40 	.word	0x20008b40

0800d0bc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b08a      	sub	sp, #40	; 0x28
 800d0c0:	af04      	add	r7, sp, #16
 800d0c2:	60f8      	str	r0, [r7, #12]
 800d0c4:	60b9      	str	r1, [r7, #8]
 800d0c6:	607a      	str	r2, [r7, #4]
 800d0c8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d009      	beq.n	800d0e8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d003      	beq.n	800d0e2 <ip4_output_if+0x26>
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d102      	bne.n	800d0e8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d0e8:	78fa      	ldrb	r2, [r7, #3]
 800d0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ec:	9302      	str	r3, [sp, #8]
 800d0ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d0f2:	9301      	str	r3, [sp, #4]
 800d0f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d0f8:	9300      	str	r3, [sp, #0]
 800d0fa:	4613      	mov	r3, r2
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	6979      	ldr	r1, [r7, #20]
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f000 f805 	bl	800d110 <ip4_output_if_src>
 800d106:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3718      	adds	r7, #24
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b088      	sub	sp, #32
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
 800d11c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	7b9b      	ldrb	r3, [r3, #14]
 800d122:	2b01      	cmp	r3, #1
 800d124:	d006      	beq.n	800d134 <ip4_output_if_src+0x24>
 800d126:	4b4b      	ldr	r3, [pc, #300]	; (800d254 <ip4_output_if_src+0x144>)
 800d128:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d12c:	494a      	ldr	r1, [pc, #296]	; (800d258 <ip4_output_if_src+0x148>)
 800d12e:	484b      	ldr	r0, [pc, #300]	; (800d25c <ip4_output_if_src+0x14c>)
 800d130:	f001 f84e 	bl	800e1d0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d060      	beq.n	800d1fc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d13a:	2314      	movs	r3, #20
 800d13c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d13e:	2114      	movs	r1, #20
 800d140:	68f8      	ldr	r0, [r7, #12]
 800d142:	f7f8 f9b1 	bl	80054a8 <pbuf_add_header>
 800d146:	4603      	mov	r3, r0
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d002      	beq.n	800d152 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d14c:	f06f 0301 	mvn.w	r3, #1
 800d150:	e07c      	b.n	800d24c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	895b      	ldrh	r3, [r3, #10]
 800d15c:	2b13      	cmp	r3, #19
 800d15e:	d806      	bhi.n	800d16e <ip4_output_if_src+0x5e>
 800d160:	4b3c      	ldr	r3, [pc, #240]	; (800d254 <ip4_output_if_src+0x144>)
 800d162:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d166:	493e      	ldr	r1, [pc, #248]	; (800d260 <ip4_output_if_src+0x150>)
 800d168:	483c      	ldr	r0, [pc, #240]	; (800d25c <ip4_output_if_src+0x14c>)
 800d16a:	f001 f831 	bl	800e1d0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	78fa      	ldrb	r2, [r7, #3]
 800d172:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d17a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	69fb      	ldr	r3, [r7, #28]
 800d182:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d184:	8b7b      	ldrh	r3, [r7, #26]
 800d186:	089b      	lsrs	r3, r3, #2
 800d188:	b29b      	uxth	r3, r3
 800d18a:	b2db      	uxtb	r3, r3
 800d18c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d190:	b2da      	uxtb	r2, r3
 800d192:	69fb      	ldr	r3, [r7, #28]
 800d194:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d19c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	891b      	ldrh	r3, [r3, #8]
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7f6 ff62 	bl	800406c <lwip_htons>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	719a      	strb	r2, [r3, #6]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d1ba:	4b2a      	ldr	r3, [pc, #168]	; (800d264 <ip4_output_if_src+0x154>)
 800d1bc:	881b      	ldrh	r3, [r3, #0]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7f6 ff54 	bl	800406c <lwip_htons>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d1cc:	4b25      	ldr	r3, [pc, #148]	; (800d264 <ip4_output_if_src+0x154>)
 800d1ce:	881b      	ldrh	r3, [r3, #0]
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	4b23      	ldr	r3, [pc, #140]	; (800d264 <ip4_output_if_src+0x154>)
 800d1d6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d104      	bne.n	800d1e8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d1de:	4b22      	ldr	r3, [pc, #136]	; (800d268 <ip4_output_if_src+0x158>)
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	69fb      	ldr	r3, [r7, #28]
 800d1e4:	60da      	str	r2, [r3, #12]
 800d1e6:	e003      	b.n	800d1f0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	69fb      	ldr	r3, [r7, #28]
 800d1ee:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d1f0:	69fb      	ldr	r3, [r7, #28]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	729a      	strb	r2, [r3, #10]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	72da      	strb	r2, [r3, #11]
 800d1fa:	e00f      	b.n	800d21c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	895b      	ldrh	r3, [r3, #10]
 800d200:	2b13      	cmp	r3, #19
 800d202:	d802      	bhi.n	800d20a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d204:	f06f 0301 	mvn.w	r3, #1
 800d208:	e020      	b.n	800d24c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	691b      	ldr	r3, [r3, #16]
 800d214:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d216:	f107 0314 	add.w	r3, r7, #20
 800d21a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d21e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d220:	2b00      	cmp	r3, #0
 800d222:	d00c      	beq.n	800d23e <ip4_output_if_src+0x12e>
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	891a      	ldrh	r2, [r3, #8]
 800d228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d22a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d906      	bls.n	800d23e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d230:	687a      	ldr	r2, [r7, #4]
 800d232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d234:	68f8      	ldr	r0, [r7, #12]
 800d236:	f000 fd4d 	bl	800dcd4 <ip4_frag>
 800d23a:	4603      	mov	r3, r0
 800d23c:	e006      	b.n	800d24c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d240:	695b      	ldr	r3, [r3, #20]
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	68f9      	ldr	r1, [r7, #12]
 800d246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d248:	4798      	blx	r3
 800d24a:	4603      	mov	r3, r0
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3720      	adds	r7, #32
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}
 800d254:	08011c44 	.word	0x08011c44
 800d258:	08011c78 	.word	0x08011c78
 800d25c:	08011c84 	.word	0x08011c84
 800d260:	08011cac 	.word	0x08011cac
 800d264:	20000202 	.word	0x20000202
 800d268:	08012080 	.word	0x08012080

0800d26c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b085      	sub	sp, #20
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d280:	d002      	beq.n	800d288 <ip4_addr_isbroadcast_u32+0x1c>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d101      	bne.n	800d28c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d288:	2301      	movs	r3, #1
 800d28a:	e02a      	b.n	800d2e2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d292:	f003 0302 	and.w	r3, r3, #2
 800d296:	2b00      	cmp	r3, #0
 800d298:	d101      	bne.n	800d29e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d29a:	2300      	movs	r3, #0
 800d29c:	e021      	b.n	800d2e2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	3304      	adds	r3, #4
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d101      	bne.n	800d2ae <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	e019      	b.n	800d2e2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d2ae:	68fa      	ldr	r2, [r7, #12]
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	3304      	adds	r3, #4
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	405a      	eors	r2, r3
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	3308      	adds	r3, #8
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	4013      	ands	r3, r2
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d10d      	bne.n	800d2e0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	3308      	adds	r3, #8
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	43da      	mvns	r2, r3
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	3308      	adds	r3, #8
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d101      	bne.n	800d2e0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d2dc:	2301      	movs	r3, #1
 800d2de:	e000      	b.n	800d2e2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d2e0:	2300      	movs	r3, #0
  }
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3714      	adds	r7, #20
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr
	...

0800d2f0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b084      	sub	sp, #16
 800d2f4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d2fa:	4b12      	ldr	r3, [pc, #72]	; (800d344 <ip_reass_tmr+0x54>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d300:	e018      	b.n	800d334 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	7fdb      	ldrb	r3, [r3, #31]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d00b      	beq.n	800d322 <ip_reass_tmr+0x32>
      r->timer--;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	7fdb      	ldrb	r3, [r3, #31]
 800d30e:	3b01      	subs	r3, #1
 800d310:	b2da      	uxtb	r2, r3
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	60fb      	str	r3, [r7, #12]
 800d320:	e008      	b.n	800d334 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d32c:	68b9      	ldr	r1, [r7, #8]
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 f80a 	bl	800d348 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1e3      	bne.n	800d302 <ip_reass_tmr+0x12>
    }
  }
}
 800d33a:	bf00      	nop
 800d33c:	bf00      	nop
 800d33e:	3710      	adds	r7, #16
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	20000204 	.word	0x20000204

0800d348 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b088      	sub	sp, #32
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d356:	683a      	ldr	r2, [r7, #0]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d105      	bne.n	800d36a <ip_reass_free_complete_datagram+0x22>
 800d35e:	4b45      	ldr	r3, [pc, #276]	; (800d474 <ip_reass_free_complete_datagram+0x12c>)
 800d360:	22ab      	movs	r2, #171	; 0xab
 800d362:	4945      	ldr	r1, [pc, #276]	; (800d478 <ip_reass_free_complete_datagram+0x130>)
 800d364:	4845      	ldr	r0, [pc, #276]	; (800d47c <ip_reass_free_complete_datagram+0x134>)
 800d366:	f000 ff33 	bl	800e1d0 <iprintf>
  if (prev != NULL) {
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d00a      	beq.n	800d386 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	429a      	cmp	r2, r3
 800d378:	d005      	beq.n	800d386 <ip_reass_free_complete_datagram+0x3e>
 800d37a:	4b3e      	ldr	r3, [pc, #248]	; (800d474 <ip_reass_free_complete_datagram+0x12c>)
 800d37c:	22ad      	movs	r2, #173	; 0xad
 800d37e:	4940      	ldr	r1, [pc, #256]	; (800d480 <ip_reass_free_complete_datagram+0x138>)
 800d380:	483e      	ldr	r0, [pc, #248]	; (800d47c <ip_reass_free_complete_datagram+0x134>)
 800d382:	f000 ff25 	bl	800e1d0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	889b      	ldrh	r3, [r3, #4]
 800d392:	b29b      	uxth	r3, r3
 800d394:	2b00      	cmp	r3, #0
 800d396:	d12a      	bne.n	800d3ee <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d3a6:	69bb      	ldr	r3, [r7, #24]
 800d3a8:	6858      	ldr	r0, [r3, #4]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	3308      	adds	r3, #8
 800d3ae:	2214      	movs	r2, #20
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	f000 fedd 	bl	800e170 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d3b6:	2101      	movs	r1, #1
 800d3b8:	69b8      	ldr	r0, [r7, #24]
 800d3ba:	f7ff fc47 	bl	800cc4c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d3be:	69b8      	ldr	r0, [r7, #24]
 800d3c0:	f7f8 f990 	bl	80056e4 <pbuf_clen>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d3c8:	8bfa      	ldrh	r2, [r7, #30]
 800d3ca:	8a7b      	ldrh	r3, [r7, #18]
 800d3cc:	4413      	add	r3, r2
 800d3ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3d2:	db05      	blt.n	800d3e0 <ip_reass_free_complete_datagram+0x98>
 800d3d4:	4b27      	ldr	r3, [pc, #156]	; (800d474 <ip_reass_free_complete_datagram+0x12c>)
 800d3d6:	22bc      	movs	r2, #188	; 0xbc
 800d3d8:	492a      	ldr	r1, [pc, #168]	; (800d484 <ip_reass_free_complete_datagram+0x13c>)
 800d3da:	4828      	ldr	r0, [pc, #160]	; (800d47c <ip_reass_free_complete_datagram+0x134>)
 800d3dc:	f000 fef8 	bl	800e1d0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d3e0:	8bfa      	ldrh	r2, [r7, #30]
 800d3e2:	8a7b      	ldrh	r3, [r7, #18]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d3e8:	69b8      	ldr	r0, [r7, #24]
 800d3ea:	f7f8 f8f3 	bl	80055d4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d3f4:	e01f      	b.n	800d436 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d3fc:	69bb      	ldr	r3, [r7, #24]
 800d3fe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d406:	68f8      	ldr	r0, [r7, #12]
 800d408:	f7f8 f96c 	bl	80056e4 <pbuf_clen>
 800d40c:	4603      	mov	r3, r0
 800d40e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d410:	8bfa      	ldrh	r2, [r7, #30]
 800d412:	8a7b      	ldrh	r3, [r7, #18]
 800d414:	4413      	add	r3, r2
 800d416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d41a:	db05      	blt.n	800d428 <ip_reass_free_complete_datagram+0xe0>
 800d41c:	4b15      	ldr	r3, [pc, #84]	; (800d474 <ip_reass_free_complete_datagram+0x12c>)
 800d41e:	22cc      	movs	r2, #204	; 0xcc
 800d420:	4918      	ldr	r1, [pc, #96]	; (800d484 <ip_reass_free_complete_datagram+0x13c>)
 800d422:	4816      	ldr	r0, [pc, #88]	; (800d47c <ip_reass_free_complete_datagram+0x134>)
 800d424:	f000 fed4 	bl	800e1d0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d428:	8bfa      	ldrh	r2, [r7, #30]
 800d42a:	8a7b      	ldrh	r3, [r7, #18]
 800d42c:	4413      	add	r3, r2
 800d42e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d430:	68f8      	ldr	r0, [r7, #12]
 800d432:	f7f8 f8cf 	bl	80055d4 <pbuf_free>
  while (p != NULL) {
 800d436:	69bb      	ldr	r3, [r7, #24]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d1dc      	bne.n	800d3f6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d43c:	6839      	ldr	r1, [r7, #0]
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 f8c2 	bl	800d5c8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d444:	4b10      	ldr	r3, [pc, #64]	; (800d488 <ip_reass_free_complete_datagram+0x140>)
 800d446:	881b      	ldrh	r3, [r3, #0]
 800d448:	8bfa      	ldrh	r2, [r7, #30]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d905      	bls.n	800d45a <ip_reass_free_complete_datagram+0x112>
 800d44e:	4b09      	ldr	r3, [pc, #36]	; (800d474 <ip_reass_free_complete_datagram+0x12c>)
 800d450:	22d2      	movs	r2, #210	; 0xd2
 800d452:	490e      	ldr	r1, [pc, #56]	; (800d48c <ip_reass_free_complete_datagram+0x144>)
 800d454:	4809      	ldr	r0, [pc, #36]	; (800d47c <ip_reass_free_complete_datagram+0x134>)
 800d456:	f000 febb 	bl	800e1d0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d45a:	4b0b      	ldr	r3, [pc, #44]	; (800d488 <ip_reass_free_complete_datagram+0x140>)
 800d45c:	881a      	ldrh	r2, [r3, #0]
 800d45e:	8bfb      	ldrh	r3, [r7, #30]
 800d460:	1ad3      	subs	r3, r2, r3
 800d462:	b29a      	uxth	r2, r3
 800d464:	4b08      	ldr	r3, [pc, #32]	; (800d488 <ip_reass_free_complete_datagram+0x140>)
 800d466:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d468:	8bfb      	ldrh	r3, [r7, #30]
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3720      	adds	r7, #32
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}
 800d472:	bf00      	nop
 800d474:	08011cdc 	.word	0x08011cdc
 800d478:	08011d18 	.word	0x08011d18
 800d47c:	08011d24 	.word	0x08011d24
 800d480:	08011d4c 	.word	0x08011d4c
 800d484:	08011d60 	.word	0x08011d60
 800d488:	20000208 	.word	0x20000208
 800d48c:	08011d80 	.word	0x08011d80

0800d490 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b08a      	sub	sp, #40	; 0x28
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d49a:	2300      	movs	r3, #0
 800d49c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d4ae:	4b28      	ldr	r3, [pc, #160]	; (800d550 <ip_reass_remove_oldest_datagram+0xc0>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d4b4:	e030      	b.n	800d518 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b8:	695a      	ldr	r2, [r3, #20]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	68db      	ldr	r3, [r3, #12]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d10c      	bne.n	800d4dc <ip_reass_remove_oldest_datagram+0x4c>
 800d4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c4:	699a      	ldr	r2, [r3, #24]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	691b      	ldr	r3, [r3, #16]
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d106      	bne.n	800d4dc <ip_reass_remove_oldest_datagram+0x4c>
 800d4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d0:	899a      	ldrh	r2, [r3, #12]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	889b      	ldrh	r3, [r3, #4]
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d014      	beq.n	800d506 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	3301      	adds	r3, #1
 800d4e0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d4e2:	6a3b      	ldr	r3, [r7, #32]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d104      	bne.n	800d4f2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ea:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	61bb      	str	r3, [r7, #24]
 800d4f0:	e009      	b.n	800d506 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f4:	7fda      	ldrb	r2, [r3, #31]
 800d4f6:	6a3b      	ldr	r3, [r7, #32]
 800d4f8:	7fdb      	ldrb	r3, [r3, #31]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d803      	bhi.n	800d506 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d500:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d502:	69fb      	ldr	r3, [r7, #28]
 800d504:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d001      	beq.n	800d512 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d510:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d1cb      	bne.n	800d4b6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d51e:	6a3b      	ldr	r3, [r7, #32]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d008      	beq.n	800d536 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d524:	69b9      	ldr	r1, [r7, #24]
 800d526:	6a38      	ldr	r0, [r7, #32]
 800d528:	f7ff ff0e 	bl	800d348 <ip_reass_free_complete_datagram>
 800d52c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d52e:	697a      	ldr	r2, [r7, #20]
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	4413      	add	r3, r2
 800d534:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d536:	697a      	ldr	r2, [r7, #20]
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	da02      	bge.n	800d544 <ip_reass_remove_oldest_datagram+0xb4>
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	2b01      	cmp	r3, #1
 800d542:	dcac      	bgt.n	800d49e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d544:	697b      	ldr	r3, [r7, #20]
}
 800d546:	4618      	mov	r0, r3
 800d548:	3728      	adds	r7, #40	; 0x28
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
 800d54e:	bf00      	nop
 800d550:	20000204 	.word	0x20000204

0800d554 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d55e:	2004      	movs	r0, #4
 800d560:	f7f7 f9da 	bl	8004918 <memp_malloc>
 800d564:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d110      	bne.n	800d58e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d56c:	6839      	ldr	r1, [r7, #0]
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f7ff ff8e 	bl	800d490 <ip_reass_remove_oldest_datagram>
 800d574:	4602      	mov	r2, r0
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	4293      	cmp	r3, r2
 800d57a:	dc03      	bgt.n	800d584 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d57c:	2004      	movs	r0, #4
 800d57e:	f7f7 f9cb 	bl	8004918 <memp_malloc>
 800d582:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d101      	bne.n	800d58e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d58a:	2300      	movs	r3, #0
 800d58c:	e016      	b.n	800d5bc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d58e:	2220      	movs	r2, #32
 800d590:	2100      	movs	r1, #0
 800d592:	68f8      	ldr	r0, [r7, #12]
 800d594:	f000 fe14 	bl	800e1c0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	220f      	movs	r2, #15
 800d59c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d59e:	4b09      	ldr	r3, [pc, #36]	; (800d5c4 <ip_reass_enqueue_new_datagram+0x70>)
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d5a6:	4a07      	ldr	r2, [pc, #28]	; (800d5c4 <ip_reass_enqueue_new_datagram+0x70>)
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	3308      	adds	r3, #8
 800d5b0:	2214      	movs	r2, #20
 800d5b2:	6879      	ldr	r1, [r7, #4]
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f000 fddb 	bl	800e170 <memcpy>
  return ipr;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3710      	adds	r7, #16
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	20000204 	.word	0x20000204

0800d5c8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d5d2:	4b10      	ldr	r3, [pc, #64]	; (800d614 <ip_reass_dequeue_datagram+0x4c>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	687a      	ldr	r2, [r7, #4]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d104      	bne.n	800d5e6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a0c      	ldr	r2, [pc, #48]	; (800d614 <ip_reass_dequeue_datagram+0x4c>)
 800d5e2:	6013      	str	r3, [r2, #0]
 800d5e4:	e00d      	b.n	800d602 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d106      	bne.n	800d5fa <ip_reass_dequeue_datagram+0x32>
 800d5ec:	4b0a      	ldr	r3, [pc, #40]	; (800d618 <ip_reass_dequeue_datagram+0x50>)
 800d5ee:	f240 1245 	movw	r2, #325	; 0x145
 800d5f2:	490a      	ldr	r1, [pc, #40]	; (800d61c <ip_reass_dequeue_datagram+0x54>)
 800d5f4:	480a      	ldr	r0, [pc, #40]	; (800d620 <ip_reass_dequeue_datagram+0x58>)
 800d5f6:	f000 fdeb 	bl	800e1d0 <iprintf>
    prev->next = ipr->next;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d602:	6879      	ldr	r1, [r7, #4]
 800d604:	2004      	movs	r0, #4
 800d606:	f7f7 f9d3 	bl	80049b0 <memp_free>
}
 800d60a:	bf00      	nop
 800d60c:	3708      	adds	r7, #8
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	20000204 	.word	0x20000204
 800d618:	08011cdc 	.word	0x08011cdc
 800d61c:	08011da4 	.word	0x08011da4
 800d620:	08011d24 	.word	0x08011d24

0800d624 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b08c      	sub	sp, #48	; 0x30
 800d628:	af00      	add	r7, sp, #0
 800d62a:	60f8      	str	r0, [r7, #12]
 800d62c:	60b9      	str	r1, [r7, #8]
 800d62e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d630:	2300      	movs	r3, #0
 800d632:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d634:	2301      	movs	r3, #1
 800d636:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	885b      	ldrh	r3, [r3, #2]
 800d642:	b29b      	uxth	r3, r3
 800d644:	4618      	mov	r0, r3
 800d646:	f7f6 fd11 	bl	800406c <lwip_htons>
 800d64a:	4603      	mov	r3, r0
 800d64c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	f003 030f 	and.w	r3, r3, #15
 800d656:	b2db      	uxtb	r3, r3
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d65c:	7e7b      	ldrb	r3, [r7, #25]
 800d65e:	b29b      	uxth	r3, r3
 800d660:	8b7a      	ldrh	r2, [r7, #26]
 800d662:	429a      	cmp	r2, r3
 800d664:	d202      	bcs.n	800d66c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d666:	f04f 33ff 	mov.w	r3, #4294967295
 800d66a:	e135      	b.n	800d8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d66c:	7e7b      	ldrb	r3, [r7, #25]
 800d66e:	b29b      	uxth	r3, r3
 800d670:	8b7a      	ldrh	r2, [r7, #26]
 800d672:	1ad3      	subs	r3, r2, r3
 800d674:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	88db      	ldrh	r3, [r3, #6]
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7f6 fcf5 	bl	800406c <lwip_htons>
 800d682:	4603      	mov	r3, r0
 800d684:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d688:	b29b      	uxth	r3, r3
 800d68a:	00db      	lsls	r3, r3, #3
 800d68c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d696:	2200      	movs	r2, #0
 800d698:	701a      	strb	r2, [r3, #0]
 800d69a:	2200      	movs	r2, #0
 800d69c:	705a      	strb	r2, [r3, #1]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	709a      	strb	r2, [r3, #2]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a8:	8afa      	ldrh	r2, [r7, #22]
 800d6aa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d6ac:	8afa      	ldrh	r2, [r7, #22]
 800d6ae:	8b7b      	ldrh	r3, [r7, #26]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	b29a      	uxth	r2, r3
 800d6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ba:	88db      	ldrh	r3, [r3, #6]
 800d6bc:	b29b      	uxth	r3, r3
 800d6be:	8afa      	ldrh	r2, [r7, #22]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d902      	bls.n	800d6ca <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d6c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6c8:	e106      	b.n	800d8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	627b      	str	r3, [r7, #36]	; 0x24
 800d6d0:	e068      	b.n	800d7a4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6da:	889b      	ldrh	r3, [r3, #4]
 800d6dc:	b29a      	uxth	r2, r3
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	889b      	ldrh	r3, [r3, #4]
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d235      	bcs.n	800d754 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d020      	beq.n	800d736 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f6:	889b      	ldrh	r3, [r3, #4]
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fc:	88db      	ldrh	r3, [r3, #6]
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	429a      	cmp	r2, r3
 800d702:	d307      	bcc.n	800d714 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d706:	88db      	ldrh	r3, [r3, #6]
 800d708:	b29a      	uxth	r2, r3
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	889b      	ldrh	r3, [r3, #4]
 800d70e:	b29b      	uxth	r3, r3
 800d710:	429a      	cmp	r2, r3
 800d712:	d902      	bls.n	800d71a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d714:	f04f 33ff 	mov.w	r3, #4294967295
 800d718:	e0de      	b.n	800d8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71c:	68ba      	ldr	r2, [r7, #8]
 800d71e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d722:	88db      	ldrh	r3, [r3, #6]
 800d724:	b29a      	uxth	r2, r3
 800d726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d728:	889b      	ldrh	r3, [r3, #4]
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d03d      	beq.n	800d7ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d730:	2300      	movs	r3, #0
 800d732:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d734:	e03a      	b.n	800d7ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d738:	88db      	ldrh	r3, [r3, #6]
 800d73a:	b29a      	uxth	r2, r3
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	889b      	ldrh	r3, [r3, #4]
 800d740:	b29b      	uxth	r3, r3
 800d742:	429a      	cmp	r2, r3
 800d744:	d902      	bls.n	800d74c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d746:	f04f 33ff 	mov.w	r3, #4294967295
 800d74a:	e0c5      	b.n	800d8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	68ba      	ldr	r2, [r7, #8]
 800d750:	605a      	str	r2, [r3, #4]
      break;
 800d752:	e02b      	b.n	800d7ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d756:	889b      	ldrh	r3, [r3, #4]
 800d758:	b29a      	uxth	r2, r3
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	889b      	ldrh	r3, [r3, #4]
 800d75e:	b29b      	uxth	r3, r3
 800d760:	429a      	cmp	r2, r3
 800d762:	d102      	bne.n	800d76a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d764:	f04f 33ff 	mov.w	r3, #4294967295
 800d768:	e0b6      	b.n	800d8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76c:	889b      	ldrh	r3, [r3, #4]
 800d76e:	b29a      	uxth	r2, r3
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	88db      	ldrh	r3, [r3, #6]
 800d774:	b29b      	uxth	r3, r3
 800d776:	429a      	cmp	r2, r3
 800d778:	d202      	bcs.n	800d780 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d77a:	f04f 33ff 	mov.w	r3, #4294967295
 800d77e:	e0ab      	b.n	800d8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d782:	2b00      	cmp	r3, #0
 800d784:	d009      	beq.n	800d79a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d788:	88db      	ldrh	r3, [r3, #6]
 800d78a:	b29a      	uxth	r2, r3
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	889b      	ldrh	r3, [r3, #4]
 800d790:	b29b      	uxth	r3, r3
 800d792:	429a      	cmp	r2, r3
 800d794:	d001      	beq.n	800d79a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d796:	2300      	movs	r3, #0
 800d798:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d193      	bne.n	800d6d2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d7aa:	e000      	b.n	800d7ae <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d7ac:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d12d      	bne.n	800d810 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d01c      	beq.n	800d7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7bc:	88db      	ldrh	r3, [r3, #6]
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c2:	889b      	ldrh	r3, [r3, #4]
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d906      	bls.n	800d7d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d7ca:	4b45      	ldr	r3, [pc, #276]	; (800d8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d7cc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800d7d0:	4944      	ldr	r1, [pc, #272]	; (800d8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d7d2:	4845      	ldr	r0, [pc, #276]	; (800d8e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d7d4:	f000 fcfc 	bl	800e1d0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7da:	68ba      	ldr	r2, [r7, #8]
 800d7dc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e0:	88db      	ldrh	r3, [r3, #6]
 800d7e2:	b29a      	uxth	r2, r3
 800d7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e6:	889b      	ldrh	r3, [r3, #4]
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d010      	beq.n	800d810 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	623b      	str	r3, [r7, #32]
 800d7f2:	e00d      	b.n	800d810 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d006      	beq.n	800d80a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d7fc:	4b38      	ldr	r3, [pc, #224]	; (800d8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d7fe:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800d802:	493a      	ldr	r1, [pc, #232]	; (800d8ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d804:	4838      	ldr	r0, [pc, #224]	; (800d8e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d806:	f000 fce3 	bl	800e1d0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	68ba      	ldr	r2, [r7, #8]
 800d80e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d105      	bne.n	800d822 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	7f9b      	ldrb	r3, [r3, #30]
 800d81a:	f003 0301 	and.w	r3, r3, #1
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d059      	beq.n	800d8d6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d822:	6a3b      	ldr	r3, [r7, #32]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d04f      	beq.n	800d8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d006      	beq.n	800d83e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	685b      	ldr	r3, [r3, #4]
 800d836:	889b      	ldrh	r3, [r3, #4]
 800d838:	b29b      	uxth	r3, r3
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d002      	beq.n	800d844 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d83e:	2300      	movs	r3, #0
 800d840:	623b      	str	r3, [r7, #32]
 800d842:	e041      	b.n	800d8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d846:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d84e:	e012      	b.n	800d876 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800d850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d858:	88db      	ldrh	r3, [r3, #6]
 800d85a:	b29a      	uxth	r2, r3
 800d85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85e:	889b      	ldrh	r3, [r3, #4]
 800d860:	b29b      	uxth	r3, r3
 800d862:	429a      	cmp	r2, r3
 800d864:	d002      	beq.n	800d86c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800d866:	2300      	movs	r3, #0
 800d868:	623b      	str	r3, [r7, #32]
            break;
 800d86a:	e007      	b.n	800d87c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800d86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d1e9      	bne.n	800d850 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d87c:	6a3b      	ldr	r3, [r7, #32]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d022      	beq.n	800d8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d106      	bne.n	800d898 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800d88a:	4b15      	ldr	r3, [pc, #84]	; (800d8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d88c:	f240 12df 	movw	r2, #479	; 0x1df
 800d890:	4917      	ldr	r1, [pc, #92]	; (800d8f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d892:	4815      	ldr	r0, [pc, #84]	; (800d8e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d894:	f000 fc9c 	bl	800e1d0 <iprintf>
          LWIP_ASSERT("sanity check",
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	685b      	ldr	r3, [r3, #4]
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d106      	bne.n	800d8b2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800d8a4:	4b0e      	ldr	r3, [pc, #56]	; (800d8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d8a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d8aa:	4911      	ldr	r1, [pc, #68]	; (800d8f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d8ac:	480e      	ldr	r0, [pc, #56]	; (800d8e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d8ae:	f000 fc8f 	bl	800e1d0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d006      	beq.n	800d8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800d8ba:	4b09      	ldr	r3, [pc, #36]	; (800d8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d8bc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800d8c0:	490c      	ldr	r1, [pc, #48]	; (800d8f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d8c2:	4809      	ldr	r0, [pc, #36]	; (800d8e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d8c4:	f000 fc84 	bl	800e1d0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d8c8:	6a3b      	ldr	r3, [r7, #32]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	bf14      	ite	ne
 800d8ce:	2301      	movne	r3, #1
 800d8d0:	2300      	moveq	r3, #0
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	e000      	b.n	800d8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d8d6:	2300      	movs	r3, #0
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3730      	adds	r7, #48	; 0x30
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	08011cdc 	.word	0x08011cdc
 800d8e4:	08011dc0 	.word	0x08011dc0
 800d8e8:	08011d24 	.word	0x08011d24
 800d8ec:	08011de0 	.word	0x08011de0
 800d8f0:	08011e18 	.word	0x08011e18
 800d8f4:	08011e28 	.word	0x08011e28

0800d8f8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b08e      	sub	sp, #56	; 0x38
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	f003 030f 	and.w	r3, r3, #15
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	009b      	lsls	r3, r3, #2
 800d912:	b2db      	uxtb	r3, r3
 800d914:	2b14      	cmp	r3, #20
 800d916:	f040 8167 	bne.w	800dbe8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800d91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91c:	88db      	ldrh	r3, [r3, #6]
 800d91e:	b29b      	uxth	r3, r3
 800d920:	4618      	mov	r0, r3
 800d922:	f7f6 fba3 	bl	800406c <lwip_htons>
 800d926:	4603      	mov	r3, r0
 800d928:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d92c:	b29b      	uxth	r3, r3
 800d92e:	00db      	lsls	r3, r3, #3
 800d930:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d934:	885b      	ldrh	r3, [r3, #2]
 800d936:	b29b      	uxth	r3, r3
 800d938:	4618      	mov	r0, r3
 800d93a:	f7f6 fb97 	bl	800406c <lwip_htons>
 800d93e:	4603      	mov	r3, r0
 800d940:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800d942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	f003 030f 	and.w	r3, r3, #15
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	009b      	lsls	r3, r3, #2
 800d94e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800d952:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d956:	b29b      	uxth	r3, r3
 800d958:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d95a:	429a      	cmp	r2, r3
 800d95c:	f0c0 8146 	bcc.w	800dbec <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800d960:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d964:	b29b      	uxth	r3, r3
 800d966:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d968:	1ad3      	subs	r3, r2, r3
 800d96a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f7f7 feb9 	bl	80056e4 <pbuf_clen>
 800d972:	4603      	mov	r3, r0
 800d974:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d976:	4b9f      	ldr	r3, [pc, #636]	; (800dbf4 <ip4_reass+0x2fc>)
 800d978:	881b      	ldrh	r3, [r3, #0]
 800d97a:	461a      	mov	r2, r3
 800d97c:	8c3b      	ldrh	r3, [r7, #32]
 800d97e:	4413      	add	r3, r2
 800d980:	2b0a      	cmp	r3, #10
 800d982:	dd10      	ble.n	800d9a6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d984:	8c3b      	ldrh	r3, [r7, #32]
 800d986:	4619      	mov	r1, r3
 800d988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d98a:	f7ff fd81 	bl	800d490 <ip_reass_remove_oldest_datagram>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	f000 812d 	beq.w	800dbf0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d996:	4b97      	ldr	r3, [pc, #604]	; (800dbf4 <ip4_reass+0x2fc>)
 800d998:	881b      	ldrh	r3, [r3, #0]
 800d99a:	461a      	mov	r2, r3
 800d99c:	8c3b      	ldrh	r3, [r7, #32]
 800d99e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d9a0:	2b0a      	cmp	r3, #10
 800d9a2:	f300 8125 	bgt.w	800dbf0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d9a6:	4b94      	ldr	r3, [pc, #592]	; (800dbf8 <ip4_reass+0x300>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	633b      	str	r3, [r7, #48]	; 0x30
 800d9ac:	e015      	b.n	800d9da <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b0:	695a      	ldr	r2, [r3, #20]
 800d9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b4:	68db      	ldr	r3, [r3, #12]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d10c      	bne.n	800d9d4 <ip4_reass+0xdc>
 800d9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9bc:	699a      	ldr	r2, [r3, #24]
 800d9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c0:	691b      	ldr	r3, [r3, #16]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d106      	bne.n	800d9d4 <ip4_reass+0xdc>
 800d9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c8:	899a      	ldrh	r2, [r3, #12]
 800d9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9cc:	889b      	ldrh	r3, [r3, #4]
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d006      	beq.n	800d9e2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	633b      	str	r3, [r7, #48]	; 0x30
 800d9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d1e6      	bne.n	800d9ae <ip4_reass+0xb6>
 800d9e0:	e000      	b.n	800d9e4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d9e2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d109      	bne.n	800d9fe <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d9ea:	8c3b      	ldrh	r3, [r7, #32]
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9f0:	f7ff fdb0 	bl	800d554 <ip_reass_enqueue_new_datagram>
 800d9f4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d11c      	bne.n	800da36 <ip4_reass+0x13e>
      goto nullreturn;
 800d9fc:	e109      	b.n	800dc12 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da00:	88db      	ldrh	r3, [r3, #6]
 800da02:	b29b      	uxth	r3, r3
 800da04:	4618      	mov	r0, r3
 800da06:	f7f6 fb31 	bl	800406c <lwip_htons>
 800da0a:	4603      	mov	r3, r0
 800da0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da10:	2b00      	cmp	r3, #0
 800da12:	d110      	bne.n	800da36 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800da14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da16:	89db      	ldrh	r3, [r3, #14]
 800da18:	4618      	mov	r0, r3
 800da1a:	f7f6 fb27 	bl	800406c <lwip_htons>
 800da1e:	4603      	mov	r3, r0
 800da20:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800da24:	2b00      	cmp	r3, #0
 800da26:	d006      	beq.n	800da36 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800da28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2a:	3308      	adds	r3, #8
 800da2c:	2214      	movs	r2, #20
 800da2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da30:	4618      	mov	r0, r3
 800da32:	f000 fb9d 	bl	800e170 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800da36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da38:	88db      	ldrh	r3, [r3, #6]
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	f003 0320 	and.w	r3, r3, #32
 800da40:	2b00      	cmp	r3, #0
 800da42:	bf0c      	ite	eq
 800da44:	2301      	moveq	r3, #1
 800da46:	2300      	movne	r3, #0
 800da48:	b2db      	uxtb	r3, r3
 800da4a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800da4c:	69fb      	ldr	r3, [r7, #28]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d00e      	beq.n	800da70 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800da52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800da54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da56:	4413      	add	r3, r2
 800da58:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800da5a:	8b7a      	ldrh	r2, [r7, #26]
 800da5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800da5e:	429a      	cmp	r2, r3
 800da60:	f0c0 80a0 	bcc.w	800dba4 <ip4_reass+0x2ac>
 800da64:	8b7b      	ldrh	r3, [r7, #26]
 800da66:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800da6a:	4293      	cmp	r3, r2
 800da6c:	f200 809a 	bhi.w	800dba4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800da70:	69fa      	ldr	r2, [r7, #28]
 800da72:	6879      	ldr	r1, [r7, #4]
 800da74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da76:	f7ff fdd5 	bl	800d624 <ip_reass_chain_frag_into_datagram_and_validate>
 800da7a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da82:	f000 8091 	beq.w	800dba8 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800da86:	4b5b      	ldr	r3, [pc, #364]	; (800dbf4 <ip4_reass+0x2fc>)
 800da88:	881a      	ldrh	r2, [r3, #0]
 800da8a:	8c3b      	ldrh	r3, [r7, #32]
 800da8c:	4413      	add	r3, r2
 800da8e:	b29a      	uxth	r2, r3
 800da90:	4b58      	ldr	r3, [pc, #352]	; (800dbf4 <ip4_reass+0x2fc>)
 800da92:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800da94:	69fb      	ldr	r3, [r7, #28]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d00d      	beq.n	800dab6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800da9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800da9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da9e:	4413      	add	r3, r2
 800daa0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800daa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa4:	8a7a      	ldrh	r2, [r7, #18]
 800daa6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800daa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daaa:	7f9b      	ldrb	r3, [r3, #30]
 800daac:	f043 0301 	orr.w	r3, r3, #1
 800dab0:	b2da      	uxtb	r2, r3
 800dab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d171      	bne.n	800dba0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800dabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dabe:	8b9b      	ldrh	r3, [r3, #28]
 800dac0:	3314      	adds	r3, #20
 800dac2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800dac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800dace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800dad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad8:	3308      	adds	r3, #8
 800dada:	2214      	movs	r2, #20
 800dadc:	4619      	mov	r1, r3
 800dade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dae0:	f000 fb46 	bl	800e170 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800dae4:	8a3b      	ldrh	r3, [r7, #16]
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7f6 fac0 	bl	800406c <lwip_htons>
 800daec:	4603      	mov	r3, r0
 800daee:	461a      	mov	r2, r3
 800daf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800daf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf6:	2200      	movs	r2, #0
 800daf8:	719a      	strb	r2, [r3, #6]
 800dafa:	2200      	movs	r2, #0
 800dafc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800dafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db00:	2200      	movs	r2, #0
 800db02:	729a      	strb	r2, [r3, #10]
 800db04:	2200      	movs	r2, #0
 800db06:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800db08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800db0e:	e00d      	b.n	800db2c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800db10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800db16:	2114      	movs	r1, #20
 800db18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800db1a:	f7f7 fcd5 	bl	80054c8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800db1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f7f7 fe19 	bl	8005758 <pbuf_cat>
      r = iprh->next_pbuf;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800db2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d1ee      	bne.n	800db10 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800db32:	4b31      	ldr	r3, [pc, #196]	; (800dbf8 <ip4_reass+0x300>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db38:	429a      	cmp	r2, r3
 800db3a:	d102      	bne.n	800db42 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800db3c:	2300      	movs	r3, #0
 800db3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db40:	e010      	b.n	800db64 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800db42:	4b2d      	ldr	r3, [pc, #180]	; (800dbf8 <ip4_reass+0x300>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db48:	e007      	b.n	800db5a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800db4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db50:	429a      	cmp	r2, r3
 800db52:	d006      	beq.n	800db62 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800db54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d1f4      	bne.n	800db4a <ip4_reass+0x252>
 800db60:	e000      	b.n	800db64 <ip4_reass+0x26c>
          break;
 800db62:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800db64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db68:	f7ff fd2e 	bl	800d5c8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f7f7 fdb9 	bl	80056e4 <pbuf_clen>
 800db72:	4603      	mov	r3, r0
 800db74:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800db76:	4b1f      	ldr	r3, [pc, #124]	; (800dbf4 <ip4_reass+0x2fc>)
 800db78:	881b      	ldrh	r3, [r3, #0]
 800db7a:	8c3a      	ldrh	r2, [r7, #32]
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d906      	bls.n	800db8e <ip4_reass+0x296>
 800db80:	4b1e      	ldr	r3, [pc, #120]	; (800dbfc <ip4_reass+0x304>)
 800db82:	f240 229b 	movw	r2, #667	; 0x29b
 800db86:	491e      	ldr	r1, [pc, #120]	; (800dc00 <ip4_reass+0x308>)
 800db88:	481e      	ldr	r0, [pc, #120]	; (800dc04 <ip4_reass+0x30c>)
 800db8a:	f000 fb21 	bl	800e1d0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800db8e:	4b19      	ldr	r3, [pc, #100]	; (800dbf4 <ip4_reass+0x2fc>)
 800db90:	881a      	ldrh	r2, [r3, #0]
 800db92:	8c3b      	ldrh	r3, [r7, #32]
 800db94:	1ad3      	subs	r3, r2, r3
 800db96:	b29a      	uxth	r2, r3
 800db98:	4b16      	ldr	r3, [pc, #88]	; (800dbf4 <ip4_reass+0x2fc>)
 800db9a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	e03c      	b.n	800dc1a <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800dba0:	2300      	movs	r3, #0
 800dba2:	e03a      	b.n	800dc1a <ip4_reass+0x322>
      goto nullreturn_ipr;
 800dba4:	bf00      	nop
 800dba6:	e000      	b.n	800dbaa <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800dba8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800dbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d106      	bne.n	800dbbe <ip4_reass+0x2c6>
 800dbb0:	4b12      	ldr	r3, [pc, #72]	; (800dbfc <ip4_reass+0x304>)
 800dbb2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800dbb6:	4914      	ldr	r1, [pc, #80]	; (800dc08 <ip4_reass+0x310>)
 800dbb8:	4812      	ldr	r0, [pc, #72]	; (800dc04 <ip4_reass+0x30c>)
 800dbba:	f000 fb09 	bl	800e1d0 <iprintf>
  if (ipr->p == NULL) {
 800dbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d124      	bne.n	800dc10 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800dbc6:	4b0c      	ldr	r3, [pc, #48]	; (800dbf8 <ip4_reass+0x300>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d006      	beq.n	800dbde <ip4_reass+0x2e6>
 800dbd0:	4b0a      	ldr	r3, [pc, #40]	; (800dbfc <ip4_reass+0x304>)
 800dbd2:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dbd6:	490d      	ldr	r1, [pc, #52]	; (800dc0c <ip4_reass+0x314>)
 800dbd8:	480a      	ldr	r0, [pc, #40]	; (800dc04 <ip4_reass+0x30c>)
 800dbda:	f000 faf9 	bl	800e1d0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800dbde:	2100      	movs	r1, #0
 800dbe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbe2:	f7ff fcf1 	bl	800d5c8 <ip_reass_dequeue_datagram>
 800dbe6:	e014      	b.n	800dc12 <ip4_reass+0x31a>
    goto nullreturn;
 800dbe8:	bf00      	nop
 800dbea:	e012      	b.n	800dc12 <ip4_reass+0x31a>
    goto nullreturn;
 800dbec:	bf00      	nop
 800dbee:	e010      	b.n	800dc12 <ip4_reass+0x31a>
      goto nullreturn;
 800dbf0:	bf00      	nop
 800dbf2:	e00e      	b.n	800dc12 <ip4_reass+0x31a>
 800dbf4:	20000208 	.word	0x20000208
 800dbf8:	20000204 	.word	0x20000204
 800dbfc:	08011cdc 	.word	0x08011cdc
 800dc00:	08011e4c 	.word	0x08011e4c
 800dc04:	08011d24 	.word	0x08011d24
 800dc08:	08011e68 	.word	0x08011e68
 800dc0c:	08011e74 	.word	0x08011e74
  }

nullreturn:
 800dc10:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f7f7 fcde 	bl	80055d4 <pbuf_free>
  return NULL;
 800dc18:	2300      	movs	r3, #0
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3738      	adds	r7, #56	; 0x38
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
 800dc22:	bf00      	nop

0800dc24 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800dc28:	2005      	movs	r0, #5
 800dc2a:	f7f6 fe75 	bl	8004918 <memp_malloc>
 800dc2e:	4603      	mov	r3, r0
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d106      	bne.n	800dc50 <ip_frag_free_pbuf_custom_ref+0x1c>
 800dc42:	4b07      	ldr	r3, [pc, #28]	; (800dc60 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800dc44:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800dc48:	4906      	ldr	r1, [pc, #24]	; (800dc64 <ip_frag_free_pbuf_custom_ref+0x30>)
 800dc4a:	4807      	ldr	r0, [pc, #28]	; (800dc68 <ip_frag_free_pbuf_custom_ref+0x34>)
 800dc4c:	f000 fac0 	bl	800e1d0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800dc50:	6879      	ldr	r1, [r7, #4]
 800dc52:	2005      	movs	r0, #5
 800dc54:	f7f6 feac 	bl	80049b0 <memp_free>
}
 800dc58:	bf00      	nop
 800dc5a:	3708      	adds	r7, #8
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}
 800dc60:	08011cdc 	.word	0x08011cdc
 800dc64:	08011e94 	.word	0x08011e94
 800dc68:	08011d24 	.word	0x08011d24

0800dc6c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d106      	bne.n	800dc8c <ipfrag_free_pbuf_custom+0x20>
 800dc7e:	4b11      	ldr	r3, [pc, #68]	; (800dcc4 <ipfrag_free_pbuf_custom+0x58>)
 800dc80:	f240 22ce 	movw	r2, #718	; 0x2ce
 800dc84:	4910      	ldr	r1, [pc, #64]	; (800dcc8 <ipfrag_free_pbuf_custom+0x5c>)
 800dc86:	4811      	ldr	r0, [pc, #68]	; (800dccc <ipfrag_free_pbuf_custom+0x60>)
 800dc88:	f000 faa2 	bl	800e1d0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800dc8c:	68fa      	ldr	r2, [r7, #12]
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d006      	beq.n	800dca2 <ipfrag_free_pbuf_custom+0x36>
 800dc94:	4b0b      	ldr	r3, [pc, #44]	; (800dcc4 <ipfrag_free_pbuf_custom+0x58>)
 800dc96:	f240 22cf 	movw	r2, #719	; 0x2cf
 800dc9a:	490d      	ldr	r1, [pc, #52]	; (800dcd0 <ipfrag_free_pbuf_custom+0x64>)
 800dc9c:	480b      	ldr	r0, [pc, #44]	; (800dccc <ipfrag_free_pbuf_custom+0x60>)
 800dc9e:	f000 fa97 	bl	800e1d0 <iprintf>
  if (pcr->original != NULL) {
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	695b      	ldr	r3, [r3, #20]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d004      	beq.n	800dcb4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	695b      	ldr	r3, [r3, #20]
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7f7 fc90 	bl	80055d4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	f7ff ffbd 	bl	800dc34 <ip_frag_free_pbuf_custom_ref>
}
 800dcba:	bf00      	nop
 800dcbc:	3710      	adds	r7, #16
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	08011cdc 	.word	0x08011cdc
 800dcc8:	08011ea0 	.word	0x08011ea0
 800dccc:	08011d24 	.word	0x08011d24
 800dcd0:	08011eac 	.word	0x08011eac

0800dcd4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b094      	sub	sp, #80	; 0x50
 800dcd8:	af02      	add	r7, sp, #8
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800dce0:	2300      	movs	r3, #0
 800dce2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dcea:	3b14      	subs	r3, #20
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	da00      	bge.n	800dcf2 <ip4_frag+0x1e>
 800dcf0:	3307      	adds	r3, #7
 800dcf2:	10db      	asrs	r3, r3, #3
 800dcf4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800dcf6:	2314      	movs	r3, #20
 800dcf8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	685b      	ldr	r3, [r3, #4]
 800dcfe:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800dd00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd02:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800dd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	f003 030f 	and.w	r3, r3, #15
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	2b14      	cmp	r3, #20
 800dd14:	d002      	beq.n	800dd1c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800dd16:	f06f 0305 	mvn.w	r3, #5
 800dd1a:	e110      	b.n	800df3e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	895b      	ldrh	r3, [r3, #10]
 800dd20:	2b13      	cmp	r3, #19
 800dd22:	d809      	bhi.n	800dd38 <ip4_frag+0x64>
 800dd24:	4b88      	ldr	r3, [pc, #544]	; (800df48 <ip4_frag+0x274>)
 800dd26:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800dd2a:	4988      	ldr	r1, [pc, #544]	; (800df4c <ip4_frag+0x278>)
 800dd2c:	4888      	ldr	r0, [pc, #544]	; (800df50 <ip4_frag+0x27c>)
 800dd2e:	f000 fa4f 	bl	800e1d0 <iprintf>
 800dd32:	f06f 0305 	mvn.w	r3, #5
 800dd36:	e102      	b.n	800df3e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800dd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3a:	88db      	ldrh	r3, [r3, #6]
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7f6 f994 	bl	800406c <lwip_htons>
 800dd44:	4603      	mov	r3, r0
 800dd46:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800dd48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dd4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dd4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800dd52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dd54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dd58:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	891b      	ldrh	r3, [r3, #8]
 800dd5e:	3b14      	subs	r3, #20
 800dd60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800dd64:	e0e1      	b.n	800df2a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800dd66:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dd68:	00db      	lsls	r3, r3, #3
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dd70:	4293      	cmp	r3, r2
 800dd72:	bf28      	it	cs
 800dd74:	4613      	movcs	r3, r2
 800dd76:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800dd78:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dd7c:	2114      	movs	r1, #20
 800dd7e:	200e      	movs	r0, #14
 800dd80:	f7f7 f944 	bl	800500c <pbuf_alloc>
 800dd84:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800dd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	f000 80d5 	beq.w	800df38 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800dd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd90:	895b      	ldrh	r3, [r3, #10]
 800dd92:	2b13      	cmp	r3, #19
 800dd94:	d806      	bhi.n	800dda4 <ip4_frag+0xd0>
 800dd96:	4b6c      	ldr	r3, [pc, #432]	; (800df48 <ip4_frag+0x274>)
 800dd98:	f44f 7249 	mov.w	r2, #804	; 0x324
 800dd9c:	496d      	ldr	r1, [pc, #436]	; (800df54 <ip4_frag+0x280>)
 800dd9e:	486c      	ldr	r0, [pc, #432]	; (800df50 <ip4_frag+0x27c>)
 800dda0:	f000 fa16 	bl	800e1d0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800dda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	2214      	movs	r2, #20
 800ddaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ddac:	4618      	mov	r0, r3
 800ddae:	f000 f9df 	bl	800e170 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ddb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800ddb8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ddba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800ddbe:	e064      	b.n	800de8a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	895a      	ldrh	r2, [r3, #10]
 800ddc4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ddc6:	1ad3      	subs	r3, r2, r3
 800ddc8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	895b      	ldrh	r3, [r3, #10]
 800ddce:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d906      	bls.n	800dde2 <ip4_frag+0x10e>
 800ddd4:	4b5c      	ldr	r3, [pc, #368]	; (800df48 <ip4_frag+0x274>)
 800ddd6:	f240 322d 	movw	r2, #813	; 0x32d
 800ddda:	495f      	ldr	r1, [pc, #380]	; (800df58 <ip4_frag+0x284>)
 800dddc:	485c      	ldr	r0, [pc, #368]	; (800df50 <ip4_frag+0x27c>)
 800ddde:	f000 f9f7 	bl	800e1d0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800dde2:	8bfa      	ldrh	r2, [r7, #30]
 800dde4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dde8:	4293      	cmp	r3, r2
 800ddea:	bf28      	it	cs
 800ddec:	4613      	movcs	r3, r2
 800ddee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ddf2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d105      	bne.n	800de06 <ip4_frag+0x132>
        poff = 0;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	60fb      	str	r3, [r7, #12]
        continue;
 800de04:	e041      	b.n	800de8a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800de06:	f7ff ff0d 	bl	800dc24 <ip_frag_alloc_pbuf_custom_ref>
 800de0a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800de0c:	69bb      	ldr	r3, [r7, #24]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d103      	bne.n	800de1a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800de12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de14:	f7f7 fbde 	bl	80055d4 <pbuf_free>
        goto memerr;
 800de18:	e08f      	b.n	800df3a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800de1a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800de20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800de22:	4413      	add	r3, r2
 800de24:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800de28:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800de2c:	9201      	str	r2, [sp, #4]
 800de2e:	9300      	str	r3, [sp, #0]
 800de30:	4603      	mov	r3, r0
 800de32:	2241      	movs	r2, #65	; 0x41
 800de34:	2000      	movs	r0, #0
 800de36:	f7f7 fa13 	bl	8005260 <pbuf_alloced_custom>
 800de3a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d106      	bne.n	800de50 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800de42:	69b8      	ldr	r0, [r7, #24]
 800de44:	f7ff fef6 	bl	800dc34 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800de48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de4a:	f7f7 fbc3 	bl	80055d4 <pbuf_free>
        goto memerr;
 800de4e:	e074      	b.n	800df3a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f7f7 fc5f 	bl	8005714 <pbuf_ref>
      pcr->original = p;
 800de56:	69bb      	ldr	r3, [r7, #24]
 800de58:	68fa      	ldr	r2, [r7, #12]
 800de5a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800de5c:	69bb      	ldr	r3, [r7, #24]
 800de5e:	4a3f      	ldr	r2, [pc, #252]	; (800df5c <ip4_frag+0x288>)
 800de60:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800de62:	6979      	ldr	r1, [r7, #20]
 800de64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de66:	f7f7 fc77 	bl	8005758 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800de6a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800de6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de72:	1ad3      	subs	r3, r2, r3
 800de74:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800de78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d004      	beq.n	800de8a <ip4_frag+0x1b6>
        poff = 0;
 800de80:	2300      	movs	r3, #0
 800de82:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800de8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d196      	bne.n	800ddc0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800de92:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800de94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de98:	4413      	add	r3, r2
 800de9a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dea0:	f1a3 0213 	sub.w	r2, r3, #19
 800dea4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dea8:	429a      	cmp	r2, r3
 800deaa:	bfcc      	ite	gt
 800deac:	2301      	movgt	r3, #1
 800deae:	2300      	movle	r3, #0
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800deb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800deb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800debc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800debe:	6a3b      	ldr	r3, [r7, #32]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d002      	beq.n	800deca <ip4_frag+0x1f6>
 800dec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d003      	beq.n	800ded2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800deca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800decc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ded0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ded2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7f6 f8c9 	bl	800406c <lwip_htons>
 800deda:	4603      	mov	r3, r0
 800dedc:	461a      	mov	r2, r3
 800dede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800dee2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dee4:	3314      	adds	r3, #20
 800dee6:	b29b      	uxth	r3, r3
 800dee8:	4618      	mov	r0, r3
 800deea:	f7f6 f8bf 	bl	800406c <lwip_htons>
 800deee:	4603      	mov	r3, r0
 800def0:	461a      	mov	r2, r3
 800def2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800def6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def8:	2200      	movs	r2, #0
 800defa:	729a      	strb	r2, [r3, #10]
 800defc:	2200      	movs	r2, #0
 800defe:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	695b      	ldr	r3, [r3, #20]
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df08:	68b8      	ldr	r0, [r7, #8]
 800df0a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800df0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df0e:	f7f7 fb61 	bl	80055d4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800df12:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800df18:	1ad3      	subs	r3, r2, r3
 800df1a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800df1e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800df22:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800df24:	4413      	add	r3, r2
 800df26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800df2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df2e:	2b00      	cmp	r3, #0
 800df30:	f47f af19 	bne.w	800dd66 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800df34:	2300      	movs	r3, #0
 800df36:	e002      	b.n	800df3e <ip4_frag+0x26a>
      goto memerr;
 800df38:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800df3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3748      	adds	r7, #72	; 0x48
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	08011cdc 	.word	0x08011cdc
 800df4c:	08011eb8 	.word	0x08011eb8
 800df50:	08011d24 	.word	0x08011d24
 800df54:	08011ed4 	.word	0x08011ed4
 800df58:	08011ef4 	.word	0x08011ef4
 800df5c:	0800dc6d 	.word	0x0800dc6d

0800df60 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b086      	sub	sp, #24
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800df6a:	230e      	movs	r3, #14
 800df6c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	895b      	ldrh	r3, [r3, #10]
 800df72:	2b0e      	cmp	r3, #14
 800df74:	d96e      	bls.n	800e054 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	7bdb      	ldrb	r3, [r3, #15]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d106      	bne.n	800df8c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df84:	3301      	adds	r3, #1
 800df86:	b2da      	uxtb	r2, r3
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	7b1a      	ldrb	r2, [r3, #12]
 800df96:	7b5b      	ldrb	r3, [r3, #13]
 800df98:	021b      	lsls	r3, r3, #8
 800df9a:	4313      	orrs	r3, r2
 800df9c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	f003 0301 	and.w	r3, r3, #1
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d023      	beq.n	800dff2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	2b01      	cmp	r3, #1
 800dfb0:	d10f      	bne.n	800dfd2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	785b      	ldrb	r3, [r3, #1]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d11b      	bne.n	800dff2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800dfbe:	2b5e      	cmp	r3, #94	; 0x5e
 800dfc0:	d117      	bne.n	800dff2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	7b5b      	ldrb	r3, [r3, #13]
 800dfc6:	f043 0310 	orr.w	r3, r3, #16
 800dfca:	b2da      	uxtb	r2, r3
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	735a      	strb	r2, [r3, #13]
 800dfd0:	e00f      	b.n	800dff2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	2206      	movs	r2, #6
 800dfd6:	4928      	ldr	r1, [pc, #160]	; (800e078 <ethernet_input+0x118>)
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f000 f8bb 	bl	800e154 <memcmp>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d106      	bne.n	800dff2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	7b5b      	ldrb	r3, [r3, #13]
 800dfe8:	f043 0308 	orr.w	r3, r3, #8
 800dfec:	b2da      	uxtb	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800dff2:	89fb      	ldrh	r3, [r7, #14]
 800dff4:	2b08      	cmp	r3, #8
 800dff6:	d003      	beq.n	800e000 <ethernet_input+0xa0>
 800dff8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800dffc:	d014      	beq.n	800e028 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800dffe:	e032      	b.n	800e066 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e006:	f003 0308 	and.w	r3, r3, #8
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d024      	beq.n	800e058 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e00e:	8afb      	ldrh	r3, [r7, #22]
 800e010:	4619      	mov	r1, r3
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f7f7 fa58 	bl	80054c8 <pbuf_remove_header>
 800e018:	4603      	mov	r3, r0
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d11e      	bne.n	800e05c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e01e:	6839      	ldr	r1, [r7, #0]
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f7fe ff27 	bl	800ce74 <ip4_input>
      break;
 800e026:	e013      	b.n	800e050 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e02e:	f003 0308 	and.w	r3, r3, #8
 800e032:	2b00      	cmp	r3, #0
 800e034:	d014      	beq.n	800e060 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e036:	8afb      	ldrh	r3, [r7, #22]
 800e038:	4619      	mov	r1, r3
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f7f7 fa44 	bl	80054c8 <pbuf_remove_header>
 800e040:	4603      	mov	r3, r0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d10e      	bne.n	800e064 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e046:	6839      	ldr	r1, [r7, #0]
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f7fe f8c7 	bl	800c1dc <etharp_input>
      break;
 800e04e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e050:	2300      	movs	r3, #0
 800e052:	e00c      	b.n	800e06e <ethernet_input+0x10e>
    goto free_and_return;
 800e054:	bf00      	nop
 800e056:	e006      	b.n	800e066 <ethernet_input+0x106>
        goto free_and_return;
 800e058:	bf00      	nop
 800e05a:	e004      	b.n	800e066 <ethernet_input+0x106>
        goto free_and_return;
 800e05c:	bf00      	nop
 800e05e:	e002      	b.n	800e066 <ethernet_input+0x106>
        goto free_and_return;
 800e060:	bf00      	nop
 800e062:	e000      	b.n	800e066 <ethernet_input+0x106>
        goto free_and_return;
 800e064:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f7f7 fab4 	bl	80055d4 <pbuf_free>
  return ERR_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3718      	adds	r7, #24
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	08012084 	.word	0x08012084

0800e07c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b086      	sub	sp, #24
 800e080:	af00      	add	r7, sp, #0
 800e082:	60f8      	str	r0, [r7, #12]
 800e084:	60b9      	str	r1, [r7, #8]
 800e086:	607a      	str	r2, [r7, #4]
 800e088:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e08a:	8c3b      	ldrh	r3, [r7, #32]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7f5 ffed 	bl	800406c <lwip_htons>
 800e092:	4603      	mov	r3, r0
 800e094:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e096:	210e      	movs	r1, #14
 800e098:	68b8      	ldr	r0, [r7, #8]
 800e09a:	f7f7 fa05 	bl	80054a8 <pbuf_add_header>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d125      	bne.n	800e0f0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	685b      	ldr	r3, [r3, #4]
 800e0a8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	8afa      	ldrh	r2, [r7, #22]
 800e0ae:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	2206      	movs	r2, #6
 800e0b4:	6839      	ldr	r1, [r7, #0]
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f000 f85a 	bl	800e170 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	3306      	adds	r3, #6
 800e0c0:	2206      	movs	r2, #6
 800e0c2:	6879      	ldr	r1, [r7, #4]
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f000 f853 	bl	800e170 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e0d0:	2b06      	cmp	r3, #6
 800e0d2:	d006      	beq.n	800e0e2 <ethernet_output+0x66>
 800e0d4:	4b0a      	ldr	r3, [pc, #40]	; (800e100 <ethernet_output+0x84>)
 800e0d6:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e0da:	490a      	ldr	r1, [pc, #40]	; (800e104 <ethernet_output+0x88>)
 800e0dc:	480a      	ldr	r0, [pc, #40]	; (800e108 <ethernet_output+0x8c>)
 800e0de:	f000 f877 	bl	800e1d0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	699b      	ldr	r3, [r3, #24]
 800e0e6:	68b9      	ldr	r1, [r7, #8]
 800e0e8:	68f8      	ldr	r0, [r7, #12]
 800e0ea:	4798      	blx	r3
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	e002      	b.n	800e0f6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e0f0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e0f2:	f06f 0301 	mvn.w	r3, #1
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3718      	adds	r7, #24
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	08011f04 	.word	0x08011f04
 800e104:	08011f3c 	.word	0x08011f3c
 800e108:	08011f70 	.word	0x08011f70

0800e10c <__libc_init_array>:
 800e10c:	b570      	push	{r4, r5, r6, lr}
 800e10e:	4d0d      	ldr	r5, [pc, #52]	; (800e144 <__libc_init_array+0x38>)
 800e110:	4c0d      	ldr	r4, [pc, #52]	; (800e148 <__libc_init_array+0x3c>)
 800e112:	1b64      	subs	r4, r4, r5
 800e114:	10a4      	asrs	r4, r4, #2
 800e116:	2600      	movs	r6, #0
 800e118:	42a6      	cmp	r6, r4
 800e11a:	d109      	bne.n	800e130 <__libc_init_array+0x24>
 800e11c:	4d0b      	ldr	r5, [pc, #44]	; (800e14c <__libc_init_array+0x40>)
 800e11e:	4c0c      	ldr	r4, [pc, #48]	; (800e150 <__libc_init_array+0x44>)
 800e120:	f001 fa2e 	bl	800f580 <_init>
 800e124:	1b64      	subs	r4, r4, r5
 800e126:	10a4      	asrs	r4, r4, #2
 800e128:	2600      	movs	r6, #0
 800e12a:	42a6      	cmp	r6, r4
 800e12c:	d105      	bne.n	800e13a <__libc_init_array+0x2e>
 800e12e:	bd70      	pop	{r4, r5, r6, pc}
 800e130:	f855 3b04 	ldr.w	r3, [r5], #4
 800e134:	4798      	blx	r3
 800e136:	3601      	adds	r6, #1
 800e138:	e7ee      	b.n	800e118 <__libc_init_array+0xc>
 800e13a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e13e:	4798      	blx	r3
 800e140:	3601      	adds	r6, #1
 800e142:	e7f2      	b.n	800e12a <__libc_init_array+0x1e>
 800e144:	080121e8 	.word	0x080121e8
 800e148:	080121e8 	.word	0x080121e8
 800e14c:	080121e8 	.word	0x080121e8
 800e150:	080121ec 	.word	0x080121ec

0800e154 <memcmp>:
 800e154:	b530      	push	{r4, r5, lr}
 800e156:	3901      	subs	r1, #1
 800e158:	2400      	movs	r4, #0
 800e15a:	42a2      	cmp	r2, r4
 800e15c:	d101      	bne.n	800e162 <memcmp+0xe>
 800e15e:	2000      	movs	r0, #0
 800e160:	e005      	b.n	800e16e <memcmp+0x1a>
 800e162:	5d03      	ldrb	r3, [r0, r4]
 800e164:	3401      	adds	r4, #1
 800e166:	5d0d      	ldrb	r5, [r1, r4]
 800e168:	42ab      	cmp	r3, r5
 800e16a:	d0f6      	beq.n	800e15a <memcmp+0x6>
 800e16c:	1b58      	subs	r0, r3, r5
 800e16e:	bd30      	pop	{r4, r5, pc}

0800e170 <memcpy>:
 800e170:	440a      	add	r2, r1
 800e172:	4291      	cmp	r1, r2
 800e174:	f100 33ff 	add.w	r3, r0, #4294967295
 800e178:	d100      	bne.n	800e17c <memcpy+0xc>
 800e17a:	4770      	bx	lr
 800e17c:	b510      	push	{r4, lr}
 800e17e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e182:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e186:	4291      	cmp	r1, r2
 800e188:	d1f9      	bne.n	800e17e <memcpy+0xe>
 800e18a:	bd10      	pop	{r4, pc}

0800e18c <memmove>:
 800e18c:	4288      	cmp	r0, r1
 800e18e:	b510      	push	{r4, lr}
 800e190:	eb01 0402 	add.w	r4, r1, r2
 800e194:	d902      	bls.n	800e19c <memmove+0x10>
 800e196:	4284      	cmp	r4, r0
 800e198:	4623      	mov	r3, r4
 800e19a:	d807      	bhi.n	800e1ac <memmove+0x20>
 800e19c:	1e43      	subs	r3, r0, #1
 800e19e:	42a1      	cmp	r1, r4
 800e1a0:	d008      	beq.n	800e1b4 <memmove+0x28>
 800e1a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e1aa:	e7f8      	b.n	800e19e <memmove+0x12>
 800e1ac:	4402      	add	r2, r0
 800e1ae:	4601      	mov	r1, r0
 800e1b0:	428a      	cmp	r2, r1
 800e1b2:	d100      	bne.n	800e1b6 <memmove+0x2a>
 800e1b4:	bd10      	pop	{r4, pc}
 800e1b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e1ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e1be:	e7f7      	b.n	800e1b0 <memmove+0x24>

0800e1c0 <memset>:
 800e1c0:	4402      	add	r2, r0
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d100      	bne.n	800e1ca <memset+0xa>
 800e1c8:	4770      	bx	lr
 800e1ca:	f803 1b01 	strb.w	r1, [r3], #1
 800e1ce:	e7f9      	b.n	800e1c4 <memset+0x4>

0800e1d0 <iprintf>:
 800e1d0:	b40f      	push	{r0, r1, r2, r3}
 800e1d2:	4b0a      	ldr	r3, [pc, #40]	; (800e1fc <iprintf+0x2c>)
 800e1d4:	b513      	push	{r0, r1, r4, lr}
 800e1d6:	681c      	ldr	r4, [r3, #0]
 800e1d8:	b124      	cbz	r4, 800e1e4 <iprintf+0x14>
 800e1da:	69a3      	ldr	r3, [r4, #24]
 800e1dc:	b913      	cbnz	r3, 800e1e4 <iprintf+0x14>
 800e1de:	4620      	mov	r0, r4
 800e1e0:	f000 f8f8 	bl	800e3d4 <__sinit>
 800e1e4:	ab05      	add	r3, sp, #20
 800e1e6:	9a04      	ldr	r2, [sp, #16]
 800e1e8:	68a1      	ldr	r1, [r4, #8]
 800e1ea:	9301      	str	r3, [sp, #4]
 800e1ec:	4620      	mov	r0, r4
 800e1ee:	f000 fbdb 	bl	800e9a8 <_vfiprintf_r>
 800e1f2:	b002      	add	sp, #8
 800e1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1f8:	b004      	add	sp, #16
 800e1fa:	4770      	bx	lr
 800e1fc:	20000014 	.word	0x20000014

0800e200 <rand>:
 800e200:	4b17      	ldr	r3, [pc, #92]	; (800e260 <rand+0x60>)
 800e202:	b510      	push	{r4, lr}
 800e204:	681c      	ldr	r4, [r3, #0]
 800e206:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e208:	b9b3      	cbnz	r3, 800e238 <rand+0x38>
 800e20a:	2018      	movs	r0, #24
 800e20c:	f000 f994 	bl	800e538 <malloc>
 800e210:	63a0      	str	r0, [r4, #56]	; 0x38
 800e212:	b928      	cbnz	r0, 800e220 <rand+0x20>
 800e214:	4602      	mov	r2, r0
 800e216:	4b13      	ldr	r3, [pc, #76]	; (800e264 <rand+0x64>)
 800e218:	4813      	ldr	r0, [pc, #76]	; (800e268 <rand+0x68>)
 800e21a:	214e      	movs	r1, #78	; 0x4e
 800e21c:	f000 f864 	bl	800e2e8 <__assert_func>
 800e220:	4a12      	ldr	r2, [pc, #72]	; (800e26c <rand+0x6c>)
 800e222:	4b13      	ldr	r3, [pc, #76]	; (800e270 <rand+0x70>)
 800e224:	e9c0 2300 	strd	r2, r3, [r0]
 800e228:	4b12      	ldr	r3, [pc, #72]	; (800e274 <rand+0x74>)
 800e22a:	6083      	str	r3, [r0, #8]
 800e22c:	230b      	movs	r3, #11
 800e22e:	8183      	strh	r3, [r0, #12]
 800e230:	2201      	movs	r2, #1
 800e232:	2300      	movs	r3, #0
 800e234:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e238:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e23a:	480f      	ldr	r0, [pc, #60]	; (800e278 <rand+0x78>)
 800e23c:	690a      	ldr	r2, [r1, #16]
 800e23e:	694b      	ldr	r3, [r1, #20]
 800e240:	4c0e      	ldr	r4, [pc, #56]	; (800e27c <rand+0x7c>)
 800e242:	4350      	muls	r0, r2
 800e244:	fb04 0003 	mla	r0, r4, r3, r0
 800e248:	fba2 3404 	umull	r3, r4, r2, r4
 800e24c:	1c5a      	adds	r2, r3, #1
 800e24e:	4404      	add	r4, r0
 800e250:	f144 0000 	adc.w	r0, r4, #0
 800e254:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800e258:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e25c:	bd10      	pop	{r4, pc}
 800e25e:	bf00      	nop
 800e260:	20000014 	.word	0x20000014
 800e264:	08012098 	.word	0x08012098
 800e268:	080120af 	.word	0x080120af
 800e26c:	abcd330e 	.word	0xabcd330e
 800e270:	e66d1234 	.word	0xe66d1234
 800e274:	0005deec 	.word	0x0005deec
 800e278:	5851f42d 	.word	0x5851f42d
 800e27c:	4c957f2d 	.word	0x4c957f2d

0800e280 <siprintf>:
 800e280:	b40e      	push	{r1, r2, r3}
 800e282:	b500      	push	{lr}
 800e284:	b09c      	sub	sp, #112	; 0x70
 800e286:	ab1d      	add	r3, sp, #116	; 0x74
 800e288:	9002      	str	r0, [sp, #8]
 800e28a:	9006      	str	r0, [sp, #24]
 800e28c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e290:	4809      	ldr	r0, [pc, #36]	; (800e2b8 <siprintf+0x38>)
 800e292:	9107      	str	r1, [sp, #28]
 800e294:	9104      	str	r1, [sp, #16]
 800e296:	4909      	ldr	r1, [pc, #36]	; (800e2bc <siprintf+0x3c>)
 800e298:	f853 2b04 	ldr.w	r2, [r3], #4
 800e29c:	9105      	str	r1, [sp, #20]
 800e29e:	6800      	ldr	r0, [r0, #0]
 800e2a0:	9301      	str	r3, [sp, #4]
 800e2a2:	a902      	add	r1, sp, #8
 800e2a4:	f000 fa56 	bl	800e754 <_svfiprintf_r>
 800e2a8:	9b02      	ldr	r3, [sp, #8]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	701a      	strb	r2, [r3, #0]
 800e2ae:	b01c      	add	sp, #112	; 0x70
 800e2b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2b4:	b003      	add	sp, #12
 800e2b6:	4770      	bx	lr
 800e2b8:	20000014 	.word	0x20000014
 800e2bc:	ffff0208 	.word	0xffff0208

0800e2c0 <strncpy>:
 800e2c0:	b510      	push	{r4, lr}
 800e2c2:	3901      	subs	r1, #1
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	b132      	cbz	r2, 800e2d6 <strncpy+0x16>
 800e2c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e2cc:	f803 4b01 	strb.w	r4, [r3], #1
 800e2d0:	3a01      	subs	r2, #1
 800e2d2:	2c00      	cmp	r4, #0
 800e2d4:	d1f7      	bne.n	800e2c6 <strncpy+0x6>
 800e2d6:	441a      	add	r2, r3
 800e2d8:	2100      	movs	r1, #0
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d100      	bne.n	800e2e0 <strncpy+0x20>
 800e2de:	bd10      	pop	{r4, pc}
 800e2e0:	f803 1b01 	strb.w	r1, [r3], #1
 800e2e4:	e7f9      	b.n	800e2da <strncpy+0x1a>
	...

0800e2e8 <__assert_func>:
 800e2e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e2ea:	4614      	mov	r4, r2
 800e2ec:	461a      	mov	r2, r3
 800e2ee:	4b09      	ldr	r3, [pc, #36]	; (800e314 <__assert_func+0x2c>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	4605      	mov	r5, r0
 800e2f4:	68d8      	ldr	r0, [r3, #12]
 800e2f6:	b14c      	cbz	r4, 800e30c <__assert_func+0x24>
 800e2f8:	4b07      	ldr	r3, [pc, #28]	; (800e318 <__assert_func+0x30>)
 800e2fa:	9100      	str	r1, [sp, #0]
 800e2fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e300:	4906      	ldr	r1, [pc, #24]	; (800e31c <__assert_func+0x34>)
 800e302:	462b      	mov	r3, r5
 800e304:	f000 f8e4 	bl	800e4d0 <fiprintf>
 800e308:	f000 ff38 	bl	800f17c <abort>
 800e30c:	4b04      	ldr	r3, [pc, #16]	; (800e320 <__assert_func+0x38>)
 800e30e:	461c      	mov	r4, r3
 800e310:	e7f3      	b.n	800e2fa <__assert_func+0x12>
 800e312:	bf00      	nop
 800e314:	20000014 	.word	0x20000014
 800e318:	0801210e 	.word	0x0801210e
 800e31c:	0801211b 	.word	0x0801211b
 800e320:	08012149 	.word	0x08012149

0800e324 <std>:
 800e324:	2300      	movs	r3, #0
 800e326:	b510      	push	{r4, lr}
 800e328:	4604      	mov	r4, r0
 800e32a:	e9c0 3300 	strd	r3, r3, [r0]
 800e32e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e332:	6083      	str	r3, [r0, #8]
 800e334:	8181      	strh	r1, [r0, #12]
 800e336:	6643      	str	r3, [r0, #100]	; 0x64
 800e338:	81c2      	strh	r2, [r0, #14]
 800e33a:	6183      	str	r3, [r0, #24]
 800e33c:	4619      	mov	r1, r3
 800e33e:	2208      	movs	r2, #8
 800e340:	305c      	adds	r0, #92	; 0x5c
 800e342:	f7ff ff3d 	bl	800e1c0 <memset>
 800e346:	4b05      	ldr	r3, [pc, #20]	; (800e35c <std+0x38>)
 800e348:	6263      	str	r3, [r4, #36]	; 0x24
 800e34a:	4b05      	ldr	r3, [pc, #20]	; (800e360 <std+0x3c>)
 800e34c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e34e:	4b05      	ldr	r3, [pc, #20]	; (800e364 <std+0x40>)
 800e350:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e352:	4b05      	ldr	r3, [pc, #20]	; (800e368 <std+0x44>)
 800e354:	6224      	str	r4, [r4, #32]
 800e356:	6323      	str	r3, [r4, #48]	; 0x30
 800e358:	bd10      	pop	{r4, pc}
 800e35a:	bf00      	nop
 800e35c:	0800ef51 	.word	0x0800ef51
 800e360:	0800ef73 	.word	0x0800ef73
 800e364:	0800efab 	.word	0x0800efab
 800e368:	0800efcf 	.word	0x0800efcf

0800e36c <_cleanup_r>:
 800e36c:	4901      	ldr	r1, [pc, #4]	; (800e374 <_cleanup_r+0x8>)
 800e36e:	f000 b8c1 	b.w	800e4f4 <_fwalk_reent>
 800e372:	bf00      	nop
 800e374:	0800f2b9 	.word	0x0800f2b9

0800e378 <__sfmoreglue>:
 800e378:	b570      	push	{r4, r5, r6, lr}
 800e37a:	1e4a      	subs	r2, r1, #1
 800e37c:	2568      	movs	r5, #104	; 0x68
 800e37e:	4355      	muls	r5, r2
 800e380:	460e      	mov	r6, r1
 800e382:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e386:	f000 f92f 	bl	800e5e8 <_malloc_r>
 800e38a:	4604      	mov	r4, r0
 800e38c:	b140      	cbz	r0, 800e3a0 <__sfmoreglue+0x28>
 800e38e:	2100      	movs	r1, #0
 800e390:	e9c0 1600 	strd	r1, r6, [r0]
 800e394:	300c      	adds	r0, #12
 800e396:	60a0      	str	r0, [r4, #8]
 800e398:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e39c:	f7ff ff10 	bl	800e1c0 <memset>
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	bd70      	pop	{r4, r5, r6, pc}

0800e3a4 <__sfp_lock_acquire>:
 800e3a4:	4801      	ldr	r0, [pc, #4]	; (800e3ac <__sfp_lock_acquire+0x8>)
 800e3a6:	f000 b8c5 	b.w	800e534 <__retarget_lock_acquire_recursive>
 800e3aa:	bf00      	nop
 800e3ac:	20008b78 	.word	0x20008b78

0800e3b0 <__sfp_lock_release>:
 800e3b0:	4801      	ldr	r0, [pc, #4]	; (800e3b8 <__sfp_lock_release+0x8>)
 800e3b2:	f000 b8c0 	b.w	800e536 <__retarget_lock_release_recursive>
 800e3b6:	bf00      	nop
 800e3b8:	20008b78 	.word	0x20008b78

0800e3bc <__sinit_lock_acquire>:
 800e3bc:	4801      	ldr	r0, [pc, #4]	; (800e3c4 <__sinit_lock_acquire+0x8>)
 800e3be:	f000 b8b9 	b.w	800e534 <__retarget_lock_acquire_recursive>
 800e3c2:	bf00      	nop
 800e3c4:	20008b73 	.word	0x20008b73

0800e3c8 <__sinit_lock_release>:
 800e3c8:	4801      	ldr	r0, [pc, #4]	; (800e3d0 <__sinit_lock_release+0x8>)
 800e3ca:	f000 b8b4 	b.w	800e536 <__retarget_lock_release_recursive>
 800e3ce:	bf00      	nop
 800e3d0:	20008b73 	.word	0x20008b73

0800e3d4 <__sinit>:
 800e3d4:	b510      	push	{r4, lr}
 800e3d6:	4604      	mov	r4, r0
 800e3d8:	f7ff fff0 	bl	800e3bc <__sinit_lock_acquire>
 800e3dc:	69a3      	ldr	r3, [r4, #24]
 800e3de:	b11b      	cbz	r3, 800e3e8 <__sinit+0x14>
 800e3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3e4:	f7ff bff0 	b.w	800e3c8 <__sinit_lock_release>
 800e3e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e3ec:	6523      	str	r3, [r4, #80]	; 0x50
 800e3ee:	4b13      	ldr	r3, [pc, #76]	; (800e43c <__sinit+0x68>)
 800e3f0:	4a13      	ldr	r2, [pc, #76]	; (800e440 <__sinit+0x6c>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e3f6:	42a3      	cmp	r3, r4
 800e3f8:	bf04      	itt	eq
 800e3fa:	2301      	moveq	r3, #1
 800e3fc:	61a3      	streq	r3, [r4, #24]
 800e3fe:	4620      	mov	r0, r4
 800e400:	f000 f820 	bl	800e444 <__sfp>
 800e404:	6060      	str	r0, [r4, #4]
 800e406:	4620      	mov	r0, r4
 800e408:	f000 f81c 	bl	800e444 <__sfp>
 800e40c:	60a0      	str	r0, [r4, #8]
 800e40e:	4620      	mov	r0, r4
 800e410:	f000 f818 	bl	800e444 <__sfp>
 800e414:	2200      	movs	r2, #0
 800e416:	60e0      	str	r0, [r4, #12]
 800e418:	2104      	movs	r1, #4
 800e41a:	6860      	ldr	r0, [r4, #4]
 800e41c:	f7ff ff82 	bl	800e324 <std>
 800e420:	68a0      	ldr	r0, [r4, #8]
 800e422:	2201      	movs	r2, #1
 800e424:	2109      	movs	r1, #9
 800e426:	f7ff ff7d 	bl	800e324 <std>
 800e42a:	68e0      	ldr	r0, [r4, #12]
 800e42c:	2202      	movs	r2, #2
 800e42e:	2112      	movs	r1, #18
 800e430:	f7ff ff78 	bl	800e324 <std>
 800e434:	2301      	movs	r3, #1
 800e436:	61a3      	str	r3, [r4, #24]
 800e438:	e7d2      	b.n	800e3e0 <__sinit+0xc>
 800e43a:	bf00      	nop
 800e43c:	08012094 	.word	0x08012094
 800e440:	0800e36d 	.word	0x0800e36d

0800e444 <__sfp>:
 800e444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e446:	4607      	mov	r7, r0
 800e448:	f7ff ffac 	bl	800e3a4 <__sfp_lock_acquire>
 800e44c:	4b1e      	ldr	r3, [pc, #120]	; (800e4c8 <__sfp+0x84>)
 800e44e:	681e      	ldr	r6, [r3, #0]
 800e450:	69b3      	ldr	r3, [r6, #24]
 800e452:	b913      	cbnz	r3, 800e45a <__sfp+0x16>
 800e454:	4630      	mov	r0, r6
 800e456:	f7ff ffbd 	bl	800e3d4 <__sinit>
 800e45a:	3648      	adds	r6, #72	; 0x48
 800e45c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e460:	3b01      	subs	r3, #1
 800e462:	d503      	bpl.n	800e46c <__sfp+0x28>
 800e464:	6833      	ldr	r3, [r6, #0]
 800e466:	b30b      	cbz	r3, 800e4ac <__sfp+0x68>
 800e468:	6836      	ldr	r6, [r6, #0]
 800e46a:	e7f7      	b.n	800e45c <__sfp+0x18>
 800e46c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e470:	b9d5      	cbnz	r5, 800e4a8 <__sfp+0x64>
 800e472:	4b16      	ldr	r3, [pc, #88]	; (800e4cc <__sfp+0x88>)
 800e474:	60e3      	str	r3, [r4, #12]
 800e476:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e47a:	6665      	str	r5, [r4, #100]	; 0x64
 800e47c:	f000 f859 	bl	800e532 <__retarget_lock_init_recursive>
 800e480:	f7ff ff96 	bl	800e3b0 <__sfp_lock_release>
 800e484:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e488:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e48c:	6025      	str	r5, [r4, #0]
 800e48e:	61a5      	str	r5, [r4, #24]
 800e490:	2208      	movs	r2, #8
 800e492:	4629      	mov	r1, r5
 800e494:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e498:	f7ff fe92 	bl	800e1c0 <memset>
 800e49c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e4a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4a8:	3468      	adds	r4, #104	; 0x68
 800e4aa:	e7d9      	b.n	800e460 <__sfp+0x1c>
 800e4ac:	2104      	movs	r1, #4
 800e4ae:	4638      	mov	r0, r7
 800e4b0:	f7ff ff62 	bl	800e378 <__sfmoreglue>
 800e4b4:	4604      	mov	r4, r0
 800e4b6:	6030      	str	r0, [r6, #0]
 800e4b8:	2800      	cmp	r0, #0
 800e4ba:	d1d5      	bne.n	800e468 <__sfp+0x24>
 800e4bc:	f7ff ff78 	bl	800e3b0 <__sfp_lock_release>
 800e4c0:	230c      	movs	r3, #12
 800e4c2:	603b      	str	r3, [r7, #0]
 800e4c4:	e7ee      	b.n	800e4a4 <__sfp+0x60>
 800e4c6:	bf00      	nop
 800e4c8:	08012094 	.word	0x08012094
 800e4cc:	ffff0001 	.word	0xffff0001

0800e4d0 <fiprintf>:
 800e4d0:	b40e      	push	{r1, r2, r3}
 800e4d2:	b503      	push	{r0, r1, lr}
 800e4d4:	4601      	mov	r1, r0
 800e4d6:	ab03      	add	r3, sp, #12
 800e4d8:	4805      	ldr	r0, [pc, #20]	; (800e4f0 <fiprintf+0x20>)
 800e4da:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4de:	6800      	ldr	r0, [r0, #0]
 800e4e0:	9301      	str	r3, [sp, #4]
 800e4e2:	f000 fa61 	bl	800e9a8 <_vfiprintf_r>
 800e4e6:	b002      	add	sp, #8
 800e4e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4ec:	b003      	add	sp, #12
 800e4ee:	4770      	bx	lr
 800e4f0:	20000014 	.word	0x20000014

0800e4f4 <_fwalk_reent>:
 800e4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4f8:	4606      	mov	r6, r0
 800e4fa:	4688      	mov	r8, r1
 800e4fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e500:	2700      	movs	r7, #0
 800e502:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e506:	f1b9 0901 	subs.w	r9, r9, #1
 800e50a:	d505      	bpl.n	800e518 <_fwalk_reent+0x24>
 800e50c:	6824      	ldr	r4, [r4, #0]
 800e50e:	2c00      	cmp	r4, #0
 800e510:	d1f7      	bne.n	800e502 <_fwalk_reent+0xe>
 800e512:	4638      	mov	r0, r7
 800e514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e518:	89ab      	ldrh	r3, [r5, #12]
 800e51a:	2b01      	cmp	r3, #1
 800e51c:	d907      	bls.n	800e52e <_fwalk_reent+0x3a>
 800e51e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e522:	3301      	adds	r3, #1
 800e524:	d003      	beq.n	800e52e <_fwalk_reent+0x3a>
 800e526:	4629      	mov	r1, r5
 800e528:	4630      	mov	r0, r6
 800e52a:	47c0      	blx	r8
 800e52c:	4307      	orrs	r7, r0
 800e52e:	3568      	adds	r5, #104	; 0x68
 800e530:	e7e9      	b.n	800e506 <_fwalk_reent+0x12>

0800e532 <__retarget_lock_init_recursive>:
 800e532:	4770      	bx	lr

0800e534 <__retarget_lock_acquire_recursive>:
 800e534:	4770      	bx	lr

0800e536 <__retarget_lock_release_recursive>:
 800e536:	4770      	bx	lr

0800e538 <malloc>:
 800e538:	4b02      	ldr	r3, [pc, #8]	; (800e544 <malloc+0xc>)
 800e53a:	4601      	mov	r1, r0
 800e53c:	6818      	ldr	r0, [r3, #0]
 800e53e:	f000 b853 	b.w	800e5e8 <_malloc_r>
 800e542:	bf00      	nop
 800e544:	20000014 	.word	0x20000014

0800e548 <_free_r>:
 800e548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e54a:	2900      	cmp	r1, #0
 800e54c:	d048      	beq.n	800e5e0 <_free_r+0x98>
 800e54e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e552:	9001      	str	r0, [sp, #4]
 800e554:	2b00      	cmp	r3, #0
 800e556:	f1a1 0404 	sub.w	r4, r1, #4
 800e55a:	bfb8      	it	lt
 800e55c:	18e4      	addlt	r4, r4, r3
 800e55e:	f000 ff5d 	bl	800f41c <__malloc_lock>
 800e562:	4a20      	ldr	r2, [pc, #128]	; (800e5e4 <_free_r+0x9c>)
 800e564:	9801      	ldr	r0, [sp, #4]
 800e566:	6813      	ldr	r3, [r2, #0]
 800e568:	4615      	mov	r5, r2
 800e56a:	b933      	cbnz	r3, 800e57a <_free_r+0x32>
 800e56c:	6063      	str	r3, [r4, #4]
 800e56e:	6014      	str	r4, [r2, #0]
 800e570:	b003      	add	sp, #12
 800e572:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e576:	f000 bf57 	b.w	800f428 <__malloc_unlock>
 800e57a:	42a3      	cmp	r3, r4
 800e57c:	d90b      	bls.n	800e596 <_free_r+0x4e>
 800e57e:	6821      	ldr	r1, [r4, #0]
 800e580:	1862      	adds	r2, r4, r1
 800e582:	4293      	cmp	r3, r2
 800e584:	bf04      	itt	eq
 800e586:	681a      	ldreq	r2, [r3, #0]
 800e588:	685b      	ldreq	r3, [r3, #4]
 800e58a:	6063      	str	r3, [r4, #4]
 800e58c:	bf04      	itt	eq
 800e58e:	1852      	addeq	r2, r2, r1
 800e590:	6022      	streq	r2, [r4, #0]
 800e592:	602c      	str	r4, [r5, #0]
 800e594:	e7ec      	b.n	800e570 <_free_r+0x28>
 800e596:	461a      	mov	r2, r3
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	b10b      	cbz	r3, 800e5a0 <_free_r+0x58>
 800e59c:	42a3      	cmp	r3, r4
 800e59e:	d9fa      	bls.n	800e596 <_free_r+0x4e>
 800e5a0:	6811      	ldr	r1, [r2, #0]
 800e5a2:	1855      	adds	r5, r2, r1
 800e5a4:	42a5      	cmp	r5, r4
 800e5a6:	d10b      	bne.n	800e5c0 <_free_r+0x78>
 800e5a8:	6824      	ldr	r4, [r4, #0]
 800e5aa:	4421      	add	r1, r4
 800e5ac:	1854      	adds	r4, r2, r1
 800e5ae:	42a3      	cmp	r3, r4
 800e5b0:	6011      	str	r1, [r2, #0]
 800e5b2:	d1dd      	bne.n	800e570 <_free_r+0x28>
 800e5b4:	681c      	ldr	r4, [r3, #0]
 800e5b6:	685b      	ldr	r3, [r3, #4]
 800e5b8:	6053      	str	r3, [r2, #4]
 800e5ba:	4421      	add	r1, r4
 800e5bc:	6011      	str	r1, [r2, #0]
 800e5be:	e7d7      	b.n	800e570 <_free_r+0x28>
 800e5c0:	d902      	bls.n	800e5c8 <_free_r+0x80>
 800e5c2:	230c      	movs	r3, #12
 800e5c4:	6003      	str	r3, [r0, #0]
 800e5c6:	e7d3      	b.n	800e570 <_free_r+0x28>
 800e5c8:	6825      	ldr	r5, [r4, #0]
 800e5ca:	1961      	adds	r1, r4, r5
 800e5cc:	428b      	cmp	r3, r1
 800e5ce:	bf04      	itt	eq
 800e5d0:	6819      	ldreq	r1, [r3, #0]
 800e5d2:	685b      	ldreq	r3, [r3, #4]
 800e5d4:	6063      	str	r3, [r4, #4]
 800e5d6:	bf04      	itt	eq
 800e5d8:	1949      	addeq	r1, r1, r5
 800e5da:	6021      	streq	r1, [r4, #0]
 800e5dc:	6054      	str	r4, [r2, #4]
 800e5de:	e7c7      	b.n	800e570 <_free_r+0x28>
 800e5e0:	b003      	add	sp, #12
 800e5e2:	bd30      	pop	{r4, r5, pc}
 800e5e4:	2000020c 	.word	0x2000020c

0800e5e8 <_malloc_r>:
 800e5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ea:	1ccd      	adds	r5, r1, #3
 800e5ec:	f025 0503 	bic.w	r5, r5, #3
 800e5f0:	3508      	adds	r5, #8
 800e5f2:	2d0c      	cmp	r5, #12
 800e5f4:	bf38      	it	cc
 800e5f6:	250c      	movcc	r5, #12
 800e5f8:	2d00      	cmp	r5, #0
 800e5fa:	4606      	mov	r6, r0
 800e5fc:	db01      	blt.n	800e602 <_malloc_r+0x1a>
 800e5fe:	42a9      	cmp	r1, r5
 800e600:	d903      	bls.n	800e60a <_malloc_r+0x22>
 800e602:	230c      	movs	r3, #12
 800e604:	6033      	str	r3, [r6, #0]
 800e606:	2000      	movs	r0, #0
 800e608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e60a:	f000 ff07 	bl	800f41c <__malloc_lock>
 800e60e:	4921      	ldr	r1, [pc, #132]	; (800e694 <_malloc_r+0xac>)
 800e610:	680a      	ldr	r2, [r1, #0]
 800e612:	4614      	mov	r4, r2
 800e614:	b99c      	cbnz	r4, 800e63e <_malloc_r+0x56>
 800e616:	4f20      	ldr	r7, [pc, #128]	; (800e698 <_malloc_r+0xb0>)
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	b923      	cbnz	r3, 800e626 <_malloc_r+0x3e>
 800e61c:	4621      	mov	r1, r4
 800e61e:	4630      	mov	r0, r6
 800e620:	f000 fc86 	bl	800ef30 <_sbrk_r>
 800e624:	6038      	str	r0, [r7, #0]
 800e626:	4629      	mov	r1, r5
 800e628:	4630      	mov	r0, r6
 800e62a:	f000 fc81 	bl	800ef30 <_sbrk_r>
 800e62e:	1c43      	adds	r3, r0, #1
 800e630:	d123      	bne.n	800e67a <_malloc_r+0x92>
 800e632:	230c      	movs	r3, #12
 800e634:	6033      	str	r3, [r6, #0]
 800e636:	4630      	mov	r0, r6
 800e638:	f000 fef6 	bl	800f428 <__malloc_unlock>
 800e63c:	e7e3      	b.n	800e606 <_malloc_r+0x1e>
 800e63e:	6823      	ldr	r3, [r4, #0]
 800e640:	1b5b      	subs	r3, r3, r5
 800e642:	d417      	bmi.n	800e674 <_malloc_r+0x8c>
 800e644:	2b0b      	cmp	r3, #11
 800e646:	d903      	bls.n	800e650 <_malloc_r+0x68>
 800e648:	6023      	str	r3, [r4, #0]
 800e64a:	441c      	add	r4, r3
 800e64c:	6025      	str	r5, [r4, #0]
 800e64e:	e004      	b.n	800e65a <_malloc_r+0x72>
 800e650:	6863      	ldr	r3, [r4, #4]
 800e652:	42a2      	cmp	r2, r4
 800e654:	bf0c      	ite	eq
 800e656:	600b      	streq	r3, [r1, #0]
 800e658:	6053      	strne	r3, [r2, #4]
 800e65a:	4630      	mov	r0, r6
 800e65c:	f000 fee4 	bl	800f428 <__malloc_unlock>
 800e660:	f104 000b 	add.w	r0, r4, #11
 800e664:	1d23      	adds	r3, r4, #4
 800e666:	f020 0007 	bic.w	r0, r0, #7
 800e66a:	1ac2      	subs	r2, r0, r3
 800e66c:	d0cc      	beq.n	800e608 <_malloc_r+0x20>
 800e66e:	1a1b      	subs	r3, r3, r0
 800e670:	50a3      	str	r3, [r4, r2]
 800e672:	e7c9      	b.n	800e608 <_malloc_r+0x20>
 800e674:	4622      	mov	r2, r4
 800e676:	6864      	ldr	r4, [r4, #4]
 800e678:	e7cc      	b.n	800e614 <_malloc_r+0x2c>
 800e67a:	1cc4      	adds	r4, r0, #3
 800e67c:	f024 0403 	bic.w	r4, r4, #3
 800e680:	42a0      	cmp	r0, r4
 800e682:	d0e3      	beq.n	800e64c <_malloc_r+0x64>
 800e684:	1a21      	subs	r1, r4, r0
 800e686:	4630      	mov	r0, r6
 800e688:	f000 fc52 	bl	800ef30 <_sbrk_r>
 800e68c:	3001      	adds	r0, #1
 800e68e:	d1dd      	bne.n	800e64c <_malloc_r+0x64>
 800e690:	e7cf      	b.n	800e632 <_malloc_r+0x4a>
 800e692:	bf00      	nop
 800e694:	2000020c 	.word	0x2000020c
 800e698:	20000210 	.word	0x20000210

0800e69c <__ssputs_r>:
 800e69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6a0:	688e      	ldr	r6, [r1, #8]
 800e6a2:	429e      	cmp	r6, r3
 800e6a4:	4682      	mov	sl, r0
 800e6a6:	460c      	mov	r4, r1
 800e6a8:	4690      	mov	r8, r2
 800e6aa:	461f      	mov	r7, r3
 800e6ac:	d838      	bhi.n	800e720 <__ssputs_r+0x84>
 800e6ae:	898a      	ldrh	r2, [r1, #12]
 800e6b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e6b4:	d032      	beq.n	800e71c <__ssputs_r+0x80>
 800e6b6:	6825      	ldr	r5, [r4, #0]
 800e6b8:	6909      	ldr	r1, [r1, #16]
 800e6ba:	eba5 0901 	sub.w	r9, r5, r1
 800e6be:	6965      	ldr	r5, [r4, #20]
 800e6c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e6c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	444b      	add	r3, r9
 800e6cc:	106d      	asrs	r5, r5, #1
 800e6ce:	429d      	cmp	r5, r3
 800e6d0:	bf38      	it	cc
 800e6d2:	461d      	movcc	r5, r3
 800e6d4:	0553      	lsls	r3, r2, #21
 800e6d6:	d531      	bpl.n	800e73c <__ssputs_r+0xa0>
 800e6d8:	4629      	mov	r1, r5
 800e6da:	f7ff ff85 	bl	800e5e8 <_malloc_r>
 800e6de:	4606      	mov	r6, r0
 800e6e0:	b950      	cbnz	r0, 800e6f8 <__ssputs_r+0x5c>
 800e6e2:	230c      	movs	r3, #12
 800e6e4:	f8ca 3000 	str.w	r3, [sl]
 800e6e8:	89a3      	ldrh	r3, [r4, #12]
 800e6ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6ee:	81a3      	strh	r3, [r4, #12]
 800e6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6f8:	6921      	ldr	r1, [r4, #16]
 800e6fa:	464a      	mov	r2, r9
 800e6fc:	f7ff fd38 	bl	800e170 <memcpy>
 800e700:	89a3      	ldrh	r3, [r4, #12]
 800e702:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e70a:	81a3      	strh	r3, [r4, #12]
 800e70c:	6126      	str	r6, [r4, #16]
 800e70e:	6165      	str	r5, [r4, #20]
 800e710:	444e      	add	r6, r9
 800e712:	eba5 0509 	sub.w	r5, r5, r9
 800e716:	6026      	str	r6, [r4, #0]
 800e718:	60a5      	str	r5, [r4, #8]
 800e71a:	463e      	mov	r6, r7
 800e71c:	42be      	cmp	r6, r7
 800e71e:	d900      	bls.n	800e722 <__ssputs_r+0x86>
 800e720:	463e      	mov	r6, r7
 800e722:	4632      	mov	r2, r6
 800e724:	6820      	ldr	r0, [r4, #0]
 800e726:	4641      	mov	r1, r8
 800e728:	f7ff fd30 	bl	800e18c <memmove>
 800e72c:	68a3      	ldr	r3, [r4, #8]
 800e72e:	6822      	ldr	r2, [r4, #0]
 800e730:	1b9b      	subs	r3, r3, r6
 800e732:	4432      	add	r2, r6
 800e734:	60a3      	str	r3, [r4, #8]
 800e736:	6022      	str	r2, [r4, #0]
 800e738:	2000      	movs	r0, #0
 800e73a:	e7db      	b.n	800e6f4 <__ssputs_r+0x58>
 800e73c:	462a      	mov	r2, r5
 800e73e:	f000 fe79 	bl	800f434 <_realloc_r>
 800e742:	4606      	mov	r6, r0
 800e744:	2800      	cmp	r0, #0
 800e746:	d1e1      	bne.n	800e70c <__ssputs_r+0x70>
 800e748:	6921      	ldr	r1, [r4, #16]
 800e74a:	4650      	mov	r0, sl
 800e74c:	f7ff fefc 	bl	800e548 <_free_r>
 800e750:	e7c7      	b.n	800e6e2 <__ssputs_r+0x46>
	...

0800e754 <_svfiprintf_r>:
 800e754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e758:	4698      	mov	r8, r3
 800e75a:	898b      	ldrh	r3, [r1, #12]
 800e75c:	061b      	lsls	r3, r3, #24
 800e75e:	b09d      	sub	sp, #116	; 0x74
 800e760:	4607      	mov	r7, r0
 800e762:	460d      	mov	r5, r1
 800e764:	4614      	mov	r4, r2
 800e766:	d50e      	bpl.n	800e786 <_svfiprintf_r+0x32>
 800e768:	690b      	ldr	r3, [r1, #16]
 800e76a:	b963      	cbnz	r3, 800e786 <_svfiprintf_r+0x32>
 800e76c:	2140      	movs	r1, #64	; 0x40
 800e76e:	f7ff ff3b 	bl	800e5e8 <_malloc_r>
 800e772:	6028      	str	r0, [r5, #0]
 800e774:	6128      	str	r0, [r5, #16]
 800e776:	b920      	cbnz	r0, 800e782 <_svfiprintf_r+0x2e>
 800e778:	230c      	movs	r3, #12
 800e77a:	603b      	str	r3, [r7, #0]
 800e77c:	f04f 30ff 	mov.w	r0, #4294967295
 800e780:	e0d1      	b.n	800e926 <_svfiprintf_r+0x1d2>
 800e782:	2340      	movs	r3, #64	; 0x40
 800e784:	616b      	str	r3, [r5, #20]
 800e786:	2300      	movs	r3, #0
 800e788:	9309      	str	r3, [sp, #36]	; 0x24
 800e78a:	2320      	movs	r3, #32
 800e78c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e790:	f8cd 800c 	str.w	r8, [sp, #12]
 800e794:	2330      	movs	r3, #48	; 0x30
 800e796:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e940 <_svfiprintf_r+0x1ec>
 800e79a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e79e:	f04f 0901 	mov.w	r9, #1
 800e7a2:	4623      	mov	r3, r4
 800e7a4:	469a      	mov	sl, r3
 800e7a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7aa:	b10a      	cbz	r2, 800e7b0 <_svfiprintf_r+0x5c>
 800e7ac:	2a25      	cmp	r2, #37	; 0x25
 800e7ae:	d1f9      	bne.n	800e7a4 <_svfiprintf_r+0x50>
 800e7b0:	ebba 0b04 	subs.w	fp, sl, r4
 800e7b4:	d00b      	beq.n	800e7ce <_svfiprintf_r+0x7a>
 800e7b6:	465b      	mov	r3, fp
 800e7b8:	4622      	mov	r2, r4
 800e7ba:	4629      	mov	r1, r5
 800e7bc:	4638      	mov	r0, r7
 800e7be:	f7ff ff6d 	bl	800e69c <__ssputs_r>
 800e7c2:	3001      	adds	r0, #1
 800e7c4:	f000 80aa 	beq.w	800e91c <_svfiprintf_r+0x1c8>
 800e7c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7ca:	445a      	add	r2, fp
 800e7cc:	9209      	str	r2, [sp, #36]	; 0x24
 800e7ce:	f89a 3000 	ldrb.w	r3, [sl]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	f000 80a2 	beq.w	800e91c <_svfiprintf_r+0x1c8>
 800e7d8:	2300      	movs	r3, #0
 800e7da:	f04f 32ff 	mov.w	r2, #4294967295
 800e7de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7e2:	f10a 0a01 	add.w	sl, sl, #1
 800e7e6:	9304      	str	r3, [sp, #16]
 800e7e8:	9307      	str	r3, [sp, #28]
 800e7ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7ee:	931a      	str	r3, [sp, #104]	; 0x68
 800e7f0:	4654      	mov	r4, sl
 800e7f2:	2205      	movs	r2, #5
 800e7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7f8:	4851      	ldr	r0, [pc, #324]	; (800e940 <_svfiprintf_r+0x1ec>)
 800e7fa:	f7f1 fd09 	bl	8000210 <memchr>
 800e7fe:	9a04      	ldr	r2, [sp, #16]
 800e800:	b9d8      	cbnz	r0, 800e83a <_svfiprintf_r+0xe6>
 800e802:	06d0      	lsls	r0, r2, #27
 800e804:	bf44      	itt	mi
 800e806:	2320      	movmi	r3, #32
 800e808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e80c:	0711      	lsls	r1, r2, #28
 800e80e:	bf44      	itt	mi
 800e810:	232b      	movmi	r3, #43	; 0x2b
 800e812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e816:	f89a 3000 	ldrb.w	r3, [sl]
 800e81a:	2b2a      	cmp	r3, #42	; 0x2a
 800e81c:	d015      	beq.n	800e84a <_svfiprintf_r+0xf6>
 800e81e:	9a07      	ldr	r2, [sp, #28]
 800e820:	4654      	mov	r4, sl
 800e822:	2000      	movs	r0, #0
 800e824:	f04f 0c0a 	mov.w	ip, #10
 800e828:	4621      	mov	r1, r4
 800e82a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e82e:	3b30      	subs	r3, #48	; 0x30
 800e830:	2b09      	cmp	r3, #9
 800e832:	d94e      	bls.n	800e8d2 <_svfiprintf_r+0x17e>
 800e834:	b1b0      	cbz	r0, 800e864 <_svfiprintf_r+0x110>
 800e836:	9207      	str	r2, [sp, #28]
 800e838:	e014      	b.n	800e864 <_svfiprintf_r+0x110>
 800e83a:	eba0 0308 	sub.w	r3, r0, r8
 800e83e:	fa09 f303 	lsl.w	r3, r9, r3
 800e842:	4313      	orrs	r3, r2
 800e844:	9304      	str	r3, [sp, #16]
 800e846:	46a2      	mov	sl, r4
 800e848:	e7d2      	b.n	800e7f0 <_svfiprintf_r+0x9c>
 800e84a:	9b03      	ldr	r3, [sp, #12]
 800e84c:	1d19      	adds	r1, r3, #4
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	9103      	str	r1, [sp, #12]
 800e852:	2b00      	cmp	r3, #0
 800e854:	bfbb      	ittet	lt
 800e856:	425b      	neglt	r3, r3
 800e858:	f042 0202 	orrlt.w	r2, r2, #2
 800e85c:	9307      	strge	r3, [sp, #28]
 800e85e:	9307      	strlt	r3, [sp, #28]
 800e860:	bfb8      	it	lt
 800e862:	9204      	strlt	r2, [sp, #16]
 800e864:	7823      	ldrb	r3, [r4, #0]
 800e866:	2b2e      	cmp	r3, #46	; 0x2e
 800e868:	d10c      	bne.n	800e884 <_svfiprintf_r+0x130>
 800e86a:	7863      	ldrb	r3, [r4, #1]
 800e86c:	2b2a      	cmp	r3, #42	; 0x2a
 800e86e:	d135      	bne.n	800e8dc <_svfiprintf_r+0x188>
 800e870:	9b03      	ldr	r3, [sp, #12]
 800e872:	1d1a      	adds	r2, r3, #4
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	9203      	str	r2, [sp, #12]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	bfb8      	it	lt
 800e87c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e880:	3402      	adds	r4, #2
 800e882:	9305      	str	r3, [sp, #20]
 800e884:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e950 <_svfiprintf_r+0x1fc>
 800e888:	7821      	ldrb	r1, [r4, #0]
 800e88a:	2203      	movs	r2, #3
 800e88c:	4650      	mov	r0, sl
 800e88e:	f7f1 fcbf 	bl	8000210 <memchr>
 800e892:	b140      	cbz	r0, 800e8a6 <_svfiprintf_r+0x152>
 800e894:	2340      	movs	r3, #64	; 0x40
 800e896:	eba0 000a 	sub.w	r0, r0, sl
 800e89a:	fa03 f000 	lsl.w	r0, r3, r0
 800e89e:	9b04      	ldr	r3, [sp, #16]
 800e8a0:	4303      	orrs	r3, r0
 800e8a2:	3401      	adds	r4, #1
 800e8a4:	9304      	str	r3, [sp, #16]
 800e8a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8aa:	4826      	ldr	r0, [pc, #152]	; (800e944 <_svfiprintf_r+0x1f0>)
 800e8ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8b0:	2206      	movs	r2, #6
 800e8b2:	f7f1 fcad 	bl	8000210 <memchr>
 800e8b6:	2800      	cmp	r0, #0
 800e8b8:	d038      	beq.n	800e92c <_svfiprintf_r+0x1d8>
 800e8ba:	4b23      	ldr	r3, [pc, #140]	; (800e948 <_svfiprintf_r+0x1f4>)
 800e8bc:	bb1b      	cbnz	r3, 800e906 <_svfiprintf_r+0x1b2>
 800e8be:	9b03      	ldr	r3, [sp, #12]
 800e8c0:	3307      	adds	r3, #7
 800e8c2:	f023 0307 	bic.w	r3, r3, #7
 800e8c6:	3308      	adds	r3, #8
 800e8c8:	9303      	str	r3, [sp, #12]
 800e8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8cc:	4433      	add	r3, r6
 800e8ce:	9309      	str	r3, [sp, #36]	; 0x24
 800e8d0:	e767      	b.n	800e7a2 <_svfiprintf_r+0x4e>
 800e8d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8d6:	460c      	mov	r4, r1
 800e8d8:	2001      	movs	r0, #1
 800e8da:	e7a5      	b.n	800e828 <_svfiprintf_r+0xd4>
 800e8dc:	2300      	movs	r3, #0
 800e8de:	3401      	adds	r4, #1
 800e8e0:	9305      	str	r3, [sp, #20]
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	f04f 0c0a 	mov.w	ip, #10
 800e8e8:	4620      	mov	r0, r4
 800e8ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8ee:	3a30      	subs	r2, #48	; 0x30
 800e8f0:	2a09      	cmp	r2, #9
 800e8f2:	d903      	bls.n	800e8fc <_svfiprintf_r+0x1a8>
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d0c5      	beq.n	800e884 <_svfiprintf_r+0x130>
 800e8f8:	9105      	str	r1, [sp, #20]
 800e8fa:	e7c3      	b.n	800e884 <_svfiprintf_r+0x130>
 800e8fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e900:	4604      	mov	r4, r0
 800e902:	2301      	movs	r3, #1
 800e904:	e7f0      	b.n	800e8e8 <_svfiprintf_r+0x194>
 800e906:	ab03      	add	r3, sp, #12
 800e908:	9300      	str	r3, [sp, #0]
 800e90a:	462a      	mov	r2, r5
 800e90c:	4b0f      	ldr	r3, [pc, #60]	; (800e94c <_svfiprintf_r+0x1f8>)
 800e90e:	a904      	add	r1, sp, #16
 800e910:	4638      	mov	r0, r7
 800e912:	f3af 8000 	nop.w
 800e916:	1c42      	adds	r2, r0, #1
 800e918:	4606      	mov	r6, r0
 800e91a:	d1d6      	bne.n	800e8ca <_svfiprintf_r+0x176>
 800e91c:	89ab      	ldrh	r3, [r5, #12]
 800e91e:	065b      	lsls	r3, r3, #25
 800e920:	f53f af2c 	bmi.w	800e77c <_svfiprintf_r+0x28>
 800e924:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e926:	b01d      	add	sp, #116	; 0x74
 800e928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e92c:	ab03      	add	r3, sp, #12
 800e92e:	9300      	str	r3, [sp, #0]
 800e930:	462a      	mov	r2, r5
 800e932:	4b06      	ldr	r3, [pc, #24]	; (800e94c <_svfiprintf_r+0x1f8>)
 800e934:	a904      	add	r1, sp, #16
 800e936:	4638      	mov	r0, r7
 800e938:	f000 f9d4 	bl	800ece4 <_printf_i>
 800e93c:	e7eb      	b.n	800e916 <_svfiprintf_r+0x1c2>
 800e93e:	bf00      	nop
 800e940:	080121ac 	.word	0x080121ac
 800e944:	080121b6 	.word	0x080121b6
 800e948:	00000000 	.word	0x00000000
 800e94c:	0800e69d 	.word	0x0800e69d
 800e950:	080121b2 	.word	0x080121b2

0800e954 <__sfputc_r>:
 800e954:	6893      	ldr	r3, [r2, #8]
 800e956:	3b01      	subs	r3, #1
 800e958:	2b00      	cmp	r3, #0
 800e95a:	b410      	push	{r4}
 800e95c:	6093      	str	r3, [r2, #8]
 800e95e:	da08      	bge.n	800e972 <__sfputc_r+0x1e>
 800e960:	6994      	ldr	r4, [r2, #24]
 800e962:	42a3      	cmp	r3, r4
 800e964:	db01      	blt.n	800e96a <__sfputc_r+0x16>
 800e966:	290a      	cmp	r1, #10
 800e968:	d103      	bne.n	800e972 <__sfputc_r+0x1e>
 800e96a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e96e:	f000 bb33 	b.w	800efd8 <__swbuf_r>
 800e972:	6813      	ldr	r3, [r2, #0]
 800e974:	1c58      	adds	r0, r3, #1
 800e976:	6010      	str	r0, [r2, #0]
 800e978:	7019      	strb	r1, [r3, #0]
 800e97a:	4608      	mov	r0, r1
 800e97c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e980:	4770      	bx	lr

0800e982 <__sfputs_r>:
 800e982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e984:	4606      	mov	r6, r0
 800e986:	460f      	mov	r7, r1
 800e988:	4614      	mov	r4, r2
 800e98a:	18d5      	adds	r5, r2, r3
 800e98c:	42ac      	cmp	r4, r5
 800e98e:	d101      	bne.n	800e994 <__sfputs_r+0x12>
 800e990:	2000      	movs	r0, #0
 800e992:	e007      	b.n	800e9a4 <__sfputs_r+0x22>
 800e994:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e998:	463a      	mov	r2, r7
 800e99a:	4630      	mov	r0, r6
 800e99c:	f7ff ffda 	bl	800e954 <__sfputc_r>
 800e9a0:	1c43      	adds	r3, r0, #1
 800e9a2:	d1f3      	bne.n	800e98c <__sfputs_r+0xa>
 800e9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e9a8 <_vfiprintf_r>:
 800e9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ac:	460d      	mov	r5, r1
 800e9ae:	b09d      	sub	sp, #116	; 0x74
 800e9b0:	4614      	mov	r4, r2
 800e9b2:	4698      	mov	r8, r3
 800e9b4:	4606      	mov	r6, r0
 800e9b6:	b118      	cbz	r0, 800e9c0 <_vfiprintf_r+0x18>
 800e9b8:	6983      	ldr	r3, [r0, #24]
 800e9ba:	b90b      	cbnz	r3, 800e9c0 <_vfiprintf_r+0x18>
 800e9bc:	f7ff fd0a 	bl	800e3d4 <__sinit>
 800e9c0:	4b89      	ldr	r3, [pc, #548]	; (800ebe8 <_vfiprintf_r+0x240>)
 800e9c2:	429d      	cmp	r5, r3
 800e9c4:	d11b      	bne.n	800e9fe <_vfiprintf_r+0x56>
 800e9c6:	6875      	ldr	r5, [r6, #4]
 800e9c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9ca:	07d9      	lsls	r1, r3, #31
 800e9cc:	d405      	bmi.n	800e9da <_vfiprintf_r+0x32>
 800e9ce:	89ab      	ldrh	r3, [r5, #12]
 800e9d0:	059a      	lsls	r2, r3, #22
 800e9d2:	d402      	bmi.n	800e9da <_vfiprintf_r+0x32>
 800e9d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9d6:	f7ff fdad 	bl	800e534 <__retarget_lock_acquire_recursive>
 800e9da:	89ab      	ldrh	r3, [r5, #12]
 800e9dc:	071b      	lsls	r3, r3, #28
 800e9de:	d501      	bpl.n	800e9e4 <_vfiprintf_r+0x3c>
 800e9e0:	692b      	ldr	r3, [r5, #16]
 800e9e2:	b9eb      	cbnz	r3, 800ea20 <_vfiprintf_r+0x78>
 800e9e4:	4629      	mov	r1, r5
 800e9e6:	4630      	mov	r0, r6
 800e9e8:	f000 fb5a 	bl	800f0a0 <__swsetup_r>
 800e9ec:	b1c0      	cbz	r0, 800ea20 <_vfiprintf_r+0x78>
 800e9ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9f0:	07dc      	lsls	r4, r3, #31
 800e9f2:	d50e      	bpl.n	800ea12 <_vfiprintf_r+0x6a>
 800e9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9f8:	b01d      	add	sp, #116	; 0x74
 800e9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9fe:	4b7b      	ldr	r3, [pc, #492]	; (800ebec <_vfiprintf_r+0x244>)
 800ea00:	429d      	cmp	r5, r3
 800ea02:	d101      	bne.n	800ea08 <_vfiprintf_r+0x60>
 800ea04:	68b5      	ldr	r5, [r6, #8]
 800ea06:	e7df      	b.n	800e9c8 <_vfiprintf_r+0x20>
 800ea08:	4b79      	ldr	r3, [pc, #484]	; (800ebf0 <_vfiprintf_r+0x248>)
 800ea0a:	429d      	cmp	r5, r3
 800ea0c:	bf08      	it	eq
 800ea0e:	68f5      	ldreq	r5, [r6, #12]
 800ea10:	e7da      	b.n	800e9c8 <_vfiprintf_r+0x20>
 800ea12:	89ab      	ldrh	r3, [r5, #12]
 800ea14:	0598      	lsls	r0, r3, #22
 800ea16:	d4ed      	bmi.n	800e9f4 <_vfiprintf_r+0x4c>
 800ea18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea1a:	f7ff fd8c 	bl	800e536 <__retarget_lock_release_recursive>
 800ea1e:	e7e9      	b.n	800e9f4 <_vfiprintf_r+0x4c>
 800ea20:	2300      	movs	r3, #0
 800ea22:	9309      	str	r3, [sp, #36]	; 0x24
 800ea24:	2320      	movs	r3, #32
 800ea26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea2e:	2330      	movs	r3, #48	; 0x30
 800ea30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ebf4 <_vfiprintf_r+0x24c>
 800ea34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea38:	f04f 0901 	mov.w	r9, #1
 800ea3c:	4623      	mov	r3, r4
 800ea3e:	469a      	mov	sl, r3
 800ea40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea44:	b10a      	cbz	r2, 800ea4a <_vfiprintf_r+0xa2>
 800ea46:	2a25      	cmp	r2, #37	; 0x25
 800ea48:	d1f9      	bne.n	800ea3e <_vfiprintf_r+0x96>
 800ea4a:	ebba 0b04 	subs.w	fp, sl, r4
 800ea4e:	d00b      	beq.n	800ea68 <_vfiprintf_r+0xc0>
 800ea50:	465b      	mov	r3, fp
 800ea52:	4622      	mov	r2, r4
 800ea54:	4629      	mov	r1, r5
 800ea56:	4630      	mov	r0, r6
 800ea58:	f7ff ff93 	bl	800e982 <__sfputs_r>
 800ea5c:	3001      	adds	r0, #1
 800ea5e:	f000 80aa 	beq.w	800ebb6 <_vfiprintf_r+0x20e>
 800ea62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea64:	445a      	add	r2, fp
 800ea66:	9209      	str	r2, [sp, #36]	; 0x24
 800ea68:	f89a 3000 	ldrb.w	r3, [sl]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	f000 80a2 	beq.w	800ebb6 <_vfiprintf_r+0x20e>
 800ea72:	2300      	movs	r3, #0
 800ea74:	f04f 32ff 	mov.w	r2, #4294967295
 800ea78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea7c:	f10a 0a01 	add.w	sl, sl, #1
 800ea80:	9304      	str	r3, [sp, #16]
 800ea82:	9307      	str	r3, [sp, #28]
 800ea84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea88:	931a      	str	r3, [sp, #104]	; 0x68
 800ea8a:	4654      	mov	r4, sl
 800ea8c:	2205      	movs	r2, #5
 800ea8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea92:	4858      	ldr	r0, [pc, #352]	; (800ebf4 <_vfiprintf_r+0x24c>)
 800ea94:	f7f1 fbbc 	bl	8000210 <memchr>
 800ea98:	9a04      	ldr	r2, [sp, #16]
 800ea9a:	b9d8      	cbnz	r0, 800ead4 <_vfiprintf_r+0x12c>
 800ea9c:	06d1      	lsls	r1, r2, #27
 800ea9e:	bf44      	itt	mi
 800eaa0:	2320      	movmi	r3, #32
 800eaa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eaa6:	0713      	lsls	r3, r2, #28
 800eaa8:	bf44      	itt	mi
 800eaaa:	232b      	movmi	r3, #43	; 0x2b
 800eaac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eab0:	f89a 3000 	ldrb.w	r3, [sl]
 800eab4:	2b2a      	cmp	r3, #42	; 0x2a
 800eab6:	d015      	beq.n	800eae4 <_vfiprintf_r+0x13c>
 800eab8:	9a07      	ldr	r2, [sp, #28]
 800eaba:	4654      	mov	r4, sl
 800eabc:	2000      	movs	r0, #0
 800eabe:	f04f 0c0a 	mov.w	ip, #10
 800eac2:	4621      	mov	r1, r4
 800eac4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eac8:	3b30      	subs	r3, #48	; 0x30
 800eaca:	2b09      	cmp	r3, #9
 800eacc:	d94e      	bls.n	800eb6c <_vfiprintf_r+0x1c4>
 800eace:	b1b0      	cbz	r0, 800eafe <_vfiprintf_r+0x156>
 800ead0:	9207      	str	r2, [sp, #28]
 800ead2:	e014      	b.n	800eafe <_vfiprintf_r+0x156>
 800ead4:	eba0 0308 	sub.w	r3, r0, r8
 800ead8:	fa09 f303 	lsl.w	r3, r9, r3
 800eadc:	4313      	orrs	r3, r2
 800eade:	9304      	str	r3, [sp, #16]
 800eae0:	46a2      	mov	sl, r4
 800eae2:	e7d2      	b.n	800ea8a <_vfiprintf_r+0xe2>
 800eae4:	9b03      	ldr	r3, [sp, #12]
 800eae6:	1d19      	adds	r1, r3, #4
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	9103      	str	r1, [sp, #12]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	bfbb      	ittet	lt
 800eaf0:	425b      	neglt	r3, r3
 800eaf2:	f042 0202 	orrlt.w	r2, r2, #2
 800eaf6:	9307      	strge	r3, [sp, #28]
 800eaf8:	9307      	strlt	r3, [sp, #28]
 800eafa:	bfb8      	it	lt
 800eafc:	9204      	strlt	r2, [sp, #16]
 800eafe:	7823      	ldrb	r3, [r4, #0]
 800eb00:	2b2e      	cmp	r3, #46	; 0x2e
 800eb02:	d10c      	bne.n	800eb1e <_vfiprintf_r+0x176>
 800eb04:	7863      	ldrb	r3, [r4, #1]
 800eb06:	2b2a      	cmp	r3, #42	; 0x2a
 800eb08:	d135      	bne.n	800eb76 <_vfiprintf_r+0x1ce>
 800eb0a:	9b03      	ldr	r3, [sp, #12]
 800eb0c:	1d1a      	adds	r2, r3, #4
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	9203      	str	r2, [sp, #12]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	bfb8      	it	lt
 800eb16:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb1a:	3402      	adds	r4, #2
 800eb1c:	9305      	str	r3, [sp, #20]
 800eb1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ec04 <_vfiprintf_r+0x25c>
 800eb22:	7821      	ldrb	r1, [r4, #0]
 800eb24:	2203      	movs	r2, #3
 800eb26:	4650      	mov	r0, sl
 800eb28:	f7f1 fb72 	bl	8000210 <memchr>
 800eb2c:	b140      	cbz	r0, 800eb40 <_vfiprintf_r+0x198>
 800eb2e:	2340      	movs	r3, #64	; 0x40
 800eb30:	eba0 000a 	sub.w	r0, r0, sl
 800eb34:	fa03 f000 	lsl.w	r0, r3, r0
 800eb38:	9b04      	ldr	r3, [sp, #16]
 800eb3a:	4303      	orrs	r3, r0
 800eb3c:	3401      	adds	r4, #1
 800eb3e:	9304      	str	r3, [sp, #16]
 800eb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb44:	482c      	ldr	r0, [pc, #176]	; (800ebf8 <_vfiprintf_r+0x250>)
 800eb46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb4a:	2206      	movs	r2, #6
 800eb4c:	f7f1 fb60 	bl	8000210 <memchr>
 800eb50:	2800      	cmp	r0, #0
 800eb52:	d03f      	beq.n	800ebd4 <_vfiprintf_r+0x22c>
 800eb54:	4b29      	ldr	r3, [pc, #164]	; (800ebfc <_vfiprintf_r+0x254>)
 800eb56:	bb1b      	cbnz	r3, 800eba0 <_vfiprintf_r+0x1f8>
 800eb58:	9b03      	ldr	r3, [sp, #12]
 800eb5a:	3307      	adds	r3, #7
 800eb5c:	f023 0307 	bic.w	r3, r3, #7
 800eb60:	3308      	adds	r3, #8
 800eb62:	9303      	str	r3, [sp, #12]
 800eb64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb66:	443b      	add	r3, r7
 800eb68:	9309      	str	r3, [sp, #36]	; 0x24
 800eb6a:	e767      	b.n	800ea3c <_vfiprintf_r+0x94>
 800eb6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb70:	460c      	mov	r4, r1
 800eb72:	2001      	movs	r0, #1
 800eb74:	e7a5      	b.n	800eac2 <_vfiprintf_r+0x11a>
 800eb76:	2300      	movs	r3, #0
 800eb78:	3401      	adds	r4, #1
 800eb7a:	9305      	str	r3, [sp, #20]
 800eb7c:	4619      	mov	r1, r3
 800eb7e:	f04f 0c0a 	mov.w	ip, #10
 800eb82:	4620      	mov	r0, r4
 800eb84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb88:	3a30      	subs	r2, #48	; 0x30
 800eb8a:	2a09      	cmp	r2, #9
 800eb8c:	d903      	bls.n	800eb96 <_vfiprintf_r+0x1ee>
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d0c5      	beq.n	800eb1e <_vfiprintf_r+0x176>
 800eb92:	9105      	str	r1, [sp, #20]
 800eb94:	e7c3      	b.n	800eb1e <_vfiprintf_r+0x176>
 800eb96:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb9a:	4604      	mov	r4, r0
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	e7f0      	b.n	800eb82 <_vfiprintf_r+0x1da>
 800eba0:	ab03      	add	r3, sp, #12
 800eba2:	9300      	str	r3, [sp, #0]
 800eba4:	462a      	mov	r2, r5
 800eba6:	4b16      	ldr	r3, [pc, #88]	; (800ec00 <_vfiprintf_r+0x258>)
 800eba8:	a904      	add	r1, sp, #16
 800ebaa:	4630      	mov	r0, r6
 800ebac:	f3af 8000 	nop.w
 800ebb0:	4607      	mov	r7, r0
 800ebb2:	1c78      	adds	r0, r7, #1
 800ebb4:	d1d6      	bne.n	800eb64 <_vfiprintf_r+0x1bc>
 800ebb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebb8:	07d9      	lsls	r1, r3, #31
 800ebba:	d405      	bmi.n	800ebc8 <_vfiprintf_r+0x220>
 800ebbc:	89ab      	ldrh	r3, [r5, #12]
 800ebbe:	059a      	lsls	r2, r3, #22
 800ebc0:	d402      	bmi.n	800ebc8 <_vfiprintf_r+0x220>
 800ebc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebc4:	f7ff fcb7 	bl	800e536 <__retarget_lock_release_recursive>
 800ebc8:	89ab      	ldrh	r3, [r5, #12]
 800ebca:	065b      	lsls	r3, r3, #25
 800ebcc:	f53f af12 	bmi.w	800e9f4 <_vfiprintf_r+0x4c>
 800ebd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebd2:	e711      	b.n	800e9f8 <_vfiprintf_r+0x50>
 800ebd4:	ab03      	add	r3, sp, #12
 800ebd6:	9300      	str	r3, [sp, #0]
 800ebd8:	462a      	mov	r2, r5
 800ebda:	4b09      	ldr	r3, [pc, #36]	; (800ec00 <_vfiprintf_r+0x258>)
 800ebdc:	a904      	add	r1, sp, #16
 800ebde:	4630      	mov	r0, r6
 800ebe0:	f000 f880 	bl	800ece4 <_printf_i>
 800ebe4:	e7e4      	b.n	800ebb0 <_vfiprintf_r+0x208>
 800ebe6:	bf00      	nop
 800ebe8:	0801216c 	.word	0x0801216c
 800ebec:	0801218c 	.word	0x0801218c
 800ebf0:	0801214c 	.word	0x0801214c
 800ebf4:	080121ac 	.word	0x080121ac
 800ebf8:	080121b6 	.word	0x080121b6
 800ebfc:	00000000 	.word	0x00000000
 800ec00:	0800e983 	.word	0x0800e983
 800ec04:	080121b2 	.word	0x080121b2

0800ec08 <_printf_common>:
 800ec08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec0c:	4616      	mov	r6, r2
 800ec0e:	4699      	mov	r9, r3
 800ec10:	688a      	ldr	r2, [r1, #8]
 800ec12:	690b      	ldr	r3, [r1, #16]
 800ec14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	bfb8      	it	lt
 800ec1c:	4613      	movlt	r3, r2
 800ec1e:	6033      	str	r3, [r6, #0]
 800ec20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec24:	4607      	mov	r7, r0
 800ec26:	460c      	mov	r4, r1
 800ec28:	b10a      	cbz	r2, 800ec2e <_printf_common+0x26>
 800ec2a:	3301      	adds	r3, #1
 800ec2c:	6033      	str	r3, [r6, #0]
 800ec2e:	6823      	ldr	r3, [r4, #0]
 800ec30:	0699      	lsls	r1, r3, #26
 800ec32:	bf42      	ittt	mi
 800ec34:	6833      	ldrmi	r3, [r6, #0]
 800ec36:	3302      	addmi	r3, #2
 800ec38:	6033      	strmi	r3, [r6, #0]
 800ec3a:	6825      	ldr	r5, [r4, #0]
 800ec3c:	f015 0506 	ands.w	r5, r5, #6
 800ec40:	d106      	bne.n	800ec50 <_printf_common+0x48>
 800ec42:	f104 0a19 	add.w	sl, r4, #25
 800ec46:	68e3      	ldr	r3, [r4, #12]
 800ec48:	6832      	ldr	r2, [r6, #0]
 800ec4a:	1a9b      	subs	r3, r3, r2
 800ec4c:	42ab      	cmp	r3, r5
 800ec4e:	dc26      	bgt.n	800ec9e <_printf_common+0x96>
 800ec50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ec54:	1e13      	subs	r3, r2, #0
 800ec56:	6822      	ldr	r2, [r4, #0]
 800ec58:	bf18      	it	ne
 800ec5a:	2301      	movne	r3, #1
 800ec5c:	0692      	lsls	r2, r2, #26
 800ec5e:	d42b      	bmi.n	800ecb8 <_printf_common+0xb0>
 800ec60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec64:	4649      	mov	r1, r9
 800ec66:	4638      	mov	r0, r7
 800ec68:	47c0      	blx	r8
 800ec6a:	3001      	adds	r0, #1
 800ec6c:	d01e      	beq.n	800ecac <_printf_common+0xa4>
 800ec6e:	6823      	ldr	r3, [r4, #0]
 800ec70:	68e5      	ldr	r5, [r4, #12]
 800ec72:	6832      	ldr	r2, [r6, #0]
 800ec74:	f003 0306 	and.w	r3, r3, #6
 800ec78:	2b04      	cmp	r3, #4
 800ec7a:	bf08      	it	eq
 800ec7c:	1aad      	subeq	r5, r5, r2
 800ec7e:	68a3      	ldr	r3, [r4, #8]
 800ec80:	6922      	ldr	r2, [r4, #16]
 800ec82:	bf0c      	ite	eq
 800ec84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec88:	2500      	movne	r5, #0
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	bfc4      	itt	gt
 800ec8e:	1a9b      	subgt	r3, r3, r2
 800ec90:	18ed      	addgt	r5, r5, r3
 800ec92:	2600      	movs	r6, #0
 800ec94:	341a      	adds	r4, #26
 800ec96:	42b5      	cmp	r5, r6
 800ec98:	d11a      	bne.n	800ecd0 <_printf_common+0xc8>
 800ec9a:	2000      	movs	r0, #0
 800ec9c:	e008      	b.n	800ecb0 <_printf_common+0xa8>
 800ec9e:	2301      	movs	r3, #1
 800eca0:	4652      	mov	r2, sl
 800eca2:	4649      	mov	r1, r9
 800eca4:	4638      	mov	r0, r7
 800eca6:	47c0      	blx	r8
 800eca8:	3001      	adds	r0, #1
 800ecaa:	d103      	bne.n	800ecb4 <_printf_common+0xac>
 800ecac:	f04f 30ff 	mov.w	r0, #4294967295
 800ecb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecb4:	3501      	adds	r5, #1
 800ecb6:	e7c6      	b.n	800ec46 <_printf_common+0x3e>
 800ecb8:	18e1      	adds	r1, r4, r3
 800ecba:	1c5a      	adds	r2, r3, #1
 800ecbc:	2030      	movs	r0, #48	; 0x30
 800ecbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ecc2:	4422      	add	r2, r4
 800ecc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ecc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eccc:	3302      	adds	r3, #2
 800ecce:	e7c7      	b.n	800ec60 <_printf_common+0x58>
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	4622      	mov	r2, r4
 800ecd4:	4649      	mov	r1, r9
 800ecd6:	4638      	mov	r0, r7
 800ecd8:	47c0      	blx	r8
 800ecda:	3001      	adds	r0, #1
 800ecdc:	d0e6      	beq.n	800ecac <_printf_common+0xa4>
 800ecde:	3601      	adds	r6, #1
 800ece0:	e7d9      	b.n	800ec96 <_printf_common+0x8e>
	...

0800ece4 <_printf_i>:
 800ece4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ece8:	460c      	mov	r4, r1
 800ecea:	4691      	mov	r9, r2
 800ecec:	7e27      	ldrb	r7, [r4, #24]
 800ecee:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ecf0:	2f78      	cmp	r7, #120	; 0x78
 800ecf2:	4680      	mov	r8, r0
 800ecf4:	469a      	mov	sl, r3
 800ecf6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ecfa:	d807      	bhi.n	800ed0c <_printf_i+0x28>
 800ecfc:	2f62      	cmp	r7, #98	; 0x62
 800ecfe:	d80a      	bhi.n	800ed16 <_printf_i+0x32>
 800ed00:	2f00      	cmp	r7, #0
 800ed02:	f000 80d8 	beq.w	800eeb6 <_printf_i+0x1d2>
 800ed06:	2f58      	cmp	r7, #88	; 0x58
 800ed08:	f000 80a3 	beq.w	800ee52 <_printf_i+0x16e>
 800ed0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ed10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ed14:	e03a      	b.n	800ed8c <_printf_i+0xa8>
 800ed16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ed1a:	2b15      	cmp	r3, #21
 800ed1c:	d8f6      	bhi.n	800ed0c <_printf_i+0x28>
 800ed1e:	a001      	add	r0, pc, #4	; (adr r0, 800ed24 <_printf_i+0x40>)
 800ed20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ed24:	0800ed7d 	.word	0x0800ed7d
 800ed28:	0800ed91 	.word	0x0800ed91
 800ed2c:	0800ed0d 	.word	0x0800ed0d
 800ed30:	0800ed0d 	.word	0x0800ed0d
 800ed34:	0800ed0d 	.word	0x0800ed0d
 800ed38:	0800ed0d 	.word	0x0800ed0d
 800ed3c:	0800ed91 	.word	0x0800ed91
 800ed40:	0800ed0d 	.word	0x0800ed0d
 800ed44:	0800ed0d 	.word	0x0800ed0d
 800ed48:	0800ed0d 	.word	0x0800ed0d
 800ed4c:	0800ed0d 	.word	0x0800ed0d
 800ed50:	0800ee9d 	.word	0x0800ee9d
 800ed54:	0800edc1 	.word	0x0800edc1
 800ed58:	0800ee7f 	.word	0x0800ee7f
 800ed5c:	0800ed0d 	.word	0x0800ed0d
 800ed60:	0800ed0d 	.word	0x0800ed0d
 800ed64:	0800eebf 	.word	0x0800eebf
 800ed68:	0800ed0d 	.word	0x0800ed0d
 800ed6c:	0800edc1 	.word	0x0800edc1
 800ed70:	0800ed0d 	.word	0x0800ed0d
 800ed74:	0800ed0d 	.word	0x0800ed0d
 800ed78:	0800ee87 	.word	0x0800ee87
 800ed7c:	680b      	ldr	r3, [r1, #0]
 800ed7e:	1d1a      	adds	r2, r3, #4
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	600a      	str	r2, [r1, #0]
 800ed84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ed88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	e0a3      	b.n	800eed8 <_printf_i+0x1f4>
 800ed90:	6825      	ldr	r5, [r4, #0]
 800ed92:	6808      	ldr	r0, [r1, #0]
 800ed94:	062e      	lsls	r6, r5, #24
 800ed96:	f100 0304 	add.w	r3, r0, #4
 800ed9a:	d50a      	bpl.n	800edb2 <_printf_i+0xce>
 800ed9c:	6805      	ldr	r5, [r0, #0]
 800ed9e:	600b      	str	r3, [r1, #0]
 800eda0:	2d00      	cmp	r5, #0
 800eda2:	da03      	bge.n	800edac <_printf_i+0xc8>
 800eda4:	232d      	movs	r3, #45	; 0x2d
 800eda6:	426d      	negs	r5, r5
 800eda8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edac:	485e      	ldr	r0, [pc, #376]	; (800ef28 <_printf_i+0x244>)
 800edae:	230a      	movs	r3, #10
 800edb0:	e019      	b.n	800ede6 <_printf_i+0x102>
 800edb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800edb6:	6805      	ldr	r5, [r0, #0]
 800edb8:	600b      	str	r3, [r1, #0]
 800edba:	bf18      	it	ne
 800edbc:	b22d      	sxthne	r5, r5
 800edbe:	e7ef      	b.n	800eda0 <_printf_i+0xbc>
 800edc0:	680b      	ldr	r3, [r1, #0]
 800edc2:	6825      	ldr	r5, [r4, #0]
 800edc4:	1d18      	adds	r0, r3, #4
 800edc6:	6008      	str	r0, [r1, #0]
 800edc8:	0628      	lsls	r0, r5, #24
 800edca:	d501      	bpl.n	800edd0 <_printf_i+0xec>
 800edcc:	681d      	ldr	r5, [r3, #0]
 800edce:	e002      	b.n	800edd6 <_printf_i+0xf2>
 800edd0:	0669      	lsls	r1, r5, #25
 800edd2:	d5fb      	bpl.n	800edcc <_printf_i+0xe8>
 800edd4:	881d      	ldrh	r5, [r3, #0]
 800edd6:	4854      	ldr	r0, [pc, #336]	; (800ef28 <_printf_i+0x244>)
 800edd8:	2f6f      	cmp	r7, #111	; 0x6f
 800edda:	bf0c      	ite	eq
 800eddc:	2308      	moveq	r3, #8
 800edde:	230a      	movne	r3, #10
 800ede0:	2100      	movs	r1, #0
 800ede2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ede6:	6866      	ldr	r6, [r4, #4]
 800ede8:	60a6      	str	r6, [r4, #8]
 800edea:	2e00      	cmp	r6, #0
 800edec:	bfa2      	ittt	ge
 800edee:	6821      	ldrge	r1, [r4, #0]
 800edf0:	f021 0104 	bicge.w	r1, r1, #4
 800edf4:	6021      	strge	r1, [r4, #0]
 800edf6:	b90d      	cbnz	r5, 800edfc <_printf_i+0x118>
 800edf8:	2e00      	cmp	r6, #0
 800edfa:	d04d      	beq.n	800ee98 <_printf_i+0x1b4>
 800edfc:	4616      	mov	r6, r2
 800edfe:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee02:	fb03 5711 	mls	r7, r3, r1, r5
 800ee06:	5dc7      	ldrb	r7, [r0, r7]
 800ee08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee0c:	462f      	mov	r7, r5
 800ee0e:	42bb      	cmp	r3, r7
 800ee10:	460d      	mov	r5, r1
 800ee12:	d9f4      	bls.n	800edfe <_printf_i+0x11a>
 800ee14:	2b08      	cmp	r3, #8
 800ee16:	d10b      	bne.n	800ee30 <_printf_i+0x14c>
 800ee18:	6823      	ldr	r3, [r4, #0]
 800ee1a:	07df      	lsls	r7, r3, #31
 800ee1c:	d508      	bpl.n	800ee30 <_printf_i+0x14c>
 800ee1e:	6923      	ldr	r3, [r4, #16]
 800ee20:	6861      	ldr	r1, [r4, #4]
 800ee22:	4299      	cmp	r1, r3
 800ee24:	bfde      	ittt	le
 800ee26:	2330      	movle	r3, #48	; 0x30
 800ee28:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ee30:	1b92      	subs	r2, r2, r6
 800ee32:	6122      	str	r2, [r4, #16]
 800ee34:	f8cd a000 	str.w	sl, [sp]
 800ee38:	464b      	mov	r3, r9
 800ee3a:	aa03      	add	r2, sp, #12
 800ee3c:	4621      	mov	r1, r4
 800ee3e:	4640      	mov	r0, r8
 800ee40:	f7ff fee2 	bl	800ec08 <_printf_common>
 800ee44:	3001      	adds	r0, #1
 800ee46:	d14c      	bne.n	800eee2 <_printf_i+0x1fe>
 800ee48:	f04f 30ff 	mov.w	r0, #4294967295
 800ee4c:	b004      	add	sp, #16
 800ee4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee52:	4835      	ldr	r0, [pc, #212]	; (800ef28 <_printf_i+0x244>)
 800ee54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ee58:	6823      	ldr	r3, [r4, #0]
 800ee5a:	680e      	ldr	r6, [r1, #0]
 800ee5c:	061f      	lsls	r7, r3, #24
 800ee5e:	f856 5b04 	ldr.w	r5, [r6], #4
 800ee62:	600e      	str	r6, [r1, #0]
 800ee64:	d514      	bpl.n	800ee90 <_printf_i+0x1ac>
 800ee66:	07d9      	lsls	r1, r3, #31
 800ee68:	bf44      	itt	mi
 800ee6a:	f043 0320 	orrmi.w	r3, r3, #32
 800ee6e:	6023      	strmi	r3, [r4, #0]
 800ee70:	b91d      	cbnz	r5, 800ee7a <_printf_i+0x196>
 800ee72:	6823      	ldr	r3, [r4, #0]
 800ee74:	f023 0320 	bic.w	r3, r3, #32
 800ee78:	6023      	str	r3, [r4, #0]
 800ee7a:	2310      	movs	r3, #16
 800ee7c:	e7b0      	b.n	800ede0 <_printf_i+0xfc>
 800ee7e:	6823      	ldr	r3, [r4, #0]
 800ee80:	f043 0320 	orr.w	r3, r3, #32
 800ee84:	6023      	str	r3, [r4, #0]
 800ee86:	2378      	movs	r3, #120	; 0x78
 800ee88:	4828      	ldr	r0, [pc, #160]	; (800ef2c <_printf_i+0x248>)
 800ee8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ee8e:	e7e3      	b.n	800ee58 <_printf_i+0x174>
 800ee90:	065e      	lsls	r6, r3, #25
 800ee92:	bf48      	it	mi
 800ee94:	b2ad      	uxthmi	r5, r5
 800ee96:	e7e6      	b.n	800ee66 <_printf_i+0x182>
 800ee98:	4616      	mov	r6, r2
 800ee9a:	e7bb      	b.n	800ee14 <_printf_i+0x130>
 800ee9c:	680b      	ldr	r3, [r1, #0]
 800ee9e:	6826      	ldr	r6, [r4, #0]
 800eea0:	6960      	ldr	r0, [r4, #20]
 800eea2:	1d1d      	adds	r5, r3, #4
 800eea4:	600d      	str	r5, [r1, #0]
 800eea6:	0635      	lsls	r5, r6, #24
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	d501      	bpl.n	800eeb0 <_printf_i+0x1cc>
 800eeac:	6018      	str	r0, [r3, #0]
 800eeae:	e002      	b.n	800eeb6 <_printf_i+0x1d2>
 800eeb0:	0671      	lsls	r1, r6, #25
 800eeb2:	d5fb      	bpl.n	800eeac <_printf_i+0x1c8>
 800eeb4:	8018      	strh	r0, [r3, #0]
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	6123      	str	r3, [r4, #16]
 800eeba:	4616      	mov	r6, r2
 800eebc:	e7ba      	b.n	800ee34 <_printf_i+0x150>
 800eebe:	680b      	ldr	r3, [r1, #0]
 800eec0:	1d1a      	adds	r2, r3, #4
 800eec2:	600a      	str	r2, [r1, #0]
 800eec4:	681e      	ldr	r6, [r3, #0]
 800eec6:	6862      	ldr	r2, [r4, #4]
 800eec8:	2100      	movs	r1, #0
 800eeca:	4630      	mov	r0, r6
 800eecc:	f7f1 f9a0 	bl	8000210 <memchr>
 800eed0:	b108      	cbz	r0, 800eed6 <_printf_i+0x1f2>
 800eed2:	1b80      	subs	r0, r0, r6
 800eed4:	6060      	str	r0, [r4, #4]
 800eed6:	6863      	ldr	r3, [r4, #4]
 800eed8:	6123      	str	r3, [r4, #16]
 800eeda:	2300      	movs	r3, #0
 800eedc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eee0:	e7a8      	b.n	800ee34 <_printf_i+0x150>
 800eee2:	6923      	ldr	r3, [r4, #16]
 800eee4:	4632      	mov	r2, r6
 800eee6:	4649      	mov	r1, r9
 800eee8:	4640      	mov	r0, r8
 800eeea:	47d0      	blx	sl
 800eeec:	3001      	adds	r0, #1
 800eeee:	d0ab      	beq.n	800ee48 <_printf_i+0x164>
 800eef0:	6823      	ldr	r3, [r4, #0]
 800eef2:	079b      	lsls	r3, r3, #30
 800eef4:	d413      	bmi.n	800ef1e <_printf_i+0x23a>
 800eef6:	68e0      	ldr	r0, [r4, #12]
 800eef8:	9b03      	ldr	r3, [sp, #12]
 800eefa:	4298      	cmp	r0, r3
 800eefc:	bfb8      	it	lt
 800eefe:	4618      	movlt	r0, r3
 800ef00:	e7a4      	b.n	800ee4c <_printf_i+0x168>
 800ef02:	2301      	movs	r3, #1
 800ef04:	4632      	mov	r2, r6
 800ef06:	4649      	mov	r1, r9
 800ef08:	4640      	mov	r0, r8
 800ef0a:	47d0      	blx	sl
 800ef0c:	3001      	adds	r0, #1
 800ef0e:	d09b      	beq.n	800ee48 <_printf_i+0x164>
 800ef10:	3501      	adds	r5, #1
 800ef12:	68e3      	ldr	r3, [r4, #12]
 800ef14:	9903      	ldr	r1, [sp, #12]
 800ef16:	1a5b      	subs	r3, r3, r1
 800ef18:	42ab      	cmp	r3, r5
 800ef1a:	dcf2      	bgt.n	800ef02 <_printf_i+0x21e>
 800ef1c:	e7eb      	b.n	800eef6 <_printf_i+0x212>
 800ef1e:	2500      	movs	r5, #0
 800ef20:	f104 0619 	add.w	r6, r4, #25
 800ef24:	e7f5      	b.n	800ef12 <_printf_i+0x22e>
 800ef26:	bf00      	nop
 800ef28:	080121bd 	.word	0x080121bd
 800ef2c:	080121ce 	.word	0x080121ce

0800ef30 <_sbrk_r>:
 800ef30:	b538      	push	{r3, r4, r5, lr}
 800ef32:	4d06      	ldr	r5, [pc, #24]	; (800ef4c <_sbrk_r+0x1c>)
 800ef34:	2300      	movs	r3, #0
 800ef36:	4604      	mov	r4, r0
 800ef38:	4608      	mov	r0, r1
 800ef3a:	602b      	str	r3, [r5, #0]
 800ef3c:	f7f1 fe7a 	bl	8000c34 <_sbrk>
 800ef40:	1c43      	adds	r3, r0, #1
 800ef42:	d102      	bne.n	800ef4a <_sbrk_r+0x1a>
 800ef44:	682b      	ldr	r3, [r5, #0]
 800ef46:	b103      	cbz	r3, 800ef4a <_sbrk_r+0x1a>
 800ef48:	6023      	str	r3, [r4, #0]
 800ef4a:	bd38      	pop	{r3, r4, r5, pc}
 800ef4c:	20008b6c 	.word	0x20008b6c

0800ef50 <__sread>:
 800ef50:	b510      	push	{r4, lr}
 800ef52:	460c      	mov	r4, r1
 800ef54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef58:	f000 fa92 	bl	800f480 <_read_r>
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	bfab      	itete	ge
 800ef60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef62:	89a3      	ldrhlt	r3, [r4, #12]
 800ef64:	181b      	addge	r3, r3, r0
 800ef66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ef6a:	bfac      	ite	ge
 800ef6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ef6e:	81a3      	strhlt	r3, [r4, #12]
 800ef70:	bd10      	pop	{r4, pc}

0800ef72 <__swrite>:
 800ef72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef76:	461f      	mov	r7, r3
 800ef78:	898b      	ldrh	r3, [r1, #12]
 800ef7a:	05db      	lsls	r3, r3, #23
 800ef7c:	4605      	mov	r5, r0
 800ef7e:	460c      	mov	r4, r1
 800ef80:	4616      	mov	r6, r2
 800ef82:	d505      	bpl.n	800ef90 <__swrite+0x1e>
 800ef84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef88:	2302      	movs	r3, #2
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f000 f9d0 	bl	800f330 <_lseek_r>
 800ef90:	89a3      	ldrh	r3, [r4, #12]
 800ef92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef9a:	81a3      	strh	r3, [r4, #12]
 800ef9c:	4632      	mov	r2, r6
 800ef9e:	463b      	mov	r3, r7
 800efa0:	4628      	mov	r0, r5
 800efa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efa6:	f000 b869 	b.w	800f07c <_write_r>

0800efaa <__sseek>:
 800efaa:	b510      	push	{r4, lr}
 800efac:	460c      	mov	r4, r1
 800efae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efb2:	f000 f9bd 	bl	800f330 <_lseek_r>
 800efb6:	1c43      	adds	r3, r0, #1
 800efb8:	89a3      	ldrh	r3, [r4, #12]
 800efba:	bf15      	itete	ne
 800efbc:	6560      	strne	r0, [r4, #84]	; 0x54
 800efbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800efc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800efc6:	81a3      	strheq	r3, [r4, #12]
 800efc8:	bf18      	it	ne
 800efca:	81a3      	strhne	r3, [r4, #12]
 800efcc:	bd10      	pop	{r4, pc}

0800efce <__sclose>:
 800efce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efd2:	f000 b8db 	b.w	800f18c <_close_r>
	...

0800efd8 <__swbuf_r>:
 800efd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efda:	460e      	mov	r6, r1
 800efdc:	4614      	mov	r4, r2
 800efde:	4605      	mov	r5, r0
 800efe0:	b118      	cbz	r0, 800efea <__swbuf_r+0x12>
 800efe2:	6983      	ldr	r3, [r0, #24]
 800efe4:	b90b      	cbnz	r3, 800efea <__swbuf_r+0x12>
 800efe6:	f7ff f9f5 	bl	800e3d4 <__sinit>
 800efea:	4b21      	ldr	r3, [pc, #132]	; (800f070 <__swbuf_r+0x98>)
 800efec:	429c      	cmp	r4, r3
 800efee:	d12b      	bne.n	800f048 <__swbuf_r+0x70>
 800eff0:	686c      	ldr	r4, [r5, #4]
 800eff2:	69a3      	ldr	r3, [r4, #24]
 800eff4:	60a3      	str	r3, [r4, #8]
 800eff6:	89a3      	ldrh	r3, [r4, #12]
 800eff8:	071a      	lsls	r2, r3, #28
 800effa:	d52f      	bpl.n	800f05c <__swbuf_r+0x84>
 800effc:	6923      	ldr	r3, [r4, #16]
 800effe:	b36b      	cbz	r3, 800f05c <__swbuf_r+0x84>
 800f000:	6923      	ldr	r3, [r4, #16]
 800f002:	6820      	ldr	r0, [r4, #0]
 800f004:	1ac0      	subs	r0, r0, r3
 800f006:	6963      	ldr	r3, [r4, #20]
 800f008:	b2f6      	uxtb	r6, r6
 800f00a:	4283      	cmp	r3, r0
 800f00c:	4637      	mov	r7, r6
 800f00e:	dc04      	bgt.n	800f01a <__swbuf_r+0x42>
 800f010:	4621      	mov	r1, r4
 800f012:	4628      	mov	r0, r5
 800f014:	f000 f950 	bl	800f2b8 <_fflush_r>
 800f018:	bb30      	cbnz	r0, 800f068 <__swbuf_r+0x90>
 800f01a:	68a3      	ldr	r3, [r4, #8]
 800f01c:	3b01      	subs	r3, #1
 800f01e:	60a3      	str	r3, [r4, #8]
 800f020:	6823      	ldr	r3, [r4, #0]
 800f022:	1c5a      	adds	r2, r3, #1
 800f024:	6022      	str	r2, [r4, #0]
 800f026:	701e      	strb	r6, [r3, #0]
 800f028:	6963      	ldr	r3, [r4, #20]
 800f02a:	3001      	adds	r0, #1
 800f02c:	4283      	cmp	r3, r0
 800f02e:	d004      	beq.n	800f03a <__swbuf_r+0x62>
 800f030:	89a3      	ldrh	r3, [r4, #12]
 800f032:	07db      	lsls	r3, r3, #31
 800f034:	d506      	bpl.n	800f044 <__swbuf_r+0x6c>
 800f036:	2e0a      	cmp	r6, #10
 800f038:	d104      	bne.n	800f044 <__swbuf_r+0x6c>
 800f03a:	4621      	mov	r1, r4
 800f03c:	4628      	mov	r0, r5
 800f03e:	f000 f93b 	bl	800f2b8 <_fflush_r>
 800f042:	b988      	cbnz	r0, 800f068 <__swbuf_r+0x90>
 800f044:	4638      	mov	r0, r7
 800f046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f048:	4b0a      	ldr	r3, [pc, #40]	; (800f074 <__swbuf_r+0x9c>)
 800f04a:	429c      	cmp	r4, r3
 800f04c:	d101      	bne.n	800f052 <__swbuf_r+0x7a>
 800f04e:	68ac      	ldr	r4, [r5, #8]
 800f050:	e7cf      	b.n	800eff2 <__swbuf_r+0x1a>
 800f052:	4b09      	ldr	r3, [pc, #36]	; (800f078 <__swbuf_r+0xa0>)
 800f054:	429c      	cmp	r4, r3
 800f056:	bf08      	it	eq
 800f058:	68ec      	ldreq	r4, [r5, #12]
 800f05a:	e7ca      	b.n	800eff2 <__swbuf_r+0x1a>
 800f05c:	4621      	mov	r1, r4
 800f05e:	4628      	mov	r0, r5
 800f060:	f000 f81e 	bl	800f0a0 <__swsetup_r>
 800f064:	2800      	cmp	r0, #0
 800f066:	d0cb      	beq.n	800f000 <__swbuf_r+0x28>
 800f068:	f04f 37ff 	mov.w	r7, #4294967295
 800f06c:	e7ea      	b.n	800f044 <__swbuf_r+0x6c>
 800f06e:	bf00      	nop
 800f070:	0801216c 	.word	0x0801216c
 800f074:	0801218c 	.word	0x0801218c
 800f078:	0801214c 	.word	0x0801214c

0800f07c <_write_r>:
 800f07c:	b538      	push	{r3, r4, r5, lr}
 800f07e:	4d07      	ldr	r5, [pc, #28]	; (800f09c <_write_r+0x20>)
 800f080:	4604      	mov	r4, r0
 800f082:	4608      	mov	r0, r1
 800f084:	4611      	mov	r1, r2
 800f086:	2200      	movs	r2, #0
 800f088:	602a      	str	r2, [r5, #0]
 800f08a:	461a      	mov	r2, r3
 800f08c:	f7f1 fd81 	bl	8000b92 <_write>
 800f090:	1c43      	adds	r3, r0, #1
 800f092:	d102      	bne.n	800f09a <_write_r+0x1e>
 800f094:	682b      	ldr	r3, [r5, #0]
 800f096:	b103      	cbz	r3, 800f09a <_write_r+0x1e>
 800f098:	6023      	str	r3, [r4, #0]
 800f09a:	bd38      	pop	{r3, r4, r5, pc}
 800f09c:	20008b6c 	.word	0x20008b6c

0800f0a0 <__swsetup_r>:
 800f0a0:	4b32      	ldr	r3, [pc, #200]	; (800f16c <__swsetup_r+0xcc>)
 800f0a2:	b570      	push	{r4, r5, r6, lr}
 800f0a4:	681d      	ldr	r5, [r3, #0]
 800f0a6:	4606      	mov	r6, r0
 800f0a8:	460c      	mov	r4, r1
 800f0aa:	b125      	cbz	r5, 800f0b6 <__swsetup_r+0x16>
 800f0ac:	69ab      	ldr	r3, [r5, #24]
 800f0ae:	b913      	cbnz	r3, 800f0b6 <__swsetup_r+0x16>
 800f0b0:	4628      	mov	r0, r5
 800f0b2:	f7ff f98f 	bl	800e3d4 <__sinit>
 800f0b6:	4b2e      	ldr	r3, [pc, #184]	; (800f170 <__swsetup_r+0xd0>)
 800f0b8:	429c      	cmp	r4, r3
 800f0ba:	d10f      	bne.n	800f0dc <__swsetup_r+0x3c>
 800f0bc:	686c      	ldr	r4, [r5, #4]
 800f0be:	89a3      	ldrh	r3, [r4, #12]
 800f0c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0c4:	0719      	lsls	r1, r3, #28
 800f0c6:	d42c      	bmi.n	800f122 <__swsetup_r+0x82>
 800f0c8:	06dd      	lsls	r5, r3, #27
 800f0ca:	d411      	bmi.n	800f0f0 <__swsetup_r+0x50>
 800f0cc:	2309      	movs	r3, #9
 800f0ce:	6033      	str	r3, [r6, #0]
 800f0d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f0d4:	81a3      	strh	r3, [r4, #12]
 800f0d6:	f04f 30ff 	mov.w	r0, #4294967295
 800f0da:	e03e      	b.n	800f15a <__swsetup_r+0xba>
 800f0dc:	4b25      	ldr	r3, [pc, #148]	; (800f174 <__swsetup_r+0xd4>)
 800f0de:	429c      	cmp	r4, r3
 800f0e0:	d101      	bne.n	800f0e6 <__swsetup_r+0x46>
 800f0e2:	68ac      	ldr	r4, [r5, #8]
 800f0e4:	e7eb      	b.n	800f0be <__swsetup_r+0x1e>
 800f0e6:	4b24      	ldr	r3, [pc, #144]	; (800f178 <__swsetup_r+0xd8>)
 800f0e8:	429c      	cmp	r4, r3
 800f0ea:	bf08      	it	eq
 800f0ec:	68ec      	ldreq	r4, [r5, #12]
 800f0ee:	e7e6      	b.n	800f0be <__swsetup_r+0x1e>
 800f0f0:	0758      	lsls	r0, r3, #29
 800f0f2:	d512      	bpl.n	800f11a <__swsetup_r+0x7a>
 800f0f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0f6:	b141      	cbz	r1, 800f10a <__swsetup_r+0x6a>
 800f0f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0fc:	4299      	cmp	r1, r3
 800f0fe:	d002      	beq.n	800f106 <__swsetup_r+0x66>
 800f100:	4630      	mov	r0, r6
 800f102:	f7ff fa21 	bl	800e548 <_free_r>
 800f106:	2300      	movs	r3, #0
 800f108:	6363      	str	r3, [r4, #52]	; 0x34
 800f10a:	89a3      	ldrh	r3, [r4, #12]
 800f10c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f110:	81a3      	strh	r3, [r4, #12]
 800f112:	2300      	movs	r3, #0
 800f114:	6063      	str	r3, [r4, #4]
 800f116:	6923      	ldr	r3, [r4, #16]
 800f118:	6023      	str	r3, [r4, #0]
 800f11a:	89a3      	ldrh	r3, [r4, #12]
 800f11c:	f043 0308 	orr.w	r3, r3, #8
 800f120:	81a3      	strh	r3, [r4, #12]
 800f122:	6923      	ldr	r3, [r4, #16]
 800f124:	b94b      	cbnz	r3, 800f13a <__swsetup_r+0x9a>
 800f126:	89a3      	ldrh	r3, [r4, #12]
 800f128:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f12c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f130:	d003      	beq.n	800f13a <__swsetup_r+0x9a>
 800f132:	4621      	mov	r1, r4
 800f134:	4630      	mov	r0, r6
 800f136:	f000 f931 	bl	800f39c <__smakebuf_r>
 800f13a:	89a0      	ldrh	r0, [r4, #12]
 800f13c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f140:	f010 0301 	ands.w	r3, r0, #1
 800f144:	d00a      	beq.n	800f15c <__swsetup_r+0xbc>
 800f146:	2300      	movs	r3, #0
 800f148:	60a3      	str	r3, [r4, #8]
 800f14a:	6963      	ldr	r3, [r4, #20]
 800f14c:	425b      	negs	r3, r3
 800f14e:	61a3      	str	r3, [r4, #24]
 800f150:	6923      	ldr	r3, [r4, #16]
 800f152:	b943      	cbnz	r3, 800f166 <__swsetup_r+0xc6>
 800f154:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f158:	d1ba      	bne.n	800f0d0 <__swsetup_r+0x30>
 800f15a:	bd70      	pop	{r4, r5, r6, pc}
 800f15c:	0781      	lsls	r1, r0, #30
 800f15e:	bf58      	it	pl
 800f160:	6963      	ldrpl	r3, [r4, #20]
 800f162:	60a3      	str	r3, [r4, #8]
 800f164:	e7f4      	b.n	800f150 <__swsetup_r+0xb0>
 800f166:	2000      	movs	r0, #0
 800f168:	e7f7      	b.n	800f15a <__swsetup_r+0xba>
 800f16a:	bf00      	nop
 800f16c:	20000014 	.word	0x20000014
 800f170:	0801216c 	.word	0x0801216c
 800f174:	0801218c 	.word	0x0801218c
 800f178:	0801214c 	.word	0x0801214c

0800f17c <abort>:
 800f17c:	b508      	push	{r3, lr}
 800f17e:	2006      	movs	r0, #6
 800f180:	f000 f9b8 	bl	800f4f4 <raise>
 800f184:	2001      	movs	r0, #1
 800f186:	f7f1 fcdd 	bl	8000b44 <_exit>
	...

0800f18c <_close_r>:
 800f18c:	b538      	push	{r3, r4, r5, lr}
 800f18e:	4d06      	ldr	r5, [pc, #24]	; (800f1a8 <_close_r+0x1c>)
 800f190:	2300      	movs	r3, #0
 800f192:	4604      	mov	r4, r0
 800f194:	4608      	mov	r0, r1
 800f196:	602b      	str	r3, [r5, #0]
 800f198:	f7f1 fd17 	bl	8000bca <_close>
 800f19c:	1c43      	adds	r3, r0, #1
 800f19e:	d102      	bne.n	800f1a6 <_close_r+0x1a>
 800f1a0:	682b      	ldr	r3, [r5, #0]
 800f1a2:	b103      	cbz	r3, 800f1a6 <_close_r+0x1a>
 800f1a4:	6023      	str	r3, [r4, #0]
 800f1a6:	bd38      	pop	{r3, r4, r5, pc}
 800f1a8:	20008b6c 	.word	0x20008b6c

0800f1ac <__sflush_r>:
 800f1ac:	898a      	ldrh	r2, [r1, #12]
 800f1ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1b2:	4605      	mov	r5, r0
 800f1b4:	0710      	lsls	r0, r2, #28
 800f1b6:	460c      	mov	r4, r1
 800f1b8:	d458      	bmi.n	800f26c <__sflush_r+0xc0>
 800f1ba:	684b      	ldr	r3, [r1, #4]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	dc05      	bgt.n	800f1cc <__sflush_r+0x20>
 800f1c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	dc02      	bgt.n	800f1cc <__sflush_r+0x20>
 800f1c6:	2000      	movs	r0, #0
 800f1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1ce:	2e00      	cmp	r6, #0
 800f1d0:	d0f9      	beq.n	800f1c6 <__sflush_r+0x1a>
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f1d8:	682f      	ldr	r7, [r5, #0]
 800f1da:	602b      	str	r3, [r5, #0]
 800f1dc:	d032      	beq.n	800f244 <__sflush_r+0x98>
 800f1de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f1e0:	89a3      	ldrh	r3, [r4, #12]
 800f1e2:	075a      	lsls	r2, r3, #29
 800f1e4:	d505      	bpl.n	800f1f2 <__sflush_r+0x46>
 800f1e6:	6863      	ldr	r3, [r4, #4]
 800f1e8:	1ac0      	subs	r0, r0, r3
 800f1ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1ec:	b10b      	cbz	r3, 800f1f2 <__sflush_r+0x46>
 800f1ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1f0:	1ac0      	subs	r0, r0, r3
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1f8:	6a21      	ldr	r1, [r4, #32]
 800f1fa:	4628      	mov	r0, r5
 800f1fc:	47b0      	blx	r6
 800f1fe:	1c43      	adds	r3, r0, #1
 800f200:	89a3      	ldrh	r3, [r4, #12]
 800f202:	d106      	bne.n	800f212 <__sflush_r+0x66>
 800f204:	6829      	ldr	r1, [r5, #0]
 800f206:	291d      	cmp	r1, #29
 800f208:	d82c      	bhi.n	800f264 <__sflush_r+0xb8>
 800f20a:	4a2a      	ldr	r2, [pc, #168]	; (800f2b4 <__sflush_r+0x108>)
 800f20c:	40ca      	lsrs	r2, r1
 800f20e:	07d6      	lsls	r6, r2, #31
 800f210:	d528      	bpl.n	800f264 <__sflush_r+0xb8>
 800f212:	2200      	movs	r2, #0
 800f214:	6062      	str	r2, [r4, #4]
 800f216:	04d9      	lsls	r1, r3, #19
 800f218:	6922      	ldr	r2, [r4, #16]
 800f21a:	6022      	str	r2, [r4, #0]
 800f21c:	d504      	bpl.n	800f228 <__sflush_r+0x7c>
 800f21e:	1c42      	adds	r2, r0, #1
 800f220:	d101      	bne.n	800f226 <__sflush_r+0x7a>
 800f222:	682b      	ldr	r3, [r5, #0]
 800f224:	b903      	cbnz	r3, 800f228 <__sflush_r+0x7c>
 800f226:	6560      	str	r0, [r4, #84]	; 0x54
 800f228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f22a:	602f      	str	r7, [r5, #0]
 800f22c:	2900      	cmp	r1, #0
 800f22e:	d0ca      	beq.n	800f1c6 <__sflush_r+0x1a>
 800f230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f234:	4299      	cmp	r1, r3
 800f236:	d002      	beq.n	800f23e <__sflush_r+0x92>
 800f238:	4628      	mov	r0, r5
 800f23a:	f7ff f985 	bl	800e548 <_free_r>
 800f23e:	2000      	movs	r0, #0
 800f240:	6360      	str	r0, [r4, #52]	; 0x34
 800f242:	e7c1      	b.n	800f1c8 <__sflush_r+0x1c>
 800f244:	6a21      	ldr	r1, [r4, #32]
 800f246:	2301      	movs	r3, #1
 800f248:	4628      	mov	r0, r5
 800f24a:	47b0      	blx	r6
 800f24c:	1c41      	adds	r1, r0, #1
 800f24e:	d1c7      	bne.n	800f1e0 <__sflush_r+0x34>
 800f250:	682b      	ldr	r3, [r5, #0]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d0c4      	beq.n	800f1e0 <__sflush_r+0x34>
 800f256:	2b1d      	cmp	r3, #29
 800f258:	d001      	beq.n	800f25e <__sflush_r+0xb2>
 800f25a:	2b16      	cmp	r3, #22
 800f25c:	d101      	bne.n	800f262 <__sflush_r+0xb6>
 800f25e:	602f      	str	r7, [r5, #0]
 800f260:	e7b1      	b.n	800f1c6 <__sflush_r+0x1a>
 800f262:	89a3      	ldrh	r3, [r4, #12]
 800f264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f268:	81a3      	strh	r3, [r4, #12]
 800f26a:	e7ad      	b.n	800f1c8 <__sflush_r+0x1c>
 800f26c:	690f      	ldr	r7, [r1, #16]
 800f26e:	2f00      	cmp	r7, #0
 800f270:	d0a9      	beq.n	800f1c6 <__sflush_r+0x1a>
 800f272:	0793      	lsls	r3, r2, #30
 800f274:	680e      	ldr	r6, [r1, #0]
 800f276:	bf08      	it	eq
 800f278:	694b      	ldreq	r3, [r1, #20]
 800f27a:	600f      	str	r7, [r1, #0]
 800f27c:	bf18      	it	ne
 800f27e:	2300      	movne	r3, #0
 800f280:	eba6 0807 	sub.w	r8, r6, r7
 800f284:	608b      	str	r3, [r1, #8]
 800f286:	f1b8 0f00 	cmp.w	r8, #0
 800f28a:	dd9c      	ble.n	800f1c6 <__sflush_r+0x1a>
 800f28c:	6a21      	ldr	r1, [r4, #32]
 800f28e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f290:	4643      	mov	r3, r8
 800f292:	463a      	mov	r2, r7
 800f294:	4628      	mov	r0, r5
 800f296:	47b0      	blx	r6
 800f298:	2800      	cmp	r0, #0
 800f29a:	dc06      	bgt.n	800f2aa <__sflush_r+0xfe>
 800f29c:	89a3      	ldrh	r3, [r4, #12]
 800f29e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2a2:	81a3      	strh	r3, [r4, #12]
 800f2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2a8:	e78e      	b.n	800f1c8 <__sflush_r+0x1c>
 800f2aa:	4407      	add	r7, r0
 800f2ac:	eba8 0800 	sub.w	r8, r8, r0
 800f2b0:	e7e9      	b.n	800f286 <__sflush_r+0xda>
 800f2b2:	bf00      	nop
 800f2b4:	20400001 	.word	0x20400001

0800f2b8 <_fflush_r>:
 800f2b8:	b538      	push	{r3, r4, r5, lr}
 800f2ba:	690b      	ldr	r3, [r1, #16]
 800f2bc:	4605      	mov	r5, r0
 800f2be:	460c      	mov	r4, r1
 800f2c0:	b913      	cbnz	r3, 800f2c8 <_fflush_r+0x10>
 800f2c2:	2500      	movs	r5, #0
 800f2c4:	4628      	mov	r0, r5
 800f2c6:	bd38      	pop	{r3, r4, r5, pc}
 800f2c8:	b118      	cbz	r0, 800f2d2 <_fflush_r+0x1a>
 800f2ca:	6983      	ldr	r3, [r0, #24]
 800f2cc:	b90b      	cbnz	r3, 800f2d2 <_fflush_r+0x1a>
 800f2ce:	f7ff f881 	bl	800e3d4 <__sinit>
 800f2d2:	4b14      	ldr	r3, [pc, #80]	; (800f324 <_fflush_r+0x6c>)
 800f2d4:	429c      	cmp	r4, r3
 800f2d6:	d11b      	bne.n	800f310 <_fflush_r+0x58>
 800f2d8:	686c      	ldr	r4, [r5, #4]
 800f2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d0ef      	beq.n	800f2c2 <_fflush_r+0xa>
 800f2e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f2e4:	07d0      	lsls	r0, r2, #31
 800f2e6:	d404      	bmi.n	800f2f2 <_fflush_r+0x3a>
 800f2e8:	0599      	lsls	r1, r3, #22
 800f2ea:	d402      	bmi.n	800f2f2 <_fflush_r+0x3a>
 800f2ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2ee:	f7ff f921 	bl	800e534 <__retarget_lock_acquire_recursive>
 800f2f2:	4628      	mov	r0, r5
 800f2f4:	4621      	mov	r1, r4
 800f2f6:	f7ff ff59 	bl	800f1ac <__sflush_r>
 800f2fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f2fc:	07da      	lsls	r2, r3, #31
 800f2fe:	4605      	mov	r5, r0
 800f300:	d4e0      	bmi.n	800f2c4 <_fflush_r+0xc>
 800f302:	89a3      	ldrh	r3, [r4, #12]
 800f304:	059b      	lsls	r3, r3, #22
 800f306:	d4dd      	bmi.n	800f2c4 <_fflush_r+0xc>
 800f308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f30a:	f7ff f914 	bl	800e536 <__retarget_lock_release_recursive>
 800f30e:	e7d9      	b.n	800f2c4 <_fflush_r+0xc>
 800f310:	4b05      	ldr	r3, [pc, #20]	; (800f328 <_fflush_r+0x70>)
 800f312:	429c      	cmp	r4, r3
 800f314:	d101      	bne.n	800f31a <_fflush_r+0x62>
 800f316:	68ac      	ldr	r4, [r5, #8]
 800f318:	e7df      	b.n	800f2da <_fflush_r+0x22>
 800f31a:	4b04      	ldr	r3, [pc, #16]	; (800f32c <_fflush_r+0x74>)
 800f31c:	429c      	cmp	r4, r3
 800f31e:	bf08      	it	eq
 800f320:	68ec      	ldreq	r4, [r5, #12]
 800f322:	e7da      	b.n	800f2da <_fflush_r+0x22>
 800f324:	0801216c 	.word	0x0801216c
 800f328:	0801218c 	.word	0x0801218c
 800f32c:	0801214c 	.word	0x0801214c

0800f330 <_lseek_r>:
 800f330:	b538      	push	{r3, r4, r5, lr}
 800f332:	4d07      	ldr	r5, [pc, #28]	; (800f350 <_lseek_r+0x20>)
 800f334:	4604      	mov	r4, r0
 800f336:	4608      	mov	r0, r1
 800f338:	4611      	mov	r1, r2
 800f33a:	2200      	movs	r2, #0
 800f33c:	602a      	str	r2, [r5, #0]
 800f33e:	461a      	mov	r2, r3
 800f340:	f7f1 fc6a 	bl	8000c18 <_lseek>
 800f344:	1c43      	adds	r3, r0, #1
 800f346:	d102      	bne.n	800f34e <_lseek_r+0x1e>
 800f348:	682b      	ldr	r3, [r5, #0]
 800f34a:	b103      	cbz	r3, 800f34e <_lseek_r+0x1e>
 800f34c:	6023      	str	r3, [r4, #0]
 800f34e:	bd38      	pop	{r3, r4, r5, pc}
 800f350:	20008b6c 	.word	0x20008b6c

0800f354 <__swhatbuf_r>:
 800f354:	b570      	push	{r4, r5, r6, lr}
 800f356:	460e      	mov	r6, r1
 800f358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f35c:	2900      	cmp	r1, #0
 800f35e:	b096      	sub	sp, #88	; 0x58
 800f360:	4614      	mov	r4, r2
 800f362:	461d      	mov	r5, r3
 800f364:	da07      	bge.n	800f376 <__swhatbuf_r+0x22>
 800f366:	2300      	movs	r3, #0
 800f368:	602b      	str	r3, [r5, #0]
 800f36a:	89b3      	ldrh	r3, [r6, #12]
 800f36c:	061a      	lsls	r2, r3, #24
 800f36e:	d410      	bmi.n	800f392 <__swhatbuf_r+0x3e>
 800f370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f374:	e00e      	b.n	800f394 <__swhatbuf_r+0x40>
 800f376:	466a      	mov	r2, sp
 800f378:	f000 f8d8 	bl	800f52c <_fstat_r>
 800f37c:	2800      	cmp	r0, #0
 800f37e:	dbf2      	blt.n	800f366 <__swhatbuf_r+0x12>
 800f380:	9a01      	ldr	r2, [sp, #4]
 800f382:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f386:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f38a:	425a      	negs	r2, r3
 800f38c:	415a      	adcs	r2, r3
 800f38e:	602a      	str	r2, [r5, #0]
 800f390:	e7ee      	b.n	800f370 <__swhatbuf_r+0x1c>
 800f392:	2340      	movs	r3, #64	; 0x40
 800f394:	2000      	movs	r0, #0
 800f396:	6023      	str	r3, [r4, #0]
 800f398:	b016      	add	sp, #88	; 0x58
 800f39a:	bd70      	pop	{r4, r5, r6, pc}

0800f39c <__smakebuf_r>:
 800f39c:	898b      	ldrh	r3, [r1, #12]
 800f39e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f3a0:	079d      	lsls	r5, r3, #30
 800f3a2:	4606      	mov	r6, r0
 800f3a4:	460c      	mov	r4, r1
 800f3a6:	d507      	bpl.n	800f3b8 <__smakebuf_r+0x1c>
 800f3a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f3ac:	6023      	str	r3, [r4, #0]
 800f3ae:	6123      	str	r3, [r4, #16]
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	6163      	str	r3, [r4, #20]
 800f3b4:	b002      	add	sp, #8
 800f3b6:	bd70      	pop	{r4, r5, r6, pc}
 800f3b8:	ab01      	add	r3, sp, #4
 800f3ba:	466a      	mov	r2, sp
 800f3bc:	f7ff ffca 	bl	800f354 <__swhatbuf_r>
 800f3c0:	9900      	ldr	r1, [sp, #0]
 800f3c2:	4605      	mov	r5, r0
 800f3c4:	4630      	mov	r0, r6
 800f3c6:	f7ff f90f 	bl	800e5e8 <_malloc_r>
 800f3ca:	b948      	cbnz	r0, 800f3e0 <__smakebuf_r+0x44>
 800f3cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3d0:	059a      	lsls	r2, r3, #22
 800f3d2:	d4ef      	bmi.n	800f3b4 <__smakebuf_r+0x18>
 800f3d4:	f023 0303 	bic.w	r3, r3, #3
 800f3d8:	f043 0302 	orr.w	r3, r3, #2
 800f3dc:	81a3      	strh	r3, [r4, #12]
 800f3de:	e7e3      	b.n	800f3a8 <__smakebuf_r+0xc>
 800f3e0:	4b0d      	ldr	r3, [pc, #52]	; (800f418 <__smakebuf_r+0x7c>)
 800f3e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800f3e4:	89a3      	ldrh	r3, [r4, #12]
 800f3e6:	6020      	str	r0, [r4, #0]
 800f3e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3ec:	81a3      	strh	r3, [r4, #12]
 800f3ee:	9b00      	ldr	r3, [sp, #0]
 800f3f0:	6163      	str	r3, [r4, #20]
 800f3f2:	9b01      	ldr	r3, [sp, #4]
 800f3f4:	6120      	str	r0, [r4, #16]
 800f3f6:	b15b      	cbz	r3, 800f410 <__smakebuf_r+0x74>
 800f3f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3fc:	4630      	mov	r0, r6
 800f3fe:	f000 f8a7 	bl	800f550 <_isatty_r>
 800f402:	b128      	cbz	r0, 800f410 <__smakebuf_r+0x74>
 800f404:	89a3      	ldrh	r3, [r4, #12]
 800f406:	f023 0303 	bic.w	r3, r3, #3
 800f40a:	f043 0301 	orr.w	r3, r3, #1
 800f40e:	81a3      	strh	r3, [r4, #12]
 800f410:	89a0      	ldrh	r0, [r4, #12]
 800f412:	4305      	orrs	r5, r0
 800f414:	81a5      	strh	r5, [r4, #12]
 800f416:	e7cd      	b.n	800f3b4 <__smakebuf_r+0x18>
 800f418:	0800e36d 	.word	0x0800e36d

0800f41c <__malloc_lock>:
 800f41c:	4801      	ldr	r0, [pc, #4]	; (800f424 <__malloc_lock+0x8>)
 800f41e:	f7ff b889 	b.w	800e534 <__retarget_lock_acquire_recursive>
 800f422:	bf00      	nop
 800f424:	20008b74 	.word	0x20008b74

0800f428 <__malloc_unlock>:
 800f428:	4801      	ldr	r0, [pc, #4]	; (800f430 <__malloc_unlock+0x8>)
 800f42a:	f7ff b884 	b.w	800e536 <__retarget_lock_release_recursive>
 800f42e:	bf00      	nop
 800f430:	20008b74 	.word	0x20008b74

0800f434 <_realloc_r>:
 800f434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f436:	4607      	mov	r7, r0
 800f438:	4614      	mov	r4, r2
 800f43a:	460e      	mov	r6, r1
 800f43c:	b921      	cbnz	r1, 800f448 <_realloc_r+0x14>
 800f43e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f442:	4611      	mov	r1, r2
 800f444:	f7ff b8d0 	b.w	800e5e8 <_malloc_r>
 800f448:	b922      	cbnz	r2, 800f454 <_realloc_r+0x20>
 800f44a:	f7ff f87d 	bl	800e548 <_free_r>
 800f44e:	4625      	mov	r5, r4
 800f450:	4628      	mov	r0, r5
 800f452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f454:	f000 f88c 	bl	800f570 <_malloc_usable_size_r>
 800f458:	42a0      	cmp	r0, r4
 800f45a:	d20f      	bcs.n	800f47c <_realloc_r+0x48>
 800f45c:	4621      	mov	r1, r4
 800f45e:	4638      	mov	r0, r7
 800f460:	f7ff f8c2 	bl	800e5e8 <_malloc_r>
 800f464:	4605      	mov	r5, r0
 800f466:	2800      	cmp	r0, #0
 800f468:	d0f2      	beq.n	800f450 <_realloc_r+0x1c>
 800f46a:	4631      	mov	r1, r6
 800f46c:	4622      	mov	r2, r4
 800f46e:	f7fe fe7f 	bl	800e170 <memcpy>
 800f472:	4631      	mov	r1, r6
 800f474:	4638      	mov	r0, r7
 800f476:	f7ff f867 	bl	800e548 <_free_r>
 800f47a:	e7e9      	b.n	800f450 <_realloc_r+0x1c>
 800f47c:	4635      	mov	r5, r6
 800f47e:	e7e7      	b.n	800f450 <_realloc_r+0x1c>

0800f480 <_read_r>:
 800f480:	b538      	push	{r3, r4, r5, lr}
 800f482:	4d07      	ldr	r5, [pc, #28]	; (800f4a0 <_read_r+0x20>)
 800f484:	4604      	mov	r4, r0
 800f486:	4608      	mov	r0, r1
 800f488:	4611      	mov	r1, r2
 800f48a:	2200      	movs	r2, #0
 800f48c:	602a      	str	r2, [r5, #0]
 800f48e:	461a      	mov	r2, r3
 800f490:	f7f1 fb62 	bl	8000b58 <_read>
 800f494:	1c43      	adds	r3, r0, #1
 800f496:	d102      	bne.n	800f49e <_read_r+0x1e>
 800f498:	682b      	ldr	r3, [r5, #0]
 800f49a:	b103      	cbz	r3, 800f49e <_read_r+0x1e>
 800f49c:	6023      	str	r3, [r4, #0]
 800f49e:	bd38      	pop	{r3, r4, r5, pc}
 800f4a0:	20008b6c 	.word	0x20008b6c

0800f4a4 <_raise_r>:
 800f4a4:	291f      	cmp	r1, #31
 800f4a6:	b538      	push	{r3, r4, r5, lr}
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	460d      	mov	r5, r1
 800f4ac:	d904      	bls.n	800f4b8 <_raise_r+0x14>
 800f4ae:	2316      	movs	r3, #22
 800f4b0:	6003      	str	r3, [r0, #0]
 800f4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800f4b6:	bd38      	pop	{r3, r4, r5, pc}
 800f4b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f4ba:	b112      	cbz	r2, 800f4c2 <_raise_r+0x1e>
 800f4bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4c0:	b94b      	cbnz	r3, 800f4d6 <_raise_r+0x32>
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f000 f830 	bl	800f528 <_getpid_r>
 800f4c8:	462a      	mov	r2, r5
 800f4ca:	4601      	mov	r1, r0
 800f4cc:	4620      	mov	r0, r4
 800f4ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4d2:	f000 b817 	b.w	800f504 <_kill_r>
 800f4d6:	2b01      	cmp	r3, #1
 800f4d8:	d00a      	beq.n	800f4f0 <_raise_r+0x4c>
 800f4da:	1c59      	adds	r1, r3, #1
 800f4dc:	d103      	bne.n	800f4e6 <_raise_r+0x42>
 800f4de:	2316      	movs	r3, #22
 800f4e0:	6003      	str	r3, [r0, #0]
 800f4e2:	2001      	movs	r0, #1
 800f4e4:	e7e7      	b.n	800f4b6 <_raise_r+0x12>
 800f4e6:	2400      	movs	r4, #0
 800f4e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f4ec:	4628      	mov	r0, r5
 800f4ee:	4798      	blx	r3
 800f4f0:	2000      	movs	r0, #0
 800f4f2:	e7e0      	b.n	800f4b6 <_raise_r+0x12>

0800f4f4 <raise>:
 800f4f4:	4b02      	ldr	r3, [pc, #8]	; (800f500 <raise+0xc>)
 800f4f6:	4601      	mov	r1, r0
 800f4f8:	6818      	ldr	r0, [r3, #0]
 800f4fa:	f7ff bfd3 	b.w	800f4a4 <_raise_r>
 800f4fe:	bf00      	nop
 800f500:	20000014 	.word	0x20000014

0800f504 <_kill_r>:
 800f504:	b538      	push	{r3, r4, r5, lr}
 800f506:	4d07      	ldr	r5, [pc, #28]	; (800f524 <_kill_r+0x20>)
 800f508:	2300      	movs	r3, #0
 800f50a:	4604      	mov	r4, r0
 800f50c:	4608      	mov	r0, r1
 800f50e:	4611      	mov	r1, r2
 800f510:	602b      	str	r3, [r5, #0]
 800f512:	f7f1 fb05 	bl	8000b20 <_kill>
 800f516:	1c43      	adds	r3, r0, #1
 800f518:	d102      	bne.n	800f520 <_kill_r+0x1c>
 800f51a:	682b      	ldr	r3, [r5, #0]
 800f51c:	b103      	cbz	r3, 800f520 <_kill_r+0x1c>
 800f51e:	6023      	str	r3, [r4, #0]
 800f520:	bd38      	pop	{r3, r4, r5, pc}
 800f522:	bf00      	nop
 800f524:	20008b6c 	.word	0x20008b6c

0800f528 <_getpid_r>:
 800f528:	f7f1 baf2 	b.w	8000b10 <_getpid>

0800f52c <_fstat_r>:
 800f52c:	b538      	push	{r3, r4, r5, lr}
 800f52e:	4d07      	ldr	r5, [pc, #28]	; (800f54c <_fstat_r+0x20>)
 800f530:	2300      	movs	r3, #0
 800f532:	4604      	mov	r4, r0
 800f534:	4608      	mov	r0, r1
 800f536:	4611      	mov	r1, r2
 800f538:	602b      	str	r3, [r5, #0]
 800f53a:	f7f1 fb52 	bl	8000be2 <_fstat>
 800f53e:	1c43      	adds	r3, r0, #1
 800f540:	d102      	bne.n	800f548 <_fstat_r+0x1c>
 800f542:	682b      	ldr	r3, [r5, #0]
 800f544:	b103      	cbz	r3, 800f548 <_fstat_r+0x1c>
 800f546:	6023      	str	r3, [r4, #0]
 800f548:	bd38      	pop	{r3, r4, r5, pc}
 800f54a:	bf00      	nop
 800f54c:	20008b6c 	.word	0x20008b6c

0800f550 <_isatty_r>:
 800f550:	b538      	push	{r3, r4, r5, lr}
 800f552:	4d06      	ldr	r5, [pc, #24]	; (800f56c <_isatty_r+0x1c>)
 800f554:	2300      	movs	r3, #0
 800f556:	4604      	mov	r4, r0
 800f558:	4608      	mov	r0, r1
 800f55a:	602b      	str	r3, [r5, #0]
 800f55c:	f7f1 fb51 	bl	8000c02 <_isatty>
 800f560:	1c43      	adds	r3, r0, #1
 800f562:	d102      	bne.n	800f56a <_isatty_r+0x1a>
 800f564:	682b      	ldr	r3, [r5, #0]
 800f566:	b103      	cbz	r3, 800f56a <_isatty_r+0x1a>
 800f568:	6023      	str	r3, [r4, #0]
 800f56a:	bd38      	pop	{r3, r4, r5, pc}
 800f56c:	20008b6c 	.word	0x20008b6c

0800f570 <_malloc_usable_size_r>:
 800f570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f574:	1f18      	subs	r0, r3, #4
 800f576:	2b00      	cmp	r3, #0
 800f578:	bfbc      	itt	lt
 800f57a:	580b      	ldrlt	r3, [r1, r0]
 800f57c:	18c0      	addlt	r0, r0, r3
 800f57e:	4770      	bx	lr

0800f580 <_init>:
 800f580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f582:	bf00      	nop
 800f584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f586:	bc08      	pop	{r3}
 800f588:	469e      	mov	lr, r3
 800f58a:	4770      	bx	lr

0800f58c <_fini>:
 800f58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f58e:	bf00      	nop
 800f590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f592:	bc08      	pop	{r3}
 800f594:	469e      	mov	lr, r3
 800f596:	4770      	bx	lr
